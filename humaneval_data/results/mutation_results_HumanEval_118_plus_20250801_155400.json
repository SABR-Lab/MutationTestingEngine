{
  "timestamp": "20250801_155400",
  "test_type": "mutation_testing",
  "metadata": {
    "task_id": "HumanEval/118",
    "timestamp": "20250801_155400",
    "tester_version": "1.0",
    "total_operators_tested": 11,
    "operators_with_errors": 0
  },
  "summary": {
    "original_passes": true,
    "total_mutations": 24,
    "killed_mutations": 22,
    "mutation_score": 0.9166666666666666,
    "survival_rate": 0.08333333333333337
  },
  "detailed_results": {
    "task_id": "HumanEval/118",
    "dataset_type": "plus",
    "original_passes": true,
    "total_mutations": 24,
    "killed_mutations": 22,
    "mutation_score": 0.9166666666666666,
    "mutation_results": {
      "NumberReplacer": {
        "total_mutations": 7,
        "killed_mutations": 7,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 3, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 3, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpivzu6v08.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpivzu6v08.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpivzu6v08.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:54.490449",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 1, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 1, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmppisllwfd.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmppisllwfd.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmppisllwfd.py\", line 36, in get_closest_vowel\n    if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n                                                                           ~~~~^^^^^^^\nIndexError: string index out of range\n",
            "timestamp": "2025-08-01T15:53:54.689920",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 1, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 1, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp8rqgbg0a.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp8rqgbg0a.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp8rqgbg0a.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:54.895393",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, -1, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, -1, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpvid9mbox.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpvid9mbox.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpvid9mbox.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:55.062662",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 4,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -2):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -2):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp7pp30uoc.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp7pp30uoc.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp7pp30uoc.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:55.258387",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -0):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -0):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpty5u44x6.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpty5u44x6.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmpty5u44x6.py\", line 35, in get_closest_vowel\n    for i in range(len(word) - 2, 0, -0):\n             ~~~~~^^^^^^^^^^^^^^^^^^^^^^\nValueError: range() arg 3 must not be zero\n",
            "timestamp": "2025-08-01T15:53:55.434918",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 6,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 2])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 2])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpjv4xxjt7.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpjv4xxjt7.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpjv4xxjt7.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:55.693347",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 7,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 0])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 0])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpff7l6nj1.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpff7l6nj1.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpff7l6nj1.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:55.979219",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 8,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 2])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 2])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpwc8xcac2.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpwc8xcac2.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmpwc8xcac2.py\", line 36, in get_closest_vowel\n    if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 2])):\n                                                                           ~~~~^^^^^^^\nIndexError: string index out of range\n",
            "timestamp": "2025-08-01T15:53:56.269886",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 9,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 0])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 0])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp9koqyxjt.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp9koqyxjt.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp9koqyxjt.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:56.642225",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 10,
        "mutations_tested": 10
      },
      "Add->Sub": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i - 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i - 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp83vnlue0.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp83vnlue0.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp83vnlue0.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:56.936457",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Sub->Add": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) + 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) + 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpp_qr_e1x.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpp_qr_e1x.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmpp_qr_e1x.py\", line 36, in get_closest_vowel\n    if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n                ~~~~^^^\nIndexError: string index out of range\n",
            "timestamp": "2025-08-01T15:53:57.214787",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i + 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i + 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp2hl9giey.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp2hl9giey.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp2hl9giey.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:57.467992",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "And->Or": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) or not is_vowel(word[i - 1]) or (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) or not is_vowel(word[i - 1]) or (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp5inh_svv.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp5inh_svv.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp5inh_svv.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:57.715067",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Remove Not": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and is_vowel(word[i - 1]) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and is_vowel(word[i - 1]) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpgtzz5zsn.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpgtzz5zsn.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpgtzz5zsn.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:57.924211",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and is_vowel(word[i + 1]):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and is_vowel(word[i + 1]):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpwi1qtnzt.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpwi1qtnzt.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpwi1qtnzt.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:58.136323",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Remove UnaryMinus": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, 1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, 1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp8_wpenpm.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp8_wpenpm.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp8_wpenpm.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:58.327335",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Remove ReturnValue": {
        "total_mutations": 3,
        "killed_mutations": 3,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpasc682y7.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpasc682y7.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpasc682y7.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:58.507155",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmppom5fqst.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmppom5fqst.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmppom5fqst.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:58.681113",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpm1fp_y9q.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpm1fp_y9q.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpm1fp_y9q.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:58.845154",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 3,
        "mutations_tested": 3
      },
      "Zero->One": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 1, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 1, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpg0dfbann.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpg0dfbann.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpg0dfbann.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:59.052753",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "One->Zero": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -0):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -0):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp4vb7hnwc.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp4vb7hnwc.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmp4vb7hnwc.py\", line 35, in get_closest_vowel\n    for i in range(len(word) - 2, 0, -0):\n             ~~~~~^^^^^^^^^^^^^^^^^^^^^^\nValueError: range() arg 3 must not be zero\n",
            "timestamp": "2025-08-01T15:53:59.254637",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 0])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 0])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp4oi1g_9n.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp4oi1g_9n.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp4oi1g_9n.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:59.554848",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 0])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 0])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmphkfkc534.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmphkfkc534.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmphkfkc534.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:59.841012",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 3,
        "mutations_tested": 3
      },
      "String->Empty": {
        "total_mutations": 2,
        "killed_mutations": 1,
        "survival_rate": 0.5,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"\"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"\"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:54:00.037618",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in ''\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in ''\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpfsd2brd5.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpfsd2brd5.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpfsd2brd5.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:54:00.236028",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "String->X": {
        "total_mutations": 3,
        "killed_mutations": 2,
        "survival_rate": 0.3333333333333333,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"X\"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"X\"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:54:00.465385",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'X'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'X'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return ''",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp_d7emhff.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp_d7emhff.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp_d7emhff.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:54:00.696165",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
            "mutated_code": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return 'X'",
            "mutated_complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    def is_vowel(ch: str) -> bool:\n        return ch in 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and (not is_vowel(word[i - 1])) and (not is_vowel(word[i + 1])):\n            return word[i]\n    return 'X'",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpffa96vbe.py\", line 76, in <module>\n    check(get_closest_vowel)\n    ~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpffa96vbe.py\", line 70, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpffa96vbe.py\", line 63, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:54:00.938337",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 3,
        "mutations_tested": 3
      }
    },
    "problem_info": {
      "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n",
      "canonical_solution": "\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n",
      "test_code": "\n\nimport numpy as np\n\ndef is_floats(x) -> bool:\n    # check if it is float; List[float]; Tuple[float]\n    if isinstance(x, float):\n        return True\n    if isinstance(x, (list, tuple)):\n        return all(isinstance(i, float) for i in x)\n    if isinstance(x, np.ndarray):\n        return x.dtype == np.float64 or x.dtype == np.float32\n    return False\n\n\ndef assertion(out, exp, atol):\n    exact_match = out == exp\n\n    if atol == 0 and is_floats(exp):\n        atol = 1e-6\n    if not exact_match and atol != 0:\n        assert np.allclose(out, exp, rtol=1e-07, atol=atol)\n    else:\n        assert exact_match\n\n\ndef check(candidate):\n    inputs = [['yogurt'], ['full'], ['easy'], ['eAsy'], ['ali'], ['bad'], ['most'], ['ab'], ['ba'], ['quick'], ['anime'], ['Asia'], ['Above'], ['hello'], ['cup'], ['kill'], ['bike'], ['album'], ['mute'], ['nylon'], ['jelly'], ['hi'], ['try'], ['himute'], ['jejellylly'], ['hill'], ['hilljejellylly'], [''], ['alb'], ['hilljhejellylly'], ['ttrty'], ['helo'], ['lalb'], ['aabuum'], ['ehehilo'], ['tttrjejellyllyt'], ['kilbike'], ['bkike'], ['ccup'], ['ehehi'], ['kiill'], ['trjejellyllyt'], ['himuhilljejellyllyte'], ['hhimute'], ['ehehilohi'], ['knylonill'], ['bik'], ['hhhimutehimute'], ['hhimutehilljhejellyllbiky'], ['hhhimutehimuute'], ['halbilljhejellylly'], ['knyloknill'], ['knyonnill'], ['al'], ['hhimue'], ['ty'], ['knylonbikill'], ['ehello'], ['knyloknnill'], ['ehehhhimutehimutehilohi'], ['hillhhhimutehimuute'], ['ttrtybike'], ['hhhimutehimuuehehilote'], ['kilil'], ['hii'], ['hiylljejellly'], ['hialllhi'], ['knylonbik'], ['ehhimutehilljhejellyllbiky'], ['kiliiil'], ['ljelly'], ['halbilljhejellyy'], ['thilljejellylly'], ['knyloll'], ['nyhialllhilon'], ['kiliil'], ['hillll'], ['muthiie'], ['heolo'], ['lnyhialllhilon'], ['hialllihhi'], ['knkilbikieylonbikehehi'], ['eheho'], ['hiill'], ['lal'], ['mte'], ['hhiue'], ['hialllhhimutehi'], ['hiilhalbilljhejellyllyl'], ['h'], ['hlialllihhehehoi'], ['khhimueilbhiilhalbilljhejellyllylike'], ['ehehjellyo'], ['lehhello'], ['ljellly'], ['jlemuthiielly'], ['kiihlialllihhehehoill'], ['lly'], ['jelely'], ['jejhhimute'], ['hikillll'], ['trthialllihhiy'], ['knyonnillhhimue'], ['ehehhhimutehimutehilkilbikeohi'], ['jlemutly'], ['knylonbikilll'], ['hlikilhialllhhimutehilll'], ['lalbkike'], ['hhimutehilljhejellyllbikytmute'], ['hhimutbkikee'], ['hillhhhimhimuute'], ['ehlo'], ['hhhimutehimuuehehilalbkikelote'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajx'], ['zzzqaiozzz'], ['abcdeffeedcba'], ['zbcdafghijklmnoprstuvwxeyzzouzzza'], ['tttxuxzzzrttt'], ['kooxnne'], ['bbkrtfdoiyyiuy'], ['UVWXYZuvwxya'], ['xyzabcDEFghi'], ['QWERTYqwerty'], ['zbcdafghijklmnoprszouzzza'], ['tttxuxzzzrtt'], ['qwerty'], ['zbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzza'], ['zbcdabbkrtfdoiyyiuyfghijklmnoprszouzzza'], ['tttxuxzzzrttQWERTYqwerty'], ['bbkrtiyyiuy'], ['bbkyrtfdoiyyiuy'], ['bbkrtiyyiuykooxnne'], ['kooxnzbcdabbkrtfdoiyyiuyfghijklmnoprszouzzzane'], ['zbcdafghijklmnoprszuouzzza'], ['zbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwerty'], ['qwertty'], ['qwertyxyzabcDEFghi'], ['xyzabcDEDFghi'], ['abdcdeffeedcba'], ['zzzqaiozzzbcdafghijklmnoprszuouzzzaz'], ['abcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeffeedcba'], ['zbcdafghijklmnoprstuvwvwxyaeyzzouzzzaqwerty'], ['zbcdafghijklmnoprstuvwwxyaeyzzouzzzaqwerty'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeffeedcbaondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajx'], ['zbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijklmnoprszouzzza'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeffeedcbaondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghi'], ['Mss'], ['abcdzzzqaiozzzxyzabcDEFghibcdafghijklmnoprszuouzzzazeffeedcba'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['sMss'], ['zbcdafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwerty'], ['sMbbkrtiyyiuyss'], ['zzzqaiozzzbcdafghijklmnoprszuouzzzzaz'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeffeedcbaondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghoqwerttyjxxwnovsmrqajxzabcDEFghi'], ['zzzzqaiozzxyzabcDEFghizbcdafghikooxnnejklmnoprszuouzzzazbcdafghijklmnoprszouzzza'], ['abcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazeffeedcba'], ['zbzbcdafghijklmnoprszouzzzacdmafghijklmnoprszuouzzza'], ['zbcdafghijkllmnoprszuouzzza'], ['zzzqaiozzzbcdafghijklmnxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeffeedcbaondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghioprszuouzzzaz'], ['tttxuxzzrttt'], ['Msss'], ['zbcdafghizbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijklmnoprszouzzzajklmnoprstuvwvwxyaeyzzouzzzaqwerty'], ['zbcdafghijklmnoprstuvQWERTYqwertywxeyzzouzzza'], ['zbcdafghizbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijklmnoprszouzzzajklmnoprstuvwvwxyaeyzzouzabcdeffeedcbazzaqwerty'], ['xyzabcDEDFghDi'], ['abdcdefabcdzzzqaiozzczbcdafghijklmnoprszuouzzzazeffeedcbafeedcba'], ['zbcdafghijklmnoprstuvwxUVWXYZuvzbcdafghijklmnoprstuvwxeyzzouzzzawxyaeyzzouzzza'], ['zbcdafghijkllmnoaprszluouzzza'], ['iqwertyxyzabcDEFghi'], ['zbcdabbkrtfdoiyyiuyfghijklmnoprszouzozza'], ['tttxuxzzzrttQWERTYqw'], ['zjklmnoprstuvEQWERTYqwertywxeyzzouzzza'], ['tttxuxzzzrttQWERTYTqw'], ['abccdeffeedcba'], ['s'], ['zbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabcDEFghibcdafghijklmnoprszuouzzzazeffeedcbaxyaeyzzouzzzgaqwerty'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzzzaqwerty'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaauztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzzzaqwerty'], ['abdcdeffeeba'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwerty'], ['zbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabcDEFghibcdafghijzzzqaiozzzbcdafghijklmnoprszuouzzzzazklmnoprszuouzzzazeffeedcbaxyaeyzzouzzzgaqwerty'], ['xyhzabcDEDFghDi'], ['zbcdafghijkzlmnoprszuouzzza'], ['tttExuxzzzrttQtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWERTYqw'], ['abcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafghijklmnoprstuvwwxyaeyzzouzzzaqwertyfeedcba'], ['xyzabczbcdafghijklmnoprstuvwxeyzzouzzzaDEDFghi'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwszmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['zbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwerty'], ['tttrtt'], ['tttxuxzrty'], ['zxyzabcDEDFghi'], ['abcdzzzqaiozzzbcdafghijklmnobprszuouzzzazeffeedcba'], ['tttxuxzzrtttt'], ['abdcdeffeeMssdcbatttxuxzrty'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovesmrqajx'], ['tttuxzrty'], ['zbcdafghijkzlmnoprszuonuzzza'], ['tttExuxzzzrttQtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxuxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWERTYqw'], ['tttxuxzrtysMss'], ['bbkyyrtfdoiyyiuyy'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwerty'], ['QWERTYqwerEty'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajx'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghi'], ['qwertyxyzabDcDEFghi'], ['zbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwerzbcdafghizbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijklmnoprszouzzzajklmnoprstuvwvwxyaeyzzouzzzaqwertyty'], ['tttxuxzztrtttt'], ['txyzabcDEDFghittuxzrty'], ['zzzszuouzzzaz'], ['zbcdafghijklmnoprstuvQWERTYqwertywxeyzzouzzzza'], ['zbcdafghijklmnoprstuvQWERTYqwertzzzszuouzzzazywxeyzzouzzzza'], ['xyzabcDhEiFghi'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqxaiozzzbcdafghijklmnoprszuouzzzazeulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghi'], ['zbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabcDEFghibcdafghijzzzqaiozzzbcdafghijklmnoprszuouzzzzazklmnoaprszuouzzzazeffeedcbaxyaeyzzouzzzbgaqwerty'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaauztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzzzaqwerty'], ['xyzabczbcdafghi'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpsqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwszmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['xyzabczbsMbbkrtiyyiuysscdafghijklmnoprstuvwxeyzzouzzzaDEDFghi'], ['kooxnnzbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijklmnoprszouzzzae'], ['abcdzrzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafghijklmnoprstuvwwxyaeyzzouzzzaqwertyfeedcba'], ['tttxuxzztrttttxyzabczbsMbbkrtiyyiuysscdafghijklmnoprstuvwxeyzzouzzzaDEDFghi'], ['zbcdafghijklmnoprstuvQWERTYqwlertywxeyzzouzzza'], ['abcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafgghijklmnoprstuvwwxyaeyzzouzzzaqwertyfeedcba'], ['xyzabczbcdafghijklmnoprtuvwxeyzzouzzzaDEDFghi'], ['abdcdeffeeMxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqxaiozzzbcdafghijklmnoprszuouzzzazeulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghissdcbatttxuxzrty'], ['tzbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabcDEFghibcdafghijklmnoprszuouzzzazeffeedcbaxyaeyzzouzzzgaqwertyttxuxzrty'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpsqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhazbcdafghijklmnoprszuouzzzapqjriulawnpeyxvlnufkwcyjxkiyhfwszmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwerty'], ['abdcdefabcdzzzqaiozzczzbcdafghijklmnoprszuouzzzazeffeedcbafeedcba'], ['zbcdafghizbcdabbkrtfdoiyyizbcdafghijklqwerty'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajx'], ['zbcdafghijklmnoprstuvQWERTYqwerWtywxeyzzouzzza'], ['qwertyxyzabDcrDEFghi'], ['zbcdafghijaklmnoprszouzzza'], ['zbzbcdafghijklmnoprszouzzzacdmafghijklmnoprszuouza'], ['zxyzabcDEDFghxyzabcDhEiFghi'], ['tttxuxzxrty'], ['MsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxs'], ['tttExuxzzzrttQzbcdabbkrtfdoiyyiuyfghijklmnoprszouzozzarqajxWERTYqw'], ['zbcdafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwerrty'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaoqwerty'], ['zbcdafghizbcdabibkrtfdoiyyizbcdafghijklqwerty'], ['abcdzrzzqaiozzzbcdafghijklmnoprszuouzfxyzabcDEFghizzazbbkrtiyyiuykooxnneefzbcdafghijklmnoprstuvwwxyaeyzzouzzzaba'], ['QWERTYqwzzzqaiozzzbcdafghijklmnxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeffeedcbaondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghioprszuouzzzazerEty'], ['zbcdafghijklmnoprstuvQWERTYqWwlertywxeyzzouzzza'], ['ttttxuxzzrttt'], ['tttxuxzzrtttabcdeffeezbcdabbkrtfdoiyyiuyfghijklmnoprszouzzza'], ['zbcdafghijkzlmnopsrszutttxuxzrtiyouzzza'], ['sMs'], ['zbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouzzza'], ['zbcydafabcdeffeedcbaerty'], ['xyzabczbzbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzasMbbkrtiyyiuysscdafghijklmnoprstuvwxeyzzouzzzaDEDFghi'], ['xyzabczbzbcdhafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzasMbbkrtiyyiuysscdafghijklmnoprstuvwxeyzzouzzzaDEDFghi'], ['kooxnzbcdabbkrtfdoiyyzbcdafghijklmnoprstuvQWERTYqwerWtywxeyzzouzzzaiuyfghijklmnoprszouzzzane'], ['xyzahbcDEFghi'], ['xyzabczbzbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzasMbbkrtiyyizzzqaiozzzuysscdafghijklminoprstuvwxeyzzouzzzaDEDFghi'], ['zbzbcdafghijkzbcdafghijklmnoprszuouzzzalmnoprszouzzzacdmafghijklmnoprszuouza'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwerty'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdazbcdafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxnhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['zbcdafghijklmnoprstuvrQWERTYqwerWtywxeyzzouzzza'], ['zbcydafabcdefftttExuxzzzrttQtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWERTYqweedcbaerty'], ['sMbbkrtiyyzbcdafghijklmnoprstuvwwabcdzrzzqaiozzzxyzabcDEFghibcdafghijklmnoprszuouzzzazeffeedcbaxyaeyzzouzzzgaqwertyiuyss'], ['zjklmnoprstuvEQWERTYqwertywxpeyzzouzzza'], ['MszxyzabcDEDFghis'], ['zbbkrtfdoiyyiuybcdafghijklmnoprszouzzza'], ['bbkbrtiyyiuy'], ['zfghijkzlmnoprszuonuzzza'], ['zbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabcDEFghibcdafghijzzzqaiozzzbcdafghijklmnoprszuouzzzzazklmnotttxuxzzzrttQWERTYqwertyprszuouzzzazeffeedcbaxyaeyzzouzzzgaqwerty'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdaxyzabcDEFghizuouzzzazeulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghi'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscuraovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajx'], ['tttExuxzzzrttQzbcdabbkyrtfdoiyyiuyfghijklmnoprszohuzozzarqajxWERTYqw'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrxyzabczbcdafghijklmnoprstuvwxeyzzouzzzaDEDFghirzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajx'], ['zfbzbcdafghijkzbcdafghijklmnoprszuouzzzalmnoprszouzzzacdmafghijklmnoprszuouza'], ['zjklmnoprstuvEQWERTYqwertywxezza'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttxyzabczbcdafghirrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdaxyzabcDEFghizuouzzzazeulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghi'], ['sMabcdzzQWERTYqwertyzqaiozzzbcdafghijklmzuouzfzzazeffeedcbas'], ['zbzbcdafghijklmnoprszouzzzacdmafghijklumnoprszuouza'], ['zbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzaty'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdazbcdafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxnhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlezhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['tttxuxzMsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxsrtysMss'], ['Qnohs'], ['tttxuxziqwertyxyzabcDEFghirtysMss'], ['abfcdeffeedcba'], ['abdcdeffeeMssdecbatttxuxzrty'], ['zbcdafghijkzlmnopsrszutttxuxzrtiyozbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzatyuzzza'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertyssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaoqwerty'], ['qwert'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvzbcdafghizbcdabibkrtfdoiyyizbcdafghijklqwertyydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwerty'], ['tttuxiozzbzbcdafghijkzbcdafghijklmnoprszuouzzzalmnoprszouzzzacdmafghijklmnoprszuouzamcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyxhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajx'], ['zabzbcdafghijklmnoprszouzzzacdmafghaijklmnoprszuouza'], ['tttExuxzouzozzarqajxWERTYqw'], ['tttxuxzrxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttxyzabczbcdafghirrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdaxyzabcDEFghizuouzzzazeulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghiy'], ['tttuxzrtty'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['zbcdafghizbcdabbkrtfdoiyyizbcdzbcdafghijkzlmnopsrszutttxuxzrtiyozbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzatyuzzzaqwerty'], ['tttxuxzztrttttxyzabczbsMbbkrtiyyiuysscdafghijklmnoouzzzaDEDFghi'], ['tttuxzrttuy'], ['tttuxiozzbzbcdafghijkzbcdafghijklmnoprszuouzzzalmnoprszouzzzacdmafghijklmnoprszuouzamcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyxhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjqwerttyxbopglbghojxxwnovsmrqajx'], ['zbcdafghizbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijtttxuxzrtysMssklmnoprszouzzzajklmnoprstuvwvwxyaeyzzouzzzaqwerty'], ['qweertty'], ['zbcdafaeyzzouzzzaqwerrty'], ['xyzabczbcdafghijklmnoprstuvwxeyzzouzzzaDEDFabdcdeffeeMssdecbatttxuxzrtyghi'], ['abcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafghijklmnoprstuvwwxyaeyzzouzzzaqwertyzzzszuouzzzazfeedcba'], ['zbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouyzzza'], ['zbcdafghijkzlzbcydafabcdeffeedcbaghijklmnoyprstuvwwxzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzatymnoprszuouzzza'], ['zbcdafghijklmnoprstusMsvwxUVWXYZuvzbcdafghijklmnoprstuvwxeyzzouzzzawxyaeyzzouzzza'], ['QWERTYqwerEtyy'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghiqjklmnoprszuouzzzazeffeedcbaondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghoqwerttyjxxwnovsmrqajxzabcDEFghi'], ['QWEabcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazeffeedcbaRTYqwerty'], ['qweerty'], ['stttxuxzztrttttxyzabczbsMbbkrtiyyiuysscdafghijklmnoouzzzaDEDFghi'], ['MsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwtttxuxzrtysMssondjofzhhxyhzabcDEDFghDiurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxs'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbgzxyzabcDEDFghihojxxwnovsmrqajx'], ['zbcydafabcdeffeedcbaghijklmnoypvwwxyaeyzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzaty'], ['abccdeffeedczbcdafghijklmnoprstuvQWERTYqwertywxeyzzouzzzzaba'], ['tttuxzzbcdafghijkzlzbcydafabcdeffeedcbaghijklmnoyprstuvwwxzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzatymnoprszuouzzzarttuy'], ['tttuxiozzbzbcdafghijkzbcdafghijklmnoprszuouzzzalmnoprszouzzzacdmafghijklmnoprszuouzamcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyxhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzzzqaiozzzbcdafghijklmnoprszuouzzzaz'], ['tttuuxzrtty'], ['txyzahbcDEDFghittuxzrty'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpsqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhazbcdafghijklmnoprszuouzzzapqjriulawnpeytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxxvlnufkwcyjxkiyhfwszmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['xyzabczbzbcdafghijklmsMbbkrtiyyzbcdafghijklmnoprstuvwwabcdzrzzqaiozzzxyzabcDEFghibcdafghijklmnoprszuouzzzazeffeedcbaxyaeyzzouzzzgaqwertyiuyssnoprstuvwxUVWXYZuvwxyaeyzzouzzzasMbbkrtiyyiuysscdafghijklmnoprstuvwxeyzzouzzzaDEDFghi'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvtttxuxzrxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttxyzabczbcdafghirrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdaxyzabcDEFghizuouzzzazeulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghiynpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzzzaqwerty'], ['zbcdaabbkrtfdoiyyiuyfghijklmnoprszouzzza'], ['zbcdafghijklmnoprstuvwxUVWXYZuvwza'], ['zbcdafghijklmnoprstuvwxUVzbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabcDEFghibcdafghijzzzqaiozzzbcdafghijklmnoprszuouzzzzazklmnotttxuxzzzrttQWERTYqwertyprszuouzzzazeffeedcbaxyaeyzzouzzzgaqwertyWXYZuvzbcdafghijklmnoprstuvwxeyzzouzzzawxyaeyzzouzzza'], ['tttxuxzzrtttabcdeffeezblmnoprszouzzza'], ['zbcdafghijklmnoprstuvwxUVttctuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuoubbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnnezzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertyssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaoqwerty'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiitttxuxzzrttttiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzzzaqwerty'], ['zbcdafghijklmnoprstuvwxUVzbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabcDEFghiQWERTYqwerEtyyghijklmnoprszuouzzzzazklmnotabdcdeffeedcbattxuxzzzrttQWERTYqwertyprszuouzzzazeffeedcbaxyaeyzzouzzzgaqwertyWXYZuvzbcdafghijklmnoprstuvwxeyzzouzzzawxyaeyzzouzzza'], ['qwzbzbcdafghijkzbcdafghijklmnoprszuouzzzalmnoprszouzzzacdmafghijklmnoprszuouzay'], ['abcdzzzqaiozzzbcdafghtttxuxzzzrtttijklmnoprszuouzzzazeffeedcba'], ['zbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabcDEFghibcdafghijzzzqasiozzzbcdafghijklmnoprszuouzzzzazklmnoaprszuouzzzazeffeedcbaxyaeyzzouzzzbgaqwerty'], ['zbcdafghijklmnoprstuvwxUVWXYZukvzbcdafghijklmnoprstuvwxeyzouzzza'], ['zbcdafghizbcdabbkrtfdoiyyMsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxsizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijklmnoprszouzzzajklmnoprstuvwvwxyaeyzzouzabcdeffeedcbazzaqwerty'], ['abcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafgghijklmnoprstuvwwxyaeyzzouzzzakqwertyfeedcba'], ['sMsss'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaauztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulopglbghojxxwnovsmrqajxWXYZurty'], ['zbcdafghizbcdabbkrtfdoiyyMsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxsizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfwghijklmnoprszouzzzajklmnoprstuvwvwxyaeyzzouzabcdeffeedcbazzaqwerty'], ['abcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafghzbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouzzzaoprstuvwwxyaeyzzouzzzaqkooxnzbcdabbkrtfdoiyyzbcdafghijklmnoprstuvQWERTYqwerWtywxeyzzouzzzaiuyfghijklmnoprszouzzzanea'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxzaqwertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxnhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['abzddcdefabcdzzzqaiozzczbcdafghijklmnoprszuouzzzazeffeedcbafeedcba'], ['zzzqaiozzzbcdafghijklmnoprszuouzzzzauz'], ['MsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwtttxuxzrtysMssondjofzhhxyhzabcnylrlzhkemjxbopglbghojxxwnovsmrqajxs'], ['zzzqaiozzzbcdafghijkzbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouyzzzalmnoprszuouzzzaz'], ['r'], ['xyzabczbzbcdhafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzasMbbkrtiyyiuysscdafghijklmnoprxyhzabcDEDFghDizoukzzzaDEDFghi'], ['zbcdafghilmnoprstuvwxUVWXYZukvzbcdafzghijklmnoprstuvwxeyzouzzza'], ['qqwert'], ['abcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafghzbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouzzzaoprstuvwwxyaeyzzouzzzaqkozbcdafghijklmnoprstuvwxUVWXYZuvzbcdafghijklmnoprstuvwxeyzzouzzzawxyaeyzzouzzzaoxnzbcdabbkrtfdoiyyzbcdafghizbcdafghijklmnoprstuvQWERTYqwertywxeyzzouzzzzajklmnoprstuvQWERTYqwerWtywxeyzzouzzzaiuyfghijklmnoprszouzzzanea'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknxsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwszmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['tttExuxzzzrttQtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondMsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwtttxuxzrtysMssondjofzhhxyhzabcnylrlzhkemjxbopglbghojxxwnovsmrqajxsjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWERTYqw'], ['zzzqaiozzzbcdafghijklmnxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeffeedcbaondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvsajxzabcDEFghioprszuouzzzaz'], ['zbcdafghijklmnoprstuvQWERzzzqaiozzzbcdafghijklmnxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeffeedcbaondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvsajxzabcDEFghioprszuouzzzazTYqwlertywxeyzzouzzza'], ['abcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafgzbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaghijklmnoprstuvwwxyaeyzzouzzzaqwertyfeedcba'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxzbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwerzbcdafghizbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijklmnoprszouzzzajklmnoprstuvwvwxyaeyzzouzzzaqwertytyebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovesmrqajxiiiiiiiiiinprlxfaaaaaaaaaaauztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzzzaqwerty'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdazbcdafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretzbcdafghijklmnoprstuvQWERTYqwertzzzszuouzzzazywxeyzzouzzzzaepxnhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpsqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhazbcdafghijklmnoprszuouzzzapqjriulawnpeytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiuqqwertrovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxxvlnufkwcyjxkiyhfwszmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['abcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafghijklmnopurstuvwwxyaeyzzouzzzaqwertyfeedcbabdcdeffeeMxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqxaiozzzbcdafghijklmnoprszuouzzzazeulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghissdcbatttxuxzrtya'], ['zbcydafabcdeffeedcbaghijklmnoyprstttxuxzzzrtttuvwwxyaeyzzouzzzaqwerzbcdafghizbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijklmnoprszouzzzajklmnoprstuvwvwxyaeyzzouzzzaqwertyty'], ['abfcdeffeedcb'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdazbcdafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxnhawpqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlezhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['zbcdafghizbcdabbkrtfdoiyyMsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvidzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxsizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfwghijklmnoprszouzzzajklmnoprstuvwvwxyaeyzzouzabcdeffeedcbazzaqwerty'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaakooxnnzbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijklmnoprszouzzzaeaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghi'], ['bbkbrtttxuxzrtyy'], ['zzzqzaiozzz'], ['zbcdafghihjklmnoprszuouzzza'], ['tttuxiozzbzbcdafghijkzbcdafghijklmnoprszuouzzzalmnoprszouzzzacdmafghijklmnoprszuouzamcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyxhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhtttuuxzrttyvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajx'], ['zbcydafabcdeffeedcbaxyhzabcDEDFghDighijklmnoyprstuvwwxyaeyzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzaty'], ['txyzabcDEDFghittxuxzrty'], ['zbcdafghizbcdabbkrtfdoiyyMsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmreqajxsizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfwghijklmnoprszouzzzajklmnoprstuvwvwxyaeyzzouzabcdeffeedcbazzaq'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiibbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpsqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwszmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnneinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdazbcdafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxnhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['abcdzzzqaiozzzbcdafghijklmnobprsabcdzrzzqaiozzzbcdafghijklmnoprszuouzfxyzabcDEFghizzazbbkrtiyyiuykooxnneefzbcdafghijklmnoprstuvwwxyaeyzzouzzzabazuouzzzazeffeedcba'], ['qtweertty'], ['qwzbzbcdafghijkzbcdafghijklmnoprszuouzzzalmnoprszouzzzacdmafghijklmnoprszuouay'], ['o'], ['tttuzbcdafghijklmnoprstuvrQWERTYqwerWtywxeyzzouzzzaxzzbcdafghijkzlzbcydafabcdeffeedcbaghijklmnoyprstuvwwxzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzatymnoprszuouzzzarttuy'], ['zbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabcDEFghibcdafghijzzzqasiozzzbcdafghijklmnoprszuouzzzzazklmnoaprszuouzzzazeffeedcbaxyaeyzzouzzzbgaqwaerty'], ['zbcdafghijklmnoprstuvwxUVWXYZuvzbcbbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdazbcdafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxnhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlezhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['QWEabcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazeffexytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeffeedcbaondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghoqwerttyjxxwnovsmrqajxzabcDEFghi'], ['abfcdeffeedba'], ['tttExuxzzzrttQtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnbbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvyMsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwtttxuxzrtysMssondjofzhhxyhzabcnylrlzhkemjxbopglbghojxxwnovsmrqajxsdknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdazbcdafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretzbcdafghijklmnoprstuvQWERTYqwertzzzszuouzzzazywxeyzzouzzzzaepxnhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnneiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWERTYqw'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugabcDEFghi'], ['zbcdafaetttxuxzzrtttabcdeffeezbcdabbkrtfdoiyyiuyfghijklmnoprszouzzzayzzouzzzaqwerrty'], ['zzzqaiozzzbcdafghijklmnxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeffeedcbaondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghieoprszuouzzzaz'], ['bbkybbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpsqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhazbcdafghijklmnoprszuouzzzapqjriulawnpeyxvlnufkwcyjxkiyhfwszmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnnefdoiyyiuyy'], ['tttxuxzzzrttQzWERTYTqw'], ['zzzszuouzzzzaz'], ['ttttxuxzzttt'], ['tttxuxzzrtttabcdeffzbcdafghijklmnoprstuvQWERTYqWwlertywxeyzzouzzzamnoprszouzzza'], ['zbcydafacbcdeffeedcbaghijklmnoypvwwxyaeyzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzaty'], ['zbcdafghijkllmnoxyzabczbcdafghijklmnoprtuvwxeyzzouzzzaDEDFghiprszuouzzza'], ['abcdzzzqaiozzzxyzabcDEFghibcdafghijklmnoprszuouzzzazeffeedzjklmnoprstuvEQWERTYqwertywxpeyzzouzzzacba'], ['abcdeffeedcbabcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafghzbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouzzzaoprstuvwwxyaeyzzouzzzaqkooxnzbcdabbkrtfdoiyyzbcdafghijklmnoprstuvQWERTYqwerWtywxeyzzouzzzaiuyfghijklmnoprszouzzzaneaa'], ['zzzszuozuzzuzaz'], ['abfcdeffeedbttttxuxzzrttta'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaabcdzzzqaiozzzxyzabcDEFghibcdafghijklmnoprszuouzzzazeffeedzjklmnoprstuvEQWERTYqwertywxpeyzzouzzzacbazabcDEFghi'], ['qweezbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertyrty'], ['zbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabczbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouyzzzaeffeedcbaxyaeyzzouzzzgaqwerty'], ['zjklmnoprstuvEQWERTYqwertywxeyzzozbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzzzaqwertyuzzza'], ['ahijklmnoprszuouzzzazeffeedcbafeedcba'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeffeedcbaondjofzhhvyscurovmxebakretepxhapqjriuilawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghi'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxzaqwertyfghxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeffeedcbaondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghiijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxnhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepwertywxpeyzzouzzza'], ['xyzabcDEDFFghDi'], ['xyzDabcDEDF'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxzzzqaiozzzbcdafghijkzbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouyzzzalmnoprszuouzzzazbopglbgzxyzabcDEDFghihojxxwnovsmrqajx'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifptttuxiozzbzbcdafghijkzbcdafghijklmnoprszuouzzzalmnoprszouzzzacdmafghijklmnoprszuouzamcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyxhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzzzqaiozzzbcdafghijklmnoprszuouzzzazaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeffeedcbaondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajx'], ['tttttExuxzzzrttQzbcdabbkrtfdoiyyiuyfghijklmnoprszouzozzarqajxWERTYqwzrttQWERTYqw'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugQWEabcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazeffeedcbaRTYqwerty'], ['abcdzzzqaiozzzbcdafghtttxuxzzzrtttijklmnoprszuoubbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiibbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpsqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwszmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnneinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdazbcdafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyzbcydafabcdeffeedcbaghijklmnoypvwwxyaeyzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzatyscurovmxebakretepxnhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnnezzzazeffeedcba'], ['zzzqaiozzzbcdafghijklmnxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlzbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertycnvtvlztxxmgwabcdzzzqaiozzzbczzzqaiozzzbcdafghijkzbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouyzzzalmnoprszuouzzzazjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghieoprszuouzzzaz'], ['abdcdeffeabdcdeffeeMxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqxaiozzzbcdafghijklmnoprszuouzzzazeulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghissdcbatttxuxzrtyeba'], ['zbcdafghijkzlmnopsrszutttxuxzrtiyozbcydafabcdeffeedcbaghijklmnoyprstuTvwwxyaeyzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzatyuzzza'], ['zbcdafghijklmnoprstuvwwabcdzzzqzbcdafghilmnoprstuvwxUVWXYZukvzbcdafzghijklmnoprstuvwxeyzouzzzaaiozzzxyzabcDEFghibcdafghijzzzqasiozzzbcdafghijklmnoprszuouzzzzazklmnoaprszuouzzzazeffeedcbaxyaeyzzouzzzbgaqwaerty'], ['zbcydafabcdeffeedcbaxyhzabcDEDFghDighijklmnoyprstuvwwxyaeyzzobbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpsqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhazbcdafghijklmnoprszuouzzzapqjriulawnpeyxvlnufkwcyjxkiyhfwszmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnneuzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzaty'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvtttxuxzrtxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttxyzabczbcdafghirrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdaxyzabcDEFghizuouzzzazeulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghiynpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzzzaqwerty'], ['xyzabczbcdafghijklmnoprstuvwxeyzzouzzzaDEDFabdcdeffebbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdazbcdafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxnhawpqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlezhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnneeMssdecbatttxuxzrtyghi'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknxsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufwcyjxkiyhfwszmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['zbcdafghizbcdabbkrtfdoiyyMsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvidzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxsizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfwghijklmnoprszouzzzajklmnoprstuvwvwxyaeyzzouzabcdpeffeedcbazzaqwerty'], ['zbcdafghijkMsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwtttxuxzrtysMssondjofzhhxyhzabcnylrlzhkemjxbopglbghojxxwnovsmrqajxslmnoprstuvwxeyzzouzzza'], ['zbzbcdxyzabcDEDFghDiafghijklm'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemzjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertyssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaoqwerty'], ['zbcdafghijklmnoprstuvwxUVzbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabcDEFghiQWERTYqwerEtyyghijklmnoprszuouzzzzazklmnotabdcdeffeedcbattxuxzzzrttQWERTYqwertyprszuouzzzazeffeedcbaxyaeyzzouzzzgaqwertyWXYZuvzbcdafghijklmnopzbcdafghijklmnoprstuvwxUVzbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabcDEFghibcdafghijzzzqaiozzzbcdafghijklmnoprszuouzzzzazklmnotttxuxzzzrttQWERTYqwertyprszuouzzzazeffeedcbaxyaeyzzouzzzgaqwertyWXYZuvzbcdafghijklmnoprstuvwxeyzzouzzzawxyaeyzzouzzzarstuvwxeyzzouzzzawxyaeyzzouzzza'], ['hijklmnoprszuouzzzzazklmnotttxuxzzzrttQWERTYqwerzbcdafghizbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijklmnoprszouzzzajklmnoprstuvwvwxyaeyzzouzabcdeffeedcbazzaqwertytyprszuouzzzazeffeedcbaxyaeyzzouzzzgaqwertyWXYZuvzbcdafghijklmnoprstuvwxeyzzouzzzawxyaeyzzouzzza'], ['bbkirtiyyiuy'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaabdcdeffeedcbaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbctbbkrtiyyiuykooxnneWXYZuvwxyaeyzzouzaoqwerty'], ['atttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscuraovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxbfcdeffeedba'], ['stttxuxzztrttttxyzabczbsMbbkrtoiyyiuysscdafghijklmnoouzzzaDEDFghi'], ['xyzabczbcdafghiijklmnoprtuvwxeyzzouzzzaDEDFghi'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxzzzqaiozzzbcdafghijkzbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouyzzzalmnoprszuouzzzazbopglbgzxyzabcDEDFghihojxxwnovsmxyzabczbcdafghijklmnoprstuvwxeyzzouzzzaDEDFabdcdeffebbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdazbcdafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxnhawpqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlezhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnneeMssdecbatttxuxzrtyghirqajx'], ['zobcdafghijklmnoprstuvQWERTYqwerWtywxeyzzouzzza'], ['zbcdafghijklmnopzbzbcdafghijkzbcdafghijklmnoprszuouzzzalmnoprszouzzzacdmafghijklmnoprszuouzarszbcdafghijklmnoprstuvwxUVWXYZuvzbcdafghijklmnoprstuvwxeyzzouzzzawxyaeyzzouzzzatuvQWERTYqwlertywxeyzzouzzza'], ['zbzbcdafghijklmnoprszaouzzzacdmafghijklmnoprszuouza'], ['zbcydafabcdeffeedcbaghijklmnoyprstuvwwsxyaeyzzouzzzaqwerty'], ['zbcdafghizbcdabbkrtfgdoiyyizbcdafghijklqwerty'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcxyzabczbcdafghijklmnoprstuvwxeyzzouzzzaDEDFabdcdeffeeMssdecbatttxuxzrtyghiertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxnhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['zbcdafghijklmnoprstuvwwabcdzzzqzbcdafghilmnoprstuvwxUVWXYZukvzbcdafzghijklmnoprstuvwxeyzouzzzaaiozzzxyzabcDEFghibcdafghijzzzqasiozzzbcdafghijklmnoprszuouzzzzazklmnoaprszuouzzzazeffeedcbaxyaeyzzouzzzbgaqwaertytttxuxzzrtttabcdeffeezblmnoprszouzzza'], ['abcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafghijklmnoprstuvwwxyaeyzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertyssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaoqwertyzzouzzzaqwertyfeedcba'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvjydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertyssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaoqwerty'], ['tttuxiozzbzbcdafghijkzbcdafghijklmnoprszuouzzzalmnoprszouzzzlzhkemjxbopglbghojxxwnovsmrqajxzzzqaiozzzbcdafghijklmnoprszuouzzzaz'], ['txyzabcDEDFgDhittuxzrty'], ['zbzbcdafgtxyzabcDEDFghittuxzrtyhijklmnoprszouzzzacdmafghijklumnoprszuouza'], ['xyzabczbzbcdafghijklzbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwerzbcdafghizbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijklmnoprszouzzzajklmnoprstuvwvwxyaeyzzouzzzaqwertytymnoprstuvwxUVWXYZuvwxyaeyzzouzzzasMbbkrtiyyiuysscdafghijklmnoprstuvwxeyzzouzzzaDEDFghi'], ['IA'], ['abdcdeffeeMxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkabcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafgghijklmnoprstuvwwxyaeyzzouzzzakqwertyfeedcbaurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqxaiozzzbcdafghijklmnoprszuouzzzazeulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghissdcbatttxuxzrty'], ['QWEqRTYqwerty'], ['zzzszuouzzbcdafghizbcdabbkrtfdoiyyMsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvidzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxsizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfwghijklmnoprszouzzzajklmnoprstuvwvwxyaeyzzouzabcdpeffeedcbazzaqwertyzzaz'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofdzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepwertywxQnohszzza'], ['MszxyzabcDEDFgis'], ['tttExuxzzzrttQtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinpzbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwerzjklmnoprszbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaoqwertyaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxuxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWERTYqw'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaabdcdeffeedcbaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxrvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbctbbkrtiyyiuykooxnneWXYZuvwxyaeyzzouzaoqwerty'], ['zzzqaiozzzbcMsssdatttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxzzzqaiozzzbcdafghijkzbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouyzzzalmnoprszuouzzzazbopglbgzxyzabcDEDFghihojxxwnovsmrqajxz'], ['tttxuxzbcdafghijklmnoprszuouzzzahirtysMss'], ['zbcdafghijkzlmnopsrszutttxuxzrtiyozbcydafabcdeffeeadcbaghijklmnoyprstuvwwxyaeyzzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzatyuzzza'], ['zzzzqaiEFghizbcdafghikooxnnejklmnoprszuouzzzazbcdafghijklmnoprszouzzza'], ['zzzqaiozzzbcdafghijklmnoprszqweertyuouzzzaz'], ['zbcdafghzxyzabcDEDFghiijklmnoprstuvwxUVytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwerty'], ['kooxnzbcdabbkrtfdoiyyzbrcdafghijklmnoprstuvQWERTYqwerWtywxeyzzouzzzaiuyfghijklmnoprszouzzzane'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknxsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhe'], ['abcdzzzqaiozzzxyzabcDEFghibcdatxyzahbcDEDFghittuxzrtyfghijklmnoprszuouzzzazeffeedzjklmnoprstuvEQWERTYqwertywxpeyzzouzzzacba'], ['MsMs'], ['zbcdafghizbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouztttuuxzrttyzzaqwertyuyfghijklmnoprszouzzzajklmnoprstuvwvwxyaeyzzouzabcdeffeedcbazzaqwerty'], ['tttuzbcdafghijklmnoprstuvrQWERTYqwerWtywxeyzzouzzzaxzzbcdafghijkzlzbczbcdafghijkzlmnoprszuouzzzaydafabcdeffeedcbaghijklmnoyprstuvwwxzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzatymnoprszuouzzzarttuy'], ['abfcdeffezzzqaiozzzbcdafghijklmnoprszqweertyuouzzzazedbttttxuxzzrttta'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqxaiozzzbcdafghijklmnoprszuouzzzazeulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghozjxxwnovsmrqajxzabcDEFghi'], ['tttxuxzztrttttxyzabczbsMbbkrtiyyiuysscdafghijkclmnoprstuvwxeyzzouzzzaDEDFghi'], ['ttttrtt'], ['zbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzabcdzrzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafghijklmnoprstuvwwxyaeyzzouzzzaqwertyfeedcbarty'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkuriifpsqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwszmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['abcdzzzqaiozzzxyzabcDEFghibcdatxyzaertywxpeyzzouzzzacba'], ['tttuxzzbcdafghijkzlzbcydafabcdeffeedcbaghijklmnoyprstuvwwxzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzatymnprszuouzzzarttuy'], ['bbkrtiytttrttyiruykooxnne'], ['zzzqaiozzdafghijklmnoprszqweertyuouzzzaz'], ['e'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzzbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabcDEFghibcdafghijzzzqaiozzzbcdafghijklmnoprszuouzzzzazklmnoprszuouzzzazeffeedcbaxyaeyzzouzzzgaqwertylcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwerty'], ['QWEqRTYqwertttExuxzzzrttQtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxuxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWERTYqwty'], ['zbcdafghijklmnoprstuvwxUVWXYkooxnzbcdabbkrtfdoiyyzbrcdafghijklmnoprstuvQWERTYqwerWtywxeyzzouzzzaiuyfghijklmnoprszouzzzanenoprstuvwxeyzouzzza'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcxyzabczbcdafghijklmnoprstuvwxeyzzouzzzaDEDFabdcdeffeeMssdecbatttxuxzrtyghiertyfghijklmnoprszuouzzzaziiiiiinprlxfqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxnhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkqajxkrtiyyiuykooxnne'], ['LNFZmHOo'], ['zbcydafacbcdeffeedcbaghijklmnoypvwwxyaeyzzouzzzaqwerzjklmnoprstuvEQWERTkYqwertywxeyzzouzzzaty'], ['zbcdafghijklmnoprstuvQWERTYqwertzzzszzuzbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijklmnoprszouzzzaouzzzazywxeyzzouzzzza'], ['zbzbcdafghijklmnoprszouzzzacdmafghijklmnoprszuozbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzkooxnnzbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijklmnoprszouzzzaea'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiabfcdeffeedcbiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeffeedcbaondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghi'], ['Mssss'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmacnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmssxxpwoaynylrlzhkemjxbopglbgwnovsmrqajxWXYZuvwxyaeyzzouzaoqwerty'], ['zbcydafacbcdetttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscuraovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxffeedcbaghijklmnoypvwwxyaeyzzouzzzsaqwerzjklmnoprstuvEQWERTkYqwertywxeyzzouzzzaty'], ['abcdzzzqaiozzzbcdafghijkzbzbcdafghijklmnoprszouzzzacdmafghijklmnoprszuouzalmnoprszuouzzzazeffeedcba'], ['zzzqaiozzzbcdafghijklmnxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlzbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertycnvtvlztxxmgwabcdzzzqaiozzzbczzzqaiozzzbcdafghijkzbcdafghijktttxuxzztrttttlmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouyzzzalmnoprszuouzzzazjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghieoprszuouzzzaz'], ['zbcydafabcdeffeedczbcdafghijkzlmnopsrszutttxuxzrtiyozbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzatyuzzzaijklmnoprszouzzzajklmnoprstuvwvwxyaeyzzouzzzaqwertyty'], ['MsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiitvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxs'], ['zbzbcdafghijklmnoprszaouzzzacdmafghijtttxuxzzrtttabcdeffeezbcdabbkrtfdoiyyiuyfghijklmnoprszouzzzaprszuouza'], ['abcdzrzzqaiozzzbcdafghijklmnoprszuouzfxyzabcDEFghizztttrttazbbkrtiyyiuykooxnneefzbcdafghijklmnoprstuvwwxyaeyzzouzzzaba'], ['QWEqRTYqwerYty'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaauztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvabcdzzzqaiozzzbcdafghijkzbzbcdafghijklmnoprszouzzzacdmafghijklmnoprszuouzalmnoprszuouzzzazeffeedcbayscurovmjxebakretepxhapqjriulopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzzzaqwerty'], ['MszabdcdeffeeMssdcbatttxuxzrtyxyzabcDEDFgis'], ['tttxuxzbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouyzzzazztrtttt'], ['tttuxiozzbzbcdafghijkzbcdafghijklmnoprszuouzzzalmnoprszouzzzacdmafghijklmnoprszuouzamcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyxhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhtttuuxzrttyvyscurovmxebakretepxhzbcdafghijklmnoprszuouzzzaapqjriulawnperyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajx'], ['MsstttuxiozmcnrvxaxeeeeekzpwiktlvbjbbkrtiyyiuyjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxs'], ['abcdzzzqaiozzzbcdafghijklmntttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepwertywxpeyzzouzzzaoprszuouzfzzazefzbcdafghzbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouzzzaoprstuvwwxyaeyzzouzzzaqkooxnzbcdabbkrtfdoiyyzbcdafghijklmnoprstuvQWERTYqwerWtywxeyzzouzzzaiuyfghijklmnoprszouzzzanea'], ['stttxuxzztrttttxyzabczbsMbbkrtoiyyiuyssctttxuxzzzrttQzWERTYTqwdafghijklmnoouzzzaDEDFghi'], ['zzzzuouzzzaz'], ['zbcdafghijklmdnoprstuvwxUVzbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabcDEFghiQWERTYqwerEtyyghijklmnoprszuouzzzzazklmnotabdcdeffuzzzawxyaeyzzouzzza'], ['zzzqaizozzz'], ['zbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzabcdzrzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafghijklmnoprstuvwwxyaeyzzouzzzaqwertyfeedcbartyzzouzzzaqwerty'], ['tttxuxzzzrttQzWERTYzTqw'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjsjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaabdcdeffeedcbaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwtttuzbcdafghijklmnoprstuvrQWERTYqwerWtywxeyzzouzzzaxzzbcdafghijkzlzbczbcdafghijkzlmnoprszuouzzzaydafabcdeffeedcbaghijklmnoyprstuvwwxzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzatymnoprszuouzzzarttuyiktlvbjjvydknsbnhpbctbbkrtiyyiuykooxnneWXYZuvwxyaeyzzouzaoqwerty'], ['MsMzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretvepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzzzaqwertys'], ['abfcdeffezzzqaiozzzzzqaiEFghizbcdafghikooxnnejklmnoprszuouzzzazbcdafghijklmnoprszouzzzaafghijklmnoprszqweertyuouzzzazedbttttxuxzzrttta'], ['zzzqaizozz'], ['tttxuxzzzrttQzWERTYqwerty'], ['zbcdafghizbcdabbkrtfdoiyyMsstttuxiozmcnrvxaxeeeeekzpzbcdafghijkMsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwtttxuxzrtysMssondjofzhhxyhzabcnylrlzhkemjxbopglbghojxxwnovsmrqajxslmnoprstuvwxeyzzouzzzawiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxsizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijklmnoprszouzzzajklmnoprstuvwvwxyaeyzzouzabcdeffeedcbazzaqwerty'], ['atttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiizbcdafghijklmnoprszouzzzaiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscuraovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxbfcdeffeedba'], ['abcdzzzqaiozzzxyzabcDEFghibcdatxyzahbcDEDFghittuxzrtyfghijklmnoprszuouzzzazeffeedzjklmnoprstuvEQWERTYabbfcdeffeedcbqwertywxpeyzzouzzzacba'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdazbcdafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaassxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['tttxuxzzzrttQzWERTYTw'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscuryzabcDEDFghDijxkiyhfwmbvdtttrttzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwerty'], ['zbcdafghijkllmnopaprszlpuouzzza'], ['bbkrtiyyiuykooxnnne'], ['xyzabczbzbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzasMbbkrtiyyizzzqaiozzzuysscdafghijklmlinoprstuvwxeyzzouzzzaDEDFghi'], ['zbcdabbkrtfdoiyyiuzyfghijklmnoprszouzzza'], ['zbcdafghijaklmnoprszouzza'], ['abccdeffeeda'], ['MsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzzbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzabcdzrzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafghijklmnoprstuvwwxyaeyzzouzzzaqwertyfeedcbartyzzouzzzaqwertyhkemjxbopglbghojxxwnovsmrqajxs'], ['zbcdafghijklhmnoprstuvwxUVttctuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuoubbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnnezzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertyssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaoqwerty'], ['tttExuxzzzrttQtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprtepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxuxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWERTYqw'], ['abcdeffeedcbabcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafghzbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeytxyzabcDEDFghittuxzrtyaa'], ['tttxuxzzzrttQzWERTYqwqwertyxyzabDcrDEFghierty'], ['xyzabczbzbcdafghijklmsMbbkrtiyyzbcdafghijklmnoprstuvwwabcdzrzzqaiozzzxyzabcDEFghibcdafghijklmnoprszuouzzzazeffeedcbaxyaeyzzouzczzgaqwertyiuyssnoprstuvwxUVWXYZuvwxyaeyzzouzzzasMbbkrticyyiuysscdafghijklmnoprstuvwxeyzzouzzzaDEDFghi'], ['abdcdefazuxzrty'], ['tttxuxzrtyzbcdafghijklmnoprstuvrQWERTYqwerWtywxeyzzouzzzasMss'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghiqjklmzzzqaiozzzbcdafghijklmnoprszuouzzzaznoprszuouzzzazeffeedcbaondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghoqwerttyjxxwnovsmrqajxzabcDEFghi'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpmtbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxzaqwertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxnhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['tttxuxzzzrttuQWRTYqw'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknxsnhptbcttrrrzkurifpqjyypugyhliiiiiizbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertyssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaoqwertyiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufwcyjxkiyhfwszmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxtaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscuryzabcDEDFghDijxkiyhfwmbvdtttrttzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwerty'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscuryzabcDEDFghDijxkiyhfwmbvdtttrttzmssxxpwoaynylrzjklmnoprstuvEQWERTYqwertywxeyzzouzzzalzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwerty'], ['MsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwtttxuxzrtysMssondjofzhhxyhzabcnylrlzhkxbopglbghojxxwnovsmrqajxs'], ['zbcdafghijklmnotttuxiozzbzbcdafghijkzbcdafghijklmnoprszuouzzzalmnoprszouzzzacdmafghijklmnoprszuouzamcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyxhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhtttuuxzrttyvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouyzzzaeffeedcbaxyaeyzzouzzzgaqwerty'], ['zbcdafghijklmnoprstuvwwabcdzzzqzbcdafgVhilmnoprstuvwxUVWXYZukvzbcdafzghijklmnoprstuvwxeyzouzzzaaiozzzxyzabcDEFghibcdafghijzzzqasiozzzbcdafghijklmnoprszuouzzzzazklmnoaprszuouzzzazeffeedcbaxyaeyzzouzzzbgaqwaertytttxuxzzrtttabcdeffeezblmnoprszouzzza'], ['zbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabcDEFghibcdafghijzzzqasiozzzbcdafghijklmnoprszzbcdafghijklmnoprstuvwxUVWXYZukvzbcdafghijklmnoprstuvwxeyzouzzzauouzzzzazklmnoaprszuouzzzazeffeedcbaxyaeyzzouzzzbgaqwaerty'], ['xyzabczbcdafghijklmnoprtuvwxeyzzLNFZmHOoouzzzaDEDFghi'], ['OLNFZ'], ['abfcdeffeedbabcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafgghijklmnoprstuvwwxyaeyzzouzzzaqwertyfeedcbaa'], ['zbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzabcdzrzzqaiozzzbcdafghijklmnoprszuzbcdafghijklmnoprstuvwwxyaeyzzouzzzaqwertyfeedcbartyzzouzzzaqwerty'], ['xyzabcDFghi'], ['zbcdafghijklmnoprstuvwwabcdzzzqzbcdafghilmnoprstuvwxUVWXYZukvzbcdafzghijklmnoprstuvwxeyzouzzzaaiozzzxyzabcDEFghibcdafghijzzzqasiozzzbcdafghijklmnoprszuouzzzzazklmnoaprszuoupzzzazeffeedcbaxyaeyzzouzzzbgaqwaerty'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaakooxnnzbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijklmnoprszouzzzaeaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaabdcdeffeedcbaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxrvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbctbbkrtiyyiuykooxnneWXYZuvwxyaeyzzouzaoqwertyhkemjxbopglbghojxxwnovsmrqajxzabcDEFghi'], ['qwertyxyzabDcDEDFghi'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmnne'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiibbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpsqjyypugyhiiizbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjsjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaabdcdeffeedcbaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwtttuzbcdafghijklmnoprstuvrQWERTYqwerWtywxeyzzouzzzaxzzbcdafghijkzlzbczbcdafghijkzlmnoprszuouzzzaydafabcdeffeedcbaghijklmnoyprstuvwwxzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzatymnoprszuouzzzarttuyiktlvbjjvydknsbnhpbctbbkrtiyyiuykooxnneWXYZuvwxyaeyzzouzaoqwertywoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnneinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdazbcdafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxnhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['zbzbcdafghijklmnoprszaouzzzacdmafghijtttxuxzzrtttabcdeffeezbcdabbkrtfdotiyyiuyfghijklmnoprszouzzzaprszuouza'], ['kooxtttxuxzzzrttQzWERTYzTqwnne'], ['zzzqzatttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiizbcdafghijklmnoprszouzzzaiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscuraovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxbfcdeffeedbaaizozz'], ['qqwerrt'], ['zbzbcdafgtttxuxzzzrtthijklmnoprszouzzzacdmafghijklumnoprszuouza'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaabdcdeffseedcbaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbctbbkrtiyyiuykooxnneWXYZuvwxyaeyzzouzaoqwerty'], ['HtorPc'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmabcdzzzqaiozzzbcdafghijklmnobprsabcdzrzzqaiozzzbcdafghijklmnoprszuouzfxyzabcDEFghizzazbbkrtiyyiuykooxnneefzbcdafghijklmnoprstuvwwxyaeyzzouzzzabazuouzzzazeffeedcbaetepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertyssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaoqwerty'], ['zbcdafghijklmnoprstuvwwabcdzzzqzbcdafghilmnoprstuvwxUVWXYZukvzbcdafzghijklmnotttExuxzzzrttQtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprtepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxuxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWERTYqwprstuvwxeyzouzzzaaiozzzxyzabcDEFghibcdafghijzzzqasiozzzbcdafghijklmnoprszuouzzzzazklmnoaprszuoupzzzazeffeedcbaxyaeyzzouzzzbgaqwaerty'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlaztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeffeedcbaondjofzhhvyscurovmxebakretepxhapqjriuilawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghi'], ['stttxuxzztrttttxyzabczbsMbbkrtoiryyiuysscdafghihjklmnoouzzzaDEDFghi'], ['qtzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjsjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaabdcdeffeedcbaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwtttuzbcdafghijklmnoprstuvrQWERTYqwerWtywxeyzzouzzzaxzzbcdafghijkzlzbczbcdafghijkzlmnoprszuouzzzaydafabcdeffeedcbaghijklmnoyprstuvwwxzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzatymnoprszuouzzzarttuyiktlvbjjvydknsbnhpbctbbkrtiyyiuykooxnneWXYZuvwxyaeyzzouzaoqwertyweertty'], ['ttztxuzbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabczbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouyzzzaeffeedcbaxyaeyzzouzzzgaqwertyxzxrty'], ['zbzbcdafghijkzbcdafghijklmnoprszuouzzzalmnoprszouzzzacdmafghijklmabdcdeffeeMssdzabzbcdafghijklmnoprszouzzzacdmafghaijklmnoprszuouzaecbatttxuxzrtynoprszuouza'], ['zobcdafghijklmnoprstuvhQWERTYqwerWtywxeyzzouzzza'], ['DeMLGjH'], ['zbcdafghijkzlmnoxyzahbcDEFghipsrszutttxuxzrtiyozbcydafabcdeffeeadcbaghijklmnoyprstuvwwxyaeyzzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzatyuzzza'], ['tttuxiozzbzbcdafghijkzbcdafghijklmnoprszuouzzzalmnoprszouzzzacdmafghijklmnoprszuouzamcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyxhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzzzqaiozzzbcdafghijklmnoprszuouzzzaz'], ['zz'], ['zzzqaiozzzbcdafghijklmnoprszqweertyuouzzzazssMsss'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvtttxuxzrxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknlsnhpbcttxyzabczbcdafghirrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdaxyzabcDEFghizuouzzzazeulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghiynpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzzzaqwerty'], ['abcdeffeedcbafghijklmnoprstuvQWERTYqwerWtywxeyzzouzzzaiuyfghijklmnoprszouzzzaneaa'], ['zbcydazbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzabcdzrzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafghijklmnoprstuvwwxyaeyzzouzzzaqwertyfeedcbartyfacbcdeffeedcbaghijklmnoypvwwxyaeyzzouzzzaqwerzjklmnoprstuvEQWERTkYqwertywxeyzzouzzzaty'], ['abcdzzzqaiozzzbcdafghijklmntttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepwertywxpeyzzkooxnzbcdabbkrtfdoiyyiuyfghijklmnoprszouzzzaneouzzzaoprszuouzfzzazefzbcdafghzbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouzzzaoprstuvwwxyaeyzzouzzzaqkooxnzbcdabbkrtfdoiyyzbcdafgabzddcdefabcdzzzqaiozzczbcdafghijklmnoprszuouzzzazeffeedcbafeedcbahijklmnoprstuvQWERTYqwerWtywxeyzzouzzzaiuyfghijklmnoprszouzzzanea'], ['zzzqaiozzzbcMsssdatttuxiozmcnrvxaxeeeeekzpwiktlvbjjxvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxzzzqaiozzzbcdafghijkzbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouyzzzalmnoprszuouzzzazbopglbgzxsyzabcDEDFghihojxxwnovsmrqajxz'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcxyzabczbcdafghijklmnoprstuvwxeyzzouzzzaDEDFabdcdeffeeMssdecbatttxuxzrtyghiertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxnhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['qtweertwty'], ['xyzabcDbbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpsqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhazbcdafghijklmnoprszuouzzzapqjriulawnpeytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhxyhzabcDEDFghDiurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxxvlnufkwcyjxkiyhfwszmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnnehEiFghi'], ['zbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzabcdzrzzqaiozzzbcodafghijklmnoprszuzbcdafghijklmnoprstuvwwxyaeyzzouzzzaqwertyfeedcbarteyzzouzzzaqwe'], ['zfghzbcdafghijklmnoprstuvQWERTYqWwlertywxeyzzouzzzaijkzlmnoprszuonuzzza'], ['zzzszzuozuzzuz'], ['MtttxuxzzzrttQWERTYqwertysbbkyyrtfdoiyyiuyyss'], ['zbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaauztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyjscurovmxebakrezbcdafghijkllmnopaprszlpuouzzzatepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzzzaqwerty'], ['zbcdafghijklmnoprstusMsvwxUVWXYZuvzbcdafghijklmnoprstuuvwxeyzzouzzzawxyaeyzzouzzza'], ['zbcdafghijklmnoprstuvwxUVWXYZuvzbcbbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdazbcdafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxnhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlezhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertylnylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnne'], ['QWERTYqwertytttuxzrty'], ['zbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzabcdzrzzqaiozzzbcdafghijkIAlmnoprszuzbcdafghijklmnoprstuvwwxyaeyzzouzzzaqwertyfeedcbartyzzouzzzaqwerty'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbgzxyzabcDzzzzqaiozzxyzabcDEFghizbcdafghikooxnnejklmnoprszuouzzzazbcdafghijklmnoprszouzzzaEDFghihojxxwnovsmrqajx'], ['abcdzzzqaiozzzxyzabcDEFghibcdatxyabdcdeffeabdcdeffeeMxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqxaiozzzbcdafghijklmnoprszuouzzzazeulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxzabcDEFghissdcbatttxuxzrtyebazaertywxpeyzzouzzzacbza'], ['QWEabcdzzzoprszuouzfzzazeffeedcbaRTYqwerty'], ['zbcdafgyhizbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzttdcbazzaqwerty'], ['ttttxuxzztttt'], ['tttxuxzzxyzabczbzbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzasMbbkrtiyyizzzqaiozzzuysscdafghijklmlinoprstuvwxeyzzouzzzaDEDFghizrtt'], ['MsstttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwtttxuxzrtyzsMssondjofzhhxyhzabcnylrlzhkxbopglbghojxxwnovsmrqajxs'], ['bbkirtiyyxytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaabcdzzzqaiozzzxyzabcDEFghibcdafghijklmnoprszuouzzzazeffeedzjklmnoprstuvEQWERTYqwertywxpeyzzouzzzacbazabcDEFghiiuy'], ['zjklmnoprstuviEQWERTYqwertywxeyzzozbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvzzzzuouzzzazbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzzzaqwertyuzzza'], ['abccdeffeedzbcdafghizbcdabbkrtfdoiyyizbcdzbcdafghijkzlmnopsrszutttxuxzrtiyozbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzatyuzzzaqwertya'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxzzzqaiozzzbcdafghijkzbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouyzzzalmnoprszuouzzzazbopglbgzxyzabcDEDFghihojxxwnovsmxyzabczbcdafghijklmnoprstuvwxeyzzouzzzaDEDFabdcdeffebbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdazbcdafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxnhawpqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlezhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertynylrlzhkemjxbopglbghojxxwnzbcdafghijklmnoprstuvwxUVzbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabcDEFghiQWERTYqwerEtyyghijklmnoprszuouzzzzazklmnotabdcdeffeedcbattxuxzzzrttQWERTYqwertyprszuouzzzazeffeedcbaxyaeyzzouzzzgaqwertyWXYZuvzbcdafghijklmnoprstuvwxeyzzouzzzawxyaeyzzouzzzaovsmrqajxkrtiyyiuykooxnneeMssdecbatttxuxzrtyghirqajx'], ['tttxuxzzztrttQzWERtTYTw'], ['zbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabczbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzbcdafghijklmnoprstuvwxUVWXYZukvzbcdafghijklmnoprstuvwxeyzouzzzazzouyzzzaeffeedcbaxyaeyzzouzzzgaqwerty'], ['zbcwdafghijkQWEqRTYqwertylmnoprnstuvwtzbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabcDEFghibcdafghijklmnoprszuouzzzazeffeedcbaxyaeyzzouzzzgaqwertyttxuxzrtyUVWXYZuvwza'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrxyzabczbcdafghijklmnoprstuvwxeyzzouzzzaDEDFghirzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxzzzqzatttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiizbcdafghijklmnoprszouzzzaiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscuraovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxbfcdeffeedbaaizozzebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajx'], ['MssszbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertys'], ['tttttExuxzzzrttQzbcdabbkrtfdoiyyiuzbcdafghzxyzabcDEDFghiijklmnoprstuvwxUVytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertyyfghijklmnoprszouzozzarqajxWERTYqwzrttQWERTYqw'], ['xyzabczbcdafghiijklmnoprtuvwxeyzzouzzzbcdafghijklmnoprstuvwxUVWXYZuvzbcbbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoayzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdazbcdafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertyfghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxnhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlezhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertylnylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnnezaDEDFghi'], ['ttztxuzbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabczbcdafghijklmnoprstuvwxUVWXYZuvzbcdijklmnoprstuvwxeyzzouzzzawxyaeyzzouyzzzabccdeffeedzbcdafghizbcdabbkrtfdoiyyizbcdzbcdafghijkzlmnopsrszutttxuxzrtiyozbcydafabcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwerzjklmnoprstuvEQWERTYqwertywxeyzzouzzzatyuzzzaqwertyaaeffeedcbaxyaeyzzouzzzgaqwertyxzxrty'], ['MsMzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretvepxhapqjynylrlzhkemjxbopglbghowjxxwnovsmrqajxWXYZuvwxyaeyzzouzzzaqwertys'], ['abcdzzzqasMbbkrtiyyzbcdafghijklmnoprstuvwwabcdzrzzqaiozzzxyzabcDEFghibcdafghijklmnoprszuouzzzazeffeedcbaxyaeyzzouzzzgaqwertyiuyssiozzzxyzabcDEFghibcdafghijklmnoprszuouzzzazeffeedcba'], ['zbcdafghijklmnoprstuvwxUVzbcdafghijklmnoprstuvwwabcdzzzqaiozzzxyzabcDEFghibcdafghijzzzqaiozzzbcdafghiabcdzzzqaiozzzbcdafghijklmnoprszuouzfzzazefzbcdafghijklmnoprstuvwwxyaeyzzouzzzaqwertyfeedcbajklmnoprszuouzzzzazklmnotttxuxzzzrttQWERTYqwertyprszuouzzzazeffeedcbaxyaeyzzouzzzgaqwertyWXYZuvzbcdafghijklmnoprstuvwxeuyzzouzzzawxyaeyzzouzzza'], ['zabzbcdafghijkttttxuxzzttttlmnoprszouzzzacdmafghaijklmnoprszuouza'], ['IUhh'], ['zbcdafughijklmnoprstusMsvwxUVWXYZuvzbcdafghijklmnoprstuuvwxeyzzouzzzawxyaeyzzouzzza'], ['xytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaakooxnnzbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijklmnoprszouzzzaeaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwabcdzzzqaiozzzbcdafghijklmnoprszuouzzzazeulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvabjjvydknsnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaabdcdeffeedcbaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxrvlnufkwcyxyzabcDEDFghDijxkiyhfwmbvdtttrttzmzbcdafghijklmnoprstuvwxUVtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbctbbkrtiyyiuykooxnneWXYZuvwxyaeyzzouzaoqwertyhkemjxbopglbghojxxwnovsmrqajxzabcDEFghi'], ['tttxuxzrtyzbcdafghijklmnoprstuvrQWERTYqwerWtywxeyzzouzzzasMbbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmnness'], ['bbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiitttttExuxzzzrttQzbcdabbkrtfdoiyyiuzbcdafghzxyzabcDEDFghiijklmnoprstuvwxUVytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsbnhpbcttrrrzkurifpqtjyypugyhiiiiiiiizzzqaiozzzbcdafghijklmnoprszuouzzzaziiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcanvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxWXYZuvwxyaeyzzouzaqwertyyfghijklmnoprszouzozzarqajxWERTYqwzrttQWERTYqwiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmnne'], ['abfcdeffezzzqaiozzzbcddafghijklmnoprszqweertyuouzzzazedbttttxuxzzrttta'], ['qweezbcydafaibcdeffeedcbaghijklmnoyprstuvwwxyaeyzzouzzzaqwertyrty'], ['qwertyrxyzabDcrDEFgqhi'], ['kooxtttxuxzbcdafghijklmnoprstuvwwxyaeyzzouzzzaqwertyWERTYzTqwnne'], ['zbcdaabbbitttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhptbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwszmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxkrtiyyiuykooxnnebkrtfdoiyyiuyfghijklmnoprszouzzza'], ['ttzbzbcdafghijklmnoprszouzzzacdmafghijklmnoprszuozbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzkooxnnzbcdabbkrtfdoiyyizbcdafghijklmnoprstuvwxUVWXYZuvwxyaeyzzouzzzaqwertyuyfghijklmnoprszouzzzaeatty'], ['a'], ['b'], ['aAa'], ['bb'], ['AAAAbbbbb'], ['ABCabc'], ['zyx'], ['aa'], ['xyzazbcDEFyi'], ['zbcDEFyi'], ['xyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghi'], ['QWERTzbcDEFyiYqwerty'], ['bbkrtfdoiyxyzabcDEFghi'], ['seRyB'], ['yseRyB'], ['QWERTzbcDEFzyiYqwerty'], ['tttxuxzQWERTzbcDEFyiYqwertyzzrttt'], ['tttxuxtzQWERTzbcDEFyiYqwertyzzrttt'], ['zbcdafgheyzzouzzza'], ['bbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzay'], ['QWERTzbcDEFyiYqwertYy'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajx'], ['ttttxuxzzzrttt'], ['tttxt'], ['kobbkrtfdoiyyiuyoxnne'], ['kobbkrtfdoiyyyiuyoxnne'], ['zbRTzbcDEFzyiYqwertyDEFyi'], ['xttttxuxzzzrtttyzazbcDEFyi'], ['xyzabcDEzbcydafghijklmnoprstuvwxeyzzouzaFghi'], ['abcdefftttxteedcba'], ['xyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzay'], ['kobbkrtfdoiyyiiuyoxnne'], ['QWERTzbcDEFzyiYqwerxyzabcDEzbcydafghijklmnoprstuvwxeyzzouzaFghity'], ['kobbkrtfdoiyyiiuyoxne'], ['QWERTzbcDEFyiEYqwerty'], ['zbzzzqaiozzzRTzbcDEFzyiYqwertzyDEFyi'], ['QWERTzbcDEFzyierty'], ['ztbcdafghijklmnoprstuvwxeyzzouzzza'], ['yseRBkobbkrtfdoiyyiuyoxnne'], ['tttuxiozmcnrvxaxeeeeekzpwiktglbghojxxwnovdsmrqajx'], ['xyzazbcDEyi'], ['bbkrtfdoiyyiuzbcdafghQWERTzbcDEFyyiYqwertyeyzzouzyzzay'], ['xyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzaytttxuxzzzrttt'], ['zbcdafgheyzzozbcdafgheyzzouzzzauzzzza'], ['tttxuxkobbkrtfdoiyyiuyoxnnetzQWERTzbcDEFyiYqwertyzzrttt'], ['kobbkrtfdoiyyiuyrtfdoiyyyiuyoxnne'], ['kobbkrtfdxyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghioiyyiuyoxnne'], ['yseRBkobbkrtfdoiyytttxtiuyoxnne'], ['kobrbkrtfdoiyyiuyrtfdoiyyykobbkrtfdoiyyiiuyoxunnee'], ['KiUHqiz'], ['bbkrtfdoiyxyz'], ['BSco'], ['ttztxuxzzzrttt'], ['xyzabcDEFgEhi'], ['yseRyRBzbRTzbcDEFzyiYqwertyDEFyi'], ['kobbkobbkrtfdoiyyyiuyoxnnekrtfdoiyyyiuyoxnne'], ['zbcdafgheyzzodzbcdafgheyzzouzzzauzzzza'], ['QWERRTzbcDEFyiEYqwerty'], ['RQWERTzbcDEFEyiYqwertYy'], ['xyzazbccDE'], ['kobbkrrtfdoiyyyiuyoxnne'], ['azbcdafghijzouzzza'], ['azbcdaftttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzouzzza'], ['kobbkrttttxuxkobbkrtfdoiyyiuyoxnnetzQWERTzbcDEFyiYqwertyzzrtttoxnn'], ['xyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzaytettxuxzzzrttt'], ['zbcdafzbcdafgheyzzouzzzaghijklmnoprstuvwxeyzzouzzza'], ['xyzazbcFyibbkrtfdoiyyiuzbbkrtfdoiyyiuzbcdafghQWERTzbcDEFyyiYqwertyeyzzouzyzzaybcdafghQWERTzbcDEFyiYqwertyeyzzouzzzay'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzouzzza'], ['QWERTzbcDEFzyitYqwerty'], ['tttuxiozmcnrvxaxeeeeekzpwiktglbghzbcDEFyiojxxwnovdsmrqajx'], ['xyzazbccDzbcdafzbcdafgheyzzouzzzaghijklmnoprstuvwxeyzzouzzzaE'], ['QWERzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaTzbcDEFyiEYqwerty'], ['zbDEFyi'], ['QYPV'], ['WQWE'], ['QWERTzbQWERTzbcDEFyiEYqwertycDEFyiYqwertYy'], ['QWERTzbcDErty'], ['RQWERTzbcDEFEyiYqwertYQWERTzbcDEFyiYqwertYy'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzouzzza'], ['xyzxyzazbcDEFyiabcDEFgEhi'], ['QWERTzbcDEFzyiYqwertQy'], ['zbcgdafghzbcdafdgheyzzouzzzauzzzza'], ['QWErRTzbcDEFzyierty'], ['tttuxiozmcnrvxaxeeeeekzpwxiktglbghojxxwnovdsmrqajx'], ['QEWERTzbcDErtyYqwerty'], ['xyzazbccDzbcdafzbcdafgheyzzouzzzaghijklmnopazbcdafghijzouzzzarstQWERTzbQWERTzbcDEFyiEYqwertycDEFyiYqwertYyuvwxeyzzouzzzaE'], ['UVWXXYZuvwxya'], ['zyzzay'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvsxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajx'], ['xyzazzzqaiozzzbcDEFgEhi'], ['xyzazbcDEFyiQWERTzbQWERTzbcDEFyiEYqwertycDEFyiYqwertYy'], ['QWERTzbcDEFzyiYqwerxyzabcDEzbcydafghijklmnopxyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzaytttxuxzzzrtttrstuvwxey'], ['azbcdafgzza'], ['xyztazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzay'], ['QWERzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzawTzbcDEFyiEYtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxqwerty'], ['ttttxuxzzzrtazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzouzzzat'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzza'], ['bbkrtfdoiyyiuzbcdafghQWERTzbcDEFyixyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzaytttxuxzzzrtttYqwertyeyzzouzzzay'], ['yseRBkobbkrtfdkozbcdafzbcdafgheyzzouzzzaghijklmnoprstuvwxeyzzouzzzaiyytttxtiuyoxnne'], ['zbcdafghijklmnoprstuvwxeyyseRyRBzbRTzbcDEFzyiYqwertyDEFyizzouzzza'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['abcdefftttxteedcbtttuxiozmcnrvxaxeeeeekzpwiktglbghzbcDEFyiojxxwnovdsmrqajxa'], ['p'], ['QEWERTzbcDErtywYqwerty'], ['xyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzaytttxuxzrttt'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnbbkrtfdoiyyiuyhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['RQWERTzbcWDEFEyiYqwertYQWERTzbcDEFyiYqwertYy'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzayzzaybcdafghQWERTzbcDEFyiYqwertyeyzzouzzzayapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajx'], ['xyzazbcFyibbkrtfdoiyyiuzbbzkrtfdoiyyiuzbcdafghQWERTzbcDEFyyiYqwertyeyzzouzyzzaybcdafghQWERTzbcDEFyiYqwertyeyzzouzzzay'], ['kobbkobbkrtfdoiyyyiuyoxnnekrtfdoiyyyiuyoxnone'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaauaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajx'], ['zbzzzqaiozzzRqwertzyDEFyi'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabczbcdafzbcdafgheyzzouzzzaghijklmnoprstuvwxeyzzouzzzaDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzouzzza'], ['kobbkobbkrtfdoiyyyiduyoxnnekrtfdoiyyyiuyoxnone'], ['bbkrtfdoiyyy'], ['QWERTzbcDEFyiYqwertyYy'], ['ttttx'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiaiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzayzzaybcdafghQWERTzbcDEFyiYqwertyeyzzouzzzayapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajx'], ['kobbkrtfdxyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghoiyyiuyoxnnetx'], ['yseRyyB'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnbbkrtfdoiyyiuyhpbcttrrrzkurifkobbkobbkrtfdoiyyyiuyoxnnekrtfdoiyyyiuyoxnnepqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnbbkrtfdoiyyiuyhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwlleyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['ttttxuxxzzzrttt'], ['bbkrtfdoiyyz'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijxyzazzzqaiozzzbcDEFgEhiklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnbbkrtfdoiyyiuyhpbcttrrrzkurifkobbkobbkrtfdoiyyyiuyoxnnekrtfdoiyyyiuyoxnnepqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['zkobbkrtfdoiyyyiuyoxnnebcdafgheyzzouzzza'], ['abcdeffededcba'], ['kobbkrtfdoiyyiuyrtfdyiuyoxnne'], ['UVWXwYZuvwxya'], ['tbbkrtfdoiyyztttxuxkobbkrtzzrttt'], ['xyzazbcFyibbkrtfdoiyyiuzbbzkrtfdoiyyiuzbcdafghQWERTtttxuxtzQWERTzbcDEFyiYqwertyzzrtttzbcDEFyyiYqwertyeyzzouzyzzaybcdafghQWERTzbcDEFyiYqwertyeyzzouzzzay'], ['xyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTxyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzayzbcDEFyiYqwertyeyzzouzzzaytettxuxzzzrttt'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlanufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['xyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTxyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzzzzaytettxuxzzzrttt'], ['tttuxiozmcnkrvxaxeeeeekzpwiktglbghojxxwnovdsmrqajx'], ['zbzzzqaiozzzRTzbcDEFzyiYqwertzyDEFyiYqwerty'], ['zbcdafzbcdafgheyzzouzzzaghijklmnoprstuvwxeyzzouzz'], ['QeWERTYqwerty'], ['tttuxiozmcnrvxaxeeeeekzpwxiktglbghojxxwnovdsmrqtajx'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttirrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajx'], ['tttuxiozmcnrvxaxazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnbbkrtfdoiyyiuyhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzzaeeeeekzpwiktglbghojxxwnovdsmrqajx'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcgdafghzbcdafdgheyzzouzzzauzzzzafzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['zbcdafghijklmnoprstuuvwxeyzzouzzza'], ['zbcdafgheyzzozbcdafgheyzzouzzzauzza'], ['zbcdtttuxiozmcnrvxaxeeeeekzpwxiktglbghojxxwnovdsmrqtajxafzbcdafgheyzzouzzzaghijklmnoprstuvwxeyzzouzzza'], ['bbkbrtfdoifyyz'], ['xyzbbkrtfdoiyyyxyzazbcDEFyiabcDEFgEhi'], ['zbDEF'], ['ttt'], ['ysseRyyB'], ['kobbkrtfduyoxnne'], ['zbcdafzbcdafgheyzzouzzzaghigjklmnoprstuvwxeyzzouzzza'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaauaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofmzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajx'], ['yseRBkobbkrtfdxyzababcdeffededcbacDEFghioiyyiuyoxnne'], ['xyzazbcFyibbkrtfdoifyyiuzbcdafghQWERTxyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzzzzaytettxuxzzzrttt'], ['azbcdafghijzouzzzza'], ['QWERRTzbcDEFyiEYqweyrty'], ['QWUVWXYZuvwxya'], ['QWERTzbcazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzzaDEFyiYqwerty'], ['ysseRyByB'], ['xyzazbccDzbcdafzbcdafgheyzzouzzzaghijklmnopazbcdafghijzouzzzarstQWERTzbQWERTzbcDEFyseRBkobbkrtfdoiyyiuyoxnneyiEYqwertycDEFyiYqwertYyuvwxeyzzouzzzaE'], ['ysseRyByBB'], ['xyzazbcFyibbkrtfdoiyyiukzbcdafghQWERTxyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzayzbcDEFyiYqwertyeyzzouzzzaytettxuxzzzrttt'], ['zBScobDEF'], ['tttxuxzzzrtttttxuxkobbkrtfdoiyyiuyoxnnetzQWERTzbcDEFyiYqwertyzzrttt'], ['zbcdafgheyzzbbkrtfdoiyyzodzbcdafgheyzzouzzzauzzzza'], ['kobbkrrtfdoiyyyiuyoxnnne'], ['seRyRQWERTzbcWDEFEyiYqwertYQWERTzbcDEFyiYqwertYyB'], ['yseRByyB'], ['zbzbzzzqaiozzzRqwertzyDEFyicdafgheyzzozbcdafgheyzzouzzzauzza'], ['bbkrtfdoixyzazbcDEFyiQWERTzbQWERTzbcDEFyiEYqwertycDEFyiYqwertYyyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzayzbcdafzbcdafgheyzzouzzzaghigjklmnoprstuvwxeyzzouzzza'], ['tttuxiozmcnrvxaxeeeeekzpwxiktglbghojxmrqtajx'], ['zbcdafgheyzzozbcdafgheyzzouzzzauzzztttuxiozmcnrvxaxeeeeekzpwxiktglbghojxmrqtajx'], ['bboiyyiuy'], ['dSJxyzazbcDEFyiXDCfwPU'], ['bbkrkooxnnetfdoiyxyz'], ['zbzzzqysseRyyBiozzzRqwertzyDEFyi'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnbbkrtfdoiyyiuyhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvzouzzza'], ['kobrbkrtfdoiyyiuyrtrfdoiyyykobbkrtfdoiyyiiuyoxunnee'], ['xyzbbkrtfdoiyyyxzbcdafgheyzzozbcdafgheyzzouzzzauzzztttuxiozmcnrvxaxeeeeekzpwxiktglbghojxmrqtajxyzazbcDEFyiabcDEFgEhi'], ['zbDseRyRQWERTzbcWDEFEyiYqwertYQWERTzbcDEFyiYqwertYyBDEF'], ['kobbkrtfdoiysseRyyByyiuyrtfdyiuyoxnne'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaauaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofmzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghorjxxwnovdsmrqajx'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzamgwondjofmzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghorjxxwnovdsmrqajx'], ['kxyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzayiyyiiuyoxne'], ['RQyWERTzbckobbkrtfdxyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghoiyyiuyoxnnetxDEFEyiYqwertYy'], ['QWERTzbcDEFFzzyierty'], ['QWERTzbcDEFzyiYqwerxyzabcDrEzbcydafghijklmnopxyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzaytttxuxzzzrtttrstuvwxey'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcgdafghzbcdafdgheyzzouzzzauzzzzafzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvnlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['zbcgdafghzbcdafdgheyzzouzzzauzzzzakobbkrrtfdoiyyyiuyoxnne'], ['tttuxiozQWERTzbcDErtymcnkrvxaxeeeeekzpwiktglbghojxxwnovdsmrqajx'], ['xttttxuxzzzrtttzazbcDEFyi'], ['UVWXwxUya'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEQWERTYqwertyzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakreteptxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzouzzza'], ['tttuxiozmcnrvxaxeeeeekzpwxiktglbghojxxwnovdsmrqaajx'], ['WQW'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlanufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['QWErRTzbcDDEFzyierty'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiaiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopgzzzqaiozzzlbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzayzzaybcdafghQWERTzbcDEFyiYqwertyeyzztouzzzayapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajx'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwikxyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghimjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['yssRyBBB'], ['QWERTzbcDEFzyiYqwerxyzabcDEzbcydafghijklmnopxyzazbcFyifghQWERTzbcDEFyiYqwertyeyzzouzzzaytttxuxzzzrtttrstuvwxey'], ['bbkrtfdoiyyiuzbcdafghQWERTzbcDEFyixyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzKiUHqizzaytttxuxzzzbbkrtfdoiyyytyeyzzouzzzay'], ['tttt'], ['ttxttxuxzzzrttt'], ['tttuxiozmcnrvxaxeeeeekzpwxiktglbghojxxwnovdsmrqtkobbkrtfdoiyyyiuyoxnneajx'], ['tttuxiozmcnrvxaxazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzzaeeeeekzpwiktglbghojxxwnovdsmrqajx'], ['xyzbbkirtfdoiyyyxyzazbcDEFyiabcDEFgEhi'], ['azbcdafghijzfouzzzza'], ['QeWERTYqwert'], ['KadH'], ['xttttxuxzzzrtttyzazbcDEFyiQWERRTzbcDEFyiEYqwerty'], ['ysseRytttuxiozmcnkrvxaxeeeeekzpwiktglbghojxxwnovdsmrqajxByBB'], ['kobbkrtfdoiysseRyyByyiuyrtfdyiutyoxnne'], ['kobbkobbkrtfdoiyyyiuyoxnnekrtfdoiyyyiuttttxuxzzzrtttyoxnne'], ['yseRyyBxyzazbcFyibbkrtfdoiyyiuzbcdbboiyyiuyt'], ['QWERTzbcazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrErrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzzaDEFyiYqwerty'], ['bazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnbbkrtfdoiyyiuyhpbcttrrrzkurifkobbkobbkrtfdoiyyyiuyoxnnekrtfdoiyyyiuyoxnnepqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzzabkbrtfdoiyxyzabcDEFghi'], ['tbbkrtfdoiyyztttxuxkobbkrtzzrtzbzzzqaiozzzRqwertzyDEFyitt'], ['xyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFzbDEFyiyiYqwertyeyzzouzzzaytttxuxzrttt'], ['QWErRTzbcDDEFzyiertty'], ['abcdeffededfcba'], ['QWERTzbcDEFzyiYqwerxyzabcDEzbcydafghijklmnopxyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEgFyiYqweabcdeffededfcbartyeyzzouzzzaytttxuxzzzrtttrstuvwxey'], ['ttttt'], ['tbbkryseRyyBtfdoiyyztttxuxkobbkrtzzrtzbzzzqaiozzzRqwertzyDEFyitt'], ['xyzlmnzbcdafzbcdafgheyzzouzzzaghigjklmnoprstuvwxeyzzouzzzaprstuvwxeyzzouzzzaFghi'], ['QWEQWERTzbcazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzzaDEFyiYqwertyerty'], ['xattttxuxzzzrtttzazbcDEFyi'], ['QWERTzbcDEFzyiYqwerxyzabcDEzstuvwxey'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkuriiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajx'], ['ysseRyy'], ['xyzazzzazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzzaqaiozzzbcDEFgEhi'], ['zbzzzqaiozzzRqwerQWERzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaTzbcDEFyiEYqwertyFyi'], ['zbcDEFy'], ['ttttxuxzzzrtazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfQWERTzbcDEFzyiYqwerxyzabcDEzbcydafghijklmnoprstuvwxeyzzouzaFghitywmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzouzzzat'], ['bbkrtfkdoiyyz'], ['ttttxuxxzzzrtttt'], ['xttttxuxzzcDEFyi'], ['ttxttxuxztbbkryseRyyBtfdoiytttxuxkobbkrtzzrtzbzzzqaiozzzRqwertzyDEFyittttt'], ['ttzrttxyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzaytttxuxzzzrtttt'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwikQWERzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzawTzbcDEFyiEYtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxqwertytlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzzaouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzouzzza'], ['kobbzbcdafzbcdafgheyzzouzzzaghigjklmnoprstuvwxeyzzouzzzaiyyyiduyoxnnekrtfdoiyyyiuyoxnone'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijxyzazzzqaiozzzbcDEFgEhiklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnbbkrtfdoiyyiuyhpbcttrrrzkurifkobbkobbkrtfdoiyyyiuyoxnnekrtfdoiyyyiuyoxnnepqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxxyzazbccDzbcdafzbcdafgheyzzouzzzaghijklmnopazbcdafghijzouzzzarstQWERTzbQWERTzbcDEFyiEYqwertycDEFyiYqwertYyuvwxeyzzouzzzaEeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrdSJxyzazbcDEFyiXDCfwPUqajxghijzouzzza'], ['WQWazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzzaE'], ['tttuxiozmcnrvxaxeeeeekzpxyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzaytttxuxzrtttghojxmrqtajx'], ['yseRBkodedcbacDEFghioiyyiuyoxnne'], ['zbcdafghijklmnvoprstuuvwxeyzzouzzza'], ['zbcgdafghzbcdafdgheyzzouzzzauzzzzakobbkrQWERTzbcDEFzyitYqwertyrtfdoiyyyiuyoxnne'], ['WW'], ['akeobbkrrtfdoiyyyiuyoxnnebcdtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretebbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzayeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxefftttxteedcba'], ['xyzazbcFyibbkrtfdoiyyiuzbbzkrtfdoiyyiuzbcdafghQWERTzbcDEFyyiYqwerytyeyzzouzyzzaybcdafghQWERTzbcDEFyiYqwertyeyzzouzzzay'], ['UVxWXYZuvwxya'], ['zbcgdafghzbcdafdgheyzzouzzzauzzzzakobbkrkobbkrtfdoiysseRyyByyiuyrtfdyiutyoxnnerotfdoiyyyiuyoxnne'], ['zbzzzqysseRyyeBiozzzRqwertzyDEFyi'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknfsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlanufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['RYQWERTzbcDEFEyiYqwertYy'], ['zbcdafgheyzzbbkcrtfdoiyyzodzbcdafgheyzzouzzzauzzzza'], ['WQWpE'], ['xyzazbcFyibbkrtfdoiyyiuzbbzkrtfdoiyyiuzbcdafghQWERTzbcDEFyyiYqwertyeyzzouzyzzaybcdafghQWERTzbcDEbFyiYqwertyeyzzouzzzay'], ['ztzzzaa'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaauaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofmzhhvyscurovmxebakretepxhapqjriulawnpeyxvbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajx'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwikQWERzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzawTzbcDEFyiEYtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxqwertytlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpbbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzaywiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzzaouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzouzzza'], ['RyB'], ['tttuxiozmcnrvxaxeeeeekzpwxiktglbghojxmzzzqaiozzzrqtajx'], ['kobbkrtfdoiyyyiuyoxne'], ['QWERTzbcDEFzyiYqwerxyzabcDEzbcydafghijklmnopxyzazbcFyifghQWERTzbcDEFyiYqwertyeyzzouzzzzaytttxuxzzzrtttrstuvwxey'], ['xyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYkobbkrtfdoiysseRyyByyiuyrtfdyiuyoxnneqwertyeyzzouzzzayssRyBBBytttxuxzrttt'], ['QWERTzbcDEFzyiYqwerxyzabcDEzbcydafghijklmnopxyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEgFyiYqweabcdxttttxuxzzzrtttzazbcDEFyieffededfcbartyeyzzouzzzaytttxuxzzzrtttrstuvwxey'], ['QWErRTzbcDDEFzyierttytttxuxzzzrtttttxuxkobbkrtfdoiyyiuyoxnnetzQWERTzbcDEFyiYqwertyzzrttt'], ['tttuxiozmcnrvxaxeeeeekyseRByyBzpwxiktglbghojxxwnovdsmrqaajx'], ['xyzbbkirtfdoiyyyxyzazbcDhEFyiabcDEFgEhi'], ['tttuxiozmcnrvxaxeeeeekyseRByyBzpwxiktsmrqaajx'], ['QEWERTzbYcDErtywYqwerty'], ['kobbkrtkfduyoxnzbDEFne'], ['tttuxiozmcnrvxaxeeeceekzpwxiktglbgQWERTzbcDErtyhojxmzzzqaiozzzrqtajx'], ['tttuxiozmcnrvxaxyzazbcFyibbkrtfdoiyyiuzbbzkrtfdoiyyiuzbcdafghQWERTtttxuxtzQWERTzbcDEFyiYqwertyzzrtttzbcDEFyyiYqwkobbkrtfdoiyyyiuyoxnneertyeyzzouzyzzaybcdafghQWERTzbcDEFyiYqwertyeyzzouzzzayxeeeeekyseRBByyBzpwxiktsmrqaajx'], ['QWERzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzawTzbcDEFyiEtYtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxqwerty'], ['kobyrbkrtfdoiyyiuyrtrfdoiyyykobbkrtfdoiyyiiuyoxunnee'], ['QWERTzbazabcDEzstuvwxey'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhttztxuxzzzrtttiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['zbcdafgheyzzozbcdatttuxiozmcnrvxaxeeeeekzpwxiktglbghojxxwnovdsmrqajxfgheyzzouzzzauzza'], ['ZnjGWPk'], ['czBScobDEF'], ['zbcdafgheyzzbbkrtfdoiyyzodzbcdafgheykobbkrtfdxyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghoiyyiuyoxnnetxzzouzzzauzzzza'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcgdafghzbcdafdgheyzzouzzzauzzzzafzhhvyscurovmxebakretepxhapqjriulawfnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvnlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['tbbkryseRyyBtfdoiyyztttxuxkobbkrtzzrtzbzezzqaiozzzRqwertzyDEFyitt'], ['abcdeffQWERTzbQWERTzbcDEFyiEYqwertycDEFyiYqwertYyededfcba'], ['zbzzzqaiozzzRqzwertzyDEFyi'], ['kobbkrttkobbkrrtfdoiyyyiuyoxnneTzbcDEFyiYqwertyzzrtttoxnn'], ['kobbkobbkrtfdoiyyyiQWERzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaTzbcDEFyiEYqwertyuyoxnnekrtfdoiyyyiuyoxnne'], ['xttttxuxzzzrtttyzazb'], ['kobbkobbkrtfdoiyyyiQWERzbcdafgheyzzodzbcdafgheyzzoxyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiuzzzauzzzzaTzbcDEFyiEYqwertyuyoxnnekrtfdoiyyyiuyoxnne'], ['zbzcdafghezyzzouzzza'], ['xyzazzzqaiozzzbcDEFgEhEi'], ['ttxttxuxzzzrztt'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqmrqajx'], ['QWERTzbcDEFzyiYqwerxyzabcDEzbcydafghijklmnopxyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEgFyiYqweabcdxttttxuxzzzrtttzazbcDZnjGWPkytttxuxzzzrtttrstuvwxey'], ['zbcdafgheyzzbbkrtfdoiyyzodzbcdafgheykobbkrtfdxyzabcDazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnbbkrtfdoiyyiuyhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvzouzzzaghoiyyiuyoxnnetxzzouzzzauzzzza'], ['yseRyRBzbRTzbttttxuxzzzrtttcDEFzyiYqwertyDEFyi'], ['kobbkrrtfdoiyyyzbcdafgheyzzozbcdafgheyzzouzzzauzzztttuxiozmcnrvxaxeeeeekzpwxiktglbghojxmrqtajxiuyoxnnne'], ['xyzazbcFyiyseRBkobbkrtfdoiyyiuyoxnnebbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzaytttxuxxzzzrttt'], ['kobbkobbkrtfdoiyyyiuyoxnnekseRyBzrtttyoxnne'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiaiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzayzzaybcdafghQWERTzbcDEFyiYqwerttxttxuxzzzrtttxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajx'], ['WE'], ['tttuUVxWXYZuvwxyaxiozmcnrvxaxeeeeekzpwiktglbghojxxwnovdsmrqajx'], ['Kqiz'], ['yseRBkobbkrtfdxyzababcdeffededcbacDEFghioiQWERTzbcDEFyiYqwertyYyyyiuyoxnne'], ['ysextiuyoxnne'], ['zbcdtttuxiozmcnrvxaxeeeeekzpwxiktglbghojxxwnUVWXYZuvwxyaovdsmrqRYQWERTzbcDEFEyiYqwertYytajxafzbcdafgheyzzouzzzaghijklmnoprstuvwxeyzzouzzza'], ['ttztxuxzzzrtttazbcdafghijzouzzza'], ['zbcdafgheyzzozbcdafgheyzzzouzzzauzza'], ['RQyWERTzbckobbkrtfdxyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghoiyyiuyoxnnetxabcdefftttxteedcbtttuxiozmcnrvxaxeeeeekzpwiktglbghzbcDEFyiojxxwnovdsmrqajxaDEFEyiYqwertYy'], ['QWERTzbcazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrErrzkurifpqjyypugyhiiixyrzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzzaDEFyiYqwerty'], ['yseRBkodeodcbacDEFghioiyyiuyoxnne'], ['WQWpExyzazbcFyibbkrtfdoiyyiuzbbzkrtfdoiyyiuzbcdafghQWERTtttxuxtzQWERTzbcDEFyiYqwertyzzrtttzbcDEFyyxyzabcDEzbcydafghijklmnoprstuvwxeyzzouzaFghiqwertyeyzzouzzzay'], ['QWERzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzawTzbcDEFyiEtYtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfty'], ['tttuxiozQWERkobbkobbkrtfdoiyyyiuyoxnnekrtfdoiyyyiuyoxnoneovdsmrqajx'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjygypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzamgwondjofmzhhvyscurovmxebRyBakretepxhaxyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghipqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghorjxxwnovdsmrqajx'], ['AaXcik'], ['yseRBkodDEFghnne'], ['rds'], ['tttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzamFghiiiiiiiiiiiinprlxfaaauaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofmzhhvyscurovmxebakretepxhapqjriulawnpeyxvbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajx'], ['ttttxuxzzzrtaxyzxyzazbcDEFyiabcDEFgEhizbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzouzzzat'], ['RQyWERTzEbckobbkrtfdxyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghoiyyiuyoxnnetxDEFEyiYqwertYy'], ['kobbkrtfdoiyyiuyoxtttuxiozQWERkobbkobbkrtfdoiyyyiuyoxnnekrtfdoiyyyiuyoxnoneovdsmrqajxnne'], ['tttuxiozmcnrvxaxeeeeekzpwiktglbghoojxxwnovdsmrqajx'], ['kobbkobbkrtfdoiyyyiuyoxnnekrtfdoiyyyyiuyoxnone'], ['QWERTzbcDEFzyiYqwerxyzabcDEzbbcydafghijklmnopxyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzaytttxuxzzzrtttrstuvwxey'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwikQWERzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzawTzbcDEFyiEYtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvtttxuxzQWERTzbcDEFyiYqwertyzzrtttdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxqwertytlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurxovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzzaouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzouzzza'], ['yseysseRytttuxiozmcnkrvxaxeeeeekzpwiktglbghojxxwnovdsmrqajxByBBRBkobbkrtfdoiyyiuyoxnne'], ['bbbkrtfdoiyxyz'], ['QWERRTzbcDEDFyiEYqweyrty'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlanufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlfzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['QWERzbcnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxqwerty'], ['xyzbbkirtfdoiyyyxyzazbcDhEFyiabcDEFgEczBScobDEFhi'], ['tttuxiozmcnrvxaxeeeeekzpwxiktglbghojxxwnovdsmrqtkobbkrtfdoiyyyiiuyoxnneajx'], ['zbcdafgheyzzozbcdafgheyzzouzzzauzzztttuozmcnrvxaxeeeeekzpwxiktglbghojxmrqtajx'], ['kobbkrtfdxyzabcDEzbcydafghijkmnoprstuvwxeyzzouzzzaFghioiyyiuyoxnne'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlanufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlfzhkemjxbopglbghojxxwnxjyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['xyzabcDEzbcydafghijklmnoprstuvwxeyzzoiuzaFghi'], ['abcdeffQWERTzbzbcgdafghzbcdafdgheyzzouzzzauzzzzakobbkrrtfdoiyyyiuyoxnneQWERTzbcDEFyiEYqwertycDEFyiYqwertYyededfcba'], ['WQ'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijxyzazzzqaiozzzbcDEFgEhiklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnbbkrtfdoiyyiuyhpbcttrrrzkurifkobbkobbkrtfdoiyyyiuyoxnnekrtfdoiyyyiuyoxnnepqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdpzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['tttuxiozmcnrvxaxeeeeekzpwxiktglbhghojxmrqtajx'], ['QeWERTYqwQert'], ['QxyzabcDEFgEhiWERTzbcDEFzyiYqwerty'], ['pp'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktzbzzzqaiozzzRqzwertzyDEFyilvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['xyzxyzaxzbcDcDEFgEhi'], ['yseRBkodeodcbacDEFoghioiyytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqmrqajxiuyoxnne'], ['zbczbzzzqaiozzzRqwerQWERzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaTzbcDEFyiEYqwertyFyigdafghzbcdafdgheyzzouzzzauzzzzakobbkrrtfdoiyyyiuyoxnne'], ['tbbkryseRyytttuxiozmcnrvxaxazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzzaeeeeekzpwiktglbghojxxwnovdsmrqajxBtfdoiyyztttxuxkobbkrtzzrtzbzezzqaiozzzRqwertzyDEFyitt'], ['QWERTzbcDEFzyiYqwerxyzabcDEzbcydafghijklmnopxyzazbcFyibbkrtfdoiyyiuzbcdafxghQWERTzbcDEgFyiYqweabcdxttttxuxzzzrtttzazbcDZnjGWPkytttxuxzzzrtttrstuvwxey'], ['Qrty'], ['ttUVxWXYZuvwxyatuxiozmcnrvxaxeeeeekzpwiktglbghojxxwnovdsmrqajx'], ['WQWazbcdafghifjzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqahijzouzzzaE'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaabbbkrtfdoiyxyzaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgiheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlanufkwcyjxkiyhfwmbvdzmssxxrqajxghijzouzzzQWErRTzbcDDEFzyierttytttxuxzzzrtttttxuxkobbkrtfdoiyyiuyoxnnetzQWERTzbcDEFyiYqwertyzzrttta'], ['xttttxuxzzzrtttyzaxzbcDEFyi'], ['tttxuxzQWERTzBScobcDEFyiYqwertyzzrttt'], ['zbczbzzzqaiozzzRqwerQWERzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaThzbcDEFyiEYqwertyFyigdafghzbcdafdgheyzzouzzzauzzzzakobbkrrtfdoiyyyiuyoxnne'], ['QWERTzbccDEFyiYqwertYy'], ['zbcdafghazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwikxyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghimjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzzaeyzzouzzza'], ['abcdefftttxtazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlanufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzzaeedcba'], ['QWEQWERTzbcazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzzaDEFyiYqwertyerty'], ['tttuxiozmcnrvxaxeeeeekzpbbkrtfdoiyyyxyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyezbcdtttuxiozmcnrvxaxeeeeekzpwxiknUVWXYZuvwxyaovdsmrqRYQWERTzbcDEFEyiYqwertYytajxafzbcdafgheyzzouzzzaghijklmnoprstuvwxeyzzouzzzayzzouzzzaytttxuxzrtttghojxmrqtajx'], ['tttuxiozmcnrvxaxesnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaatqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxxbopglbghojxxwnovdsmrqajx'], ['kobbkobbkrtfdoiyyyiuyoxnnekrtfdoiyyzbczbzzzqaiozzzRqwerQWERzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaTzbcDEFyiEYqwertyFyigdafghzbcdafdgheyzzouzzzauzzzzakobbkrrtfdoiyyyiuyoxnneyiuyoxnne'], ['xyzazbcFyibbkrtfdoiyyiuzbbzxyzlmnzbcdafzbcdafgheyzzouzzzaghigjklmnoprstuvwxeyzzouzzzaprstuvwxeyzzouzzzaFghiuzyzzaybcdafghQWERTzbcDEFyiYqwertyeyzzouzzzay'], ['azbcdafghzijzouzzzza'], ['tttuxiozmcnrvxaxazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdnzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzzaeeeeekzpwiktglbghojxxwnovdsmrqajx'], ['kobbkobbkrtfdoiyyyiQWERzbcdafzauzzzzaTzbcDEFyiEYqwertyuyoxnnekfrtfdoiyyyiuyoxnne'], ['tttxtt'], ['zttzzzaa'], ['RQWERTzbcDYiEFEyiYqwertYy'], ['RQWERTzbcWDExyzazbcFyibbkrtfdoiyyiuzbbzkrtfdoiyyiuzbcdafghQWERTzbcDEFyyiYqwertyeyzzouzyzzaybcdafghQWERTzbcDEFyiYqwertyeyzzouzzzayFEyiYqwertYQWERTzbcDEFyiYqwertYy'], ['ysseRyBkobbkrtfdxyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghoiyyiuyoxnnetxyB'], ['xttttxuxzzzrtttyzazbcDEFzyi'], ['xyzazbccDzbcdafzbczdafgheyzzouzzzaghijklmnoprstuvwxeyzzouzzzaE'], ['kobbkrttkobbkrrtfdoiyyyiuyoxKiUHqiznneTzbcDEFyiYqwertyzzrtttoxnn'], ['tttuxiozmcnrvxaxeeeeekzpbbkrtfdoiyyyxyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyezbcdtttuxiozmcnrvxaxeeeeekzpxyzazbcFyiyseRBkobbkrtfdoiyyiuyoxnnebbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertyeyzzouzzzaytttxuxxzzzrttthwxiknUVWXYZuvwxyaovdsmrqRYQWERTzbcDEFEyiYqwertYytajxafzbcdafgheyzzouzzzaghijklmnoprstuvwxeyzzouzzzayzzouzzzaytttxuxzrtttghojxmrqtajx'], ['xyzbbkirtfdoiyyyxyzazbcDEFyiiabcDEFgEhi'], ['tttuxiozmcnrvxaxeeeeekzpwikttztxuxzzzrtttazbcdafghijzouzzzatglbghzbcDEFyiojxxwjnovdsmrqajx'], ['azbhcdafghijzouzzza'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnQWERzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzawTzbcDEFyiEtYtttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovsmrqajxqwertyrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlanufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrqajxghijzouzzza'], ['kobbkobbkrtfdoiyyyiuyoxnnekrtfdoiyyzbzczbzzzqaiozzzRqwerQWERzbcdafgheyzzodzbcdafgheyzzouzzzauzzzzaTzbcDEFyiEYqwertyFyigdafghzbcdafdgheyzzouzzzauzzzzakobbkrrtfdoiyyyiuyoxnneyiuyoxnne'], ['QWERTzbcDEFzyiYqwerxyzabcDEzbcydafghijklmnopxyzazbcFyibbkrtfdoiyyiuzbcdafghoQWERTzbcDEgFyiYqweabcdxttttxuxzzzrtttzazbcDEFyieffededfcbartyeyzzouzzzaytttxuxzzzrtttrstuvwxey'], ['NZDMITxGSp'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxweeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyzbzzzqaiozzzRqzwertzyDEFyiYyuvwxeyzzouzzzaEeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghojxxwnxyzabcDEFgEhiovdsmrdSJxyzazbcDEFyiXDCfwPUqajxghijzouzzza'], ['azbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaxeeeeekzpwiktazbcdafghijzouzzzaazbcdaftttuxiozmcnrvxaUVWXYZuvwxyaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaabbbkrtfdoiyxyzaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwwcyjxkiyhfwmbvdzmssxxpwdoaynylrlzhkemjxbopglbghojxxwnovdsmrqajxghijzzbcdafgiheyzzodzbcdafgheyzzouzzzauzzzzaouzzzalvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaaaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofzhhvyscurovmxebakretepxhapqjriulawnpeyxvlanufkwcyjxkiyhfwmbvdzmssxxrqajxghijzouzzzQWErRTzbcDDEFzyierttytttxuxzzzrtttttxuxkobbkrtfdoiyyiuyoxnnetzQWERTzbcDEFyiYqwertyzzrttta'], ['xyzazbcFyibbkrtfdoiyyiuzbcdafghQWERTzbcDEFyiYqwertytttuxiozmcnrvxaxeeeeekzpwiktlvbjjvydknsnhpbcttrrrzkurifpqjyypugyhiiixyzabcDEzbcydafghijklmnoprstuvwxeyzzouzzzaFghiiiiiiiiiiiinprlxfaaauaaaaaaaaztqdwllntofsacsitzzlcnvtvlztxxmgwondjofmzhhvyscurovmxebakretepxhapqjriulawnpeyxvlnufkwcyjxkiyhfwmbvdzmssxxpwoaynylrlzhkemjxbopglbghorjxxwnovdsmrqajxeyzzouzzzaytttxuxzrttt']]\n    results = ['u', 'u', '', '', '', 'a', 'o', '', '', '', 'i', '', 'o', 'e', 'u', 'i', 'i', 'u', 'u', 'o', 'e', '', '', 'u', 'e', 'i', 'e', '', '', 'e', '', 'e', 'a', '', 'i', 'e', 'i', 'i', 'u', 'e', '', 'e', 'e', 'u', 'o', 'i', 'i', 'u', 'i', 'i', 'e', 'i', 'i', '', 'i', '', 'i', 'e', 'i', 'o', 'i', 'i', 'o', 'i', '', 'e', '', 'i', 'i', 'i', 'e', 'e', 'e', 'o', 'o', 'i', 'i', 'u', '', 'o', 'i', 'e', 'e', '', 'a', '', '', 'e', 'e', '', 'e', 'i', 'e', 'e', 'e', 'u', 'e', '', 'e', 'u', 'i', 'i', 'i', 'i', 'u', 'i', 'i', 'i', 'u', 'i', 'i', '', 'o', 'a', '', 'e', 'e', 'u', '', '', 'u', 'E', 'e', 'o', 'u', 'e', 'u', 'o', 'e', 'i', '', 'i', 'a', 'o', 'e', 'e', 'E', 'E', 'e', 'a', 'e', 'e', 'e', 'a', 'o', 'E', '', 'e', 'i', '', 'e', 'i', 'a', 'E', 'o', 'e', 'o', 'o', 'a', 'u', '', 'e', 'e', 'e', 'E', 'a', 'a', 'i', 'E', 'o', 'E', 'e', 'E', 'e', '', 'e', 'e', 'e', 'e', 'e', 'e', 'E', 'o', 'E', 'e', 'E', 'i', 'e', '', 'u', 'E', 'e', 'u', 'u', 'a', 'u', 'u', 'E', 'u', '', 'e', 'E', 'a', 'E', 'E', 'e', 'u', 'u', 'a', 'e', 'e', 'a', 'E', 'e', 'e', 'a', 'i', 'E', 'o', 'e', 'E', 'e', 'e', 'E', 'u', 'u', 'i', 'e', 'a', 'e', 'a', 'e', 'E', 'o', 'o', 'a', 'u', 'a', 'E', 'e', 'e', 'e', 'a', 'E', 'e', 'u', 'o', 'i', '', 'a', 'e', 'E', 'E', 'a', 'E', 'E', 'o', 'e', 'i', 'e', 'E', 'e', 'e', 'i', 'o', 'i', 'u', 'e', 'E', 'a', 'E', 'a', 'o', 'e', 'E', 'a', 'o', 'a', 'i', 'a', 'o', 'i', 'e', 'u', 'u', 'e', 'e', 'e', 'a', 'o', 'E', 'i', 'u', 'i', 'e', 'E', 'u', 'a', 'e', '', 'e', 'u', 'a', 'a', 'o', 'a', 'E', 'E', 'e', '', 'E', 'a', 'a', 'a', 'a', 'u', 'a', '', 'u', 'i', 'E', 'e', 'o', 'u', 'a', 'o', 'e', 'e', 'a', 'a', 'e', 'e', 'e', 'e', 'e', '', 'u', 'e', 'a', 'i', 'a', 'o', 'a', 'a', '', 'E', 'e', 'e', 'a', 'i', 'E', 'a', 'e', 'e', 'e', 'i', 'i', 'u', 'e', 'e', 'i', 'e', 'E', 'u', '', 'o', 'a', 'a', 'u', 'a', 'i', 'e', '', 'o', '', 'u', 'a', 'i', 'E', 'e', 'E', 'E', 'e', 'a', 'e', 'E', 'a', 'u', 'o', 'a', 'i', 'a', 'a', 'a', 'u', 'E', 'e', 'e', 'u', 'a', 'E', 'i', 'e', 'E', 'E', 'a', 'a', 'E', 'e', 'e', 'a', 'e', 'u', 'a', 'a', 'e', 'u', 'i', 'e', 'e', 'i', 'e', 'a', 'a', 'i', 'e', 'e', 'E', 'E', 'a', 'e', 'e', 'o', 'e', 'e', 'i', 'o', 'e', 'e', 'a', 'u', 'o', 'E', '', 'u', 'e', 'a', 'i', 'o', 'i', 'E', 'e', 'a', 'i', 'u', 'o', 'a', 'e', 'a', 'o', 'a', '', 'e', 'u', 'u', 'E', 'E', '', 'a', 'i', 'a', 'u', 'u', 'a', '', 'e', 'E', 'e', 'i', '', 'a', 'e', 'o', 'E', '', 'e', 'a', 'e', 'a', 'e', 'a', 'a', 'a', 'e', 'e', 'i', 'a', 'a', 'a', 'a', 'E', 'a', 'a', 'o', 'e', 'E', 'e', 'e', 'u', 'o', 'e', 'e', 'e', 'a', 'i', 'E', 'e', 'a', 'i', 'E', 'o', 'o', 'e', 'a', 'e', 'E', 'u', 'E', 'E', 'u', 'a', 'E', 'i', 'u', 'i', 'e', 'e', 'a', 'e', 'o', 'a', 'E', '', 'e', 'e', 'a', 'a', 'E', 'E', 'i', 'i', 'a', 'E', 'o', 'e', 'o', 'e', 'o', 'e', 'a', 'E', 'E', 'e', 'e', 'o', 'e', 'e', 'u', 'a', '', 'a', 'e', 'a', 'a', 'a', 'a', 'i', '', 'e', 'a', 'u', 'u', 'e', 'e', 'a', 'i', 'u', 'e', 'a', 'a', 'e', 'e', 'u', 'i', 'a', 'E', 'u', 'e', 'a', 'E', 'e', 'u', 'a', 'e', 'E', 'E', 'e', 'e', 'e', 'a', 'o', '', 'a', 'E', 'e', 'i', 'u', 'e', 'E', 'E', 'o', 'o', '', '', '', '', '', 'a', '', '', 'E', 'E', 'a', 'e', 'E', 'e', 'e', 'e', 'e', 'e', 'e', 'a', 'e', 'a', 'u', '', 'o', 'o', 'E', 'E', 'a', 'e', 'a', 'o', 'i', 'o', 'e', 'E', 'E', 'e', 'o', 'a', 'E', 'a', 'u', 'e', 'e', 'o', 'o', 'o', 'u', 'i', '', '', 'u', 'E', 'E', 'o', 'e', 'e', 'e', 'a', 'o', 'i', 'i', 'o', 'u', 'e', 'a', 'i', 'e', 'a', 'e', 'e', 'E', '', '', 'e', 'E', 'e', 'i', 'E', 'e', 'e', 'E', 'a', 'e', 'e', 'u', 'a', 'a', 'E', 'e', 'e', 'a', 'a', 'e', 'a', 'e', 'a', 'o', 'i', 'i', 'a', '', 'e', 'u', 'i', 'i', 'e', 'a', 'a', 'o', 'a', 'E', 'i', 'o', '', 'e', '', 'a', 'e', 'e', 'i', 'i', 'u', '', 'i', 'e', 'e', 'o', 'u', 'o', 'a', 'u', 'i', 'u', 'a', 'e', 'e', 'e', 'a', 'a', 'a', 'i', 'e', 'e', 'e', '', 'E', 'E', '', 'e', 'o', 'e', 'a', 'o', 'u', 'i', 'e', 'u', 'e', 'e', 'e', 'e', 'u', 'E', 'e', 'e', 'o', 'e', 'e', 'e', 'e', 'a', 'a', '', 'i', 'e', 'E', 'o', 'u', 'E', 'E', 'o', 'a', 'a', 'o', 'e', 'E', 'e', 'i', 'o', 'a', 'E', 'U', 'i', 'o', '', 'i', 'E', 'a', 'i', '', 'e', 'a', '', 'u', 'o', 'a', 'E', 'i', 'e', 'a', 'e', 'a', 'o', 'o', 'i', 'e', 'E', 'i', 'u', 'E', 'e', 'e', '', 'i', 'a', 'e', 'E', 'e', 'a', 'e', 'E', 'e', 'E', 'a', '', 'u', 'E', 'i', 'u', 'i', 'o', 'i', 'i', 'a', 'o', 'e', 'o', '', 'e', 'a', 'u', 'o', 'E', 'i', 'e', 'e', '', 'a', '', 'a', 'i', '', 'a', 'o', 'e', 'u', 'e', 'e', 'o', 'E', 'i', 'e', 'E', 'a', 'i', 'e', 'u', 'e', 'i', 'e', '', 'E', 'e', 'i', 'i', 'e', 'E', 'o', 'o', 'a', 'o', 'e', 'E', 'u', 'a', 'e', 'e', 'E', 'o', 'u', 'o', 'a', '', 'a', 'i', 'o', 'o', 'e', 'i', 'e', 'e', 'e', 'o', 'a', 'u', 'a', 'a', 'i', 'E', '', 'a', 'a', 'e', 'a', 'a', 'o', 'e', 'i', 'o', '', 'e', 'i', 'e', 'E', 'o', 'a', 'o', 'i', 'a', 'e', '', 'i', 'a', 'e', 'e', '', 'i', 'E', 'o', 'o', 'i', 'e', '', 'a', 'i', 'e', 'E', 'e', 'o', 'e', 'i', 'i', 'e', 'a', 'a', 'o', 'a', 'i', 'a', 'o', '', '', 'e', 'e', 'e', 'E', 'e', 'o', 'a', 'E', 'a', 'i', 'i', 'o', 'e', 'I', 'i', 'e', 'u']\n    for i, (inp, exp) in enumerate(zip(inputs, results)):\n        assertion(candidate(*inp), exp, 0)\n",
      "entry_point": "get_closest_vowel",
      "complete_code": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n\n    def is_vowel(ch: str) -> bool:\n        return ch in \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n            return word[i]\n    return \"\"\n\n"
    },
    "execution_info": {
      "max_mutations_per_operator": 10,
      "total_operators_tested": 46,
      "operators_with_mutations": 11,
      "execution_timestamp": "2025-08-01T15:54:00.939931"
    }
  }
}