{
  "timestamp": "20250801_153551",
  "test_type": "mutation_testing",
  "metadata": {
    "task_id": "HumanEval/10",
    "timestamp": "20250801_153551",
    "tester_version": "1.0",
    "total_operators_tested": 8,
    "operators_with_errors": 1
  },
  "summary": {
    "original_passes": true,
    "total_mutations": 16,
    "killed_mutations": 12,
    "mutation_score": 0.75,
    "survival_rate": 0.25
  },
  "detailed_results": {
    "task_id": "HumanEval/10",
    "dataset_type": "plus",
    "original_passes": true,
    "total_mutations": 16,
    "killed_mutations": 12,
    "mutation_score": 0.75,
    "mutation_results": {
      "NumberReplacer": {
        "total_mutations": 4,
        "killed_mutations": 4,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-2]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-2]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpjr82uf7e.py\", line 78, in <module>\n    check(make_palindrome)\n    ~~~~~^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpjr82uf7e.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpjr82uf7e.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:35:46.202438",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-0]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-0]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp5r9osbiq.py\", line 78, in <module>\n    check(make_palindrome)\n    ~~~~~^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp5r9osbiq.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmp5r9osbiq.py\", line 36, in make_palindrome\n    if is_palindrome(string):\n       ~~~~~~~~~~~~~^^^^^^^^\n  File \"/tmp/tmp5r9osbiq.py\", line 22, in is_palindrome\n    return string == string[::-0]\n                     ~~~~~~^^^^^^\nValueError: slice step cannot be zero\n",
            "timestamp": "2025-08-01T15:35:46.429904",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 2,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 2::-1]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 2::-1]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpcmlstp8_.py\", line 78, in <module>\n    check(make_palindrome)\n    ~~~~~^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpcmlstp8_.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpcmlstp8_.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:35:46.692590",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 0::-1]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 0::-1]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpf5524r72.py\", line 78, in <module>\n    check(make_palindrome)\n    ~~~~~^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpf5524r72.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpf5524r72.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:35:46.898094",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 4,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-2]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-2]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpzl_f4196.py\", line 78, in <module>\n    check(make_palindrome)\n    ~~~~~^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpzl_f4196.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpzl_f4196.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:35:47.099616",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-0]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-0]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp2poxt1po.py\", line 78, in <module>\n    check(make_palindrome)\n    ~~~~~^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp2poxt1po.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmp2poxt1po.py\", line 40, in make_palindrome\n    return string + string[i - 1::-0]\n                    ~~~~~~^^^^^^^^^^^\nValueError: slice step cannot be zero\n",
            "timestamp": "2025-08-01T15:35:47.301436",
            "status": "BROKEN",
            "reason": "code_error"
          }
        ],
        "mutation_count_available": 6,
        "mutations_tested": 6
      },
      "Add->Sub": {
        "error": "division by zero"
      },
      "Sub->Add": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i + 1::-1]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i + 1::-1]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp9uzqmws5.py\", line 78, in <module>\n    check(make_palindrome)\n    ~~~~~^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp9uzqmws5.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp9uzqmws5.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:35:47.799697",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Eq->NotEq": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string != string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string != string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpzk2nk64c.py\", line 78, in <module>\n    check(make_palindrome)\n    ~~~~~^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpzk2nk64c.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpzk2nk64c.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:35:48.056958",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Remove UnaryMinus": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpfmx4607l.py\", line 78, in <module>\n    check(make_palindrome)\n    ~~~~~^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpfmx4607l.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpfmx4607l.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:35:48.299553",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::1]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::1]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmprznommwp.py\", line 78, in <module>\n    check(make_palindrome)\n    ~~~~~^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmprznommwp.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmprznommwp.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:35:48.522577",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Remove ReturnValue": {
        "total_mutations": 3,
        "killed_mutations": 3,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmplqltwx6g.py\", line 78, in <module>\n    check(make_palindrome)\n    ~~~~~^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmplqltwx6g.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmplqltwx6g.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:35:48.712790",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpz67l4p4s.py\", line 78, in <module>\n    check(make_palindrome)\n    ~~~~~^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpz67l4p4s.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpz67l4p4s.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:35:48.942774",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpgxymj85o.py\", line 78, in <module>\n    check(make_palindrome)\n    ~~~~~^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpgxymj85o.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpgxymj85o.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:35:49.187672",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 3,
        "mutations_tested": 3
      },
      "One->Zero": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-0]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-0]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpiiqejr61.py\", line 78, in <module>\n    check(make_palindrome)\n    ~~~~~^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpiiqejr61.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmpiiqejr61.py\", line 36, in make_palindrome\n    if is_palindrome(string):\n       ~~~~~~~~~~~~~^^^^^^^^\n  File \"/tmp/tmpiiqejr61.py\", line 22, in is_palindrome\n    return string == string[::-0]\n                     ~~~~~~^^^^^^\nValueError: slice step cannot be zero\n",
            "timestamp": "2025-08-01T15:35:49.561441",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 0::-1]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 0::-1]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp5u5p2793.py\", line 78, in <module>\n    check(make_palindrome)\n    ~~~~~^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp5u5p2793.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp5u5p2793.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:35:49.810098",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-0]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-0]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp9sxzws35.py\", line 78, in <module>\n    check(make_palindrome)\n    ~~~~~^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp9sxzws35.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmp9sxzws35.py\", line 40, in make_palindrome\n    return string + string[i - 1::-0]\n                    ~~~~~~^^^^^^^^^^^\nValueError: slice step cannot be zero\n",
            "timestamp": "2025-08-01T15:35:50.029373",
            "status": "BROKEN",
            "reason": "code_error"
          }
        ],
        "mutation_count_available": 3,
        "mutations_tested": 3
      },
      "String->Empty": {
        "total_mutations": 2,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\"\"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\"\"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:35:50.288610",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"\"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"\"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:35:50.515250",
            "status": "SURVIVED",
            "reason": "tests_passed"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "String->X": {
        "total_mutations": 2,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\"X\"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\"X\"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:35:50.787222",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
            "mutated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"X\"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "mutated_complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"X\"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i - 1::-1]",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:35:51.048622",
            "status": "SURVIVED",
            "reason": "tests_passed"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      }
    },
    "problem_info": {
      "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
      "canonical_solution": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n",
      "test_code": "\n\nimport numpy as np\n\ndef is_floats(x) -> bool:\n    # check if it is float; List[float]; Tuple[float]\n    if isinstance(x, float):\n        return True\n    if isinstance(x, (list, tuple)):\n        return all(isinstance(i, float) for i in x)\n    if isinstance(x, np.ndarray):\n        return x.dtype == np.float64 or x.dtype == np.float32\n    return False\n\n\ndef assertion(out, exp, atol):\n    exact_match = out == exp\n\n    if atol == 0 and is_floats(exp):\n        atol = 1e-6\n    if not exact_match and atol != 0:\n        assert np.allclose(out, exp, rtol=1e-07, atol=atol)\n    else:\n        assert exact_match\n\n\ndef check(candidate):\n    inputs = [[''], ['x'], ['xyz'], ['xyx'], ['jerry'], ['race'], ['level'], ['tenet'], ['noon'], ['redder'], ['refer'], ['dewed'], ['madam'], ['malayalam'], ['radar'], ['r'], ['rrefrerace'], ['erace'], ['raracece'], ['rrrefrear'], ['raceredder'], ['araracecae'], ['rradar'], ['racrrefreraceereddrce'], ['levevl'], ['lracrrefreraceereddrceevel'], ['rrefreracrefere'], ['rardar'], ['levevltenet'], ['racrrefreraceeredrdrce'], ['racrrefracrrefreraceereddrceaceereddrce'], ['ararracrrefreraceeredrdrceacecae'], ['noradarolevevln'], ['rrefreralevevlce'], ['racrrefreraceereddrcerrefrerace'], ['onoon'], ['rrefreraracecee'], ['tene'], ['racrrefddrce'], ['dedwed'], ['erradarrace'], ['acece'], ['leevel'], ['racrrefrracrrefracrrefreraceereddrceaceereddrceacrrefreraceereddrceaceereddrce'], ['rr'], ['rrefreracrdewede'], ['rrrarteneacecee'], ['malaylalam'], ['rarcrrefreraceereddrcerrefrerace'], ['rrraertracrrefracrrefreraceereddrceaceereddrceeneacededwedcee'], ['erradarracerradarracee'], ['lveevel'], ['rrefreracreerradarracefere'], ['lracrrefreraceereddrceeveltenet'], ['rrraertracrrefraclracrrefreraceereddrceeveltenetrrefreraceereddrceaceereddrceeneacededwedcee'], ['rardaar'], ['erradarracerrlracrrefreraceereddrceeveladarracee'], ['levevllevevl'], ['rrerradarracerradarraceeefreracrefere'], ['maadam'], ['ded'], ['CIB'], ['rarcrrefreraceereddrcerrrefrefrace'], ['lvevl'], ['re'], ['lracrrefreraceedewedreddrceevel'], ['rrraertracrrefraclracrrefreraceereddrceeveltenetrrefreraceereddrceaceerceddrceeneacededwedcee'], ['racrraefracrrefreraceereddrcerrraertracrrefracrrefreraceereddrceaceereddrceeneacededwedceeaceereddrce'], ['rdewedr'], ['rrraertracrrefraclracrrefreracceereddrceeveltenetrrefreraceereddrceaceerceddrceeneacededwedcee'], ['mraceredderadam'], ['onnoon'], ['lenet'], ['lrrraertracrrefracrrefreraceereddrceaceereddrceeneacededwedceeveevel'], ['racrraefracrrefreraceereddrcerrraertracrrefracerrefreraceereddrceaceereddrceeneacededwedceeaceereddrce'], ['malalam'], ['erac'], ['malaararacecaelam'], ['levelevellonoon'], ['acracrrefreraceeredrdrcee'], ['errradarracerradarracee'], ['rarcrrefreraceereddrccerrrefrefrace'], ['malatenetlam'], ['levelevellonoonracrrefddrce'], ['malatenetlamrardaar'], ['rrefreralevevlmalalamce'], ['malalllam'], ['rraddar'], ['acracrrerardaarcee'], ['lracrrefrereddrceeveltenet'], ['CCIB'], ['racelevevlredder'], ['redderradar'], ['mracereddreradam'], ['rarcrrefreraceereddrrrefreralevevlmalalamcecerrefrerace'], ['rarcrrefreraceereddrcerlevelevellonoonracrrefddrcerrefrefrace'], ['errrefrerar'], ['malarrefreracraeerradarraceferelam'], ['rlevevltenetrefreracrdewede'], ['rrraertracrrefraclracrrefreraceereddrceeveltenetrrefreraceereddrceaceereddrceeneaceredderdedwedcee'], ['rrraertracrrefraclracrrefreraceereddrceeveltenetrrerfreraceereddrceaceereddrceeneacededwedcee'], ['rmraceredderadamefer'], ['malalllnoonam'], ['zzzazyzzz'], ['racecar'], ['pneumonoultramicroscopicsilicovolcanoconiosis'], ['babad'], ['abab'], ['a'], ['ab'], ['abc'], ['abacabadabacaba'], ['aaaaa'], ['aabc'], ['racababecar'], ['abacabadabaccaba'], ['zzzabzz'], ['abbc'], ['m'], ['abaacabadabacaba'], ['baad'], ['zzzabaacabadabacabaazyzzz'], ['rababecar'], ['dbabad'], ['baabacabadabaccabaad'], ['P'], ['zzabaazyzzz'], ['p'], ['aaab'], ['racabaacabadabacabaecar'], ['aapneumonoultranmicroscopicsilicovolcanoconiosis'], ['Pdbabad'], ['abacacbadabacaba'], ['pnababamicroscopicsilicovolcanoconiosis'], ['pneumonoultramicroscopicsilicovolcanoconiosi'], ['aaa'], ['pneumonoultramicroscoabacabadabaccababapicsilicovolcanoconiosis'], ['baabacabadabaccabaadaaab'], ['mp'], ['pneumonoultramicroscoabiacabadabaccababapicsilicovolcanoconiosis'], ['abacacbadabacabababad'], ['abacabaaaabdabacca'], ['racabaacabadabacababcaecar'], ['bbac'], ['baabacabadabcabaccabaadaaab'], ['pnevolcanoconiosi'], ['Pdbababd'], ['pneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconiosis'], ['mm'], ['pneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosis'], ['pneumonoultramicroscoabacabadabaccababapicsilabcicovolcanoconiosis'], ['abaad'], ['pneumonoacabadabaccababapicsilicovolcanoconiosis'], ['pneumonoultramicroscopicsilicovconiosis'], ['pnababascopicsilicovolcanoconiosis'], ['abca'], ['zzabaazabacacbadabacabayzzz'], ['raabacabaecar'], ['bbaracababecarc'], ['pneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosis'], ['mmm'], ['babbc'], ['pneumonoultramicroscoabacabadabaccababapicsilabcicbabadovolcanoconiosis'], ['mmmlicovolcanoconiosis'], ['abaadd'], ['azzabaazyzzz'], ['pnababascopicsilicovolcaanoconiosis'], ['rababecrar'], ['pnebaabacabadabaccabaadaaabumonoultramicroscopicsilicovconiosis'], ['rpneumonoultramicroscoabacabadabaccababapicsilabcicovolcanoconiosisacecar'], ['apneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconiosisb'], ['ppneumonoacabadabaccababapicsilicovolcanoconiosis'], ['mmmlicovolcanoconiosiabcas'], ['pneumonoultramicroscoabioacabadabaccababapipneumonoultramicroscopicsilicovconiosiscsilicovolcanoconiosis'], ['pneumonoultramicroscoabacabadpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosis'], ['racabbabecar'], ['aaaa'], ['apneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconniosisb'], ['pnababamicrosopicsilicovolcanoconiosis'], ['pneumonoultramicroscoabiacaracababecarbadabaccababapicsilicovolcanoconiosiabcas'], ['d'], ['apneumonoultramicroscopicsilicovconiosis'], ['rpneumoncoultramicroscoabacabadabaccababapicsilabcicovolcanoconiosisacecar'], ['mmpneumonoultramicroscoabioacabadabaccababapicsilicovolcanooniosis'], ['zzzabaacabadabacabammmlicovolcanoconiosiabcas'], ['aaaaabab'], ['zzzabaacababdabazyzzz'], ['pneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosis'], ['zzzabaacababdababaadazyzzz'], ['babbbc'], ['pneumonoultramicroscoabiacaracababecarbadabaccilicovolcanoconiosiabcas'], ['babbcabca'], ['ababad'], ['babbcabcad'], ['abacacbadabacaaba'], ['pneumonoultramicroscopicsilicovolcnanoconiosis'], ['pneuababadmonoultramicroscopicsilicovconiosis'], ['dd'], ['abbcabpneumonoultramicroscoabiacabadabaccababapicsilicovolcanoconiosiscad'], ['apneumonoultramicroscoabioacabadabaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconiosisb'], ['baabacabca'], ['raceacar'], ['zzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosisz'], ['apneumonoultramicroscoabioacabadabaccababapicsilibaad'], ['pneumonoultramicroscoabioacabadabaccababapicsilpneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosis'], ['pppneumonoacabadabaccababapicsilicovolcanoconiosisneumonoacabadabaccababapicsilicovolcanoconiosis'], ['bbbabbbc'], ['mmpnababamicroscopicsilicovolcanoconiosisP'], ['pneumonoultramicroscoabracabbabecarioacabadabaccababapipneumonoultramicroscopicsilicovconiosiscsilicovolcanoconiosis'], ['aa'], ['ppneumonoacabadabaccababapicsilicovoilcanoconiosis'], ['UBI'], ['UBIracabaacabadabacababcaecarI'], ['pneumonoacabadabaccababapicsilicovolcis'], ['aaaaabzzabaazyzzzab'], ['WXcKAI'], ['rar'], ['bbabad'], ['pneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaapneumonoultramicroscopicsilicovconiosislcanoconiosis'], ['pneumonaaaaoacabadabaccababapicsilicovolcis'], ['baabaacabadabcabaccabab'], ['abacabadaabaccaba'], ['apneumonoultramicrovolcanoconiosisnoconoiosisb'], ['pneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabapicsilicovolcanoconiosis'], ['aba'], ['apneunmonoultramisclibaad'], ['bc'], ['UBIzzabaazyzzz'], ['abacabaaaabdabacc'], ['zzzabaacabadabacapneumonoacabadabaccababapicsilicovolcisbammmlicovolcanoconiosiabcas'], ['add'], ['mmpnababamicroscopicsilcicovolcanoconiosisP'], ['rabaabecrar'], ['racabbar'], ['rapneumonoacabadabaccababapicsilicovolcisr'], ['pneumonoacabadabaccababapicsiliecovolcanoconiosis'], ['rrar'], ['mmmlicovolcanoconiosiabcaracabbars'], ['apneumonoultramicroscozzabaazabacacbadabacabayzzzabioacabadabaccababapicsilibad'], ['aracabbpneumonoultramicroscoabioacabadabaccababapipneumonoultramicroscopicsilicovconiosiscsilicovolcanoconiosisabecar'], ['apneumonoultramicroscoabioacabadbapneumonoultramicroscopicsilicovolcanoconiosisbaccababapiabacabadabacabacsilibaad'], ['rpneumoncoultramicroscoabacabadabaccababapicsbaabaacabadabcabaccababilabcicovolcanoconiosisacecar'], ['raracecarcabaacabadabacabaecar'], ['pneumonoultramicroscoabioacabadabaccababapipneumonoultramicroscopicsilicovconiosiscsailicovolcanoconiosis'], ['pneumonoultramicroscopicsilicovolcanoaosis'], ['abba'], ['pnoeumonoultramicroscoabacabadabaccababapicsilabcicbabadovolcanoconiosis'], ['aaabababbaracababecarc'], ['racababecaar'], ['rpneumonoultramicroscoabacabadabaccababapicsilabcicovolcanobabbcconiosisacecar'], ['baabacabadabcabacaab'], ['pneumonoultramicroscoabacabadabaccababapicsilabcimcovolcanoconiosis'], ['zzzabaacabbabdabazyzzz'], ['mmmlirababecrarcovolcanoconiosiabcaracabbars'], ['ammmlicovolcanoconiosiabcasb'], ['babba'], ['pneumonoultramiroscopicsilicovolcanoaosis'], ['pneumonoultramirbadabaccababapicsilicovolcanoconiosiabcas'], ['bbaracabaabacabadabcabacbaabaacabadabcabaccababcabaadaaabbabecarc'], ['raceacrpneumonoultramicroscoabacabadabaccababapicsilabcicovolcanoconiosisacecardr'], ['rababecraar'], ['canoconiosisnoconoiosisb'], ['abaaabacabadabacaba'], ['mmpnababamicroscopicsilicovzzabaazyzzzolcanoconiosisP'], ['rabaecraar'], ['pppneumonoacabadabaccababapicsilicovolcanoconiosisneumonoacapbadabaccababapicsilicovolcanoconiosis'], ['pnevolcanocoabcaniobabbcabcadsi'], ['abacabadaaabacaba'], ['bbaracababebaabacabcacarc'], ['babbcbc'], ['pneumonoultramicroscoabacabadpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacabaabacabadabaccabaadaaabnoconiosisabaccababapicsilabcicovolcanoconiosis'], ['pppneumonoacabadabaccababapicsilicovolcanoconiocovolcanoconiosis'], ['abaaabacabadabacaaba'], ['pnev'], ['pneumonoultramicroscopicsilicovconiois'], ['yzzzabaacabadabacabaazyzzz'], ['mmmm'], ['apneumonoultramicrpneumonoacabadabaccababapicsiliecovolcanoconiosisoscopicsilimmcovconiosis'], ['pneumonoultramicroscoabacabadpneumocpneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabapicsilicovolcanoconiosiscababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosis'], ['baabacabadabaccabaadaaaab'], ['pneumonoultramicroscoabacabadabaccababapicsilabcimcovolcanoconaaaaioabacabaaaabdabaccsis'], ['baabacabadabaccabaadaaaaab'], ['abaca'], ['pneumonoultramicroscoabacabadabaccababapicsilabcimcovolcanocon'], ['pneumonoultramicroscoasbacabadabaccababapicsilabcimcovolcanocon'], ['mmpnababamicroscopicsilicovzzabzzolcanoconiosisP'], ['baabba'], ['rpneumoncoultramicroscoabacabadabaccababapicsbaabaacabadabcabaccababpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaapneumonoultramicroscopicsilicovconiosislcanoconiosis'], ['zzabaazabacacbadabacabazz'], ['apneumonoultramicroscoabioacabadabaaaaaaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconiosisb'], ['pnababascopicspneumonoultramicroscopicsilicovolcanoaosisilicovolcanocoosis'], ['pneumonoultramicroscoabiacaracabazzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszbecarbadabaccilicovolcanoconiosiabcas'], ['abbaa'], ['zzzzz'], ['baacbacabadabaccabaadaaaab'], ['apneuapneumonoultramicroscoabioacabadabaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconiosisbmonoultramicroscozzabaazabacacbadabacabayzzzabioacabadabaccababapicsilibad'], ['IuyepBB'], ['aapneumonoultranmicroscopicasialicovolcanoconiosis'], ['abaaabacabadabacabazzzazyzzz'], ['amma'], ['abacabadabaaccaba'], ['baabaacabadabcabacbaabbacabab'], ['UBUI'], ['zzzabaacabammpnababamicroscopicsilicovzzabzzolcanoconiosisPbdababaadazyzzz'], ['zzzabaacabbabdabazabzyzzz'], ['abacabadabaaccacbaa'], ['raddar'], ['pneumonoultramicroscoasbacabadrpneumoncoultramicroscoabacabadabaccababapicsilabcicovolcanoconiosisacecarabaccababapicsilabcimcocanocon'], ['abacaa'], ['pneevolcanoconiosi'], ['pneuababadmonoultramicroscopicsilrababecaricovconiosis'], ['reabaecraarbaad'], ['pneumonoultramicnroscoabacabadabaccababapicsilabcicbabadovolcanoconiosis'], ['pneumonoacabadacbaccababapicsiliecovolcanoconiosis'], ['pneumonoultramicroscoasbacabadabaccababapibcimcovolcanocon'], ['pneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzizicsilicovolaaacanoconiosis'], ['ddbaabacabadabcabacaab'], ['aaabababbaracabapneumonoultramicrpneumonoacaebadabaccababapicsiliecovolcanoconiosisoscopicsiblimmcovabaadconiosiscarc'], ['pnevoaapneumonoultranmicroscopicasialicovolcanoconiosiscanoconiosi'], ['baabacabbadabaccabaadaaaab'], ['mmmlicovolcanoconiosiabccaracabbars'], ['baadcbacabadabaccabaadaaaab'], ['pnevoaapneumonoultranmicroscopicasialicovolcanoconioosiscanoconiosi'], ['rrababecrar'], ['abacabadaabaccaaapneumonoultranmicroscopicsilicovolcanoconiosisba'], ['mmpcnababamicroscopicsilicovzzabzzolcanoconiosisP'], ['RgxE'], ['abaadracababecadrd'], ['abacacbadabacabcababaad'], ['pneumonoultrpneumonoultramiroscommpnababamicroscopicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoabacabadababacaaaccababapicsilabcimcovolcanocon'], ['abd'], ['rpneumonoultramicroscoabioacabadabaccababapicsilpneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosisdar'], ['pneumonoultramicroscoabacabadabaccababapicsilabcimcovolcaabacabadaaabacabaconiosis'], ['bababacabca'], ['pneumonoultramicroscoabacabadabaccababapicsilabcimcovolcaabacabadbbabadaaabacabaconiosis'], ['pneumonoultramicroscoabacabadpneumocpneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabapicspneumonoultramicroscoabacabadpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisilicovolcanoconiosiscababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosis'], ['pneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovoolaaacanoconiosisabaccababapicsilabcicovolcanoconiosis'], ['pneumonoultramicnroscoabacababadovolcanoconiosis'], ['pppneumonoacabadabaccababapicsilicovolcanocoiniosisneumonoacabadabaccababapicsilicovolcanoconiosis'], ['rrmmmlicovolcanoconiosiabcaracabbarsababecrar'], ['aapneunmonoultramisclibaaddd'], ['aad'], ['abacabadabacaa'], ['apneumonoultramicroscoabioacabadabaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconicosisb'], ['pneumonoultramicroscoabioaacabadabaccababapicsilicovolcanoconmiosis'], ['zzzabaacabadabacapneumonoacabadabaccababapicsilicovolcisbammmlicovolcanoconiosiabca'], ['rpneumonoultramicroscoabacasbadabaccababapicsilabcicovolcanobabbcconiosisacecar'], ['abacabadabaaccrpneumoncoultramicroscoabacabadabaccababapicsilabcicovolcanoconiosisacecar'], ['pnn'], ['canoconiosisnoconoiommmmsisb'], ['rpneumonoultramicroscoabacabadabaccababapicsilabcicovolcanocosniosisacecar'], ['bbarbabecarc'], ['apneumonoultramicbbaracababecarcbadabaaaaaaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconiosisb'], ['raacababecar'], ['pneumonoultramiacroscoabacabadabaccababapicsilabcimcovolcanoconiosis'], ['abacabaaaabdazzabaazyzzzbacc'], ['UBIzzbabaazyzzz'], ['pneumonoacabadabaccababapicsiliecovolcanoconiosais'], ['zzabaazabacacbaadabacabazz'], ['apneumonoultramicroscoabioacabadabaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnpneumonoultramicroscoabacabadabaccababapicsilicovolcanoconiosisoconiosisb'], ['pneuababadmonoultramicrosis'], ['mmpnababamiicroscopicsilicovzzabaazyzzzolcanoconiosisP'], ['abacabadabcaccaba'], ['pneumonoultrazzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszbadabaccababapicsilabcimcovolcanoconn'], ['baabacabadabcabaccabaadaaabpneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabapicsilicovolcanoconiosis'], ['zzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadasilicovolcanoconmiosisz'], ['rdracabbabecarar'], ['rpneumoncoultramicroscoabacabadabaccababapicsilabciacovolcanoconiosisacecar'], ['apneumonoultramicroscoabacabadabaccababapicsilabcimcovolcanoconiosisbacabadabacaba'], ['pneumonoultramicroscoabacabadpneumocpneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaczcababapicsilicovolcanoconmiosiszabapicspneumonoultramicroscoabacabaddpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisilicovolcanoconiosiscababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconpneumonopneumonoacabadabaccababapicsilicovolcisultramicroscoabioacabadabaccababapicsilicovolcanoconiosisiosis'], ['ddbaabacabadabcabacaaab'], ['aceacar'], ['abacabadabacaaabacabadaaabacaba'], ['pneumonoultrpneumonoultramiroscommpnababamicroscopicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoabacabadababacaaaccababapicsilabcimcovolcaanocon'], ['zzzaraddarabazabzyzzz'], ['abbacacbadabacabcababaad'], ['apneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconniabaacabadabacabaosisb'], ['abacabadaaabaaaaaabzzabaazyzzzabcaba'], ['pneumonoultramicroscoabacabadabaccababapicsilabcimcabdovolcanoconiosis'], ['pneumonoultrpneumonoultramiroscommpnababamicroscopicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoababbcabcadbacabadababacaaaccababapicsilabcimcovolcaanocon'], ['mmmlicovolrpneumonoultramicroscoabacabadabaccababapicsilabcicovolcanocosniosisacecarcanoconiosis'], ['pnnn'], ['pneumonoultramicroscoabracabbabecarioacabadabaccababapipneumonoultramicroscopicsilicovconiosiscsilicovolcanoco'], ['pneumonoultrpneumonoultramiroscommpnababamracabaacabadabacabaecaricpnababascopicspneumonoultramicroscopicsilicovolcanoaosisilicovolcanocoosisroscopicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoabacabadababacaaaccababapicovolcaanocon'], ['zzzabaacabadabacapneumonoacabadabaccababapicsilicovolcissiabcas'], ['abaabbadd'], ['abaapneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisd'], ['apneunmonoultramismclibaad'], ['baabacabbaad'], ['IuyepB'], ['bbabaabcad'], ['mmmmm'], ['pneumonoultramicroscoabibabecarbadabaccababapicsilicovolcanoconiosiabcas'], ['pneumonaaaaoacabadabaccababapicsilicobvolcis'], ['mmpnababamicroscsilicovolcanoconiosisP'], ['aaaabab'], ['Pdbabzzzabaacabadabacapneumonoacabadabaccababapicsilicovolcisbammmlicovolcanoconiosiaaaabababcad'], ['pneumonoultramicroscoabracabbabecarioacabadabaccaabacacbadabacaababoabapipneumonoultramicroscopicsilicovconiosiscsilicovolcansoco'], ['apneumonoultramicroscoabioacabadabaccababapicsiosisb'], ['mmmlicovolcanocpneumonoultramicroscoabacabadabaccababapicsilabcimcovolcanocononpnevolcanoconiosiiosiabcaracabbars'], ['mmpcnababamiicroscopicsilicovzzabzzolcanoconiosisP'], ['baabaacababacacbadabacabcababaadadabcabacbaabbacabab'], ['zzzabzzz'], ['rpneumonoultramicroscoabioacabadabaccababapicsilpneumonoulbtramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosisdar'], ['abbacacbadabacabpnevoaapneumonoultranmicroscopicasialicovolcanoconioosiscanoconiosicababbbabaabcadaad'], ['pneumonoultramicroscoabioaacabadabaccababapicsilbicovolcanoconmiosis'], ['zzzabaacabbabdabazabzzzz'], ['pppneumonoacabadabaccababapicsilicovolcanoconiosisneccababapicsilicovolcanoconiosis'], ['apneumonoultramicroscoabioacabadabaccababapimcsilicovolcapnababamicroscopicsilicovolcanocbabadoniosisnoconiosisb'], ['racarpneumoncoultramicroscoabacabadabaccababapicsbaabaacabadabcabaccababpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaapneumonoultramicroscopicsilicovconiosislcanoconiosisbbar'], ['yzzzabaacabadabacaybaazyzzz'], ['aaaaabzzaabaazyzzzaab'], ['pneumonoultramicrosoconmiosis'], ['apneumonoultramicroscozzabaazabacacbadabacabayzzzabioaacabadabaccababapicsilibad'], ['pneumonoultramicrapneumonoultramicroscoabioacabadbapneumonoultramicroscopicsilicovolcanoconiosisbaccababapiabacabadabacabacsilibaadoscopicsilicovolcanoconiosi'], ['pneumonoultramicrosconiosis'], ['abammpnaaaaababamicroscsilicovolcanoconiosisP'], ['mpp'], ['aabaad'], ['pneumonoultraddarosi'], ['pneumonoultramicrosilabcimcovolcanoconaaaaioabacabaaaabdabaccsis'], ['apneuapneumonoultramicroscoabioacabadabaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconiosisbmonoulpneumonoultramicroscoabacabadpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosistramicroscozzabaazabacacbadabacabayzzzabioacabadabaccababapicsilibad'], ['pneumonoultrazzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszbadabaccababapicsilabcimacovolcanoconn'], ['pneumonoultrpneumonoultramiroscommpnababamicroscoapicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoababbcabcadbacabadababacaaaccababapicsilabcimcovolcaanocon'], ['aaazzzabzaacabbabdabazabzyzzza'], ['abpneumonoultrpneumonoultramiroscommpnababamicroscopicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoabacabadababacaaaccababapicsilabcimcovolcaanoconabbadd'], ['pnababapneumonoultramiroscopicsilicovolcanoaosisosis'], ['pnzzzabaacabadabacabammmlicovolcanoconiosiabcasoeumonoultramicroscoabacabadabaccababapicsilabcicbabadovolcanoconiosis'], ['rpneumonoultramicroscoabacabadabaccababapicsilabcicovolcanocosniosisaceccar'], ['pppneumonoacabadabaccababapicsilicovolcanoconiosisneumonoacapbadabaccababapicsilicovolcanocs'], ['raaacababecar'], ['babbbrpneumonoultramicroscoabioacabadabaccababapicsilpneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosisdarc'], ['raacaebabecar'], ['abacabadaabacaba'], ['mmmlirababecrarcovolcainoconiosiabcaracabbars'], ['pneumonoupneumonoultramicroscoabacabadpneumocpneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabapicspneumonoultramicroscoabacabadpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisilicovolcanoconiosiscababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisltramiacroscoabacabadabaccababapicsilabcimcovolcanoconiosis'], ['gPHBVvlHnc'], ['rababaecrmmmmmaar'], ['ammmlicovolcanoconiosiabcaracabbarscca'], ['bbaracababebaabacabcaca'], ['pneumonoacabadabaccababapicsiliscovolcis'], ['pabca'], ['pneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzizicsiliconoconiosis'], ['pneumonoultramicroscoabacabadabaccababapicsilabcicbabadovolcanoconioabacabadaaabacabasis'], ['pneumonoultramicroscoabioacabadabaccababapicsilcanoconmiosis'], ['abzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadasilicovolcanoconmiosiszd'], ['rpneumoncoultramicroscoabacabadabaccababapicsbaasbaacabadabcabaccababilacbcicovolcanoconiosisacecar'], ['pnevamma'], ['zzzabaacabadabaccabammmlicovolcanoconiosiabcas'], ['mmmlicovoloconiosis'], ['pneumonoultramicroscoabacabadabaccabbapicsilicovolcanoconiosis'], ['rpneumonouddbaabacabadabcabacaaabltramicroscoabacabadabaccababapicsilabcicovolcanoconiosisacecar'], ['zzzazyzzzz'], ['zzzabaacabadaapneumonoultramicroscozzabaazabacacbadabacabayzzzabioacabadabaccababapicsilibadbacabaazyzzz'], ['abadabacaba'], ['VNPgo'], ['pneumonoultramicrpneumoncoultramicroscoabacabadabaccababapicsbaasbaacabadabcabaccababilacbcicovolcanoconiosisacecarroscoabiacaracabazzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapiocsilicovolcanoconmiosiszbecarbadabaccilicovolcanoconiosiabcas'], ['abacacbadabd'], ['racarpneumoncoultramicroscoabacabadabaccababapicsbaabaacabadabcabaccababaapneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisdabpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaapneumonoultramicroscopicsilicovconiosislcanoconiosisbbar'], ['bunqzNWMJ'], ['pneumonoultramirbabbbcbadabaccababapicsilicoivolcanoconiosiabcas'], ['mmmlicovolrpneumonoultramicroscoabacabadabaccababapicsilabcicovolcanocosniosisacebaadcbacabadabaccabaadaaaabcarcanoconiosis'], ['poniosis'], ['aazzzazyzzzzad'], ['pneumonoultramicroscoabioacabadabaccababapicsilpneumonoultrneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanocsisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosis'], ['pmpp'], ['abacabacaba'], ['pneumonoultramicrpneumoncoultramicroscoabacabadabaccababapicsbaasbaacabadabcabaccababilacbcicovolcanoconiosisacecarroscoabiacaracabazzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapiocsilicovolcanoconmiosiszbecarbadabaccilicovolcanoconiorarsiabcas'], ['aaba'], ['babbbrpneumonoultrasmicroscoabioacabadabaccababapicsilpneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosisdarc'], ['abbcabpneumonoultramicroscoabiacabadabaccababapicsilicpneumonoultramicroscoabiacaracababecarbadabaccababapicsilicovolcanoconiosiabcasovolcanoconiosiscad'], ['pneumonoultramabacabadaabaccaaapneumonoultranmicroscopicsilicovolcanoconiosisbaicroscopicsilicovolcanoconiosis'], ['pneumonoultrpneumonoultramiroscommpnababamicroscoapicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoababbcabcadbacabadababacaaaccsababapicsilabcimcovolcaanocon'], ['rpneumonoultramicroscoacabadabacabaazyzzzicsilicovolcvolcanoconmiosisdar'], ['apnracababecaareumonoultramicroscoabioacabadbapneumonoultramicroscopicsilicovolcanoconiosisbaccababapiabacabadabacabacsilibaad'], ['pneumonoultramiroscopipneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosiscsilicovolcanoaosis'], ['bunqzNWMJJ'], ['racabar'], ['ppneuzzzabzzzcababapicsilicovolcanoconiosis'], ['abbacacbadabacabpnevoaapneumonoultranmicroscopicasialivcovolcanoconioosiscanoconiosicababbbabaabcadaad'], ['pneumonoultramicroscoabioacabadabaccababapipneumonoultramicroscopicsilicovconabacaiosiscsailicovolcanoconiosis'], ['pvamma'], ['pnnmmmlirababecrarcovolcanoconiosiabcaracabbars'], ['IpBB'], ['pneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzizicsilciconoconiosis'], ['rpneumonoultramicroscoacabadabacabaazyzzzicsilicovolcvzzzabaacabadabacapneumonoacabadabaccababapicsilicovolcissiabcasolcanoconmiosisdar'], ['pneumonoacaobadabaccabzzabaappneumonoacabadabaccababapicsilicovolcanoconiosiszabacacbadabacabayzpneumonoultramicroscoaabioacabadabaccababapicsilicovolcanoconmiosiszabapicsilicovolcanoconiosis'], ['zzzzabaacabadbdababaadazyzzzapneumonoultramicroscopicsilicovconiosis'], ['pneumonoacadbadabaccababapicsiliscovolcis'], ['pneumonoultramicroscoabacabadpneumocpneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramiczyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconpneumonopneumonoacabadabaccababapicsilicovolcisultramicroscoabioacabadabaccababapicsilicovolcanoconiosisiosis'], ['apneumonoultrapnevoaapneumonoultranmicroscopicasialicovolcanoconioosiscanoconiosimicbbaracababecarcbadabaaaaaaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconiosisb'], ['zbgPHBVvlHnczNWMJzzabaacabbabdabazabzyzz'], ['RgxEE'], ['raaacababecammmlicovolcanoconiosiabcaracabbarsr'], ['babbcaa'], ['apneumonoultramicroscoabioaocabadabaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconicosisb'], ['abacabaabacabbadabaccabaadaaaab'], ['pneumonoultramicroscbabbcoabacabadabaccababapicsilabcicbabadovolcanoconiosis'], ['zzzabaacabadabacabammmlicovolcanoconiosiabcacs'], ['apneumonoultramicroscoabioacabadbapneumonoultramicroscopicsilicovolcanoconiosiccababapiabacabadabacabacsilibaad'], ['pnrrababecrarlcanoconiosi'], ['racabbpneumonoultramicroscopicsilicovolcnanoconiosisabecar'], ['am'], ['abaapneumonoultramicroscoabacabadpneumonoultramicroscoabioacabaammadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisd'], ['pnababascopicsapneumonoultramicroscoabioacabadabaccababapicsiosisbilicovolcanoconiosis'], ['azzaazypneumonoultramicroscoabracabbabecarioacabadabaccababapipneumonoultramicroscopicsilicovconiosiscsilicovolcanoconiosiszzz'], ['rpneumonoultramicroscoabacabadabaccababapicsilabcicovolcanocosnisaceccar'], ['abaapneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisd'], ['apneumapneumonoultramicroscoabioacabadbapneumonoultramicroscopicsilicovolcanoconiosisbaccababapiabacabadabacabacsilibaadonoultramicroscoabacabadabaccababapicsilabcimcovolcanoconiosisbacabadabacaba'], ['abacabadaaabacab'], ['baabaacabadabpabcacabaccabab'], ['baabacabadabaccabzzzabzzaadaaaaab'], ['baacbcacabammmlicovolcanoconiosisdabaccabaadaaaab'], ['pabacabaaaabdazzabaazyzzzbaccnevammapneumonoultramicroscopicpneumonoultrpneumonoultramiroscommpnababamicroscoapicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoababbcabcadbacabadababacaaaccababapicsilabcimcovolcaanocon'], ['babbbrpneumonoultramicroscoabioacabadabaccababapicsilpneumonoultramicroscoabacabadpneumonoultramicrosbccoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosisdarc'], ['pneumonoultramicroscoabacabadabaccababapicsilicovolcanoconiosisbbarbabrc'], ['aabcpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosis'], ['apneumonoultramicroscozzabaazabacacbadabacabayzzzabioacabadabacbababacaapneumonoultramicroscoabioacabadabaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconicosisbbcacababapicsilibad'], ['azzabaaazyzzz'], ['pneumonoultramicroscoabacabadpneumocpneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabapicspneumonoultramicroscoabacabadpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovlolcanoconiosisilicovolcanoconiosiscababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosis'], ['zzzabaacabadabacapneumonoacabadabaccababapicsilicovolcisbammmliolcanoconiosiabca'], ['pabaapneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapbicsilabcicovolcanoconiosisdnnn'], ['pneumonoacabadabaccababapicsiliecovolzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadasilicovolcanoconmiosiszcanoconiosis'], ['pmppp'], ['UBBBI'], ['raracUBUIecarcabaacabadabacabaecar'], ['cpbabbc'], ['rnpneumoncoultramicroscoabacabadabaccababapicsilabcicovolcanoconiosisacecar'], ['pbpneumonoacabadabaccababapicsilicovolcanoconiosis'], ['pneumonoultramicrpneumoncoultramicroscoabacabadabaccababapicsbaasbaacabadabcabaccababilacbcicovolcanoconiosisacecarroscoabiacaracabazzabaazabacacbaddabacabayzpneumonoultramicroscoabioacabadabaccababapiocsilicovolcanoconmiosiszbecarbadabaccilicovolcanoconiosiabcas'], ['aUBIzzbabaazyzzzbacacbadabacabcababaad'], ['aapneumonoultranmicpneumonoultramicroscopicsilicovolcanoconiosiroscopconiosis'], ['pneumonoultrpneumonoultramiroscommpnababamicbbaracababecarcroscoapicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoababbcabcadbacabadababacaaaccsababapicsilabcimcovolcaanocon'], ['racababecaazzabaazabacacbadabacabazz'], ['pneumonoultramicaroscoabioacabadabaccababapicsilicovolcanoconiosis'], ['apneumonoultramicroscoabioacabadbabbbrpneumonoultramicroscoabioacabadabaccababapicsilpneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosisdarcabaccababapicsilicovolcanoconniabaacabadabacabaosisb'], ['aapneumonoultranmicroscopicasiailicovolcanoconiosis'], ['pneumonoultramicroscopicsicnanoconiosis'], ['apneumonoultramicroscoabioacabadabaaaaaaccababapicsilicovolcapnababamicroscopicsaapneumonoultranmicroscopicasiailicovolcanoconiosisilicovolcanoconiosisnoconiosisb'], ['reabaecraaarbazzzabaacabadabacapneumonoacabadabaccababapicsilicovolcisbammmlicovolcanoconiosiabcad'], ['pzzabaazabacacbadabacabayzbabadpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosisznnn'], ['pnababamicroscopicsilaaazzzabzaacabbabdabazabzyzzzanoconiosis'], ['reabaecraarbaaad'], ['aracabbpneumonoultramicroscoabioacabadabaccababapipneumonoultramicroscopicsiliaapneumonoultranmicroscopicasiailicovolcanoconiosiscovconiosiscsilicovolcanoconiosisabecar'], ['pneumonoultnramicroscoabioacabadabaccababapipneumonoultramicroscopicsilicovconiosiscsilicovolcanoconiosis'], ['pneumonoultramicroscoabioacabadabaccababapicsilpneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicRgxEovolcanoconiosisicovolcanoconmiosis'], ['zzzzazbzz'], ['aaabababbaracababecarcrnpneumoncoultramicroscoabacabadabaccababapicsilabcicovolcanoconiosisacecar'], ['apneumonoultramicroscobioacabadabaccababapicsilicovolcapnabaobamicroscopicsilicovolcanoconiosisnoconiosisb'], ['RgxErpneumonoultramicroscoabacasbadabaccababapicsilabcicovolcanobabbcconiosisacecar'], ['pneumonoulrpneumonoultramicroscoabacabadabpneumonoultramicroscoabibabecarbadabaccababapicsilicovolcanoconiosiabcasaccababapicsilabcicovolcanocosniosisaceccartramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosis'], ['mmpinababamicroscsilicovolcanocooniosisP'], ['opneumonoultramicnroscoabacabadabaccababapicsilabcicbabadovolcanoconiosis'], ['abacaba'], ['pneumonoultramicroscoabacabadpneumocpneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabapicspneumonoultramicroscoabacabadpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabbbabaabcadaccababapicsilabcicovlolcanoconiosisilicovolcanoconiosiscababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosis'], ['pnababascopicsapneumonoultramicroscoabioacabnadabaccababapicsiosisbilicovolcanoconiosis'], ['babarbabecarc'], ['pneumonoultramicroscoabacabadpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacabaabacabadabaccabaadaaabnoconiosisabaccaababapicsilabcicovolcanoconiosis'], ['pneumonoultramicnroscoabacabadabaccababapicsilabcicbabadovbolcanoconiosis'], ['rpneumonoultramicroscoabacabadabaccababapicsilabcicovcolcanocosniosisacecar'], ['rrpneumonoultramicroscoabacabadabaccababapicsilabcicovoabacabadaaabacabalcanobabbcconiosisacecaracabIuyepBBabecaar'], ['pneumonoultramicroscoabacabadpneumocpnabaccababapicsilicovolcisultramicroscoabioacabadabaccababapicsilicovolcanoconiosisiosis'], ['abaacabcadabacaba'], ['zzzabaacabammpnababamicrobaabacabadabaccabaadaaabcovzzabzzolcanoconiosisPbdababaadazyzzz'], ['abammpreabaecraaarbazzzabaacabadabacapneumonoacabadabaccababapicsilicovolcisbammmlicovolcanoconiosiabcadnaaaaababamicroscsilicovolcanoconiosisP'], ['panebaabacabadabaccabaadaaabumonoultramicroscopicsilicovconiosis'], ['pneumonoacabadabaccababapicsiliscaadovolcis'], ['baabaacabadabcabacbazzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabbacabab'], ['pnevolcanocoabcaniobabbceabcadsi'], ['reabaecraaarbaad'], ['pnzzzabaacapneumonoulrpneumonoultramicroscoabacabadabpneumonoultramicroscoabibabecarbadabaccababapicsilicovolcanoconiosiabcasaccababapicsilabcicovolcanocosniosisaceccartramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadapneumapneumonoultramicroscoabioacabadbapneumonoultramicroscopicsilicovolcanoconiosisbaccababapiabacabadabacabacsilibaadonoultramicroscoabacabadabaccababapicsilabcimcovolcanoconiosisbacabadabacabaabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosiscanoconiosis'], ['ddbaayzzzabaacabadabacabaazyzzzbacabadabcabacaaab'], ['apneumonoultramicroscoabioacabadbapneumonoultramicroscopicsilicovolcanoconiospiccababapiabacabadabacabacsilibaad'], ['rpneumonoultramicroscoabacabadabaccababappicsilabcicovcolcanocosniosisacecar'], ['pneumonnoacabadabaccabapicsiliscaadovolcis'], ['mmmlicovolrpneumonoultramicroscoabacabadabaccabocosniosisacecarcanoconiosis'], ['zzzabaacabbabdabazabzzz'], ['rpneumoncoultramicroscoabacabadabaccababappicsbaabaacabadabcaabaccababilabcicovolcanoconiosisacecar'], ['baasbaacabadabcabacbazzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabbacabab'], ['opneumonoultramicnrobabbbrpneumonoultrasmicroscoabioacabadabaccababapicsilpneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosisdarcsilabcicbabadovolcanoconiosis'], ['pneumonoultramicroscoasbacabadrpneumoncoultramicroscoabacabapneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzizicsiliconoconiosisaccababapicsilabcimcocanocon'], ['zzzabzaacababdabazyzzz'], ['ddbaabacabadabcabacabab'], ['abadaapnracababecaareumonoultramicroscoabioacabadbapneumonoultramicroscopicsilicovolcanoconiosisbaccababapiabacabadabacabacsilibaadbaababaabacabadabcabacaabcabadabacaacaba'], ['zzyzazyzzz'], ['pneumonoultramicroscopneumonoultramicrooscopicsicnanoconiosisabacabadabaccababapicsilabcimcovolcanocon'], ['baabacabadabacbcab'], ['pneumonoultramsiroscopicsilicovolcanoaosis'], ['rraraapneumonoultranmicroscopicasiailicovolcanoconiosis'], ['pneuababapdmonoultramicrosis'], ['pneumonoultramicroscoabioaacabadabaccababapicsilbicovolcanoconmcanoconiosisnoconoiommmmsisbiosis'], ['yyyy'], ['ababbaba'], ['xyyyx'], ['A man, a plan, a canal, Panama!'], ['aaaaaaaabac'], ['abcdedcba'], ['l4v4l4c4'], ['abacabadabacba'], ['zzzzazyzzz'], ['abacabadabacbaa'], ['abababadabacabadabacba'], ['abacabadabacab'], ['abacabadabacabaabc'], ['abaabacabadabacabaaaaaaa'], ['ababaabacabadabacabaaaaaaaacabadabacaba'], ['zzzzazyz'], ['abacabadaaaaaabacba'], ['abacabadabacabacabadabacabaabcaba'], ['bab'], ['pnebabumonoultramicroscopicsilicovolcanoconiosis'], ['pneumonoultramicrosracecarcopicsilicovolcanoconiosis'], ['abacaabadabacabaabc'], ['babaabcd'], ['racecaabacabadaaaaaabacbar'], ['bbab'], ['abacabzzzzazyzzbabadadaabacabaabc'], ['abacabadabacaabadabacabaabcaba'], ['babb'], ['zzzazyabcz'], ['abacaabadabacabaabac'], ['bazzzzazyzzzbaaabcd'], ['abaaabacabadaacabaaaaaaa'], ['abababadabacabadabacbabacabadabacbaa'], ['zzzzazyzzzazyzzzz'], ['abacabadabacbaabacabadabacabaa'], ['abababaabacabadabacabaaaaaaaacabadabacabaacabadabacabaabc'], ['pneumonoultramicroscopicsilicovolcanocovniosis'], ['bb'], ['abbab'], ['aaaaabb'], ['ababazzzazyzzzabadabacba'], ['raabacaabadabacabaabcceca'], ['racecaabacababdaaaaaabacbar'], ['abacabadabacabacabadabacabaabcabaaabab'], ['baab'], ['abb'], ['abacaabadabacbaa'], ['abababadabacabadpnebabumonoultramicroscopicsilicovolcanoconiosisabacbabacabadabacbaa'], ['pneumonoultramicrosracecarcoipicsilicovolcanoconiosis'], ['abacaabaabacabadabacabadabacbaa'], ['dbabaaabcd'], ['aabacabadabacbaabacabadabacab'], ['abababaabacabadabacabbbaaaaaaaacabadabacabaacabadabacabaabc'], ['abababaabacabadabacabaaababaabcdaaaaacabadabacabaacabadabacabaabc'], ['abacabadabaca'], ['pneumonoultramabaaabacabadaacabaaaaaaaicrosracecarcopicsilicovolcanoconiosis'], ['bbbad'], ['abaabacbbbadabadabacabaaaaaaa'], ['H'], ['ababaabacabadabacaabadabacabaabcababadabacabadabacba'], ['zabacabadabacaabadabacabaabcabazz'], ['zzzzaabacabadabacabacabadabacabaabcabazyz'], ['bbabbab'], ['ababb'], ['zzzzazracecaabacabadaaaaaabacbaryz'], ['abaababazzzzazyzzzbaaabcdcabadabacabaaaaaaa'], ['abacaaabadabacbaa'], ['abababaabacabadabacabbbaaaaaaaacaabadabacabaacabadabababaabacabadabacabaaaaaaaacabadabacabaacabadabacabaabcbaabc'], ['abzzzzazyabacabadabacbaazzzazyzzzzbadabacba'], ['bbd'], ['bbaabacaabaabacabadabacabadabacbaa'], ['babaad'], ['FBaYOc'], ['abaababaabacabadabacabaaababaabcdaaaaacabadabacababacabaabc'], ['abababadabacaabacabadabacabacabadabacabaabcabaaababbadpnebabumonoultramicroscopicsilicovolcanoconiosisabacbabacabadabacbaa'], ['abacabzzzzazyzzbabadadaabacabadabacabaaabacabaabc'], ['abacabacaabadabacbaaacbaa'], ['zzzzaabacabadabacabacabadabacabaabcbazyz'], ['zzzzazyzz'], ['abacabadabacaabacaaabadabacbaa'], ['abaabacbbbadabadabbdbacabaaaaaaa'], ['babracecaabacabadaaaaaabacbar'], ['abzzzzazyzzzazyzzzzacabadabacabacabadabacabaabcabaaabab'], ['abacaabbbadabacab'], ['pneumonoultramicrbabracecaabacabadaaaaaabacbarracecarcopicsilicovolcanoconiosis'], ['raabacabadabacabacabadabacabaabcabaaababecar'], ['bbaapneumonloultramicrosrpnebabumonoultramicroscopicsilicovolcanoconiosisacecarcopicsilicovolcanoconiosisbacaabaabacabadabacabadabacbaa'], ['pneumonoultramicrosracecarcopiocsilicovolcanoconiosis'], ['racecaabacababdaaabbabaaabacbar'], ['ababaabacabadabaabaababaabacabadabacabaaababaabcdaaaaacabadabacababacabaabccabaaaaaaaacabadabacaba'], ['zzzzazababaabacabadabacabaaaaaaaabaabacbbbadabadabacabaaaaaaaacabadabacabayzzz'], ['apneumonoultramicroscopicsilicovolcanocovniosisbab'], ['bbaabacaabaabacazzzazyzzzbadabacabadabacbaa'], ['raabacaabadabacabaapnebumonoultramicroscopicsilicovolcanocovniosisbababcceca'], ['abacaabbbbadabacab'], ['zzzzazyzzzazyzzabacabadabacbaabacabadabacabaazzz'], ['abaabacabadabacababaaaaaa'], ['zzzzazzyzzzazyzzabacabadabacbaabacabadabacabaazzz'], ['abacaabadabacaba'], ['bbbab'], ['bazzzazyzzzbaaabcd'], ['aabaababaabacabadabacabaaababaabcdaaaaacabadabacababacabaabc'], ['abababaabacabadabacabaaababaabcdaaaaacabadabacabaacabadabacabaFBaYOcabc'], ['abzzzzazyzzzazyzzzzacabadaabacabacabadabacababacabadabacbaabacabadabacabaaaabcabaaabab'], ['bazzzazyzzzbaabacaabadabacbaaaabcd'], ['pneumonoultramicroscopicsilicovolcanniosis'], ['abababaabacabadabacabaaababaabcdaaaaacabadabacabaacabadaabacabaabc'], ['bazzzzazyzzzbaaababaabacabadabacabaaaaaaaacabadabacabaabcd'], ['zzzzazababaabacabadabacabaaaaaaababaabacbbbadabadabacabaaaaaaaacabadabacabayzzz'], ['bbaapneumonloultramicrosrpnebabumonoultramicroscopicsilicovolcanoconiosisaababaabacabadabacaabadabacabaabcababadabacabadabacbacecarcopicsilicovolcanoconiosisbacaabaabacabadabacabadabacbaa'], ['abababaabacabadabacabaaaaaaaacabadabacabaacabaabacabadabacbaabacabadabacabaadabacabaabc'], ['acabadabacaebacabadabacabaabcabaaababecar'], ['abacabacaabadabacbbabaadaaaa'], ['abababaabacabadabacabbbaaaaaaaacaabadabacabaacabadabababaabacabadabacabaaaaaaaacapneumonoultramicrbabracecaabacabadaaaaaabacbarracecarcopicsilicovolcanoconiosisbadabacabaacabadabacabaabcbaabc'], ['aaaaabbb'], ['zzzzaabacabadabazzzzazyzzacabaabcabazyz'], ['abacabacaabaadabacbaaacbaa'], ['bbbaa'], ['abacabbbacaabacaaabadabacbaa'], ['babbabaadzzzazyzabacabadabacaabadabacabaabcabazzbaaabcd'], ['zzzzazz'], ['abababaabacabadabacabaaababaabcdaaaaacabadabacabaacabadababababaabacabadabacabbbaaaaaaaacaabadabacabaacabadabababaabacabadabacabaaaaaaaacabadabacabaacabadabacabaabcbaabcBaYOcabc'], ['abaabacabadabacababaabacabadabacaabadabacabaabcabaaaaaa'], ['bazzzzazyzzzbaaababaabacbbdabadabacabaaaaaaaacabadabacabaabcd'], ['abbaab'], ['babababcd'], ['bbbb'], ['ababaabacabadabacaabadabacaabaabcababadabacabadabacba'], ['zzzzazracecaabacabadaaaaaabacbarabacabadabacabayz'], ['racecaabacabbabdaaaaaabacbar'], ['abacbaababacaabadabacbbabaadaaaa'], ['bazzzzazyzzzbazaababaabacbbdabadabacabaaaaaaaacabadabacabaabcd'], ['apneumonouisbab'], ['abacabadabbacba'], ['abacaabbbadpnebabumonoultramicroscopicsilnicovolcanoconiosisbacab'], ['bazzzaaaacabadabacabaabcd'], ['aaaraabacaabadabacabaapnebumonoultramicroscopicsilicovolcanocovniosisbababccecaaabbb'], ['zabzzabababadabacabadabacbabacabadabacbaazzazyabacabadabacbaazzzazyzzzzbadabacba'], ['abababaabacabadabadbabaaabcdcabaaababaabcdaaaaacabadabacabaacabadaabacabaabc'], ['ababazzzazyzzzabadabacbaab'], ['abababaabacabadabacabaaababaabcdaaaaacabadabacabaacabadabacpneumonoultramicroscopicsilicovolcanniosisabaabc'], ['ababaabacabadabaabaabababadabacababacabaabccabaaaaaaaacabadabacaba'], ['racecaabacabadaaaaaaabaacbar'], ['dabacabaaababaabcdaaaaacabadabacabaacabadabacabaFBaYOcabc'], ['zzzz'], ['abacabadabacabacabadababcabaabcaba'], ['racecaabacabababaababazzzzazyzzzbaaabcdcabadabacabaaaaaaadaaaaaabacbar'], ['racecaabpneumonoultramicrbabracecaabacabadaaaaaabacbarracecarcopicsilicisaaadaaaaaabacbar'], ['ababadbabaaabcdbadabacabadabacbabacabadabacbaa'], ['racecaabcacab'], ['ababazzzazyzzzabadabaa'], ['ababaabacadabacabaaababaabcdaaaaacabadabacabaacabadabacabaFBaYOcabcba'], ['ababazzzzzzabadabaa'], ['zzzzaabzacabadabacabacabadabacabaabcbazabacabacaabadabacbaaacbaayz'], ['racecaabacabadaaaaaabacbarabb'], ['abacabadaabacbaabababacabadaaaaaabacbaacaabadabacbbabaadaaaabacbaa'], ['abababaabacabadabacabbbaaaaaaaacabadabacaabaacabadabacabaabc'], ['zzzzzazyz'], ['bbaab'], ['bazzzzazyzzzbaaababaabacabadabdacabaaaaaaaacabadabacabaabcd'], ['abacaabaabacabadabacabadaabacbaa'], ['aaaaabbabaaabacabadaacabaaaaaaab'], ['zzzzazyzzzazyzzabacabadabacbabaababazzzzazyzzzbaaabcdcabadabacabaaaaaaaaabacabadabacabaazzz'], ['bazzzdzazyzzzbaaababaabacabadabdacabaaaaaaaacabadabacabaabcd'], ['ababaabacabadabaabaababaabacabadabacabaaababaabcdaaaaacabadabacababacaaaaaaaaacabadabacaba'], ['abbapneumonoultramicroscopicsilicovolcanniosis'], ['abbaaracecaabacababdaaabbabaaabacbarb'], ['ababaabacabadabaabaababaabacabadabacababaababaabcdaaaaacabadabacababacabaabccabaaaaaaaacabadabacaba'], ['bazzzazyzzzbaabacaabadabacbaaaabacabadabacbaabcd'], ['bazzzdzazyzzzbbaaababaabacabadabdacabaaaaaaaacabadabacabaabcd'], ['pabababaabacabadabacabaaaaaaaacabadabacabaacabadabacabaabcneumoanniosis'], ['abababaabacabadabacabaaababaabcdaaaaacabadabacabaacabadabacabracecaabacababdaaabbabaaabacbaraabc'], ['abacabacaabaadabacbaaacbaabacabadabacabaabca'], ['racecaabacabaar'], ['ababazzzazyzzzbaababazzzzazyzzzbaaababaabacabadabdacabaaaaaaaacabadabacabaabcdcaabadabacbaaaabcdaabc'], ['ababaabacabadabacabaaaaaaaacabadabaababaabacabadabaabaababaabacabadabacabaaababaabcdaaaaacabadabacabaabacaaaaaaaaacabadabacabacaba'], ['abzzzzazyabacabadabacbaaazzzazyzzzzbadabacba'], ['abraabacaabadabacabaapnebumonoultramicroscopicsilicovolcanocovniosisbababccecaacaabadabacabaabacbbaabacaabaabacabadabcacabadabacbaa'], ['raabacaabadabacabaabccecca'], ['baabazzzdzazyzzzbbaaababaabacabadabdacabaaaaaaaacabadabacabaabcdb'], ['ababaabacabadabacaabadabacaabaabcababadabacaabadabacba'], ['abacaababazzzzazyzzzbazaababaabacbbdabadabacabaaaaaaaacabadabacabaabcddabacbaa'], ['racecaaabababadabacabadabacbabacabadabacbaabcacab'], ['abacaabbbbadabaababaabacadabacabaaababaabcdaaaaacabadabacabaacabadabacabaFBaYOcabcbacab'], ['ababaabacabadabaabaababaabacabadabacabaaababaabcdaaaaacabadabacababacaaaaaaaaacabadabacabaa'], ['abacabadabacaabcadabacabaabcaba'], ['abacabadabacabpneumonoultramicrbabracecaabacabadaaaaaabacbarracecarcopicsilicovolcanoconiosis'], ['pneumonoultramabaaabacabadaacabaaaaaaaicrosracecarcopicsuilicovolcanoconiosis'], ['aabaababaabacabadabacabaaababaabbcdaaaaacabadabacababacabaaabc'], ['oQbCC'], ['abacaababazzzzazyzzzbazaababaabacbabdabadabacabaaaaaaaacabadabacabaabcddabacbaa'], ['ababaabacabadabacaabadabacaabzzzzazyabacabadabacbaazzzazyzzzzbadabacbaabadabacaabadabacba'], ['zzzazabababaabacabadabacabaaaaaaaacabadabacabaacabadabacabaabcyzzz']]\n    results = ['', 'x', 'xyzyx', 'xyx', 'jerryrrej', 'racecar', 'level', 'tenet', 'noon', 'redder', 'refer', 'dewed', 'madam', 'malayalam', 'radar', 'r', 'rrefreracecarerferr', 'eracecare', 'raracececarar', 'rrrefrearaerferrr', 'raceredderecar', 'araracecaeacecarara', 'rradarr', 'racrrefreraceereddrcecrddereecarerferrcar', 'levevlvevel', 'lracrrefreraceereddrceeveleveecrddereecarerferrcarl', 'rrefreracreferefercarerferr', 'rardaradrar', 'levevltenetlvevel', 'racrrefreraceeredrdrcecrdrdereecarerferrcar', 'racrrefracrrefreraceereddrceaceereddrcecrddereecaecrddereecarerferrcarferrcar', 'ararracrrefreraceeredrdrceacecaecrdrdereecarerferrcarrara', 'noradarolevevlnlveveloradaron', 'rrefreralevevlceclvevelarerferr', 'racrrefreraceereddrcerrefreracecarerferrecrddereecarerferrcar', 'onoono', 'rrefreraraceceececararerferr', 'tenet', 'racrrefddrcecrddferrcar', 'dedwedewded', 'erradarracecarradarre', 'acececa', 'leeveleveel', 'racrrefrracrrefracrrefreraceereddrceaceereddrceacrrefreraceereddrceaceereddrcecrddereecaecrddereecarerferrcaecrddereecaecrddereecarerferrcarferrcarrferrcar', 'rr', 'rrefreracrdewedewedrcarerferr', 'rrrarteneaceceececaenetrarrr', 'malaylalamalalyalam', 'rarcrrefreraceereddrcerrefreracecarerferrecrddereecarerferrcrar', 'rrraertracrrefracrrefreraceereddrceaceereddrceeneacededwedceecdewdedecaeneecrddereecaecrddereecarerferrcarferrcartrearrr', 'erradarracerradarraceecarradarrecarradarre', 'lveeveleveevl', 'rrefreracreerradarraceferefecarradarreercarerferr', 'lracrrefreraceereddrceeveltenetleveecrddereecarerferrcarl', 'rrraertracrrefraclracrrefreraceereddrceeveltenetrrefreraceereddrceaceereddrceeneacededwedceecdewdedecaeneecrddereecaecrddereecarerferrtenetleveecrddereecarerferrcarlcarferrcartrearrr', 'rardaaraadrar', 'erradarracerrlracrrefreraceereddrceeveladarraceecarradaleveecrddereecarerferrcarlrrecarradarre', 'levevllevevlvevellvevel', 'rrerradarracerradarraceeefreracreferefercarerfeeecarradarrecarradarrerr', 'maadamadaam', 'ded', 'CIBIC', 'rarcrrefreraceereddrcerrrefrefracecarferferrrecrddereecarerferrcrar', 'lvevl', 'rer', 'lracrrefreraceedewedreddrceeveleveecrdderdewedeecarerferrcarl', 'rrraertracrrefraclracrrefreraceereddrceeveltenetrrefreraceereddrceaceerceddrceeneacededwedceecdewdedecaeneecrddecreecaecrddereecarerferrtenetleveecrddereecarerferrcarlcarferrcartrearrr', 'racrraefracrrefreraceereddrcerrraertracrrefracrrefreraceereddrceaceereddrceeneacededwedceeaceereddrcecrddereecaeecdewdedecaeneecrddereecaecrddereecarerferrcarferrcartrearrrecrddereecarerferrcarfearrcar', 'rdewedr', 'rrraertracrrefraclracrrefreracceereddrceeveltenetrrefreraceereddrceaceerceddrceeneacededwedceecdewdedecaeneecrddecreecaecrddereecarerferrtenetleveecrddereeccarerferrcarlcarferrcartrearrr', 'mraceredderadamadaredderecarm', 'onnoonno', 'lenetenel', 'lrrraertracrrefracrrefreraceereddrceaceereddrceeneacededwedceeveeveleveeveecdewdedecaeneecrddereecaecrddereecarerferrcarferrcartrearrrl', 'racrraefracrrefreraceereddrcerrraertracrrefracerrefreraceereddrceaceereddrceeneacededwedceeaceereddrcecrddereecaeecdewdedecaeneecrddereecaecrddereecarerferrecarferrcartrearrrecrddereecarerferrcarfearrcar', 'malalam', 'eracare', 'malaararacecaelamaleacecararaalam', 'levelevellonoonollevelevel', 'acracrrefreraceeredrdrceecrdrdereecarerferrcarca', 'errradarracerradarraceecarradarrecarradarrre', 'rarcrrefreraceereddrccerrrefrefracecarferferrreccrddereecarerferrcrar', 'malatenetlamaltenetalam', 'levelevellonoonracrrefddrcecrddferrcarnoonollevelevel', 'malatenetlamrardaaraadrarmaltenetalam', 'rrefreralevevlmalalamcecmalalamlvevelarerferr', 'malalllamalllalam', 'rraddarr', 'acracrrerardaarceecraadrarerrcarca', 'lracrrefrereddrceeveltenetleveecrddererferrcarl', 'CCIBICC', 'racelevevlredderlvevelecar', 'redderradarredder', 'mracereddreradamadarerdderecarm', 'rarcrrefreraceereddrrrefreralevevlmalalamcecerrefreracecarerferrececmalalamlvevelarerferrrddereecarerferrcrar', 'rarcrrefreraceereddrcerlevelevellonoonracrrefddrcerrefrefracecarferferrecrddferrcarnoonollevelevelrecrddereecarerferrcrar', 'errrefrerarerferrre', 'malarrefreracraeerradarraceferelamalerefecarradarreearcarerferralam', 'rlevevltenetrefreracrdewedewedrcarerfertenetlvevelr', 'rrraertracrrefraclracrrefreraceereddrceeveltenetrrefreraceereddrceaceereddrceeneaceredderdedwedceecdewdedredderecaeneecrddereecaecrddereecarerferrtenetleveecrddereecarerferrcarlcarferrcartrearrr', 'rrraertracrrefraclracrrefreraceereddrceeveltenetrrerfreraceereddrceaceereddrceeneacededwedceecdewdedecaeneecrddereecaecrddereecarerfrerrtenetleveecrddereecarerferrcarlcarferrcartrearrr', 'rmraceredderadameferefemadaredderecarmr', 'malalllnoonamanoonlllalam', 'zzzazyzzzyzazzz', 'racecar', 'pneumonoultramicroscopicsilicovolcanoconiosisoinoconaclovociliscipocsorcimartluonomuenp', 'babadabab', 'ababa', 'a', 'aba', 'abcba', 'abacabadabacaba', 'aaaaa', 'aabcbaa', 'racababecaracebabacar', 'abacabadabaccabadabacaba', 'zzzabzzbazzz', 'abbcbba', 'm', 'abaacabadabacabadabacaaba', 'baadaab', 'zzzabaacabadabacabaazyzzzyzaabacabadabacaabazzz', 'rababecaracebabar', 'dbabadababd', 'baabacabadabaccabaadaabaccabadabacabaab', 'P', 'zzabaazyzzzyzaabazz', 'p', 'aaabaaa', 'racabaacabadabacabaecaraceabacabadabacaabacar', 'aapneumonoultranmicroscopicsilicovolcanoconiosisoinoconaclovociliscipocsorcimnartluonomuenpaa', 'PdbabadababdP', 'abacacbadabacabadabcacaba', 'pnababamicroscopicsilicovolcanoconiosisoinoconaclovociliscipocsorcimababanp', 'pneumonoultramicroscopicsilicovolcanoconiosisoinoconaclovociliscipocsorcimartluonomuenp', 'aaa', 'pneumonoultramicroscoabacabadabaccababapicsilicovolcanoconiosisoinoconaclovociliscipababaccabadabacabaocsorcimartluonomuenp', 'baabacabadabaccabaadaaabaaadaabaccabadabacabaab', 'mpm', 'pneumonoultramicroscoabiacabadabaccababapicsilicovolcanoconiosisoinoconaclovociliscipababaccabadabacaibaocsorcimartluonomuenp', 'abacacbadabacabababadabababacabadabcacaba', 'abacabaaaabdabaccabadbaaaabacaba', 'racabaacabadabacababcaecaraceacbabacabadabacaabacar', 'bbacabb', 'baabacabadabcabaccabaadaaabaaadaabaccabacbadabacabaab', 'pnevolcanoconiosisoinoconaclovenp', 'PdbababdP', 'pneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconiosisoinoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenp', 'mm', 'pneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenp', 'pneumonoultramicroscoabacabadabaccababapicsilabcicovolcanoconiosisoinoconaclovocicbaliscipababaccabadabacabaocsorcimartluonomuenp', 'abaadaaba', 'pneumonoacabadabaccababapicsilicovolcanoconiosisoinoconaclovociliscipababaccabadabacaonomuenp', 'pneumonoultramicroscopicsilicovconiosisoinocvociliscipocsorcimartluonomuenp', 'pnababascopicsilicovolcanoconiosisoinoconaclovociliscipocsababanp', 'abcacba', 'zzabaazabacacbadabacabayzzzyabacabadabcacabazaabazz', 'raabacabaecaraceabacabaar', 'bbaracababecarcracebabacarabb', 'pneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpdabacabaocsorcimartluonomuenp', 'mmm', 'babbcbbab', 'pneumonoultramicroscoabacabadabaccababapicsilabcicbabadovolcanoconiosisoinoconaclovodababcicbaliscipababaccabadabacabaocsorcimartluonomuenp', 'mmmlicovolcanoconiosisoinoconaclovocilmmm', 'abaaddaaba', 'azzabaazyzzzyzaabazza', 'pnababascopicsilicovolcaanoconiosisoinoconaaclovociliscipocsababanp', 'rababecrarcebabar', 'pnebaabacabadabaccabaadaaabumonoultramicroscopicsilicovconiosisoinocvociliscipocsorcimartluonomubaaadaabaccabadabacabaabenp', 'rpneumonoultramicroscoabacabadabaccababapicsilabcicovolcanoconiosisacecaracecasisoinoconaclovocicbaliscipababaccabadabacabaocsorcimartluonomuenpr', 'apneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconiosisbsisoinoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpa', 'ppneumonoacabadabaccababapicsilicovolcanoconiosisoinoconaclovociliscipababaccabadabacaonomuenpp', 'mmmlicovolcanoconiosiabcasacbaisoinoconaclovocilmmm', 'pneumonoultramicroscoabioacabadabaccababapipneumonoultramicroscopicsilicovconiosiscsilicovolcanoconiosisoinoconaclovociliscsisoinocvociliscipocsorcimartluonomuenpipababaccabadabacaoibaocsorcimartluonomuenp', 'pneumonoultramicroscoabacabadpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccomuenpdabacabaocsorcimartluonomuenp', 'racabbabecaracebabbacar', 'aaaa', 'apneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconniosisbsisoinnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpa', 'pnababamicrosopicsilicovolcanoconiosisoinoconaclovocilisciposorcimababanp', 'pneumonoultramicroscoabiacaracababecarbadabaccababapicsilicovolcanoconiosiabcasacbaisoinoconaclovociliscipababaccabadabracebabacaracaibaocsorcimartluonomuenp', 'd', 'apneumonoultramicroscopicsilicovconiosisoinocvociliscipocsorcimartluonomuenpa', 'rpneumoncoultramicroscoabacabadabaccababapicsilabcicovolcanoconiosisacecaracecasisoinoconaclovocicbaliscipababaccabadabacabaocsorcimartluocnomuenpr', 'mmpneumonoultramicroscoabioacabadabaccababapicsilicovolcanooniosisoinoonaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpmm', 'zzzabaacabadabacabammmlicovolcanoconiosiabcasacbaisoinoconaclovocilmmmabacabadabacaabazzz', 'aaaaababaaaaa', 'zzzabaacababdabazyzzzyzabadbabacaabazzz', 'pneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosisoimnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenp', 'zzzabaacababdababaadazyzzzyzadaababadbabacaabazzz', 'babbbcbbbab', 'pneumonoultramicroscoabiacaracababecarbadabaccilicovolcanoconiosiabcasacbaisoinoconaclovociliccabadabracebabacaracaibaocsorcimartluonomuenp', 'babbcabcacbacbbab', 'ababadababa', 'babbcabcadacbacbbab', 'abacacbadabacaabaacabadabcacaba', 'pneumonoultramicroscopicsilicovolcnanoconiosisoinoconanclovociliscipocsorcimartluonomuenp', 'pneuababadmonoultramicroscopicsilicovconiosisoinocvociliscipocsorcimartluonomdababauenp', 'dd', 'abbcabpneumonoultramicroscoabiacabadabaccababapicsilicovolcanoconiosiscadacsisoinoconaclovociliscipababaccabadabacaibaocsorcimartluonomuenpbacbba', 'apneumonoultramicroscoabioacabadabaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconiosisbsisoinoconsisoinoconaclovociliscipocsorcimababanpaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpa', 'baabacabcacbacabaab', 'raceacaracaecar', 'zzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszsisoimnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazz', 'apneumonoultramicroscoabioacabadabaccababapicsilibaadaabiliscipababaccabadabacaoibaocsorcimartluonomuenpa', 'pneumonoultramicroscoabioacabadabaccababapicsilpneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosisoimnoconaclovocisisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpdabacabaocsorcimartluonomuenpliscipababaccabadabacaoibaocsorcimartluonomuenp', 'pppneumonoacabadabaccababapicsilicovolcanoconiosisneumonoacabadabaccababapicsilicovolcanoconiosisoinoconaclovociliscipababaccabadabacaonomuensisoinoconaclovociliscipababaccabadabacaonomuenppp', 'bbbabbbcbbbabbb', 'mmpnababamicroscopicsilicovolcanoconiosisPsisoinoconaclovociliscipocsorcimababanpmm', 'pneumonoultramicroscoabracabbabecarioacabadabaccababapipneumonoultramicroscopicsilicovconiosiscsilicovolcanoconiosisoinoconaclovociliscsisoinocvociliscipocsorcimartluonomuenpipababaccabadabacaoiracebabbacarbaocsorcimartluonomuenp', 'aa', 'ppneumonoacabadabaccababapicsilicovoilcanoconiosisoinoconacliovociliscipababaccabadabacaonomuenpp', 'UBIBU', 'UBIracabaacabadabacababcaecarIraceacbabacabadabacaabacarIBU', 'pneumonoacabadabaccababapicsilicovolcisiclovociliscipababaccabadabacaonomuenp', 'aaaaabzzabaazyzzzabazzzyzaabazzbaaaaa', 'WXcKAIAKcXW', 'rar', 'bbabadababb', 'pneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaapneumonoultramicroscopicsilicovconiosislcanoconiosisoinoconaclsisoinocvociliscipocsorcimartluonomuenpaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenp', 'pneumonaaaaoacabadabaccababapicsilicovolcisiclovociliscipababaccabadabacaoaaaanomuenp', 'baabaacabadabcabaccababaccabacbadabacaabaab', 'abacabadaabaccabaadabacaba', 'apneumonoultramicrovolcanoconiosisnoconoiosisbsisoionoconsisoinoconaclovorcimartluonomuenpa', 'pneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabapicsilicovolcanoconiosisoinoconaclovociliscipabazsisoimnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazzbaccabadaboacaonomuenp', 'aba', 'apneunmonoultramisclibaadaabilcsimartluonomnuenpa', 'bcb', 'UBIzzabaazyzzzyzaabazzIBU', 'abacabaaaabdabaccabadbaaaabacaba', 'zzzabaacabadabacapneumonoacabadabaccababapicsilicovolcisbammmlicovolcanoconiosiabcasacbaisoinoconaclovocilmmmabsiclovociliscipababaccabadabacaonomuenpacabadabacaabazzz', 'adda', 'mmpnababamicroscopicsilcicovolcanoconiosisPsisoinoconaclovocicliscipocsorcimababanpmm', 'rabaabecrarcebaabar', 'racabbarabbacar', 'rapneumonoacabadabaccababapicsilicovolcisrsiclovociliscipababaccabadabacaonomuenpar', 'pneumonoacabadabaccababapicsiliecovolcanoconiosisoinoconaclovoceiliscipababaccabadabacaonomuenp', 'rrarr', 'mmmlicovolcanoconiosiabcaracabbarsrabbacaracbaisoinoconaclovocilmmm', 'apneumonoultramicroscozzabaazabacacbadabacabayzzzabioacabadabaccababapicsilibadabiliscipababaccabadabacaoibazzzyabacabadabcacabazaabazzocsorcimartluonomuenpa', 'aracabbpneumonoultramicroscoabioacabadabaccababapipneumonoultramicroscopicsilicovconiosiscsilicovolcanoconiosisabecaracebasisoinoconaclovociliscsisoinocvociliscipocsorcimartluonomuenpipababaccabadabacaoibaocsorcimartluonomuenpbbacara', 'apneumonoultramicroscoabioacabadbapneumonoultramicroscopicsilicovolcanoconiosisbaccababapiabacabadabacabacsilibaadaabiliscabacabadabacabaipababaccabsisoinoconaclovociliscipocsorcimartluonomuenpabdabacaoibaocsorcimartluonomuenpa', 'rpneumoncoultramicroscoabacabadabaccababapicsbaabaacabadabcabaccababilabcicovolcanoconiosisacecaracecasisoinoconaclovocicbalibabaccabacbadabacaabaabscipababaccabadabacabaocsorcimartluocnomuenpr', 'raracecarcabaacabadabacabaecaraceabacabadabacaabacracecarar', 'pneumonoultramicroscoabioacabadabaccababapipneumonoultramicroscopicsilicovconiosiscsailicovolcanoconiosisoinoconaclovociliascsisoinocvociliscipocsorcimartluonomuenpipababaccabadabacaoibaocsorcimartluonomuenp', 'pneumonoultramicroscopicsilicovolcanoaosisoaonaclovociliscipocsorcimartluonomuenp', 'abba', 'pnoeumonoultramicroscoabacabadabaccababapicsilabcicbabadovolcanoconiosisoinoconaclovodababcicbaliscipababaccabadabacabaocsorcimartluonomueonp', 'aaabababbaracababecarcracebabacarabbababaaa', 'racababecaaraacebabacar', 'rpneumonoultramicroscoabacabadabaccababapicsilabcicovolcanobabbcconiosisacecaracecasisoinoccbbabonaclovocicbaliscipababaccabadabacabaocsorcimartluonomuenpr', 'baabacabadabcabacaabaacabacbadabacabaab', 'pneumonoultramicroscoabacabadabaccababapicsilabcimcovolcanoconiosisoinoconaclovocmicbaliscipababaccabadabacabaocsorcimartluonomuenp', 'zzzabaacabbabdabazyzzzyzabadbabbacaabazzz', 'mmmlirababecrarcovolcanoconiosiabcaracabbarsrabbacaracbaisoinoconaclovocrarcebabarilmmm', 'ammmlicovolcanoconiosiabcasbsacbaisoinoconaclovocilmmma', 'babbab', 'pneumonoultramiroscopicsilicovolcanoaosisoaonaclovociliscipocsorimartluonomuenp', 'pneumonoultramirbadabaccababapicsilicovolcanoconiosiabcasacbaisoinoconaclovociliscipababaccabadabrimartluonomuenp', 'bbaracabaabacabadabcabacbaabaacabadabcabaccababcabaadaaabbabecarcracebabbaaadaabacbabaccabacbadabacaabaabcabacbadabacabaabacarabb', 'raceacrpneumonoultramicroscoabacabadabaccababapicsilabcicovolcanoconiosisacecardracecasisoinoconaclovocicbaliscipababaccabadabacabaocsorcimartluonomuenprcaecar', 'rababecraarcebabar', 'canoconiosisnoconoiosisbsisoionoconsisoinoconac', 'abaaabacabadabacabaaaba', 'mmpnababamicroscopicsilicovzzabaazyzzzolcanoconiosisPsisoinoconaclozzzyzaabazzvociliscipocsorcimababanpmm', 'rabaecraarceabar', 'pppneumonoacabadabaccababapicsilicovolcanoconiosisneumonoacapbadabaccababapicsilicovolcanoconiosisoinoconaclovociliscipababaccabadabpacaonomuensisoinoconaclovociliscipababaccabadabacaonomuenppp', 'pnevolcanocoabcaniobabbcabcadsisdacbacbbaboinacbaoconaclovenp', 'abacabadaaabacabaaadabacaba', 'bbaracababebaabacabcacarcracacbacabaabebabacarabb', 'babbcbcbbab', 'pneumonoultramicroscoabacabadpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacabaabacabadabaccabaadaaabnoconiosisabaccababapicsilabcicovolcanoconiosisoinoconaclovocicbaliscipababaccabasisoinoconbaaadaabaccabadabacabaabacaaalovociliscizzzyzaabacabadabacaabazzzpababaccomuenpdabacabaocsorcimartluonomuenp', 'pppneumonoacabadabaccababapicsilicovolcanoconiocovolcanoconiosisoinoconaclovocoinoconaclovociliscipababaccabadabacaonomuenppp', 'abaaabacabadabacaabaacabadabacabaaaba', 'pnevenp', 'pneumonoultramicroscopicsilicovconioisioinocvociliscipocsorcimartluonomuenp', 'yzzzabaacabadabacabaazyzzzyzaabacabadabacaabazzzy', 'mmmm', 'apneumonoultramicrpneumonoacabadabaccababapicsiliecovolcanoconiosisoscopicsilimmcovconiosisoinocvocmmiliscipocsosisoinoconaclovoceiliscipababaccabadabacaonomuenprcimartluonomuenpa', 'pneumonoultramicroscoabacabadpneumocpneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabapicsilicovolcanoconiosiscababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababacsisoinoconaclovociliscipabazsisoimnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazzbaccabadaboacaonomuenpcomuenpdabacabaocsorcimartluonomuenp', 'baabacabadabaccabaadaaaabaaaadaabaccabadabacabaab', 'pneumonoultramicroscoabacabadabaccababapicsilabcimcovolcanoconaaaaioabacabaaaabdabaccsisccabadbaaaabacabaoiaaaanoconaclovocmicbaliscipababaccabadabacabaocsorcimartluonomuenp', 'baabacabadabaccabaadaaaaabaaaaadaabaccabadabacabaab', 'abacaba', 'pneumonoultramicroscoabacabadabaccababapicsilabcimcovolcanoconaclovocmicbaliscipababaccabadabacabaocsorcimartluonomuenp', 'pneumonoultramicroscoasbacabadabaccababapicsilabcimcovolcanoconaclovocmicbaliscipababaccabadabacabsaocsorcimartluonomuenp', 'mmpnababamicroscopicsilicovzzabzzolcanoconiosisPsisoinoconaclozzbazzvociliscipocsorcimababanpmm', 'baabbaab', 'rpneumoncoultramicroscoabacabadabaccababapicsbaabaacabadabcabaccababpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaapneumonoultramicroscopicsilicovconiosislcanoconiosisoinoconaclsisoinocvociliscipocsorcimartluonomuenpaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpbabaccabacbadabacaabaabscipababaccabadabacabaocsorcimartluocnomuenpr', 'zzabaazabacacbadabacabazzabacabadabcacabazaabazz', 'apneumonoultramicroscoabioacabadabaaaaaaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconiosisbsisoinoconsisoinoconaclovociliscipocsorcimababanpaclovociliscipababaccaaaaaabadabacaoibaocsorcimartluonomuenpa', 'pnababascopicspneumonoultramicroscopicsilicovolcanoaosisilicovolcanocoosisooconaclovocilisisoaonaclovociliscipocsorcimartluonomuenpscipocsababanp', 'pneumonoultramicroscoabiacaracabazzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszbecarbadabaccilicovolcanoconiosiabcasacbaisoinoconaclovociliccabadabracebzsisoimnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazzabacaracaibaocsorcimartluonomuenp', 'abbaabba', 'zzzzz', 'baacbacabadabaccabaadaaaabaaaadaabaccabadabacabcaab', 'apneuapneumonoultramicroscoabioacabadabaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconiosisbmonoultramicroscozzabaazabacacbadabacabayzzzabioacabadabaccababapicsilibadabiliscipababaccabadabacaoibazzzyabacabadabcacabazaabazzocsorcimartluonombsisoinoconsisoinoconaclovociliscipocsorcimababanpaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpauenpa', 'IuyepBBpeyuI', 'aapneumonoultranmicroscopicasialicovolcanoconiosisoinoconaclovocilaisacipocsorcimnartluonomuenpaa', 'abaaabacabadabacabazzzazyzzzyzazzzabacabadabacabaaaba', 'amma', 'abacabadabaaccabaccaabadabacaba', 'baabaacabadabcabacbaabbacababacabbaabcabacbadabacaabaab', 'UBUIUBU', 'zzzabaacabammpnababamicroscopicsilicovzzabzzolcanoconiosisPbdababaadazyzzzyzadaababadbPsisoinoconaclozzbazzvociliscipocsorcimababanpmmabacaabazzz', 'zzzabaacabbabdabazabzyzzzyzbazabadbabbacaabazzz', 'abacabadabaaccacbaabcaccaabadabacaba', 'raddar', 'pneumonoultramicroscoasbacabadrpneumoncoultramicroscoabacabadabaccababapicsilabcicovolcanoconiosisacecarabaccababapicsilabcimcocanoconacocmicbaliscipababaccabaracecasisoinoconaclovocicbaliscipababaccabadabacabaocsorcimartluocnomuenprdabacabsaocsorcimartluonomuenp', 'abacaacaba', 'pneevolcanoconiosisoinoconacloveenp', 'pneuababadmonoultramicroscopicsilrababecaricovconiosisoinocvociracebabarliscipocsorcimartluonomdababauenp', 'reabaecraarbaadaabraarceabaer', 'pneumonoultramicnroscoabacabadabaccababapicsilabcicbabadovolcanoconiosisoinoconaclovodababcicbaliscipababaccabadabacabaocsorncimartluonomuenp', 'pneumonoacabadacbaccababapicsiliecovolcanoconiosisoinoconaclovoceiliscipababaccabcadabacaonomuenp', 'pneumonoultramicroscoasbacabadabaccababapibcimcovolcanoconaclovocmicbipababaccabadabacabsaocsorcimartluonomuenp', 'pneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzizicsilicovolaaacanoconiosisoinoconacaaalovociliscizizzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenp', 'ddbaabacabadabcabacaabaacabacbadabacabaabdd', 'aaabababbaracabapneumonoultramicrpneumonoacaebadabaccababapicsiliecovolcanoconiosisoscopicsiblimmcovabaadconiosiscarcracsisoinocdaabavocmmilbiscipocsosisoinoconaclovoceiliscipababaccabadabeacaonomuenprcimartluonomuenpabacarabbababaaa', 'pnevoaapneumonoultranmicroscopicasialicovolcanoconiosiscanoconiosisoinoconacsisoinoconaclovocilaisacipocsorcimnartluonomuenpaaovenp', 'baabacabbadabaccabaadaaaabaaaadaabaccabadabbacabaab', 'mmmlicovolcanoconiosiabccaracabbarsrabbacaraccbaisoinoconaclovocilmmm', 'baadcbacabadabaccabaadaaaabaaaadaabaccabadabacabcdaab', 'pnevoaapneumonoultranmicroscopicasialicovolcanoconioosiscanoconiosisoinoconacsisooinoconaclovocilaisacipocsorcimnartluonomuenpaaovenp', 'rrababecrarcebabarr', 'abacabadaabaccaaapneumonoultranmicroscopicsilicovolcanoconiosisbabsisoinoconaclovociliscipocsorcimnartluonomuenpaaaccabaadabacaba', 'mmpcnababamicroscopicsilicovzzabzzolcanoconiosisPsisoinoconaclozzbazzvociliscipocsorcimababancpmm', 'RgxExgR', 'abaadracababecadrdacebabacardaaba', 'abacacbadabacabcababaadaababacbacabadabcacaba', 'pneumonoultrpneumonoultramiroscommpnababamicroscopicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoabacabadababacaaaccababapicsilabcimcovolcanoconaclovocmicbaliscipababaccaaacababadabacabaocsorcimasisoaonaclovociliscipPsisoinoconaclovociliscipocsorcimababanpmmocsorimartluonomuenprtluonomuenp', 'abdba', 'rpneumonoultramicroscoabioacabadabaccababapicsilpneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosisdaradsisoimnoconaclovocisisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpdabacabaocsorcimartluonomuenpliscipababaccabadabacaoibaocsorcimartluonomuenpr', 'pneumonoultramicroscoabacabadabaccababapicsilabcimcovolcaabacabadaaabacabaconiosisoinocabacabaaadabacabaaclovocmicbaliscipababaccabadabacabaocsorcimartluonomuenp', 'bababacabcacbacababab', 'pneumonoultramicroscoabacabadabaccababapicsilabcimcovolcaabacabadbbabadaaabacabaconiosisoinocabacabaaadababbdabacabaaclovocmicbaliscipababaccabadabacabaocsorcimartluonomuenp', 'pneumonoultramicroscoabacabadpneumocpneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabapicspneumonoultramicroscoabacabadpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisilicovolcanoconiosiscababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababacsisoinoconaclovocilisisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccomuenpdabacabaocsorcimartluonomuenpscipabazsisoimnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazzbaccabadaboacaonomuenpcomuenpdabacabaocsorcimartluonomuenp', 'pneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovoolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisoinoconaclovocicbaliscipababaccabasisoinoconacaaaloovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpdabacabaocsorcimartluonomuenp', 'pneumonoultramicnroscoabacababadovolcanoconiosisoinoconaclovodababacabaocsorncimartluonomuenp', 'pppneumonoacabadabaccababapicsilicovolcanocoiniosisneumonoacabadabaccababapicsilicovolcanoconiosisoinoconaclovociliscipababaccabadabacaonomuensisoinioconaclovociliscipababaccabadabacaonomuenppp', 'rrmmmlicovolcanoconiosiabcaracabbarsababecrarcebabasrabbacaracbaisoinoconaclovocilmmmrr', 'aapneunmonoultramisclibaadddaabilcsimartluonomnuenpaa', 'aadaa', 'abacabadabacaacabadabacaba', 'apneumonoultramicroscoabioacabadabaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconicosisbsisocinoconsisoinoconaclovociliscipocsorcimababanpaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpa', 'pneumonoultramicroscoabioaacabadabaccababapicsilicovolcanoconmiosisoimnoconaclovociliscipababaccabadabacaaoibaocsorcimartluonomuenp', 'zzzabaacabadabacapneumonoacabadabaccababapicsilicovolcisbammmlicovolcanoconiosiabcacbaisoinoconaclovocilmmmabsiclovociliscipababaccabadabacaonomuenpacabadabacaabazzz', 'rpneumonoultramicroscoabacasbadabaccababapicsilabcicovolcanobabbcconiosisacecaracecasisoinoccbbabonaclovocicbaliscipababaccabadabsacabaocsorcimartluonomuenpr', 'abacabadabaaccrpneumoncoultramicroscoabacabadabaccababapicsilabcicovolcanoconiosisacecaracecasisoinoconaclovocicbaliscipababaccabadabacabaocsorcimartluocnomuenprccaabadabacaba', 'pnnp', 'canoconiosisnoconoiommmmsisbsismmmmoionoconsisoinoconac', 'rpneumonoultramicroscoabacabadabaccababapicsilabcicovolcanocosniosisacecaracecasisoinsoconaclovocicbaliscipababaccabadabacabaocsorcimartluonomuenpr', 'bbarbabecarcracebabrabb', 'apneumonoultramicbbaracababecarcbadabaaaaaaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconiosisbsisoinoconsisoinoconaclovociliscipocsorcimababanpaclovociliscipababaccaaaaaabadabcracebabacarabbcimartluonomuenpa', 'raacababecaracebabacaar', 'pneumonoultramiacroscoabacabadabaccababapicsilabcimcovolcanoconiosisoinoconaclovocmicbaliscipababaccabadabacabaocsorcaimartluonomuenp', 'abacabaaaabdazzabaazyzzzbaccabzzzyzaabazzadbaaaabacaba', 'UBIzzbabaazyzzzyzaababzzIBU', 'pneumonoacabadabaccababapicsiliecovolcanoconiosaisiasoinoconaclovoceiliscipababaccabadabacaonomuenp', 'zzabaazabacacbaadabacabazzabacabadaabcacabazaabazz', 'apneumonoultramicroscoabioacabadabaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnpneumonoultramicroscoabacabadabaccababapicsilicovolcanoconiosisoconiosisbsisoinocosisoinoconaclovociliscipababaccabadabacabaocsorcimartluonomuenpnsisoinoconaclovociliscipocsorcimababanpaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpa', 'pneuababadmonoultramicrosisorcimartluonomdababauenp', 'mmpnababamiicroscopicsilicovzzabaazyzzzolcanoconiosisPsisoinoconaclozzzyzaabazzvociliscipocsorciimababanpmm', 'abacabadabcaccabaccacbadabacaba', 'pneumonoultrazzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszbadabaccababapicsilabcimcovolcanoconnoconaclovocmicbaliscipababaccabadabzsisoimnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazzartluonomuenp', 'baabacabadabcabaccabaadaaabpneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabapicsilicovolcanoconiosisoinoconaclovociliscipabazsisoimnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazzbaccabadaboacaonomuenpbaaadaabaccabacbadabacabaab', 'zzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadasilicovolcanoconmiosiszsisoimnoconaclovocilisadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazz', 'rdracabbabecararacebabbacardr', 'rpneumoncoultramicroscoabacabadabaccababapicsilabciacovolcanoconiosisacecaracecasisoinoconaclovocaicbaliscipababaccabadabacabaocsorcimartluocnomuenpr', 'apneumonoultramicroscoabacabadabaccababapicsilabcimcovolcanoconiosisbacabadabacabadabacabsisoinoconaclovocmicbaliscipababaccabadabacabaocsorcimartluonomuenpa', 'pneumonoultramicroscoabacabadpneumocpneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaczcababapicsilicovolcanoconmiosiszabapicspneumonoultramicroscoabacabaddpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisilicovolcanoconiosiscababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconpneumonopneumonoacabadabaccababapicsilicovolcisultramicroscoabioacabadabaccababapicsilicovolcanoconiosisiosisoisisoinoconaclovociliscipababaccabadabacaoibaocsorcimartlusiclovociliscipababaccabadabacaonomuenponomuenpnoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababacsisoinoconaclovocilisisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccomuenpddabacabaocsorcimartluonomuenpscipabazsisoimnoconaclovociliscipababaczcabadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazzbaccabadaboacaonomuenpcomuenpdabacabaocsorcimartluonomuenp', 'ddbaabacabadabcabacaaabaaacabacbadabacabaabdd', 'aceacaracaeca', 'abacabadabacaaabacabadaaabacabaaadabacabaaacabadabacaba', 'pneumonoultrpneumonoultramiroscommpnababamicroscopicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoabacabadababacaaaccababapicsilabcimcovolcaanoconaaclovocmicbaliscipababaccaaacababadabacabaocsorcimasisoaonaclovociliscipPsisoinoconaclovociliscipocsorcimababanpmmocsorimartluonomuenprtluonomuenp', 'zzzaraddarabazabzyzzzyzbazabaraddarazzz', 'abbacacbadabacabcababaadaababacbacabadabcacabba', 'apneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconniabaacabadabacabaosisbsisoabacabadabacaabainnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpa', 'abacabadaaabaaaaaabzzabaazyzzzabcabacbazzzyzaabazzbaaaaaabaaadabacaba', 'pneumonoultramicroscoabacabadabaccababapicsilabcimcabdovolcanoconiosisoinoconaclovodbacmicbaliscipababaccabadabacabaocsorcimartluonomuenp', 'pneumonoultrpneumonoultramiroscommpnababamicroscopicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoababbcabcadbacabadababacaaaccababapicsilabcimcovolcaanoconaaclovocmicbaliscipababaccaaacababadabacabdacbacbbabaocsorcimasisoaonaclovociliscipPsisoinoconaclovociliscipocsorcimababanpmmocsorimartluonomuenprtluonomuenp', 'mmmlicovolrpneumonoultramicroscoabacabadabaccababapicsilabcicovolcanocosniosisacecarcanoconiosisoinoconacracecasisoinsoconaclovocicbaliscipababaccabadabacabaocsorcimartluonomuenprlovocilmmm', 'pnnnp', 'pneumonoultramicroscoabracabbabecarioacabadabaccababapipneumonoultramicroscopicsilicovconiosiscsilicovolcanoconaclovociliscsisoinocvociliscipocsorcimartluonomuenpipababaccabadabacaoiracebabbacarbaocsorcimartluonomuenp', 'pneumonoultrpneumonoultramiroscommpnababamracabaacabadabacabaecaricpnababascopicspneumonoultramicroscopicsilicovolcanoaosisilicovolcanocoosisroscopicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoabacabadababacaaaccababapicovolcaanoconaaclovocipababaccaaacababadabacabaocsorcimasisoaonaclovociliscipPsisoinoconaclovociliscipocsorsisooconaclovocilisisoaonaclovociliscipocsorcimartluonomuenpscipocsababanpciraceabacabadabacaabacarmababanpmmocsorimartluonomuenprtluonomuenp', 'zzzabaacabadabacapneumonoacabadabaccababapicsilicovolcissiabcasacbaissiclovociliscipababaccabadabacaonomuenpacabadabacaabazzz', 'abaabbaddabbaaba', 'abaapneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisdsisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpdabacabaocsorcimartluonomuenpaaba', 'apneunmonoultramismclibaadaabilcmsimartluonomnuenpa', 'baabacabbaadaabbacabaab', 'IuyepBpeyuI', 'bbabaabcadacbaababb', 'mmmmm', 'pneumonoultramicroscoabibabecarbadabaccababapicsilicovolcanoconiosiabcasacbaisoinoconaclovociliscipababaccabadabracebabibaocsorcimartluonomuenp', 'pneumonaaaaoacabadabaccababapicsilicobvolcisiclovbociliscipababaccabadabacaoaaaanomuenp', 'mmpnababamicroscsilicovolcanoconiosisPsisoinoconaclovociliscsorcimababanpmm', 'aaaababaaaa', 'PdbabzzzabaacabadabacapneumonoacabadabaccababapicsilicovolcisbammmlicovolcanoconiosiaaaabababcadacbababaaaaisoinoconaclovocilmmmabsiclovociliscipababaccabadabacaonomuenpacabadabacaabazzzbabdP', 'pneumonoultramicroscoabracabbabecarioacabadabaccaabacacbadabacaababoabapipneumonoultramicroscopicsilicovconiosiscsilicovolcansocosnaclovociliscsisoinocvociliscipocsorcimartluonomuenpipabaobabaacabadabcacabaaccabadabacaoiracebabbacarbaocsorcimartluonomuenp', 'apneumonoultramicroscoabioacabadabaccababapicsiosisbsisoiscipababaccabadabacaoibaocsorcimartluonomuenpa', 'mmmlicovolcanocpneumonoultramicroscoabacabadabaccababapicsilabcimcovolcanocononpnevolcanoconiosiiosiabcaracabbarsrabbacaracbaisoiisoinoconaclovenpnonoconaclovocmicbaliscipababaccabadabacabaocsorcimartluonomuenpconaclovocilmmm', 'mmpcnababamiicroscopicsilicovzzabzzolcanoconiosisPsisoinoconaclozzbazzvociliscipocsorciimababancpmm', 'baabaacababacacbadabacabcababaadadabcabacbaabbacababacabbaabcabacbadadaababacbacabadabcacababacaabaab', 'zzzabzzzbazzz', 'rpneumonoultramicroscoabioacabadabaccababapicsilpneumonoulbtramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosisdaradsisoimnoconaclovocisisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpdabacabaocsorcimartbluonomuenpliscipababaccabadabacaoibaocsorcimartluonomuenpr', 'abbacacbadabacabpnevoaapneumonoultranmicroscopicasialicovolcanoconioosiscanoconiosicababbbabaabcadaadacbaababbbabacisoinoconacsisooinoconaclovocilaisacipocsorcimnartluonomuenpaaovenpbacabadabcacabba', 'pneumonoultramicroscoabioaacabadabaccababapicsilbicovolcanoconmiosisoimnoconaclovocibliscipababaccabadabacaaoibaocsorcimartluonomuenp', 'zzzabaacabbabdabazabzzzzbazabadbabbacaabazzz', 'pppneumonoacabadabaccababapicsilicovolcanoconiosisneccababapicsilicovolcanoconiosisoinoconaclovociliscipababaccensisoinoconaclovociliscipababaccabadabacaonomuenppp', 'apneumonoultramicroscoabioacabadabaccababapimcsilicovolcapnababamicroscopicsilicovolcanocbabadoniosisnoconiosisbsisoinoconsisoinodababconaclovociliscipocsorcimababanpaclovociliscmipababaccabadabacaoibaocsorcimartluonomuenpa', 'racarpneumoncoultramicroscoabacabadabaccababapicsbaabaacabadabcabaccababpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaapneumonoultramicroscopicsilicovconiosislcanoconiosisbbarabbsisoinoconaclsisoinocvociliscipocsorcimartluonomuenpaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpbabaccabacbadabacaabaabscipababaccabadabacabaocsorcimartluocnomuenpracar', 'yzzzabaacabadabacaybaazyzzzyzaabyacabadabacaabazzzy', 'aaaaabzzaabaazyzzzaabaazzzyzaabaazzbaaaaa', 'pneumonoultramicrosoconmiosisoimnocosorcimartluonomuenp', 'apneumonoultramicroscozzabaazabacacbadabacabayzzzabioaacabadabaccababapicsilibadabiliscipababaccabadabacaaoibazzzyabacabadabcacabazaabazzocsorcimartluonomuenpa', 'pneumonoultramicrapneumonoultramicroscoabioacabadbapneumonoultramicroscopicsilicovolcanoconiosisbaccababapiabacabadabacabacsilibaadoscopicsilicovolcanoconiosisoinoconaclovociliscipocsodaabiliscabacabadabacabaipababaccabsisoinoconaclovociliscipocsorcimartluonomuenpabdabacaoibaocsorcimartluonomuenparcimartluonomuenp', 'pneumonoultramicrosconiosisoinocsorcimartluonomuenp', 'abammpnaaaaababamicroscsilicovolcanoconiosisPsisoinoconaclovociliscsorcimababaaaaanpmmaba', 'mppm', 'aabaadaabaa', 'pneumonoultraddarosisoraddartluonomuenp', 'pneumonoultramicrosilabcimcovolcanoconaaaaioabacabaaaabdabaccsisccabadbaaaabacabaoiaaaanoconaclovocmicbalisorcimartluonomuenp', 'apneuapneumonoultramicroscoabioacabadabaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconiosisbmonoulpneumonoultramicroscoabacabadpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosistramicroscozzabaazabacacbadabacabayzzzabioacabadabaccababapicsilibadabiliscipababaccabadabacaoibazzzyabacabadabcacabazaabazzocsorcimartsisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccomuenpdabacabaocsorcimartluonomuenpluonombsisoinoconsisoinoconaclovociliscipocsorcimababanpaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpauenpa', 'pneumonoultrazzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszbadabaccababapicsilabcimacovolcanoconnoconaclovocamicbaliscipababaccabadabzsisoimnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazzartluonomuenp', 'pneumonoultrpneumonoultramiroscommpnababamicroscoapicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoababbcabcadbacabadababacaaaccababapicsilabcimcovolcaanoconaaclovocmicbaliscipababaccaaacababadabacabdacbacbbabaocsorcimasisoaonaclovociliscipPsisoinoconaclovociliscipaocsorcimababanpmmocsorimartluonomuenprtluonomuenp', 'aaazzzabzaacabbabdabazabzyzzzazzzyzbazabadbabbacaazbazzzaaa', 'abpneumonoultrpneumonoultramiroscommpnababamicroscopicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoabacabadababacaaaccababapicsilabcimcovolcaanoconabbaddabbanoconaaclovocmicbaliscipababaccaaacababadabacabaocsorcimasisoaonaclovociliscipPsisoinoconaclovociliscipocsorcimababanpmmocsorimartluonomuenprtluonomuenpba', 'pnababapneumonoultramiroscopicsilicovolcanoaosisosisoaonaclovociliscipocsorimartluonomuenpababanp', 'pnzzzabaacabadabacabammmlicovolcanoconiosiabcasoeumonoultramicroscoabacabadabaccababapicsilabcicbabadovolcanoconiosisoinoconaclovodababcicbaliscipababaccabadabacabaocsorcimartluonomueosacbaisoinoconaclovocilmmmabacabadabacaabazzznp', 'rpneumonoultramicroscoabacabadabaccababapicsilabcicovolcanocosniosisaceccaraccecasisoinsoconaclovocicbaliscipababaccabadabacabaocsorcimartluonomuenpr', 'pppneumonoacabadabaccababapicsilicovolcanoconiosisneumonoacapbadabaccababapicsilicovolcanocsconaclovociliscipababaccabadabpacaonomuensisoinoconaclovociliscipababaccabadabacaonomuenppp', 'raaacababecaracebabacaaar', 'babbbrpneumonoultramicroscoabioacabadabaccababapicsilpneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosisdarcradsisoimnoconaclovocisisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpdabacabaocsorcimartluonomuenpliscipababaccabadabacaoibaocsorcimartluonomuenprbbbab', 'raacaebabecaracebabeacaar', 'abacabadaabacabaadabacaba', 'mmmlirababecrarcovolcainoconiosiabcaracabbarsrabbacaracbaisoinoconiaclovocrarcebabarilmmm', 'pneumonoupneumonoultramicroscoabacabadpneumocpneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabapicspneumonoultramicroscoabacabadpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisilicovolcanoconiosiscababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisltramiacroscoabacabadabaccababapicsilabcimcovolcanoconiosisoinoconaclovocmicbaliscipababaccabadabacabaocsorcaimartlsisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababacsisoinoconaclovocilisisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccomuenpdabacabaocsorcimartluonomuenpscipabazsisoimnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazzbaccabadaboacaonomuenpcomuenpdabacabaocsorcimartluonomuenpuonomuenp', 'gPHBVvlHncnHlvVBHPg', 'rababaecrmmmmmaaraammmmmrceababar', 'ammmlicovolcanoconiosiabcaracabbarsccaccsrabbacaracbaisoinoconaclovocilmmma', 'bbaracababebaabacabcacacbacabaabebabacarabb', 'pneumonoacabadabaccababapicsiliscovolcisiclovocsiliscipababaccabadabacaonomuenp', 'pabcacbap', 'pneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzizicsiliconoconiosisoinoconociliscizizzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenp', 'pneumonoultramicroscoabacabadabaccababapicsilabcicbabadovolcanoconioabacabadaaabacabasisabacabaaadabacabaoinoconaclovodababcicbaliscipababaccabadabacabaocsorcimartluonomuenp', 'pneumonoultramicroscoabioacabadabaccababapicsilcanoconmiosisoimnoconacliscipababaccabadabacaoibaocsorcimartluonomuenp', 'abzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadasilicovolcanoconmiosiszdzsisoimnoconaclovocilisadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazzba', 'rpneumoncoultramicroscoabacabadabaccababapicsbaasbaacabadabcabaccababilacbcicovolcanoconiosisacecaracecasisoinoconaclovocicbcalibabaccabacbadabacaabsaabscipababaccabadabacabaocsorcimartluocnomuenpr', 'pnevammavenp', 'zzzabaacabadabaccabammmlicovolcanoconiosiabcasacbaisoinoconaclovocilmmmabaccabadabacaabazzz', 'mmmlicovoloconiosisoinocolovocilmmm', 'pneumonoultramicroscoabacabadabaccabbapicsilicovolcanoconiosisoinoconaclovociliscipabbaccabadabacabaocsorcimartluonomuenp', 'rpneumonouddbaabacabadabcabacaaabltramicroscoabacabadabaccababapicsilabcicovolcanoconiosisacecaracecasisoinoconaclovocicbaliscipababaccabadabacabaocsorcimartlbaaacabacbadabacabaabdduonomuenpr', 'zzzazyzzzzyzazzz', 'zzzabaacabadaapneumonoultramicroscozzabaazabacacbadabacabayzzzabioacabadabaccababapicsilibadbacabaazyzzzyzaabacabdabiliscipababaccabadabacaoibazzzyabacabadabcacabazaabazzocsorcimartluonomuenpaadabacaabazzz', 'abadabacabadaba', 'VNPgogPNV', 'pneumonoultramicrpneumoncoultramicroscoabacabadabaccababapicsbaasbaacabadabcabaccababilacbcicovolcanoconiosisacecarroscoabiacaracabazzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapiocsilicovolcanoconmiosiszbecarbadabaccilicovolcanoconiosiabcasacbaisoinoconaclovociliccabadabracebzsisoimnoconaclovociliscoipababaccabadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazzabacaracaibaocsorracecasisoinoconaclovocicbcalibabaccabacbadabacaabsaabscipababaccabadabacabaocsorcimartluocnomuenprcimartluonomuenp', 'abacacbadabdbadabcacaba', 'racarpneumoncoultramicroscoabacabadabaccababapicsbaabaacabadabcabaccababaapneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisdabpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaapneumonoultramicroscopicsilicovconiosislcanoconiosisbbarabbsisoinoconaclsisoinocvociliscipocsorcimartluonomuenpaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpbadsisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpdabacabaocsorcimartluonomuenpaababaccabacbadabacaabaabscipababaccabadabacabaocsorcimartluocnomuenpracar', 'bunqzNWMJMWNzqnub', 'pneumonoultramirbabbbcbadabaccababapicsilicoivolcanoconiosiabcasacbaisoinoconacloviociliscipababaccabadabcbbbabrimartluonomuenp', 'mmmlicovolrpneumonoultramicroscoabacabadabaccababapicsilabcicovolcanocosniosisacebaadcbacabadabaccabaadaaaabcarcanoconiosisoinoconacracbaaaadaabaccabadabacabcdaabecasisoinsoconaclovocicbaliscipababaccabadabacabaocsorcimartluonomuenprlovocilmmm', 'poniosisoinop', 'aazzzazyzzzzadazzzzyzazzzaa', 'pneumonoultramicroscoabioacabadabaccababapicsilpneumonoultrneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanocsisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosisoimnoconaclovocisisoinoconaclovocicbaliscipababaccabasisconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenrtluonomuenpliscipababaccabadabacaoibaocsorcimartluonomuenp', 'pmppmp', 'abacabacaba', 'pneumonoultramicrpneumoncoultramicroscoabacabadabaccababapicsbaasbaacabadabcabaccababilacbcicovolcanoconiosisacecarroscoabiacaracabazzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapiocsilicovolcanoconmiosiszbecarbadabaccilicovolcanoconiorarsiabcasacbaisraroinoconaclovociliccabadabracebzsisoimnoconaclovociliscoipababaccabadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazzabacaracaibaocsorracecasisoinoconaclovocicbcalibabaccabacbadabacaabsaabscipababaccabadabacabaocsorcimartluocnomuenprcimartluonomuenp', 'aabaa', 'babbbrpneumonoultrasmicroscoabioacabadabaccababapicsilpneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosisdarcradsisoimnoconaclovocisisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpdabacabaocsorcimartluonomuenpliscipababaccabadabacaoibaocsorcimsartluonomuenprbbbab', 'abbcabpneumonoultramicroscoabiacabadabaccababapicsilicpneumonoultramicroscoabiacaracababecarbadabaccababapicsilicovolcanoconiosiabcasovolcanoconiosiscadacsisoinoconaclovosacbaisoinoconaclovociliscipababaccabadabracebabacaracaibaocsorcimartluonomuenpciliscipababaccabadabacaibaocsorcimartluonomuenpbacbba', 'pneumonoultramabacabadaabaccaaapneumonoultranmicroscopicsilicovolcanoconiosisbaicroscopicsilicovolcanoconiosisoinoconaclovociliscipocsorciabsisoinoconaclovociliscipocsorcimnartluonomuenpaaaccabaadabacabamartluonomuenp', 'pneumonoultrpneumonoultramiroscommpnababamicroscoapicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoababbcabcadbacabadababacaaaccsababapicsilabcimcovolcaanoconaaclovocmicbaliscipababasccaaacababadabacabdacbacbbabaocsorcimasisoaonaclovociliscipPsisoinoconaclovociliscipaocsorcimababanpmmocsorimartluonomuenprtluonomuenp', 'rpneumonoultramicroscoacabadabacabaazyzzzicsilicovolcvolcanoconmiosisdaradsisoimnoconaclovclovociliscizzzyzaabacabadabacaocsorcimartluonomuenpr', 'apnracababecaareumonoultramicroscoabioacabadbapneumonoultramicroscopicsilicovolcanoconiosisbaccababapiabacabadabacabacsilibaadaabiliscabacabadabacabaipababaccabsisoinoconaclovociliscipocsorcimartluonomuenpabdabacaoibaocsorcimartluonomueraacebabacarnpa', 'pneumonoultramiroscopipneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosiscsilicovolcanoaosisoaonaclovociliscsisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpdabacabaocsorcimartluonomuenpipocsorimartluonomuenp', 'bunqzNWMJJMWNzqnub', 'racabarabacar', 'ppneuzzzabzzzcababapicsilicovolcanoconiosisoinoconaclovociliscipababaczzzbazzzuenpp', 'abbacacbadabacabpnevoaapneumonoultranmicroscopicasialivcovolcanoconioosiscanoconiosicababbbabaabcadaadacbaababbbabacisoinoconacsisooinoconaclovocvilaisacipocsorcimnartluonomuenpaaovenpbacabadabcacabba', 'pneumonoultramicroscoabioacabadabaccababapipneumonoultramicroscopicsilicovconabacaiosiscsailicovolcanoconiosisoinoconaclovociliascsisoiacabanocvociliscipocsorcimartluonomuenpipababaccabadabacaoibaocsorcimartluonomuenp', 'pvammavp', 'pnnmmmlirababecrarcovolcanoconiosiabcaracabbarsrabbacaracbaisoinoconaclovocrarcebabarilmmmnnp', 'IpBBpI', 'pneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzizicsilciconoconiosisoinoconocicliscizizzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenp', 'rpneumonoultramicroscoacabadabacabaazyzzzicsilicovolcvzzzabaacabadabacapneumonoacabadabaccababapicsilicovolcissiabcasolcanoconmiosisdaradsisoimnoconaclosacbaissiclovociliscipababaccabadabacaonomuenpacabadabacaabazzzvclovociliscizzzyzaabacabadabacaocsorcimartluonomuenpr', 'pneumonoacaobadabaccabzzabaappneumonoacabadabaccababapicsilicovolcanoconiosiszabacacbadabacabayzpneumonoultramicroscoaabioacabadabaccababapicsilicovolcanoconmiosiszabapicsilicovolcanoconiosisoinoconaclovociliscipabazsisoimnoconaclovociliscipababaccabadabacaoibaaocsorcimartluonomuenpzyabacabadabcacabazsisoinoconaclovociliscipababaccabadabacaonomuenppaabazzbaccabadaboacaonomuenp', 'zzzzabaacabadbdababaadazyzzzapneumonoultramicroscopicsilicovconiosisoinocvociliscipocsorcimartluonomuenpazzzyzadaababadbdabacaabazzzz', 'pneumonoacadbadabaccababapicsiliscovolcisiclovocsiliscipababaccabadabdacaonomuenp', 'pneumonoultramicroscoabacabadpneumocpneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramiczyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconpneumonopneumonoacabadabaccababapicsilicovolcisultramicroscoabioacabadabaccababapicsilicovolcanoconiosisiosisoisisoinoconaclovociliscipababaccabadabacaoibaocsorcimartlusiclovociliscipababaccabadabacaonomuenponomuenpnoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzcimartluonomuenpzyabacabadabcacabazaabazzbaccabadaboacaonomuenpcomuenpdabacabaocsorcimartluonomuenp', 'apneumonoultrapnevoaapneumonoultranmicroscopicasialicovolcanoconioosiscanoconiosimicbbaracababecarcbadabaaaaaaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconiosisbsisoinoconsisoinoconaclovociliscipocsorcimababanpaclovociliscipababaccaaaaaabadabcracebabacarabbcimisoinoconacsisooinoconaclovocilaisacipocsorcimnartluonomuenpaaovenpartluonomuenpa', 'zbgPHBVvlHnczNWMJzzabaacabbabdabazabzyzzyzbazabadbabbacaabazzJMWNzcnHlvVBHPgbz', 'RgxEExgR', 'raaacababecammmlicovolcanoconiosiabcaracabbarsrabbacaracbaisoinoconaclovocilmmmacebabacaaar', 'babbcaacbbab', 'apneumonoultramicroscoabioaocabadabaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconicosisbsisocinoconsisoinoconaclovociliscipocsorcimababanpaclovociliscipababaccabadabacoaoibaocsorcimartluonomuenpa', 'abacabaabacabbadabaccabaadaaaabaaaadaabaccabadabbacabaabacaba', 'pneumonoultramicroscbabbcoabacabadabaccababapicsilabcicbabadovolcanoconiosisoinoconaclovodababcicbaliscipababaccabadabacabaocbbabcsorcimartluonomuenp', 'zzzabaacabadabacabammmlicovolcanoconiosiabcacscacbaisoinoconaclovocilmmmabacabadabacaabazzz', 'apneumonoultramicroscoabioacabadbapneumonoultramicroscopicsilicovolcanoconiosiccababapiabacabadabacabacsilibaadaabiliscabacabadabacabaipababaccisoinoconaclovociliscipocsorcimartluonomuenpabdabacaoibaocsorcimartluonomuenpa', 'pnrrababecrarlcanoconiosisoinoconaclrarcebabarrnp', 'racabbpneumonoultramicroscopicsilicovolcnanoconiosisabecaracebasisoinoconanclovociliscipocsorcimartluonomuenpbbacar', 'ama', 'abaapneumonoultramicroscoabacabadpneumonoultramicroscoabioacabaammadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisdsisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadammaabacaoibaocsorcimartluonomuenpdabacabaocsorcimartluonomuenpaaba', 'pnababascopicsapneumonoultramicroscoabioacabadabaccababapicsiosisbilicovolcanoconiosisoinoconaclovocilibsisoiscipababaccabadabacaoibaocsorcimartluonomuenpascipocsababanp', 'azzaazypneumonoultramicroscoabracabbabecarioacabadabaccababapipneumonoultramicroscopicsilicovconiosiscsilicovolcanoconiosiszzzsisoinoconaclovociliscsisoinocvociliscipocsorcimartluonomuenpipababaccabadabacaoiracebabbacarbaocsorcimartluonomuenpyzaazza', 'rpneumonoultramicroscoabacabadabaccababapicsilabcicovolcanocosnisaceccaraccecasinsoconaclovocicbaliscipababaccabadabacabaocsorcimartluonomuenpr', 'abaapneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisdsisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaaabazzzpababaccabadabacaoibaocsorcimartluonomuenpdabacabaocsorcimartluonomuenpaaba', 'apneumapneumonoultramicroscoabioacabadbapneumonoultramicroscopicsilicovolcanoconiosisbaccababapiabacabadabacabacsilibaadonoultramicroscoabacabadabaccababapicsilabcimcovolcanoconiosisbacabadabacabadabacabsisoinoconaclovocmicbaliscipababaccabadabacabaocsorcimartluonodaabiliscabacabadabacabaipababaccabsisoinoconaclovociliscipocsorcimartluonomuenpabdabacaoibaocsorcimartluonomuenpamuenpa', 'abacabadaaabacabaaadabacaba', 'baabaacabadabpabcacabaccababaccabacacbapbadabacaabaab', 'baabacabadabaccabzzzabzzaadaaaaabaaaaadaazzbazzzbaccabadabacabaab', 'baacbcacabammmlicovolcanoconiosisdabaccabaadaaaabaaaadaabaccabadsisoinoconaclovocilmmmabacacbcaab', 'pabacabaaaabdazzabaazyzzzbaccnevammapneumonoultramicroscopicpneumonoultrpneumonoultramiroscommpnababamicroscoapicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoababbcabcadbacabadababacaaaccababapicsilabcimcovolcaanoconaaclovocmicbaliscipababaccaaacababadabacabdacbacbbabaocsorcimasisoaonaclovociliscipPsisoinoconaclovociliscipaocsorcimababanpmmocsorimartluonomuenprtluonomuenpcipocsorcimartluonomuenpammavenccabzzzyzaabazzadbaaaabacabap', 'babbbrpneumonoultramicroscoabioacabadabaccababapicsilpneumonoultramicroscoabacabadpneumonoultramicrosbccoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosisdarcradsisoimnoconaclovocisisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaoccbsorcimartluonomuenpdabacabaocsorcimartluonomuenpliscipababaccabadabacaoibaocsorcimartluonomuenprbbbab', 'pneumonoultramicroscoabacabadabaccababapicsilicovolcanoconiosisbbarbabrcrbabrabbsisoinoconaclovociliscipababaccabadabacabaocsorcimartluonomuenp', 'aabcpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosisoimnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpcbaa', 'apneumonoultramicroscozzabaazabacacbadabacabayzzzabioacabadabacbababacaapneumonoultramicroscoabioacabadabaccababapicsilicovolcapnababamicroscopicsilicovolcanoconiosisnoconicosisbbcacababapicsilibadabiliscipababacacbbsisocinoconsisoinoconaclovociliscipocsorcimababanpaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpaacabababcabadabacaoibazzzyabacabadabcacabazaabazzocsorcimartluonomuenpa', 'azzabaaazyzzzyzaaabazza', 'pneumonoultramicroscoabacabadpneumocpneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabapicspneumonoultramicroscoabacabadpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovlolcanoconiosisilicovolcanoconiosiscababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababacsisoinoconaclovocilisisoinoconaclolvocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccomuenpdabacabaocsorcimartluonomuenpscipabazsisoimnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazzbaccabadaboacaonomuenpcomuenpdabacabaocsorcimartluonomuenp', 'zzzabaacabadabacapneumonoacabadabaccababapicsilicovolcisbammmliolcanoconiosiabcacbaisoinoconacloilmmmabsiclovociliscipababaccabadabacaonomuenpacabadabacaabazzz', 'pabaapneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapbicsilabcicovolcanoconiosisdnnndsisoinoconaclovocicbaliscibpababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpdabacabaocsorcimartluonomuenpaabap', 'pneumonoacabadabaccababapicsiliecovolzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadasilicovolcanoconmiosiszcanoconiosisoinoconaczsisoimnoconaclovocilisadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazzlovoceiliscipababaccabadabacaonomuenp', 'pmpppmp', 'UBBBIBBBU', 'raracUBUIecarcabaacabadabacabaecaraceabacabadabacaabacraceIUBUcarar', 'cpbabbcbbabpc', 'rnpneumoncoultramicroscoabacabadabaccababapicsilabcicovolcanoconiosisacecaracecasisoinoconaclovocicbaliscipababaccabadabacabaocsorcimartluocnomuenpnr', 'pbpneumonoacabadabaccababapicsilicovolcanoconiosisoinoconaclovociliscipababaccabadabacaonomuenpbp', 'pneumonoultramicrpneumoncoultramicroscoabacabadabaccababapicsbaasbaacabadabcabaccababilacbcicovolcanoconiosisacecarroscoabiacaracabazzabaazabacacbaddabacabayzpneumonoultramicroscoabioacabadabaccababapiocsilicovolcanoconmiosiszbecarbadabaccilicovolcanoconiosiabcasacbaisoinoconaclovociliccabadabracebzsisoimnoconaclovociliscoipababaccabadabacaoibaocsorcimartluonomuenpzyabacabaddabcacabazaabazzabacaracaibaocsorracecasisoinoconaclovocicbcalibabaccabacbadabacaabsaabscipababaccabadabacabaocsorcimartluocnomuenprcimartluonomuenp', 'aUBIzzbabaazyzzzbacacbadabacabcababaadaababacbacabadabcacabzzzyzaababzzIBUa', 'aapneumonoultranmicpneumonoultramicroscopicsilicovolcanoconiosiroscopconiosisoinocpocsorisoinoconaclovociliscipocsorcimartluonomuenpcimnartluonomuenpaa', 'pneumonoultrpneumonoultramiroscommpnababamicbbaracababecarcroscoapicsilicovolcanoconiosisPpicsilicovolcanoaosisamicroscoababbcabcadbacabadababacaaaccsababapicsilabcimcovolcaanoconaaclovocmicbaliscipababasccaaacababadabacabdacbacbbabaocsorcimasisoaonaclovociliscipPsisoinoconaclovociliscipaocsorcracebabacarabbcimababanpmmocsorimartluonomuenprtluonomuenp', 'racababecaazzabaazabacacbadabacabazzabacabadabcacabazaabazzaacebabacar', 'pneumonoultramicaroscoabioacabadabaccababapicsilicovolcanoconiosisoinoconaclovociliscipababaccabadabacaoibaocsoracimartluonomuenp', 'apneumonoultramicroscoabioacabadbabbbrpneumonoultramicroscoabioacabadabaccababapicsilpneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosisdarcabaccababapicsilicovolcanoconniabaacabadabacabaosisbsisoabacabadabacaabainnoconaclovociliscipababaccabacradsisoimnoconaclovocisisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpdabacabaocsorcimartluonomuenpliscipababaccabadabacaoibaocsorcimartluonomuenprbbbabdabacaoibaocsorcimartluonomuenpa', 'aapneumonoultranmicroscopicasiailicovolcanoconiosisoinoconaclovociliaisacipocsorcimnartluonomuenpaa', 'pneumonoultramicroscopicsicnanoconiosisoinoconanciscipocsorcimartluonomuenp', 'apneumonoultramicroscoabioacabadabaaaaaaccababapicsilicovolcapnababamicroscopicsaapneumonoultranmicroscopicasiailicovolcanoconiosisilicovolcanoconiosisnoconiosisbsisoinoconsisoinoconaclovocilisisoinoconaclovociliaisacipocsorcimnartluonomuenpaascipocsorcimababanpaclovociliscipababaccaaaaaabadabacaoibaocsorcimartluonomuenpa', 'reabaecraaarbazzzabaacabadabacapneumonoacabadabaccababapicsilicovolcisbammmlicovolcanoconiosiabcadacbaisoinoconaclovocilmmmabsiclovociliscipababaccabadabacaonomuenpacabadabacaabazzzabraaarceabaer', 'pzzabaazabacacbadabacabayzbabadpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosisznnnzsisoimnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpdababzyabacabadabcacabazaabazzp', 'pnababamicroscopicsilaaazzzabzaacabbabdabazabzyzzzanoconiosisoinoconazzzyzbazabadbabbacaazbazzzaaaliscipocsorcimababanp', 'reabaecraarbaaadaaabraarceabaer', 'aracabbpneumonoultramicroscoabioacabadabaccababapipneumonoultramicroscopicsiliaapneumonoultranmicroscopicasiailicovolcanoconiosiscovconiosiscsilicovolcanoconiosisabecaracebasisoinoconaclovociliscsisoinocvocsisoinoconaclovociliaisacipocsorcimnartluonomuenpaailiscipocsorcimartluonomuenpipababaccabadabacaoibaocsorcimartluonomuenpbbacara', 'pneumonoultnramicroscoabioacabadabaccababapipneumonoultramicroscopicsilicovconiosiscsilicovolcanoconiosisoinoconaclovociliscsisoinocvociliscipocsorcimartluonomuenpipababaccabadabacaoibaocsorcimarntluonomuenp', 'pneumonoultramicroscoabioacabadabaccababapicsilpneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicRgxEovolcanoconiosisicovolcanoconmiosisoimnoconaclovocisisoinoconaclovoExgRcicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpdabacabaocsorcimartluonomuenpliscipababaccabadabacaoibaocsorcimartluonomuenp', 'zzzzazbzzbzazzzz', 'aaabababbaracababecarcrnpneumoncoultramicroscoabacabadabaccababapicsilabcicovolcanoconiosisacecaracecasisoinoconaclovocicbaliscipababaccabadabacabaocsorcimartluocnomuenpnrcracebabacarabbababaaa', 'apneumonoultramicroscobioacabadabaccababapicsilicovolcapnabaobamicroscopicsilicovolcanoconiosisnoconiosisbsisoinoconsisoinoconaclovociliscipocsorcimaboabanpaclovociliscipababaccabadabacaoibocsorcimartluonomuenpa', 'RgxErpneumonoultramicroscoabacasbadabaccababapicsilabcicovolcanobabbcconiosisacecaracecasisoinoccbbabonaclovocicbaliscipababaccabadabsacabaocsorcimartluonomuenprExgR', 'pneumonoulrpneumonoultramicroscoabacabadabpneumonoultramicroscoabibabecarbadabaccababapicsilicovolcanoconiosiabcasaccababapicsilabcicovolcanocosniosisaceccartramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpdabacabaocsorcimartraccecasisoinsoconaclovocicbaliscipababaccasacbaisoinoconaclovociliscipababaccabadabracebabibaocsorcimartluonomuenpbadabacabaocsorcimartluonomuenprluonomuenp', 'mmpinababamicroscsilicovolcanocooniosisPsisoinooconaclovociliscsorcimababanipmm', 'opneumonoultramicnroscoabacabadabaccababapicsilabcicbabadovolcanoconiosisoinoconaclovodababcicbaliscipababaccabadabacabaocsorncimartluonomuenpo', 'abacaba', 'pneumonoultramicroscoabacabadpneumocpneumonoacaobadabaccabzzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabapicspneumonoultramicroscoabacabadpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabbbabaabcadaccababapicsilabcicovlolcanoconiosisilicovolcanoconiosiscababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababacsisoinoconaclovocilisisoinoconaclolvocicbaliscipababaccadacbaababbbasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccomuenpdabacabaocsorcimartluonomuenpscipabazsisoimnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazzbaccabadaboacaonomuenpcomuenpdabacabaocsorcimartluonomuenp', 'pnababascopicsapneumonoultramicroscoabioacabnadabaccababapicsiosisbilicovolcanoconiosisoinoconaclovocilibsisoiscipababaccabadanbacaoibaocsorcimartluonomuenpascipocsababanp', 'babarbabecarcracebabrabab', 'pneumonoultramicroscoabacabadpneumoccababapzzzabaacabadabacabaazyzzzicsilicovolaaacabaabacabadabaccabaadaaabnoconiosisabaccaababapicsilabcicovolcanoconiosisoinoconaclovocicbaliscipababaaccabasisoinoconbaaadaabaccabadabacabaabacaaalovociliscizzzyzaabacabadabacaabazzzpababaccomuenpdabacabaocsorcimartluonomuenp', 'pneumonoultramicnroscoabacabadabaccababapicsilabcicbabadovbolcanoconiosisoinoconaclobvodababcicbaliscipababaccabadabacabaocsorncimartluonomuenp', 'rpneumonoultramicroscoabacabadabaccababapicsilabcicovcolcanocosniosisacecaracecasisoinsoconaclocvocicbaliscipababaccabadabacabaocsorcimartluonomuenpr', 'rrpneumonoultramicroscoabacabadabaccababapicsilabcicovoabacabadaaabacabalcanobabbcconiosisacecaracabIuyepBBabecaaraacebaBBpeyuIbacaracecasisoinoccbbabonaclabacabaaadabacabaovocicbaliscipababaccabadabacabaocsorcimartluonomuenprr', 'pneumonoultramicroscoabacabadpneumocpnabaccababapicsilicovolcisultramicroscoabioacabadabaccababapicsilicovolcanoconiosisiosisoisisoinoconaclovociliscipababaccabadabacaoibaocsorcimartlusiclovociliscipababaccabanpcomuenpdabacabaocsorcimartluonomuenp', 'abaacabcadabacabadacbacaaba', 'zzzabaacabammpnababamicrobaabacabadabaccabaadaaabcovzzabzzolcanoconiosisPbdababaadazyzzzyzadaababadbPsisoinoconaclozzbazzvocbaaadaabaccabadabacabaaborcimababanpmmabacaabazzz', 'abammpreabaecraaarbazzzabaacabadabacapneumonoacabadabaccababapicsilicovolcisbammmlicovolcanoconiosiabcadnaaaaababamicroscsilicovolcanoconiosisPsisoinoconaclovociliscsorcimababaaaaandacbaisoinoconaclovocilmmmabsiclovociliscipababaccabadabacaonomuenpacabadabacaabazzzabraaarceabaerpmmaba', 'panebaabacabadabaccabaadaaabumonoultramicroscopicsilicovconiosisoinocvociliscipocsorcimartluonomubaaadaabaccabadabacabaabenap', 'pneumonoacabadabaccababapicsiliscaadovolcisiclovodaacsiliscipababaccabadabacaonomuenp', 'baabaacabadabcabacbazzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabbacababacabbazsisoimnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazzabcabacbadabacaabaab', 'pnevolcanocoabcaniobabbceabcadsisdacbaecbbaboinacbaoconaclovenp', 'reabaecraaarbaadaabraaarceabaer', 'pnzzzabaacapneumonoulrpneumonoultramicroscoabacabadabpneumonoultramicroscoabibabecarbadabaccababapicsilicovolcanoconiosiabcasaccababapicsilabcicovolcanocosniosisaceccartramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadapneumapneumonoultramicroscoabioacabadbapneumonoultramicroscopicsilicovolcanoconiosisbaccababapiabacabadabacabacsilibaadonoultramicroscoabacabadabaccababapicsilabcimcovolcanoconiosisbacabadabacabaabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosiscanoconiosisoinoconacsisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabaabacabadabacabsisoinoconaclovocmicbaliscipababaccabadabacabaocsorcimartluonodaabiliscabacabadabacabaipababaccabsisoinoconaclovociliscipocsorcimartluonomuenpabdabacaoibaocsorcimartluonomuenpamuenpadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpdabacabaocsorcimartraccecasisoinsoconaclovocicbaliscipababaccasacbaisoinoconaclovociliscipababaccabadabracebabibaocsorcimartluonomuenpbadabacabaocsorcimartluonomuenprluonomuenpacaabazzznp', 'ddbaayzzzabaacabadabacabaazyzzzbacabadabcabacaaabaaacabacbadabacabzzzyzaabacabadabacaabazzzyaabdd', 'apneumonoultramicroscoabioacabadbapneumonoultramicroscopicsilicovolcanoconiospiccababapiabacabadabacabacsilibaadaabiliscabacabadabacabaipababaccipsoinoconaclovociliscipocsorcimartluonomuenpabdabacaoibaocsorcimartluonomuenpa', 'rpneumonoultramicroscoabacabadabaccababappicsilabcicovcolcanocosniosisacecaracecasisoinsoconaclocvocicbaliscippababaccabadabacabaocsorcimartluonomuenpr', 'pneumonnoacabadabaccabapicsiliscaadovolcisiclovodaacsiliscipabaccabadabacaonnomuenp', 'mmmlicovolrpneumonoultramicroscoabacabadabaccabocosniosisacecarcanoconiosisoinoconacracecasisoinsocobaccabadabacabaocsorcimartluonomuenprlovocilmmm', 'zzzabaacabbabdabazabzzzbazabadbabbacaabazzz', 'rpneumoncoultramicroscoabacabadabaccababappicsbaabaacabadabcaabaccababilabcicovolcanoconiosisacecaracecasisoinoconaclovocicbalibabaccabaacbadabacaabaabscippababaccabadabacabaocsorcimartluocnomuenpr', 'baasbaacabadabcabacbazzabaazabacacbadabacabayzpneumonoultramicroscoabioacabadabaccababapicsilicovolcanoconmiosiszabbacababacabbazsisoimnoconaclovociliscipababaccabadabacaoibaocsorcimartluonomuenpzyabacabadabcacabazaabazzabcabacbadabacaabsaab', 'opneumonoultramicnrobabbbrpneumonoultrasmicroscoabioacabadabaccababapicsilpneumonoultramicroscoabacabadpneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzzicsilicovolaaacanoconiosisabaccababapicsilabcicovolcanoconiosisicovolcanoconmiosisdarcsilabcicbabadovolcanoconiosisoinoconaclovodababcicbaliscradsisoimnoconaclovocisisoinoconaclovocicbaliscipababaccabasisoinoconacaaalovociliscizzzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpdabacabaocsorcimartluonomuenpliscipababaccabadabacaoibaocsorcimsartluonomuenprbbbaborncimartluonomuenpo', 'pneumonoultramicroscoasbacabadrpneumoncoultramicroscoabacabapneumonoultramicroscoabioacabadabaccababapzzzabaacabadabacabaazyzzizicsiliconoconiosisaccababapicsilabcimcocanoconacocmicbaliscipababaccasisoinoconociliscizizzyzaabacabadabacaabazzzpababaccabadabacaoibaocsorcimartluonomuenpabacabaocsorcimartluocnomuenprdabacabsaocsorcimartluonomuenp', 'zzzabzaacababdabazyzzzyzabadbabacaazbazzz', 'ddbaabacabadabcabacababacabacbadabacabaabdd', 'abadaapnracababecaareumonoultramicroscoabioacabadbapneumonoultramicroscopicsilicovolcanoconiosisbaccababapiabacabadabacabacsilibaadbaababaabacabadabcabacaabcabadabacaacabadabacbaacabacbadabacabaababaabdaabiliscabacabadabacabaipababaccabsisoinoconaclovociliscipocsorcimartluonomuenpabdabacaoibaocsorcimartluonomueraacebabacarnpaadaba', 'zzyzazyzzzyzazyzz', 'pneumonoultramicroscopneumonoultramicrooscopicsicnanoconiosisabacabadabaccababapicsilabcimcovolcanoconaclovocmicbaliscipababaccabadabacabasisoinoconanciscipocsoorcimartluonomuenpocsorcimartluonomuenp', 'baabacabadabacbcabadabacabaab', 'pneumonoultramsiroscopicsilicovolcanoaosisoaonaclovociliscipocsorismartluonomuenp', 'rraraapneumonoultranmicroscopicasiailicovolcanoconiosisoinoconaclovociliaisacipocsorcimnartluonomuenpaararr', 'pneuababapdmonoultramicrosisorcimartluonomdpababauenp', 'pneumonoultramicroscoabioaacabadabaccababapicsilbicovolcanoconmcanoconiosisnoconoiommmmsisbiosisoibsismmmmoionoconsisoinoconacmnoconaclovocibliscipababaccabadabacaaoibaocsorcimartluonomuenp', 'yyyy', 'ababbaba', 'xyyyx', 'A man, a plan, a canal, Panama!amanaP ,lanac a ,nalp a ,nam A', 'aaaaaaaabacabaaaaaaaa', 'abcdedcba', 'l4v4l4c4l4v4l', 'abacabadabacbabcabadabacaba', 'zzzzazyzzzyzazzzz', 'abacabadabacbaabcabadabacaba', 'abababadabacabadabacbabcabadabacabadabababa', 'abacabadabacaba', 'abacabadabacabaabcbaabacabadabacaba', 'abaabacabadabacabaaaaaaabacabadabacabaaba', 'ababaabacabadabacabaaaaaaaacabadabacabadabacaaaaaaaabacabadabacabaababa', 'zzzzazyzazzzz', 'abacabadaaaaaabacbabcabaaaaaadabacaba', 'abacabadabacabacabadabacabaabcabacbaabacabadabacabacabadabacaba', 'bab', 'pnebabumonoultramicroscopicsilicovolcanoconiosisoinoconaclovociliscipocsorcimartluonomubabenp', 'pneumonoultramicrosracecarcopicsilicovolcanoconiosisoinoconaclovociliscipocracecarsorcimartluonomuenp', 'abacaabadabacabaabcbaabacabadabaacaba', 'babaabcdcbaabab', 'racecaabacabadaaaaaabacbarabcabaaaaaadabacabaacecar', 'bbabb', 'abacabzzzzazyzzbabadadaabacabaabcbaabacabaadadababzzyzazzzzbacaba', 'abacabadabacaabadabacabaabcabacbaabacabadabaacabadabacaba', 'babbab', 'zzzazyabczcbayzazzz', 'abacaabadabacabaabacabadabaacaba', 'bazzzzazyzzzbaaabcdcbaaabzzzyzazzzzab', 'abaaabacabadaacabaaaaaaabacaadabacabaaaba', 'abababadabacabadabacbabacabadabacbaabcabadabacababcabadabacabadabababa', 'zzzzazyzzzazyzzzzyzazzzyzazzzz', 'abacabadabacbaabacabadabacabaabcabadabacaba', 'abababaabacabadabacabaaaaaaaacabadabacabaacabadabacabaabcbaabacabadabacaabacabadabacaaaaaaaabacabadabacabaabababa', 'pneumonoultramicroscopicsilicovolcanocovniosisoinvoconaclovociliscipocsorcimartluonomuenp', 'bb', 'abbabba', 'aaaaabbaaaaa', 'ababazzzazyzzzabadabacbabcabadabazzzyzazzzababa', 'raabacaabadabacabaabccecaceccbaabacabadabaacabaar', 'racecaabacababdaaaaaabacbarabcabaaaaaadbabacabaacecar', 'abacabadabacabacabadabacabaabcabaaababaaabacbaabacabadabacabacabadabacaba', 'baab', 'abba', 'abacaabadabacbaabcabadabaacaba', 'abababadabacabadpnebabumonoultramicroscopicsilicovolcanoconiosisabacbabacabadabacbaabcabadabacababcabasisoinoconaclovociliscipocsorcimartluonomubabenpdabacabadabababa', 'pneumonoultramicrosracecarcoipicsilicovolcanoconiosisoinoconaclovociliscipiocracecarsorcimartluonomuenp', 'abacaabaabacabadabacabadabacbaabcabadabacabadabacabaabaacaba', 'dbabaaabcdcbaaababd', 'aabacabadabacbaabacabadabacabaabcabadabacabaa', 'abababaabacabadabacabbbaaaaaaaacabadabacabaacabadabacabaabcbaabacabadabacaabacabadabacaaaaaaaabbbacabadabacabaabababa', 'abababaabacabadabacabaaababaabcdaaaaacabadabacabaacabadabacabaabcbaabacabadabacaabacabadabacaaaaadcbaababaaabacabadabacabaabababa', 'abacabadabacaba', 'pneumonoultramabaaabacabadaacabaaaaaaaicrosracecarcopicsilicovolcanoconiosisoinoconaclovociliscipocracecarsorciaaaaaaabacaadabacabaaabamartluonomuenp', 'bbbadabbb', 'abaabacbbbadabadabacabaaaaaaabacabadabadabbbcabaaba', 'H', 'ababaabacabadabacaabadabacabaabcababadabacabadabacbabcabadabacabadababacbaabacabadabaacabadabacabaababa', 'zabacabadabacaabadabacabaabcabazzabacbaabacabadabaacabadabacabaz', 'zzzzaabacabadabacabacabadabacabaabcabazyzabacbaabacabadabacabacabadabacabaazzzz', 'bbabbabb', 'ababbaba', 'zzzzazracecaabacabadaaaaaabacbaryzyrabcabaaaaaadabacabaacecarzazzzz', 'abaababazzzzazyzzzbaaabcdcabadabacabaaaaaaabacabadabacdcbaaabzzzyzazzzzababaaba', 'abacaaabadabacbaabcabadabaaacaba', 'abababaabacabadabacabbbaaaaaaaacaabadabacabaacabadabababaabacabadabacabaaaaaaaacabadabacabaacabadabacabaabcbaabcbaabacabadabacaabacabadabacaaaaaaaabacabadabacabaabababadabacaabacabadabaacaaaaaaaabbbacabadabacabaabababa', 'abzzzzazyabacabadabacbaazzzazyzzzzbadabacbabcabadabzzzzyzazzzaabcabadabacabayzazzzzba', 'bbdbb', 'bbaabacaabaabacabadabacabadabacbaabcabadabacabadabacabaabaacabaabb', 'babaadaabab', 'FBaYOcOYaBF', 'abaababaabacabadabacabaaababaabcdaaaaacabadabacababacabaabcbaabacababacabadabacaaaaadcbaababaaabacabadabacabaababaaba', 'abababadabacaabacabadabacabacabadabacabaabcabaaababbadpnebabumonoultramicroscopicsilicovolcanoconiosisabacbabacabadabacbaabcabadabacababcabasisoinoconaclovociliscipocsorcimartluonomubabenpdabbabaaabacbaabacabadabacabacabadabacabaacabadabababa', 'abacabzzzzazyzzbabadadaabacabadabacabaaabacabaabcbaabacabaaabacabadabacabaadadababzzyzazzzzbacaba', 'abacabacaabadabacbaaacbaabcaaabcabadabaacabacaba', 'zzzzaabacabadabacabacabadabacabaabcbazyzabcbaabacabadabacabacabadabacabaazzzz', 'zzzzazyzzyzazzzz', 'abacabadabacaabacaaabadabacbaabcabadabaaacabaacabadabacaba', 'abaabacbbbadabadabbdbacabaaaaaaabacabdbbadabadabbbcabaaba', 'babracecaabacabadaaaaaabacbarabcabaaaaaadabacabaacecarbab', 'abzzzzazyzzzazyzzzzacabadabacabacabadabacabaabcabaaababaaabacbaabacabadabacabacabadabacazzzzyzazzzyzazzzzba', 'abacaabbbadabacabadabbbaacaba', 'pneumonoultramicrbabracecaabacabadaaaaaabacbarracecarcopicsilicovolcanoconiosisoinoconaclovociliscipocracecarrabcabaaaaaadabacabaacecarbabrcimartluonomuenp', 'raabacabadabacabacabadabacabaabcabaaababecaracebabaaabacbaabacabadabacabacabadabacabaar', 'bbaapneumonloultramicrosrpnebabumonoultramicroscopicsilicovolcanoconiosisacecarcopicsilicovolcanoconiosisbacaabaabacabadabacabadabacbaabcabadabacabadabacabaabaacabsisoinoconaclovociliscipocracecasisoinoconaclovociliscipocsorcimartluonomubabenprsorcimartluolnomuenpaabb', 'pneumonoultramicrosracecarcopiocsilicovolcanoconiosisoinoconaclovociliscoipocracecarsorcimartluonomuenp', 'racecaabacababdaaabbabaaabacbarabcabaaababbaaadbabacabaacecar', 'ababaabacabadabaabaababaabacabadabacabaaababaabcdaaaaacabadabacababacabaabccabaaaaaaaacabadabacabadabacaaaaaaaabaccbaabacababacabadabacaaaaadcbaababaaabacabadabacabaababaabaabadabacabaababa', 'zzzzazababaabacabadabacabaaaaaaaabaabacbbbadabadabacabaaaaaaaacabadabacabayzzzyabacabadabacaaaaaaaabacabadabadabbbcabaabaaaaaaaabacabadabacabaababazazzzz', 'apneumonoultramicroscopicsilicovolcanocovniosisbabsisoinvoconaclovociliscipocsorcimartluonomuenpa', 'bbaabacaabaabacazzzazyzzzbadabacabadabacbaabcabadabacabadabzzzyzazzzacabaabaacabaabb', 'raabacaabadabacabaapnebumonoultramicroscopicsilicovolcanocovniosisbababccecaceccbababsisoinvoconaclovociliscipocsorcimartluonomubenpaabacabadabaacabaar', 'abacaabbbbadabacabadabbbbaacaba', 'zzzzazyzzzazyzzabacabadabacbaabacabadabacabaazzzaabacabadabacabaabcabadabacabazzyzazzzyzazzzz', 'abaabacabadabacababaaaaaababacabadabacabaaba', 'zzzzazzyzzzazyzzabacabadabacbaabacabadabacabaazzzaabacabadabacabaabcabadabacabazzyzazzzyzzazzzz', 'abacaabadabacabadabaacaba', 'bbbabbb', 'bazzzazyzzzbaaabcdcbaaabzzzyzazzzab', 'aabaababaabacabadabacabaaababaabcdaaaaacabadabacababacabaabcbaabacababacabadabacaaaaadcbaababaaabacabadabacabaababaabaa', 'abababaabacabadabacabaaababaabcdaaaaacabadabacabaacabadabacabaFBaYOcabcbacOYaBFabacabadabacaabacabadabacaaaaadcbaababaaabacabadabacabaabababa', 'abzzzzazyzzzazyzzzzacabadaabacabacabadabacababacabadabacbaabacabadabacabaaaabcabaaababaaabacbaaaabacabadabacabaabcabadabacababacabadabacabacabaadabacazzzzyzazzzyzazzzzba', 'bazzzazyzzzbaabacaabadabacbaaaabcdcbaaaabcabadabaacabaabzzzyzazzzab', 'pneumonoultramicroscopicsilicovolcanniosisoinnaclovociliscipocsorcimartluonomuenp', 'abababaabacabadabacabaaababaabcdaaaaacabadabacabaacabadaabacabaabcbaabacabaadabacaabacabadabacaaaaadcbaababaaabacabadabacabaabababa', 'bazzzzazyzzzbaaababaabacabadabacabaaaaaaaacabadabacabaabcdcbaabacabadabacaaaaaaaabacabadabacabaababaaabzzzyzazzzzab', 'zzzzazababaabacabadabacabaaaaaaababaabacbbbadabadabacabaaaaaaaacabadabacabayzzzyabacabadabacaaaaaaaabacabadabadabbbcabaababaaaaaaabacabadabacabaababazazzzz', 'bbaapneumonloultramicrosrpnebabumonoultramicroscopicsilicovolcanoconiosisaababaabacabadabacaabadabacabaabcababadabacabadabacbacecarcopicsilicovolcanoconiosisbacaabaabacabadabacabadabacbaabcabadabacabadabacabaabaacabsisoinoconaclovociliscipocracecabcabadabacabadababacbaabacabadabaacabadabacabaababaasisoinoconaclovociliscipocsorcimartluonomubabenprsorcimartluolnomuenpaabb', 'abababaabacabadabacabaaaaaaaacabadabacabaacabaabacabadabacbaabacabadabacabaadabacabaabcbaabacabadaabacabadabacabaabcabadabacabaabacaabacabadabacaaaaaaaabacabadabacabaabababa', 'acabadabacaebacabadabacabaabcabaaababecaracebabaaabacbaabacabadabacabeacabadabaca', 'abacabacaabadabacbbabaadaaaadaababbcabadabaacabacaba', 'abababaabacabadabacabbbaaaaaaaacaabadabacabaacabadabababaabacabadabacabaaaaaaaacapneumonoultramicrbabracecaabacabadaaaaaabacbarracecarcopicsilicovolcanoconiosisbadabacabaacabadabacabaabcbaabcbaabacabadabacaabacabadabsisoinoconaclovociliscipocracecarrabcabaaaaaadabacabaacecarbabrcimartluonomuenpacaaaaaaaabacabadabacabaabababadabacaabacabadabaacaaaaaaaabbbacabadabacabaabababa', 'aaaaabbbaaaaa', 'zzzzaabacabadabazzzzazyzzacabaabcabazyzabacbaabacazzyzazzzzabadabacabaazzzz', 'abacabacaabaadabacbaaacbaabcaaabcabadaabaacabacaba', 'bbbaabbb', 'abacabbbacaabacaaabadabacbaabcabadabaaacabaacabbbacaba', 'babbabaadzzzazyzabacabadabacaabadabacabaabcabazzbaaabcdcbaaabzzabacbaabacabadabaacabadabacabazyzazzzdaababbab', 'zzzzazzzz', 'abababaabacabadabacabaaababaabcdaaaaacabadabacabaacabadababababaabacabadabacabbbaaaaaaaacaabadabacabaacabadabababaabacabadabacabaaaaaaaacabadabacabaacabadabacabaabcbaabcBaYOcabcbacOYaBcbaabcbaabacabadabacaabacabadabacaaaaaaaabacabadabacabaabababadabacaabacabadabaacaaaaaaaabbbacabadabacabaababababadabacaabacabadabacaaaaadcbaababaaabacabadabacabaabababa', 'abaabacabadabacababaabacabadabacaabadabacabaabcabaaaaaabacbaabacabadabaacabadabacabaababacabadabacabaaba', 'bazzzzazyzzzbaaababaabacbbdabadabacabaaaaaaaacabadabacabaabcdcbaabacabadabacaaaaaaaabacabadabadbbcabaababaaabzzzyzazzzzab', 'abbaabba', 'babababcdcbababab', 'bbbb', 'ababaabacabadabacaabadabacaabaabcababadabacabadabacbabcabadabacabadababacbaabaacabadabaacabadabacabaababa', 'zzzzazracecaabacabadaaaaaabacbarabacabadabacabayzyabacabadabacabarabcabaaaaaadabacabaacecarzazzzz', 'racecaabacabbabdaaaaaabacbarabcabaaaaaadbabbacabaacecar', 'abacbaababacaabadabacbbabaadaaaadaababbcabadabaacababaabcaba', 'bazzzzazyzzzbazaababaabacbbdabadabacabaaaaaaaacabadabacabaabcdcbaabacabadabacaaaaaaaabacabadabadbbcabaababaazabzzzyzazzzzab', 'apneumonouisbabsiuonomuenpa', 'abacabadabbacbabcabbadabacaba', 'abacaabbbadpnebabumonoultramicroscopicsilnicovolcanoconiosisbacabsisoinoconaclovocinliscipocsorcimartluonomubabenpdabbbaacaba', 'bazzzaaaacabadabacabaabcdcbaabacabadabacaaaazzzab', 'aaaraabacaabadabacabaapnebumonoultramicroscopicsilicovolcanocovniosisbababccecaaabbbaaaceccbababsisoinvoconaclovociliscipocsorcimartluonomubenpaabacabadabaacabaaraaa', 'zabzzabababadabacabadabacbabacabadabacbaazzazyabacabadabacbaazzzazyzzzzbadabacbabcabadabzzzzyzazzzaabcabadabacabayzazzaabcabadabacababcabadabacabadabababazzbaz', 'abababaabacabadabadbabaaabcdcabaaababaabcdaaaaacabadabacabaacabadaabacabaabcbaabacabaadabacaabacabadabacaaaaadcbaababaaabacdcbaaababdabadabacabaabababa', 'ababazzzazyzzzabadabacbaabcabadabazzzyzazzzababa', 'abababaabacabadabacabaaababaabcdaaaaacabadabacabaacabadabacpneumonoultramicroscopicsilicovolcanniosisabaabcbaabasisoinnaclovociliscipocsorcimartluonomuenpcabadabacaabacabadabacaaaaadcbaababaaabacabadabacabaabababa', 'ababaabacabadabaabaabababadabacababacabaabccabaaaaaaaacabadabacabadabacaaaaaaaabaccbaabacababacabadabababaabaabadabacabaababa', 'racecaabacabadaaaaaaabaacbarabcaabaaaaaaadabacabaacecar', 'dabacabaaababaabcdaaaaacabadabacabaacabadabacabaFBaYOcabcbacOYaBFabacabadabacaabacabadabacaaaaadcbaababaaabacabad', 'zzzz', 'abacabadabacabacabadababcabaabcabacbaabacbabadabacabacabadabacaba', 'racecaabacabababaababazzzzazyzzzbaaabcdcabadabacabaaaaaaadaaaaaabacbarabcabaaaaaadaaaaaaabacabadabacdcbaaabzzzyzazzzzababaabababacabaacecar', 'racecaabpneumonoultramicrbabracecaabacabadaaaaaabacbarracecarcopicsilicisaaadaaaaaabacbarabcabaaaaaadaaasiciliscipocracecarrabcabaaaaaadabacabaacecarbabrcimartluonomuenpbaacecar', 'ababadbabaaabcdbadabacabadabacbabacabadabacbaabcabadabacababcabadabacabadabdcbaaababdababa', 'racecaabcacabacacbaacecar', 'ababazzzazyzzzabadabaabadabazzzyzazzzababa', 'ababaabacadabacabaaababaabcdaaaaacabadabacabaacabadabacabaFBaYOcabcbacOYaBFabacabadabacaabacabadabacaaaaadcbaababaaabacabadacabaababa', 'ababazzzzzzabadabaabadabazzzzzzababa', 'zzzzaabzacabadabacabacabadabacabaabcbazabacabacaabadabacbaaacbaayzyaabcaaabcabadabaacabacabazabcbaabacabadabacabacabadabacazbaazzzz', 'racecaabacabadaaaaaabacbarabbarabcabaaaaaadabacabaacecar', 'abacabadaabacbaabababacabadaaaaaabacbaacaabadabacbbabaadaaaabacbaabcabaaaadaababbcabadabaacaabcabaaaaaadabacabababaabcabaadabacaba', 'abababaabacabadabacabbbaaaaaaaacabadabacaabaacabadabacabaabcbaabacabadabacaabaacabadabacaaaaaaaabbbacabadabacabaabababa', 'zzzzzazyzazzzzz', 'bbaabb', 'bazzzzazyzzzbaaababaabacabadabdacabaaaaaaaacabadabacabaabcdcbaabacabadabacaaaaaaaabacadbadabacabaababaaabzzzyzazzzzab', 'abacaabaabacabadabacabadaabacbaabcabaadabacabadabacabaabaacaba', 'aaaaabbabaaabacabadaacabaaaaaaabacaadabacabaaababbaaaaa', 'zzzzazyzzzazyzzabacabadabacbabaababazzzzazyzzzbaaabcdcabadabacabaaaaaaaaabacabadabacabaazzzaabacabadabacabaaaaaaaaabacabadabacdcbaaabzzzyzazzzzababaababcabadabacabazzyzazzzyzazzzz', 'bazzzdzazyzzzbaaababaabacabadabdacabaaaaaaaacabadabacabaabcdcbaabacabadabacaaaaaaaabacadbadabacabaababaaabzzzyzazdzzzab', 'ababaabacabadabaabaababaabacabadabacabaaababaabcdaaaaacabadabacababacaaaaaaaaacabadabacabadabacaaaaaaaaacababacabadabacaaaaadcbaababaaabacabadabacabaababaabaabadabacabaababa', 'abbapneumonoultramicroscopicsilicovolcanniosisoinnaclovociliscipocsorcimartluonomuenpabba', 'abbaaracecaabacababdaaabbabaaabacbarbrabcabaaababbaaadbabacabaacecaraabba', 'ababaabacabadabaabaababaabacabadabacababaababaabcdaaaaacabadabacababacabaabccabaaaaaaaacabadabacabadabacaaaaaaaabaccbaabacababacabadabacaaaaadcbaababaababacabadabacabaababaabaabadabacabaababa', 'bazzzazyzzzbaabacaabadabacbaaaabacabadabacbaabcdcbaabcabadabacabaaaabcabadabaacabaabzzzyzazzzab', 'bazzzdzazyzzzbbaaababaabacabadabdacabaaaaaaaacabadabacabaabcdcbaabacabadabacaaaaaaaabacadbadabacabaababaaabbzzzyzazdzzzab', 'pabababaabacabadabacabaaaaaaaacabadabacabaacabadabacabaabcneumoanniosisoinnaomuencbaabacabadabacaabacabadabacaaaaaaaabacabadabacabaabababap', 'abababaabacabadabacabaaababaabcdaaaaacabadabacabaacabadabacabracecaabacababdaaabbabaaabacbaraabcbaarabcabaaababbaaadbabacabaacecarbacabadabacaabacabadabacaaaaadcbaababaaabacabadabacabaabababa', 'abacabacaabaadabacbaaacbaabacabadabacabaabcaaabcabadaabaacabacaba', 'racecaabacabaaraabacabaacecar', 'ababazzzazyzzzbaababazzzzazyzzzbaaababaabacabadabdacabaaaaaaaacabadabacabaabcdcaabadabacbaaaabcdaabcbaadcbaaaabcabadabaacdcbaabacabadabacaaaaaaaabacadbadabacabaababaaabzzzyzazzzzababaabzzzyzazzzababa', 'ababaabacabadabacabaaaaaaaacabadabaababaabacabadabaabaababaabacabadabacabaaababaabcdaaaaacabadabacabaabacaaaaaaaaacabadabacabacabadabacaaaaaaaaacabaabacabadabacaaaaadcbaababaaabacabadabacabaababaabaabadabacabaababaabadabacaaaaaaaabacabadabacabaababa', 'abzzzzazyabacabadabacbaaazzzazyzzzzbadabacbabcabadabzzzzyzazzzaaabcabadabacabayzazzzzba', 'abraabacaabadabacabaapnebumonoultramicroscopicsilicovolcanocovniosisbababccecaacaabadabacabaabacbbaabacaabaabacabadabcacabadabacbaabcabadabacacbadabacabaabaacabaabbcabaabacabadabaacaaceccbababsisoinvoconaclovociliscipocsorcimartluonomubenpaabacabadabaacabaarba', 'raabacaabadabacabaabcceccacceccbaabacabadabaacabaar', 'baabazzzdzazyzzzbbaaababaabacabadabdacabaaaaaaaacabadabacabaabcdbdcbaabacabadabacaaaaaaaabacadbadabacabaababaaabbzzzyzazdzzzabaab', 'ababaabacabadabacaabadabacaabaabcababadabacaabadabacbabcabadabaacabadababacbaabaacabadabaacabadabacabaababa', 'abacaababazzzzazyzzzbazaababaabacbbdabadabacabaaaaaaaacabadabacabaabcddabacbaabcabaddcbaabacabadabacaaaaaaaabacabadabadbbcabaababaazabzzzyzazzzzababaacaba', 'racecaaabababadabacabadabacbabacabadabacbaabcacabacacbaabcabadabacababcabadabacabadabababaaacecar', 'abacaabbbbadabaababaabacadabacabaaababaabcdaaaaacabadabacabaacabadabacabaFBaYOcabcbacabcbacOYaBFabacabadabacaabacabadabacaaaaadcbaababaaabacabadacabaababaabadabbbbaacaba', 'ababaabacabadabaabaababaabacabadabacabaaababaabcdaaaaacabadabacababacaaaaaaaaacabadabacabaabacabadabacaaaaaaaaacababacabadabacaaaaadcbaababaaabacabadabacabaababaabaabadabacabaababa', 'abacabadabacaabcadabacabaabcabacbaabacabadacbaacabadabacaba', 'abacabadabacabpneumonoultramicrbabracecaabacabadaaaaaabacbarracecarcopicsilicovolcanoconiosisoinoconaclovociliscipocracecarrabcabaaaaaadabacabaacecarbabrcimartluonomuenpbacabadabacaba', 'pneumonoultramabaaabacabadaacabaaaaaaaicrosracecarcopicsuilicovolcanoconiosisoinoconaclovociliuscipocracecarsorciaaaaaaabacaadabacabaaabamartluonomuenp', 'aabaababaabacabadabacabaaababaabbcdaaaaacabadabacababacabaaabcbaaabacababacabadabacaaaaadcbbaababaaabacabadabacabaababaabaa', 'oQbCCbQo', 'abacaababazzzzazyzzzbazaababaabacbabdabadabacabaaaaaaaacabadabacabaabcddabacbaabcabaddcbaabacabadabacaaaaaaaabacabadabadbabcabaababaazabzzzyzazzzzababaacaba', 'ababaabacabadabacaabadabacaabzzzzazyabacabadabacbaazzzazyzzzzbadabacbaabadabacaabadabacbabcabadabaacabadabaabcabadabzzzzyzazzzaabcabadabacabayzazzzzbaacabadabaacabadabacabaababa', 'zzzazabababaabacabadabacabaaaaaaaacabadabacabaacabadabacabaabcyzzzycbaabacabadabacaabacabadabacaaaaaaaabacabadabacabaabababazazzz']\n    for i, (inp, exp) in enumerate(zip(inputs, results)):\n        assertion(candidate(*inp), exp, 0)\n",
      "entry_point": "make_palindrome",
      "complete_code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n\n"
    },
    "execution_info": {
      "max_mutations_per_operator": 10,
      "total_operators_tested": 46,
      "operators_with_mutations": 8,
      "execution_timestamp": "2025-08-01T15:35:51.051803"
    }
  }
}