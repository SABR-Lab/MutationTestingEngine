{
  "timestamp": "20250801_155807",
  "test_type": "mutation_testing",
  "metadata": {
    "task_id": "HumanEval/132",
    "timestamp": "20250801_155807",
    "tester_version": "1.0",
    "total_operators_tested": 14,
    "operators_with_errors": 0
  },
  "summary": {
    "original_passes": true,
    "total_mutations": 35,
    "killed_mutations": 27,
    "mutation_score": 0.7714285714285715,
    "survival_rate": 0.22857142857142854
  },
  "detailed_results": {
    "task_id": "HumanEval/132",
    "dataset_type": "plus",
    "original_passes": true,
    "total_mutations": 35,
    "killed_mutations": 27,
    "mutation_score": 0.7714285714285715,
    "mutation_results": {
      "NumberReplacer": {
        "total_mutations": 10,
        "killed_mutations": 8,
        "survival_rate": 0.2,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (1, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (1, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpmlwd4nis.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpmlwd4nis.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpmlwd4nis.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:01.476720",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (-1, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (-1, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp9z4f1g69.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp9z4f1g69.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp9z4f1g69.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:01.642930",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 1)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 1)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:58:01.838896",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 3,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, -1)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, -1)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:58:02.039058",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 4,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 2\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 2\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp9azf39cz.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp9azf39cz.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp9azf39cz.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:02.227896",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 0\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 0\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmprb0amvye.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmprb0amvye.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmprb0amvye.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:02.396092",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 6,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 2\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 2\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpx541d_4n.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpx541d_4n.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpx541d_4n.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:02.565481",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 7,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 0\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 0\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpfqoy3ns7.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpfqoy3ns7.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpfqoy3ns7.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:02.745898",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 8,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 1:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 1:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpktqt7ys5.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpktqt7ys5.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpktqt7ys5.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:02.917899",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 9,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == -1:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == -1:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpdoubc8r0.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpdoubc8r0.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpdoubc8r0.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:03.070488",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 16,
        "mutations_tested": 10
      },
      "AddEq->SubEq": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt -= 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt -= 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp1uc6uak8.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp1uc6uak8.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp1uc6uak8.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:03.238664",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "SubEq->AddEq": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt += 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt += 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpdzlu4z3y.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpdzlu4z3y.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpdzlu4z3y.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:03.410518",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Eq->NotEq": {
        "total_mutations": 3,
        "killed_mutations": 3,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] != ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] != ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpj32681b9.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpj32681b9.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpj32681b9.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:03.625844",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] != '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] != '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp1w16wj0g.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp1w16wj0g.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp1w16wj0g.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:03.795099",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt != 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt != 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp7rnns763.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp7rnns763.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp7rnns763.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:03.963384",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 3,
        "mutations_tested": 3
      },
      "GtEq->LtEq": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest <= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest <= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpqwh4qi7t.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpqwh4qi7t.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpqwh4qi7t.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:04.187891",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Break->Continue": {
        "total_mutations": 1,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                continue\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                continue\n    return False",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:58:04.430731",
            "status": "SURVIVED",
            "reason": "tests_passed"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Continue->Break": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            break\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            break\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpc7tfcr8c.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpc7tfcr8c.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpc7tfcr8c.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:04.615858",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Remove ReturnValue": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpw49jrz4c.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpw49jrz4c.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpw49jrz4c.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:04.791276",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpkdxrqar9.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpkdxrqar9.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpkdxrqar9.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:05.043471",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "True->False": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return False\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return False\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpmz5dd6rp.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpmz5dd6rp.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpmz5dd6rp.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:05.250889",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "False->True": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return True",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return True",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpntogtmiw.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpntogtmiw.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpntogtmiw.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:05.440736",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Zero->One": {
        "total_mutations": 4,
        "killed_mutations": 3,
        "survival_rate": 0.25,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (1, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (1, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpkwgalw47.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpkwgalw47.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpkwgalw47.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:05.629718",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 1)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 1)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:58:05.824308",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 1:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 1:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpetyt5jzl.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpetyt5jzl.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpetyt5jzl.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:06.010127",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return 1",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return 1",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpbm5k5ete.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpbm5k5ete.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpbm5k5ete.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:06.184019",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 4,
        "mutations_tested": 4
      },
      "One->Zero": {
        "total_mutations": 3,
        "killed_mutations": 3,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 0\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 0\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpzt9v8l9b.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpzt9v8l9b.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpzt9v8l9b.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:06.374359",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 0\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 0\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp3hb1m_b8.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp3hb1m_b8.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp3hb1m_b8.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:06.575446",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return 0\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return 0\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp_4x1ns3h.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp_4x1ns3h.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp_4x1ns3h.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:06.777638",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 3,
        "mutations_tested": 3
      },
      "String->Empty": {
        "total_mutations": 3,
        "killed_mutations": 1,
        "survival_rate": 0.6666666666666666,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:58:06.958472",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == '':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == '':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:58:07.128825",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpqt_s7vm7.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpqt_s7vm7.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpqt_s7vm7.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:07.290197",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 3,
        "mutations_tested": 3
      },
      "String->X": {
        "total_mutations": 3,
        "killed_mutations": 1,
        "survival_rate": 0.6666666666666666,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"X\"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"X\"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:58:07.470352",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == 'X':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == 'X':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == '[':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:58:07.640171",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
            "mutated_code": "def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == 'X':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "mutated_complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\ndef is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] == ']':\n            continue\n        cnt, max_nest = (0, 0)\n        for j in range(i, len(string)):\n            if string[j] == 'X':\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpmehipm21.py\", line 80, in <module>\n    check(is_nested)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpmehipm21.py\", line 74, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpmehipm21.py\", line 67, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:58:07.832076",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 3,
        "mutations_tested": 3
      }
    },
    "problem_info": {
      "prompt": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n",
      "canonical_solution": "\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n",
      "test_code": "\n\nimport numpy as np\n\ndef is_floats(x) -> bool:\n    # check if it is float; List[float]; Tuple[float]\n    if isinstance(x, float):\n        return True\n    if isinstance(x, (list, tuple)):\n        return all(isinstance(i, float) for i in x)\n    if isinstance(x, np.ndarray):\n        return x.dtype == np.float64 or x.dtype == np.float32\n    return False\n\n\ndef assertion(out, exp, atol):\n    exact_match = out == exp\n\n    if atol == 0 and is_floats(exp):\n        atol = 1e-6\n    if not exact_match and atol != 0:\n        assert np.allclose(out, exp, rtol=1e-07, atol=atol)\n    else:\n        assert exact_match\n\n\ndef check(candidate):\n    inputs = [['[[]]'], ['[]]]]]]][[[[[]'], ['[][]'], ['[]'], ['[[[[]]]]'], ['[]]]]]]]]]]'], ['[][][[]]'], ['[[]'], ['[]]'], ['[[]][['], ['[[][]]'], [''], ['[[[[[[[['], [']]]]]]]]'], ['[[]][]'], ['[[]]]'], ['[]][[]'], ['[][][]'], ['[[][]['], ['[[[]]]]'], ['[[[][]]]'], ['[][][][[][]][]'], ['][[][]['], ['[[[[[[]]]]]]'], ['[[][[]['], ['][]][[]'], ['[[[[][]]]][]'], ['[[[[][]]]]][]'], ['][]][][]][[][]'], [']][[][[[]]]]['], [']][[][[]]]]['], ['[[[][]][[][][]]]]][]'], [']][[][[]]]][[[[[[][]]]]][][]]]][]['], ['[[[]]]'], ['[[[[[[]]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][]'], ['][]][[[]]'], ['][]][]'], ['][][]['], ['][]][[[]'], ['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][]['], ['[[[[[[]]]]]]]'], ['[[]]]]]]][]'], ['[[[]]]][]][][]][[][]]'], ['][][]][[[]]][[[]'], ['][]]][[][]'], ['[[[[[[]]]]]]][[][[]]]][[[[[[][]]]]][][]]]][]['], ['][][[[]'], ['][][][][]][[][]'], ['][][][[[]'], ['[[]]]]][[][[]]]]['], [']]'], ['[[]]]]]]][[[]]]][]][][]][[][]][]]'], ['[[[[[[]]]]'], ['[[[[[[]]]]][]]]'], ['[[]]]]]][]'], ['[][][][][][]'], ['][][][][][][][]][[[]'], ['[[]]]]][[][[]]]][['], ['[[[[[][]]]]]]'], ['[][][][][]][[[]]][][]'], ['[][][][][]][]][]][][]][[][]'], [']][[][[[]]['], ['[[[[][]]]][][[[[[[]]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[]['], ['[[[[[[]]]]]]][[][[]]]]]['], ['][][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], ['][[[[[[]]]]][]]][][[[]'], [']][[][[]'], ['[[[[][]]]][][[[[[[]]]]]]][[][[]]]][[[[[[][]]]]][][]]][][[[]][]][][]][[][]['], ['[[[[][]]]][][[[[[[]]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[][[[]]]]][[][[]]]]['], ['][]]][][][]'], ['[[[][[]['], ['][][][][[[[]]]]][[][]'], ['[[]]]]][['], ['[[]]]]]][][][][[[[]]]]][[][][[][[]]]]['], ['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]][]'], ['[][][][][][[]'], ['[[[[[[]]][[[[[[]]]]]]]]'], ['[[]]]]]]]][]'], ['[][[]]]]]][]][[][[[[[[]]][[[[[[]]]]]]]]'], ['[[[[[][]]]]][]'], [']]]'], ['[[[[[[]]]]]][]][[[]][]]]][][]'], ['[[[[[[]]]][[[][]][[][][]]]]][]]][[][[]'], ['][]]][[]][]'], ['][][[][[[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], [']][[][[]]]][[[[[[][]]]]]]]][]][]]]][]['], ['][[[[[[]]]]]][]][[[]][]]]][][]]'], ['[[]]]]][[][[[[[[][]]]][]]]]]['], ['[[]]]]][[][[]]]][[['], ['][]][[][[[[[[[[[][]][[[]]]]]]]]][[][[]]]][[[[]]][][]'], ['][[]['], [']][[][[]]]]][[[[[[][]]]]][][]]]][]['], ['[[]]]]][][[['], ['][]][[[][]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[[][]]]]]][]'], [']]][[][[]'], ['[]]]]][]'], ['[[[[[[]]]]][]]'], ['[[[[][]]]][][[[[[[]]]]]]][[][[]]]][[[[[[][]]]]][][]]]][][[[[][[[]][]]][[][[]]]]['], ['[[[[]]]]]][][][][[[[]]]]][[][][[][[]]]][]]]]]]][]'], ['[[[[][]]]][][[[[[[]]]]]]][[][[[[[[[][][][[[]]]]][[[][]][[][][]]]]][]]][[][[][]]]][[[[[[][]]]]][][]]]][][[[][[[]]]]][[][[]]]]['], ['[[]]]]][[][[][[[[][]]]][][[[[[[]]]]]]][[][[[[[[[][][][[[]]]]][[[][]][[][][]]]]][]]][[][[][]]]][[[[[[][]]]]][][]]]][][[[][[[]]]]][[][[]]]][]]]['], ['[[[[]]]]]][][][][[[[]]]]][[][][[][[]]]][[][[]['], ['[[]]]][[]][[[]]'], ['][][][][][][][]][[][]'], ['[[[]]]]]]]][][[[]]]]]][][][][[[[]]]]][[][][[][[]]]]][]][[[]][][[[]]['], ['][]][[[][]]]]]][[][[]]]][[[[[[]][]]]]][][]]]][][[[[[][]]]]]][]'], ['[[[]]]]]]]][][[[]]]]]][][][][[[[]]]]]][[][][[][[]]]]][]][[[]][][[[]]['], ['][][[][[[]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], ['[][][][][]'], ['][][[][[[]]]]]]]]][][[[[[[[[][]][][[]]]]]]]]][[][[]]]][[[[]]][[][]'], ['[[[[]]]]]][][][[][[[[]]]]][[][][[[][[]]]][]]]]]]][]'], [']][[][][][][][[][][[]]]]['], ['[[[[]]]]]]][[[]]]][]][][]][[][]][]][[[[]]]]][]]]'], ['[[[[[[]]]]]][[][][]][[[]][]]]][][[]'], ['[[]]]][[[[[]'], ['[[[[]]][]'], ['[[[[]][[[]]]]'], ['[[]][[[]][][]]'], ['][[['], ['[[[[]]]][][][][[][]]][[[][]][[]]]'], ['[][[[[[[]]]][[]]]][][][[]]'], ['[[][]][[[[[]]]'], ['[[[[[[[[[[[[[]]]]]]]]]]]]]'], [']][[['], ['[[[[][[[[[]]]]'], ['[[[[[][[[[[]]]]'], ['[[]]]][[[[[[][[[[[][[[[[]]]]'], ['[[[[]][[[]]][]'], [']'], ['[[][[]]]][][][][[][]]][[[][]][[]]]'], ['[][]]]'], ['[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]]'], ['[[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[]]]]'], ['[][[[[[[]][][][[]]][[][]][[[[[]]]][][][[]]'], ['[[]]]][[[[[[]'], ['[[]]]][[[[[['], ['[[[['], ['[[[[[][[][[[]]]]'], ['[[][[]][[[[[]]]'], ['[[[[][[[[[[]]]]'], ['[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]]'], ['[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[]]]]][[[][]][[]]]'], ['[[[][[]]]][][][][[][]]][[[][]]][[]]][[[]][[[]]]]'], ['][['], ['[[[][]][[[[[]]]'], ['[[]][[[]][][[[][[]][[[[[]]]['], ['[[[[]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[['], ['[[[][]][[[[][[[[[]]]][[[[[]]]'], ['[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[['], ['[[]][[[[]][][]]'], ['[[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][][][[]]][[[[[]'], ['][[[[[[]][[[]]][]'], ['[[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[]]]]]]]'], ['][][[][]][[[[[]]][['], ['[[[[[][[][[[]]][]'], ['[][[[[[[]][][][[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]]'], ['[[[[[][[[[[[][[][[[][]]][][[[]]]['], ['[[]]]][[[][[[[[[]'], ['][[[[[[]]][[[][[[]]][]'], ['[[][]][[[[[][]]'], [']][[[[[[]][[[]]][]'], ['][[[[]]]][][][][[][]]][[[][]][[]]]]'], ['[[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[]'], ['[[]]][[[[[[[[[[[[[]][[]][[[]][][[[][[]][[[[[]]][[[[[]]]]]]]'], ['[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[['], ['[[[[[][[[[[[][[][[[][]][[[[]]]][][][][[][]][[]]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[]]]]][[[][]][[]]]][][[[]]]['], ['[[[[]]][][[[[]][[[]]][]'], ['[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[]]]]]]]][][[]]]]]]]]]]]]]'], ['[][[[[[[]]][][][[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]]'], ['[[]][[[[]][[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][][][[]]][[[[[][][]]'], [']][[[['], ['[[]][][[]][][]]'], ['[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[]]]][[]]]'], [']][[[[['], ['[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[]]]]]]]][][[]]]]]]]]]]]]]'], ['][]][[['], ['[[[[]]]][[[[[[][[][[[[[[]]]]'], ['][]['], ['[[][]][[[[[]]][[[[[]]]'], ['[[]][[[[][]]'], ['[[[[]]]][][]]][][[][]]][[[][]][[]]]'], ['[[][]][[[[[]]][[[][]][[[[][[[[[]]]][[[[[]]]'], ['[[]][[[[][]]]'], ['[[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]]'], ['[][[[[[[[]]]][[[][[[[[[][]]]][[]]][[][]][[[[[]]]][][][[]]'], ['[[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[[[][[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[[[]]]][][][[]]'], ['[[][]][[[[[[[]]]][[[[[[][[[[[][[[[[]]]]]]]'], ['[[[[]]]][][][][[][]]][[[][]][[[[[][[[[[]]]]]][[[[[['], ['[]][]]]'], ['[][][[[[][[[[[[]]]][[['], ['[][[[[[[[]]]][[[][[[[[[][]]]][[]]][[][]][[[[[]]]]][[[]]]]][[]]'], ['[[][]][[[[[[[]]]][[[[[[][[[[[][[[[[[]]]]]]]'], ['[][[[[[[]][][[][[[[[[]][][][[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]]][[]]][[][]][[[[[]]]][][][[[]]'], ['[[[[]][[[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[]]]]][[[][]][[]]][]]]]'], ['[[][]][[[[[[]]]'], ['[[[[]][[[[]]][]'], ['[[[[[][[[[[[]'], ['[[[[[][[[[[[]]][][[[[]][[[]]][]][[[[][[[[[[]]]][[]]][[][]][[[[[[[][[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[[[]]]][][][[]]'], ['[][[[[[[[]]]][[[][[[[[[][]]]][[]]][[][]][[[[[]][]]][[[]]]]][[]]'], ['[[[[[][[][[[]]]]]'], ['[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[][[]]]]]]]][][[]]]]]]]]]]]]]'], ['[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][]][[[[[]]]][][][[]]][[[[[][][]]'], ['[[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[]]]][[[[[][[[[[]]]]'], ['[[]]]][[[[[[[][[[[[][[[[[]]]]'], ['[[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]]'], [']['], ['[[]][[[][[]]]][][][][[][]]][[[][]]][[]]][[[]][[[]]]]]'], ['[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[[['], ['[[[[][[[[]]]][][]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[['], ['[[][[][][[[[[]]]'], ['[[[[[][[[[[[][[][[[][]][[[[]]]][][][][[][[]][[]]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[]]]]][[[][]][[]]]][][[[]]]['], ['][[][]][[[[[]]][[[[[]]]][[[['], ['[][[[[[[]]]][[]]]][[][][[]]'], ['[[[[]]]][[[][[[][[][[[[[[]]]]'], ['[[]][[[[]][[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][[][][[]]][[[[[][][]]'], ['[[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]]]'], ['[[[[[[[]][[[[[[[[[[[]]]]][[[]]]]]]][[[[][[]]]]]]]][][[]]]]]]]]]]]]]'], ['[[]]][[[[[[[[[[[[]]]'], ['[[[[[[[]][[[[[[[][[]]]]]]]][][[]]]]]]]]]]]]]'], ['[][[[[[[]][][][[]]][[][]][[[[[]]]][][][[][]][][[[[]]][[]]'], ['][[[][]][[[[[][]]'], ['[[[[][[][]][[[[[]]][[[[[]]]][[[[[[]]]'], ['[[[][]][[[[[][]]'], ['[[[[[][[][[[[][[[[[[]]]][[]]][[[[[[][[[[[[]]][][[[[]][[[]]][]][[[[][[[[[[]]]][[]]][[][]][[[[[[[][[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[[[]]]][][][[]][][]][[[[[[[][[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[[[]]]][][][[]]'], ['[[[[[][[][[[][[]]]][][][][[][]]][[[][]]][[]]][[[]][[[]]]][[[]]]]]'], ['[[]]][[[[[[[[[[[[[]][[]][[[]][][[[][[]]'], ['[[[[[][[[[[]]'], ['[[]][][[]][][]]][[[[[[]][[[]]][]'], ['[[[]][[[[]][][]][[[]][[]]][]'], ['[[[[[][][[[[]]'], ['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[['], ['[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[[][]][[]]][[[]][[[]]]][[]]]'], ['[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[['], ['[[[][[]]]][][][][[][]]][[[][]][[[]][[[]][][]][]]][[][]][[[]]]]'], ['][[[[]][][[]][][]][[[[]]][[[][[[]]][]'], ['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[]]][[[[[[[[[[[[[]][[]][[[]][][[[][[]][[[[[]]][[[[[]]]]]]][[[]][[]]]]]][][][][[][]]][[[][]][[][[[[][[[[[]]]]]][[]]]][[[[[['], ['[[][]][[[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[][[]]]]]]]][][[]]]]]]]]]]]]][[[]]]'], ['[[]]]][[[[[[][][[[[[][[[[[]]]]'], ['[[[[]'], [']][[[][]][[[[[][[[[[[][[[[[[]]]['], ['[][][[[[[][[]]]][][][][[][]]][[[][]][[]]][][[[[[[]]]][[['], ['[[[[][]][[[[[][]][[[[[[[[[[[[]]]]]]]]]]]]]'], ['[[]][[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[[][[[[[[][[][[[][]]][][[[]]][[]]]'], ['][[[[[[]][[[[]]][][[[[][]][[[[][[[[[]]]][[[[[]]]'], ['[[[[]][[[[]]'], ['[[]][[[]][][[[][[]][[[[[]]]]['], ['[[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[]][[[[][]][[]]]][][][[]]'], ['[[[[]][[[]][[[[]]][]][]'], ['[[[[[][[][[]]'], ['[][[[][]][[[[[][][][[[[][[[[[[]'], ['[[][[][][[[[]'], ['[][[[[[[[]]]][[[][[[[[[][]]]][[]]][[][]][[[[[]]]][]]]'], ['[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]]]'], ['[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]]'], ['[[[[]]][][[[][]][[[[][[[[[]]]][[[[[]]]'], ['[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[]]]]]]]][][[]]]]][[][[]]]][][][][[][]]][[[][]][[]]]]]]]]]]]'], ['[[[][[[[]]]][][][][[][]]][[[][]][[]]]][]][[[[]]'], ['[[[[[[[[]]]][][][][[][]]][[[][]][[]]]]][[[[[]]]]'], ['[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[][[[[[[]][[[]]][][['], ['[[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], ['[[][[]]]][[[[[][][[]]]'], ['][[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], [']][[[[[['], [']][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]]['], ['[[][[]]]][[[[[][][[]][[][[][][[[[[]]]]'], ['[[][][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[]][[[[[]]][[[[[]]]'], [']][[[][]][[[][[[]][][[]][][]][][[[[[[][[[[[[]]]['], ['[][]]]]'], ['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], ['[[[][][[[[]'], ['[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]]]'], ['][[[[[][]]'], ['[[[][]][[[[][[[[[]]]][[[[[]][[[]]]][[[[]]]'], ['[[][[]]]][[[[[][][[]][[][][][[][[[[][]]]]'], ['[[[[]]]][][][][[][]]][[[][]][[]]][[]][][[[][]][[[[[][][][[[[][[[[[[[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[]]]]]]]][][[]]]]][[][[]]]][][][][[][]]][[[][]][[]]]]]]]]]]]['], ['[][[[[[[]][][][[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]][][[[][]][[[[[][][][[[[][[[[[[]'], ['[[]][[[]]][[[[[]]]['], ['[[[[[][]][[[[[][]][[[[[[[[[[[[]]]]]]]]]]]]][[[]]][][[[][]][[[[][[[[[]]]][[[[[]]]'], ['[[[[[[[[]]]][][][][[][]]][[[][]][[][]]][[[[[]]]'], ['[[[[][[['], ['[[]][[[[]][[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[]]]]][[[][]][[]]][][][[]]][[[[[][][]]'], ['[][[[[[[]][][][[]]][[][]][[[[[]]]][][][[][][[[][[]]]][][][][[][]]][[[][]][[[]][[[]][][]][]]][[][]][[[]]]][[[[[]]][[]]'], ['[[[[[][[[[[[][[][[[][]][[[[]]]][][][][[][[]][[]]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[[[[[]]]]][[[][]][[]]]][][[[]]]['], ['[][[[[[[]][][][[]]][[][]][[[[[]][[[[]][[[]][[[[]]][]][]]][][][[][][[[][[]]]][][][][[][]]][[[][]][[[]][[[]][][]][]]][[][]][[[]]]][[[[[]]][[]]'], ['[[[[]][[[]]][[]][][[]][][]]][[[[[[]][[[]]][][]'], ['[][[[[[[]]]]][[]]][[][]][[[[[]]]][][][[]]'], ['[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][[[[[]][[[]]][[]][][[]][][]]][[[[[[]][[[]]][][]]]][[[][]][[]]][[]]]][[[[[['], ['[][[[[[[]][][[][[[[[[]][][][[]]][[][]]]]]][][][[[]]'], ['[[]][[[][][]]'], ['[[[[[][[[[[[]]'], ['[[[[[[[[[[[[[]]]]][[[[]]]]]]][[[[][[[[[[]]]][[[[[][[[[[][[][]][[[[[]]]]]]'], ['[[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[]]]]][]]'], ['[[[[]][[[[]]]]'], ['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]]][[[[[['], ['[[[[]]]][][][][[][]]][[[][]]]][[[[[[[[][[[[[]]]]]][[[[[['], [']]][[['], ['[[[[][][[[[]'], ['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]][[[[[]]]][[[['], ['][[[[[[]][[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[][[[[[[]][[[]]][][[[[]]][]'], ['[[][][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]]][[]]]][[[[[[]][[[[[]]][[[[[]]]'], ['[[[[[[[[[[[[[]]]]]]]]]]][[[[][[[[[[]]]]]]]'], ['[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]]][[[[[[[[]]]]'], ['[[]][[[][[]]]][][][][[][]][[[[]]]][][][][[][]]][[[][]][[]]]]]][[[][]]][[]]][[[]][[[]]]]]'], [']][[[[]]]][][][][[][]]][[]]'], ['[[[][]][[[[][[[[[]]]][[[[[[[[[]]]][][][][[][]]][[[][]][[][]]][[[[[]]][[[[]]]'], ['[[[][]][[[][][[[[[]]]][[[[[]]]'], ['[[[[[[[[[[[[[]]]]][[[[]]]]]]][[[[][[[[[[]]]][[[[[[][[[[[[]]]]][[]]][[][]][[[[[]]]][][][[]]][[[[[][[][]][[[[[]]]]]]'], ['[[[[[][[[[[[][[][[[[][]][[[[]]]][][][][[][[]][[]]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[[[[[]]]]][[[][]][[]]]][][[[]]]['], ['[[]]]][[[[[[][][[[[[[][[[[[]]]]'], ['[[[[[[[[[]]]][][][][[][]]][[[][]][[][]]][[[[[]]]'], ['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[]][[[]]]]'], ['[[]]][][[[[[[]][][][[]]][[[[]]][[[[[[[[[[[[]]]][]][[[[[[][[[[]]]][][][][[][]]][[[][]][][]]]][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[]'], ['[[][[][][[[[[][[[[[[]][][][[]]][[][]][[[[[]]]][][][[][][[[][[]]]][][][][[][]]][[[][]][[[]][[[]][][]][]]][[][]][[[]]]][[[[[]]][[]]]'], ['[[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[[]]]]][]]'], [']]]['], ['][[[[[[][[[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], ['[[]][][[]][]][]]][[[[[[]][[[]]][]'], ['[[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[[[][[[[[[]]]]]]]]]][[[[][[[[[[[]]]]]]][[[[[]]]][][][[]]'], ['[][[[[[[]][][][[]]][[][]][[[[[]]]][][[][[][]][[[[[[]]][[]][][[[][]][[[[[[[[][[[[[[]]]][][][][[[[][[[[[[]'], [']][[[[[[['], ['[[[[][]][[[[[][]]'], ['[[[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[][[]]]]]]]][][[]]]]]]]]]]]]]]]]][[[[[[]'], ['[[[[][[[[]]]][][][][[][]]][[[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]][[][]][[]]]]]][][][][[][[[[[]][[[]]][[]][][[]][][]]][[[[[[]][[[]]][][]]]][[[][]][[]]][[]]]][[[[[['], ['[[]][[][]][][[[][[]][[[[[]]]]['], ['[[[[]][[[]'], ['[[[][]][[[][][[[[[[[][]][[[[[]]]]]]][[[[[]]]'], ['][[]][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]'], ['[[[[]][[[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[][]][][]]][[[]][[[]]]]][[[][]][[]]][]]]]'], ['[[[[]][[[[]'], ['[[]][[[[][]][[][][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[]][[[[[]]][[[[[]]]'], ['[[[[[[[[[[[[[]]]]][[[]]]]][[[[[[[[[[[[[]]]]]]]]]]][[[[][[[[[[]]]]][]]]][[[[][[[[[[]]]][[[[[][[[[[]]]]'], ['[[[[[[[]][[[[[[[][[]]]]]]]][[[[]][[[]][[[[]]][]][][][[]]]]]]]]]]]]]'], ['[[[[[][]][[[[[][]][[[[[[[[[[[[]]]]]]]]]]]]][[[]]][][[[[[][[][[[]]]]][[[][]][[[[][[[[[]]]][[[[[]]]'], ['[[[[[[]]]][][][][[]][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]][[[[[]]]][[[[[]]][[[][[[[[[][[][[[]]]]]]][[]]]][[[[[]]]]'], ['[[]]][][[[[[[]][][][[]]][[][]][[[[][]]]][][][[]]][[[[[]'], ['[]][[[[[[[]]]'], ['[[[[]]]]]][[[][]][[]]][[]]]][[[[[['], ['[[[[]]]][[[[[[[[[[[[[]]]]]]]]]]][[[[][[[[[[]]]]]]][]]][[[[][]][[]]][[[]][[[]]]][[]]]'], ['[[]][[[]][[]]]['], ['[[[[]]]][][][][[][][[[[[[]][][[][[[[[[]][][][[]]][[][]]]]]][][][[[]][]]][[[][]][[]]][[]][][[[][]][[[[[][][][[[[][[[[[[[[[[[[[]][[[[[[[[[[[[[]]]]][][[]]]]]]][[[[][[[[[[]]]]]]]][][[]]]]][[][[]]]][][][][[][]]][[[][]][[]]]]]]]]]]]['], ['[[][[][][[[[[]'], ['[][[[[[[]][]][[][[[[[[]][][][[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]]][[]]][[][]][[[[[]]]][][][[[]]'], ['[[[[[[[]][[[[[[[][[]]]]]]]][]][[]]]]]]]]]]]]]'], ['[[[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[][[]]]]]]]][][[]]]]]]]]]]]]]]]]]][[[[[[]'], ['[[[[][]][[[[[[][]]'], ['[[[[]]]][[[[[[[[[[[[[]]]]]]]]]]][[[[][[[[[[]]]]]]][]]][[[[][]][[]]][[[]][[[[[[[]]]]]'], ['[[[[][]][[[[[[[[[[[[]]]]]]]]]]]]]'], ['[[[[[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]][][[[[[]]]]'], ['[[[[[[[[[[[[[]]]]][[[]]]]][[[[[[[[[[][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[]]][[[[[[[[[[[[[]][[]][[[]][][[[][[]][[[[[]]][[[[[]]]]]]][[[]][[]]]]]][][][][[][]]][[[][]][[]][[[[[[[[[]]]]]]]]]]][[[[][[[[[[]]]]][]]]][[[[][[[[[[]]]][[[[[][[[[[]]]]'], ['[[][]][[[[]]]'], ['[[]][[[[][]][[][][[[[[[][[[[]]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[]][[[[[]]][[[[[]]]'], ['[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[[['], ['[[[[[]][[[[]]]]'], ['[[][]][[[[[[[]]]][[[[[[][[[[[][[[[[[[[][[][[[]]]]][[[]]]]]]]'], ['[[[[[][[[[[[][[[][[[][]]][][[[]]]['], ['[[[[[][]][[[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]][[[[][]][[[[[[[[[[[[]]]]]]]]]]]]][[[]]][][[[[[][[][[[]]]]][[[][]][[[[][[[[[]]]][[[[[]]]'], ['[[[[[]][[[[]]][[]][[][][[[[[[[[]]][][[[[[[]][][][[]]][[][]][[[[][]]]][][][[]]][[[[[][[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]]]'], ['[[[[[[[[[[]]]]][[[]]]]]]][[[[][[]]]]]]]][][[]]]]]]]]]]]]]'], ['[[]][[[[]][]]'], ['[[[[[[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]][][[[[[]]]]'], ['[[[[[[[[]]]][][][][[][]]][[[][]][[]]]]][[[[[[]]]]'], ['[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[][]][[]]][[[[]]]][][][][[][]]][[[][]][[]]]]][[[]][[[]]]][[]]]'], ['[[[[]]]][][][][[][]]][[[][]][[]]][[]][][[[[[[[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]][][[[[[]]]]]]][[[[][[[[[[]]]]]]]][][[]]]]][[][[]]]][][][][[][]]][[[][]][[]]]]]]]]]]]['], ['[[][][][[[[]'], ['][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]]][[[[[]]]][[[['], ['[[[[[[[[[]][[[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[]]]][[]]][[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[][[]]]]]]]][][[]]]]]]]]]]]]]]]]]][[[[[[]'], ['[[][]][[[[[][[[[[[]]]][[[[][[]]'], ['[[[[][[[[]]]][][][][[][]]][[[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]][[][]][[]]]]]][][][][[][[[[[]][[[]]][[]][][[]][][]]][[[[[[]][[[]]][][]]]][[[][]][[]]][[]]]][[[[[[['], [']][[[[]]][]]['], [']][[[[[[]]]][[[[[]'], ['[[][[][][[[[[]][[[[[[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]][][[[[[]]]]]'], ['[[[[]]]][][][][[][]]][[[][]]]][[[[[[[[[][[[[[]]]]]][[[[[['], ['[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[]]]]]]]][][[]]]]]]]]]]]]][][]]]'], ['[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][[[[[]]]][[[[[[[[[[[[[]]]]]]]]]]][[[[][[[[[[]]]]]]][]]][[[[][]][[]]][[[]][[[[[[[]]]]]]][[[[[]]]][][][[]]][[[[[][][]]'], ['[[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][]][][[]]][[[[[]'], ['[[[[]]]][][][][[][]]][[[][]][[]]][[]][][[[[[[[[[[][[][[[[][[]][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]][[[[[]]]][[]]][[][]][[[[[]]]][][][[]][][[[[[]]]]]]][[[[][[[[[[]]]]]]]][][[]]]]][[][[]]]][][][][[][]]][[[][]][[]]]]]]]]]]]['], [']][][[][]][[[[[]]][['], ['[][[[[[[]]]][[]]]][][[[[[][]][[[[[[[[[[[[]]]]]]]]]]]]]][][[[][[[]][[[]]][]'], ['[[[[][[[[]]]][][][][[][]]][[[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]][[][]][[]]]]]][][[[]]]][[[[[]][][[][[[[[]][[[]]][[]][][[]][][]]][[[[[[]][[[]]][][]]]][[[][]][[]]][[]]]][[[[[[['], ['[[[[[][]][[[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]][[[[][]][[[[[[[[[[[[]]]]]]]]]]]]][[[[[[[[[[[[[[[]]]]][[[[]]]]]]][[[[][[[[[[]]]][[[[[][[[[[][[][]][[[[[]]]]]][]]][][[[[[][[][[[]]]]][[[][]][[[[][[[[[]]]][[[[[]]]'], ['[[[][]][[[[[[[[[[]]]][][][[][[][]]][[[][]][[]]]]][[[[[]]]][[[][]]'], ['[[[[[[[]][[[[[[[][[]]]]]]]][]][[]][[[][[[[]]]][][][][[][]]][[[][]][[]]]][]][[[[]]]]]]]]]]]]]'], ['[]][]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[[]]]]]]]'], ['[[]][[[][[][][[[[][[[[[[]]]][[[][]]'], ['[][[[[[[[]]]][[[][[[[[[][]]]][[]]][[][]][[[[[]]][]][[[]]]]][[]]'], ['[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[][[][[]]]][[[[[][][[]]][[[[[[[]]]]'], ['[[[[[[[[[]]]][][][][[][]]][[[][[[][]][[[[][[[[[]]]][[[[[]][[[]]]][[[[]][][]][[][]]][[[[[]]]'], ['[[[[]]]][][][][[][]['], ['[[[]'], ['][[[[[[][[[][[][][[[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][]][[[[[]]]][][][[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], ['[[[[]]][][[[][]][[[[][[[[[]]]][[[[[]]]]'], ['[[[[[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[]]]][][][[]][][[[[[]]]]'], ['[[[[]]]][][[[[[[[[[[[[[[]]]]][[[[]]]]]]][[[[[][][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]]][[]]]][[[[[[]][[[[[]]][[[[[]]][][[[[[[]]]][[[[[][[[[[][[][]][[[[[]]]]]]][[]]][[[]][[[]]]][[]]]'], ['[[[[]]]][[[[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[[[][[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[[[]]]][][][[]][[[[][[][[[[[[]]]]'], ['[[[[]][[[[]][]]'], ['[[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[]][[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]]]][][][[]]'], ['[[[[]]]][][][][[][]]][[[][]][[]]][[]][][[[[[[[[[[][[][[[[][[]][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]][[[[[]]]][[]]][[][]][[[[[]]]][][][[]][][[[[[]]]]]]][[[[][[[[[[]]]]]]]][][[]]]]][[][[]]]][][][][[][]]][[[][]][[]]]]]]][[[[]][[[]]][]]]]]['], ['[[[[[[[[[[[[[]]]]][[]][[[][[]]]][][][][[][]]][[[][]]][[]]][[[]][[[]]]]]]]]]]][[[[][[[[[[]]]]]]]'], ['[[[[][[[[]]]][][[][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[[['], ['[[[[]]][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[['], ['[[[[[][[[[[[][[][[[][]][[[[]]]][][][][[]][[[][][]]]]][[[]][[[]]]][][[[][]][[[[[][][][[[[][[[[[[]][[[][]][[]]]][][[[]]]['], ['[[][]][[[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[][[]]]][[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]]]]]]][][[]]]]]]]]]]]]][[[]]]'], ['[[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]][]]][[[[[]'], ['[[]]][[[[[[[[[[[[[[[[]]]][][]]][][[][]]][[[][]][[]]]]]][]'], ['[][[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[]][[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]]]][][][[]]'], ['[[[[[][[[[[[][[][[[[][]][[[[]]]][][][][[][[]][[]]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[[[[[]]]]][[[[[[[][[[[[[][[][[[][]][[[[]]]][][][][[][[]][[]]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[]]]]][[[][]][[]]]][][[[]]][[][]][[]]]][][[[]]]['], ['[[[]][[[[[[]]]][[[[[][]][[[]][[[[]]][]][]'], ['[[[[]][[[[]][][[[][]][[[[[[[[[[]]]][][][[][[][]]][[[][]][[]]]]][[[[[]]]][[[][]]]'], ['[[[][]][[[][][[[[[[[][]][[[][[]]]][][][][[][]]][[[][]][[]]]]]]'], ['[][[[[[[]]]]][[]]][[][]][[[][[]]]][][][[]]'], ['[[[[[[[[[[[[[]]]]]]]]]]][[[[][[[[[[]]]]]'], ['[[[[][[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[[[[['], ['[[[[[][]][[[[[][]][[[[[[[[[[[[]]]]]]]]]]]]][[[]]][][[[][]][[[[]][[[[[]]]][[[[[]]]'], ['[[[[[]][[[[]]][[]][[][][[[[[[[[]]][][[[[[[]][][][][[[[[[]][]][[][[[[[[]][][][[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]]][[]]][[][]][[[[[]]]][][][[[]][[]]][[][]][[[[][]]]][][][[]]][[[[[][[[[[][[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]]]'], ['[[[[[]][[[]]]][][[]]]][[[[[][][[]]]'], ['[][[[[[[[]]]][[[][[[[[[][]]]][[]]][[][[]][[[]]][[[[[]]]['], ['[[[[[]]][]'], ['[[][[][][[[[[]][[[[[[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[[[][]]]][[]]][[][][[][]][[[[[[]]]][[[[[]]]][][][[]][][[[[[]]]]]'], ['[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[][]][[]]][[[[]]]][][][][[][]]][[[][]][[[]]]]][[[]][[[]]]][[]]]'], ['[[][]][[[[[[[]]]][[[[[[][[[[[[][[[[[[[[][[][[[]]]]][[[]]]]]]]'], ['[[[[[][[[[[[][[][[[][]]][[[[]]]][][][][[][]][[]]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[]]]]][[[][]][[]]]][][[[]]]['], ['[][[[[[[]][][][[]]][[][]][[[[[]]]][][][[][]][[[][[]]]][][][][[][]]][[[][]][[[]][[[]][][]][]]][[][]][[[]]]][[[[[]]][[]]'], ['[[[]][]'], ['[][[]]][]'], ['[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[]]]][[]]]'], ['[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][[[[[]]]][[[[[[[[[[[[[]]]]]]]]]]][[[[][[[[[[]]]]]]][]]][[[[][]][[]]][[[]][[[[[[[]]]]]]][[[[[]]]][][[[[[[[[[[[[[[]]]]][[[[]]]]]]][[[[][[[[[[]]]][[[[[][[[[[][[][]][[[[[]]]]]]][[]]][[[[[][][]]'], ['[[[][]][]'], ['[[][[]][[[[[[[]]]][[[[[[[][[[[[][[[[[]]]]]]]'], ['[[[[[[[[[[[[[]]]]][[[[]]]]][]][[[[][[[[[]]]][[[[[][[[[[][[][]][[[[[]]]]'], ['[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][[[[[]]]][[[[[[[[[[[[[]]]]]]]]]]][[[[][[[[[[]]]]]]][]]][[[[][]][[]]][[[]][[[[[[[]]]]]]][[[[[]]]][][[[[[[[[[[[[[[]]]]][[[[]]]]]]][[[[][[[[[[]][][[][[[[[[]][][][[]]][[][]]]]]][][][[[]]][[[[[[]]]][[[[[][[[[[][[][]][[[[[]]]]]]][[]]][[[[[][][]]'], ['[[[[[[[[[[[[[]][]]]]]]]]][[[[][[[[[[]]]]]'], ['[[[[]][[[[][]][[[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[][[]]]][[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]]]]]]][][[]]]]]]]]]]]]][[[]]][]]'], ['[[[][]][[[][[]]]][[[][[[[[[][]]]]]]][[[[[]]'], ['[[[][]][[[[[[[[[]]]][][][][[][]]][[[][]][[]]]]][[[[[[]]]][[[]]'], ['[[[[[[[[]]]][][][][[][]]][[[][]][[][]]][[]'], [']][[[]][]][[[[[[]][][[]][][]][][[[[[[][[[[[[[]]]['], ['[[]][][[]][]][]]][[[[[[]]]'], ['[[[[][[[[[[]]'], ['[[[[]]]]][][][][[][]]][[[][]][[]]]'], ['[[[[[][[][[[[][[[[[[]]]][[]]][[[[[[][[[[[[]]][][[[[]][[[]]]][]][[[[][[[[[[]]]][[]]][[][]][[[[[[[][[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[[[]]]][][][[]][][]][[[[[[[][[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[[[]]]][][][[]]'], ['[[[[][[[[]]]][][]][][[][]]][[[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]][[][]][[]]]]]][][[[]]]][[[[[]][][[][[[[[]][[[]]][[]][][[]][][]]][[[[[[]][[[]]][][]]]][[[][]][[]]][[]]]][[[[[[['], ['[[[[[][[[[[[][[][[[][]][[[[]]]][][][][[][]][[]]][[[][[]]]][][][][[][]]][[[][]][[[[[[][[[[]]]][][]][][[][]]][[[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]][[][]][[]]]]]][][[[]]]][[[[[]][][[][[[[[]][[[[]]][[]][][[]][][]]][[[[[[]][[[]]][][]]]][[[][]][[]]][[]]]][[[[[[[]]][[[]][[[]]]]][[[][]][[]]]][][[[]]]['], ['[[[][]]][[[[[[]][[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[][[[[[[]][[[]]][][[[[]]][][[[[][[[[[]]]][[[[[]][[[]]]][[[[]]]'], ['[][[[[[[]]][][][[[]]'], ['[[[[[][[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]]]'], ['[[][[][][[[[[]][][[[[[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[[[][]]]][[]]][[][][[][]][[[[[[]]]][[[[[]]]][][][[]][][[[[[]]]]]'], ['[[[[]][]'], ['][[][[[[[[]][][][[[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]][][[[][]][[[[[][][][[[[][[[[[[][['], ['][[]]]'], ['[[[][]][[[][[]]]][[[][[[[[[][]]]]]]][[[[[[[]]]][][][][[][][[[]]'], ['[[[[][[[[]]]][][][][[][]]][[[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]][[[[[[]][[[]]][]][]][[]]]]]][][][][[][[[[[]][[[]]][[]][][[]][][]]][[[[[[]][[[]]][][]]]][[[][]][[]]][[]]]][[[[[['], ['[[[[[][[][[]][[[[]][[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][[][][[]]][[[[[][][]][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]]'], ['[][[[[[][]][[[[[][]]]]]'], ['[[[[]]]][][][][[][]]][[[][]][[]]][[]][][[[][]][[[[[][][][[[[][[[[[[[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[]]]]]]]][][[]]]]][[][[]]]][][][][[][]]][[[][]][[]]]]]][]]]]]['], ['[[]][[[[]][[]]][][[[[[[]][][][[]]][[[[[[]][[[[]]][][[[[][]][[[[][[[[[]]]][[[[[]]]][[][]][[[[[]]]][][][[]]][[[[[][][]]'], ['[[[[[][[[[[[[][]][[[[[][]][[[[[[[[[[[[]]]]]]]]]]]]][[[]]][][[[[[][[][[[]]]]][[[][]][[[[][[[[[]]]][[[[[]]][[[[]'], ['[[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[[[[]]][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[]]]]'], ['[[[[][[]][][[]][]][]]][[[[[[]][[[]]][][]][[[[[[][]]'], ['[[][]][[[[[[[[[[][[[[[[][[][[[][]][[[[]]]][][][][[][]][[]]][[[][[]]]][][][][[][]]][[[][]][[[[[[][[[[]]]][][]][][[][]]][[[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]][[][]][[]]]]]][][[[]]]][[[[[]][][[][[[[[]][[[[]]][[]][][[]][][]]][[[[[[]][[[]]][][]]]][[[][]][[]]][[]]]][[[[[[[]]][[[]][[[]]]]][[[][]][[]]]][][[[]]][]]][[[][]][[[[][[[[[]]]][[[[[]]]'], ['[[][][[[[]]][[[[[[[[[[[[[]][[]][[[]][][[[][[]][[]][[[[[]]]'], ['[][[[[[[]]]][[]]]][][[[[[][]][[[[[[[[[[[[]]]]]]]]]]]]]][][[[][[[]][[[[]][[[[[[[]]]]]][]'], ['[[[[][[[[[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[[[[['], ['[[]][][[]][]][]]][[][]][[[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[][[]]]]]]]][][[]]]]]]]]]]]]][[[]]][[[[[]][[[]]][]'], ['[[[][]][[[[[[[[[[]]]][][][][[][]]][[[][]][[]]]]][[[[[[]]]][[[]]'], ['[[]][]][[]][]][]]][[[[[[]]]'], ['[][[[[[[]]][][][[]]][[][]][[[[[]]]][][][[[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[]]]][[]]]][]][[[[[]]][[]]'], ['[[[[]][[[[[[]]]][][][][[][]][[[][[]]]][][][]][[][]]][[[][]][][]]][[[]][[[]]]]][[[][]][[]]][]]]]'], ['[][[[[[[]]]][[]][[][][[]]'], ['[[[[]]]][[[[[[[[[[[[[]]][][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]][]][[]]][[[]][[[]]]][[]]]'], ['[[][]][[[[[[[]]]][[[[[[][[[[[[][[[[[[[[][[][[]]][[[]]]]]]]'], ['[[]][[[[]][[]]]][]][[[[[[]][][][[]]][[][][[[[[]]]][][][[]]]][[[[[][][]]'], ['[[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[[[[[[][[[[[[][[][[[][]]][[[[]]]][][][][[][]][[]]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[]]]]][[[][]][[]]]][][[[]]][]]]'], ['[[[[[[[[]]]][][][][[][]]][[[][]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]]'], ['[[[[]]]][][][][[][]]][[[][]]]][[[[[[[]][[[]]]][][[]]]][[[[[][][[]]][[[[[[][[[[[]]]]]][[[[[['], ['[[[[]]]][][][][[][]]][[[][]]]][[[[[[[]][[[]]]][][[]]]][[[[[][][[]]][[[[[[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[]]]]][]][[][[[[[]]]]]][[[[[['], ['[[[][]][[[[][[[[[]]]][[[[[[]][[[]]]][[[[]]]'], ['][[[[[[]]][[[][[[]][[[[]]]][][][][[][]]][[[][]]]][[[[[[[[[][[[[[]]]]]][[[[[[][]'], ['[[[[]]]][[[[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[[[][[[[[[]]]]]]]]]][[[[][[[[[[]]]]]][][[[[[]]]][][][[]][[[[][[][[[[[[]]]]'], ['[[[[[][]][[[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]][[[[][]][[[[[[[[[[[[]]]]]]]]]]]]][[[[[[[[[[[[[[[]]]]][[[[]]]]]]][[[[][[[[]]]][[[[[]]]'], ['][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], ['[[][]][[[[[[[]]]][[[[[[[]]]][[[[[[][][[[[[][[[[[]]]][][[[[[[][[[[[[[[][[][[]]][[[][]]]]]]'], [']][[[[]][][[]][][]][[[[]]][[[][[[]]][]['], ['[[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[]][[[[][]][[][[]]'], ['[[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[]][[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[[[[][]][[[[[][]]]]][][[]]]][][][[]][][[][]][[[[[]]][[]]'], ['[[[]]'], ['[[]][[]][[[[[[[][[[][[]][[[[[]]]][[[][]]'], ['[[[][[]]]][][][][[][]]][[[][]][[[]][[[]][][]][]]][[[[]]]]][][][][[][]]][[[][]][[]]]][[][]][[[]]]]'], ['[[[[][[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[][[]]]]]]]][][[]]]]]]]]]]]]]]]]]][[[[[[]'], ['[[[]][[[[[[]]]][[[[[][]][[[]]][[[[]]][]][]'], ['[[[[]]]][[[[[[][[][[[[[[][]]]'], ['[[[[]]]][[[[[[[[[[[[[]]][][[[[[[]]]][[]]][[][]][[[[[]]][][][][[]][]][[]]][[[]][[[]]]][[]]]'], ['[[][[][][[[[[][[[[[[]][][][[]]][[][]][[[[[]]]][][][[][][[[][[]]]][][][][[][]]][[[]][]][[[]][[[]][][]][]]][[][]][[[]]]][[[[[]]][[]]]'], ['[]]][][[][]][[[[[]]][[][[[[[[[]]]'], ['[[]][]][[]][]]]'], ['[[[[]]]]]][[[][]][[]]][[]]][[[[[['], ['[[[[['], ['[[]][[][][[[[[]]]'], ['[[[[]]][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][[][[[[[[]]][][][[]]][[][]][[[[[]]]][][][[[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[]]]][[]]]][]][[[[[]]][[]]][][][[][]]][[[][]][[]]][[]]]][[[[[['], ['[[[[[[[[[[[[[]]]]][[[[]]]]]]][[[[][[[[[[]]]][[[[[[][[[[[[]]]]]][[]]][[][]][[[[[]]]][][][[]]][[[[[][[][]][[[[[]]]]]]'], ['[[[[[[[[[[[[[]]]]][[[[]]]]]]][[[[][[[[[[]]]][[[[[[][[[[[[]]]]]][[]]][[][]][[[[[]]]][][][[]]][[[[[][[][[[[[]]]]]]'], ['][[[][[]]]][][][][[][]]][[[][]]][[]]][[[][[[]]]]'], ['[[[[[[[]][[[[[[[][[]]]]]][]][]][[]][[[][[[[]]]][][][][[][]]][[[][]][[]]]][]][[[[]]]]]]]]]]]]]'], ['[[[[]]]][[[[[[[[[[[[[]]]]]]]]]]][]][]]][[[[][]][[]]][[[]][[[[[[[]]]]]'], ['[][[[[[[[]]][][[[][[[[[[][]]]][[]]][[[][[[[[[]][][][[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]][][[[][]][[[[[][][][[[[][[[[[[]][]][[[[[]][]]][[[]]]]][[]]'], ['[[[[[[[[]]]][][[[[[][[[[[[[][]][[[[[][]][[[[[[[[[[[[]]]]]]]]]]]]][[[]]][][[[[[][[][[[]]]]][[[][]][[[[][[[[[]]]][[[[[]]][[[[][][][[][]]][[[][]][[]]]][[[[[]]]'], ['[][]]][]'], ['[[[[[][[[[[[][[][[[[][]][[[[]]]][][][][[][[]][[]]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[[[[[]]]]][[[[[[[][[[[[[][[][[[][]][[[[]]]][][][][[][[]][[]]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[]]]]][[[][]][[]]]][[[[[]]]][[[[[[[[[[[[[]]][][[[[[[]]]][[]]][[][]][[[[[[]]]][][][[]][]][[]]][[[]][[[]]]][[]]][[[]]][[][]][[]]]][][[[]]]['], ['][[][[][]]][[[][]]][[]]][[[][[[]]]]'], ['[[[]]]][[[[[['], ['[[[[[[[[[[[[[]]]]][[[[]]]]]]][[[[][[[[[[]]]]][[[[[[][[[[[[]]]]][[]]][[][]][[[[[]]]][][][[]]][[[[[][[][]][[[[[]]]]]]'], ['[][[[[]]][[]]][[][]][[[[[]]]][][][[]]'], ['][[][[[][]]'], ['[[[[[]][[][[[]]]]'], ['[[[[[]][[[]]]][][[]]]]]]'], ['[][[[[[[[]]]][[]]][[][]][[[[[]]]][][][[]]'], ['[[[[]]]][][][][[][]]][[[][]][[]]][[]]][][[[[[[[[[[][[][[[[][[]][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]][[[[[]]]][[]]][[][]][[[[[]]]][][][[]][][[[[[]]]]]]][[[[][[[[[[]]]]]]]][][[]]]]][[][[]]]][][][][[][]]][[[][]][[]]]]]]][[[[]][[[]]][]]]]]['], ['[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[][]][[]]][[[[]]]][][]][][[][]]][[[][]][[]]]]][[[]][[[]]]][[]]]'], ['[[[[[][]][[[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]][[[[][]][[[[[[[[[[[[]]]]]]]]]]]]][[[[[[[[[[[[[[[]]]]][[[[]]]]]]][[[[][[[[[]]]][[[[[]]]'], ['[[[[]][][[[[][[[[]]]][][][][[][]]][[[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]][[[[[[]][[[]]][]][]][[]]]]][[[][]]][[[[[[]][[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[][[[[[[]][[[]]][][[[[]]][][[[[][[[[[]]]][[[[[]][[[]]]][[[[]]]][][][][[][[[[[]][[[]]][[]][][[]][][]]][[[[[[]][[[]]][][]]]][[[][]][[]]][[]]]][[[[[['], ['[[[[]]]][][][][[][]]][[[][]][[]]][[]][][[[[[[[[[[][[][[[[][[]][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]][[[[[]]]][[]]][[][]][[[[[]]]][][][[]][][[[[[]]]]][[[[[[[[[]]]][][][][[][]]][[[][]][[][]]][[[[[]]]]][[][[]]]][][][][[][]]][[[][]][[]]]]]]]]]]]['], ['[[[[[][[[[[[[]'], ['[[[[[][[][[[[][[[[[[]]]][[]]][[][[[[][[[[[[]]][][[[[]][[[]]][]][[[[][[[[[[]]]][[]]][[][]][[[[[[[][[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[[[]]]][][][[]][][]][[[[[[[][[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[[[]]]][][][[]]'], ['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], [']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[[[]]['], ['[[[]][[[[[[][[[][[][][[[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][]][[[[[]]]][][][[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[[][]]][[[][]][[]]][[]]]][[[[[[[]][[[[][[[[[]]]][[[[[[]][[[]]]][[[[]]]'], [']]['], ['[[[[[[[][[[[[[][[][[[][]][[[[]]]][][][][[][]][[]]][[[][[]]]][][][][[][]]][[[][]][[[[[[][[[[]]]][][]][][[][]]][[[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]][[][]][[]]]]]][][[[]]]][[[[[]][][[][[[[[]][[[[]]][[]][][[]][][]]][[[[[[]][[[]]][][]]]][[[][]][[]]][[]]]][[[[[[[]]][[[]][[[]]]]][[[][]][[]]]][][[[]]][]]]][[[][[[[[[]'], ['[[[][][][[[][][[[[[[[][]][[[[[]]]]]]][[[[[]]]'], ['[[[[[[][[][[[]]]]'], ['[][[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[]][[[[[][[][[[[][[[[[[]]]]][[[[]]]][][]][][[][]][[[][[]]]][][][][[][]]][[[[[][]][[]]][[[]][[[]]]][[]]][[][]][[[[[]]][[[[[]]]][[[[]]][][][[]]'], ['[[[[]][[[[[[]]]][][][][[][]]]]'], ['[][[[[[[]]][][[][[[]]'], [']][[[[[[][][[[]]][]'], ['][[[[[[][[[[]]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][]][][[[][]]][[[][]][[]]][[]]][][[[[[[]][][][[]]][[][]][[[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[]]]][][][[]]][[[[[][[]]]][[[[[['], ['[[][]][[[[[[[]]]][[[[[[[]]]][[[[[[][][[[[[][[[[[]]]][][[[[[[][[[[[[[[]][[][[]]][[[][]]]]]]'], ['][[][[[[]][[[[]]][][[[[][]][[[[][[[[[]]]]][[[[[]]]'], ['[[[[]]]][][][][[][]]][[[][]][[]]][[]][][[[[[[[[[[][[][[[[][[]][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]][[[[[]]]][[]]][[][]][[[[[]]]][][][[]][][[[[[]]]]]]][[[[][[[[[[]]]]]]]][][[]]]]][[][[[][[[[[[]][][][[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]][][[[][]][[[[[][][][[[[][[[[[[]]]]][][]][][[][]]][[[][]][[]]]]]]][[[[]][[[]]][]]]]]['], [']][[[][]][[[][[[]][[[[[]]]][][][][[][]]][[[][]][[]]][[][][[[[][[[[[[]]]][[[[]]]][[[[][[]]['], ['[[][[]]]][[[[[][[]]]'], ['[[[]][[[[]][[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][][][[]]][[[[[][][]]'], ['[[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[[[][[[[[[]]]]]]]]]][[[[][[[[[[[[]]]]]]][[[[[]]]][][][[]]'], ['[[]]][][][[[[[]][][][[]]][[][]][[[[[]]]][][][[]]][[[[[]'], ['[[[[[[[[[[[[[]]]]][[[[[][[[[[[][[[]]]]][[[[[[[[[[[[[]]]]]]]]]]][[[[][[[[[[]]]]][]]]][[[[][[[[[[]]]][[[[[][[[[[]]]]'], ['[[[[[[]]][[[[]]][]][]'], ['[[]][[[][[]]]][][][][[][]]][[[][]]][[][[[[[[]]][[[][[[]]][]]]][[[]][[[]]]]]'], ['[[[[[[][]][[[][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]][[[[][]][[[[[[[[[[[[]]]]]]]]]]]]][[[[[[[[[[[[[[[]]]]][[[[]]]]]]][[[[][[[[]]]][[[[[]]][[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[]]]][[[[[][[[[[]]]]'], ['[[[[]]]][][][][[][]]][[[][]][[]]][[]][][[[[[[[[[[][[][[[[][[]][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]][[[[[]]]][[]]][[][]][[[[[]]]][][][[]][][[[[[]]]]][[[[[][[[[[[]][[[[]]][][[[[][]][[[[][[[[[]]]][[[[[]]][[[[]]]][][][][[][]]][[[][]][[][]]][[[[[]]]]][[][[]]]][][][][[][]]][[[][]][[]]]]]]]]]]]['], ['][][[][]][[[[[]][[][[]][[[[[[]]][['], ['[][[[[[][]][[[[[][]]]'], ['[[[][[]]]][][][][[][]]][[[][[[][]][[[[[[[]]]][[[[[[[]]]][[[[[[][][[[[[][[[[[]]]][][[[[[[][[[[[[[[][[][[]]][[[][]]]]]]]][[[]][[[]][][]][]]][[[[]]]]][][][][[][]]][[[][]][[]]]][[][]][[[]]]]'], ['[[[[[[[[[[]]]]][[[]]]]]]][[[[][[]]]]]]]][][[]]]]]]]]]]]]][[]]][[[[[[[[[[[[]]]'], ['[[][[][][[[[[][[[[]]]][][[[[[[[[[[[[[[]]]]][[[[]]]]]]][[[[[][][[[[[[][[[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]]][][][][[][]]][[[][]][[]]]][[]]]][[[[[[]][[[[[]]][[[[[]]][][[[[[[]]]][[[[[][[[[[][[][]][[[[[]]]]]]][[]]][[[]][[[]]]][[]]]]]'], ['[[[[]]]]]][[[][]][[]]]][[]]][[[[[['], ['[[[][[[[[]]]][[[[[[[[[[[[[]]]]]]]]]]][[[[][[[[[[]]]]]]][]]][[[[][]][[]]][[[]][[[]]]][[]]]]][]'], ['[[[[]]]][][][][[][]]][[[][[[['], ['[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][[[[[]]]][[[[[[[[[[[[[]]]]]]]]]]][[[[]][[[[[[]]]]]]][]]][[[[][]][[]]][[[]][[[[[[[]]]]]]][[[[[]]]][][[[[[[[[[[[[[[]]]]][[[[]]]]]]][[[[][[[[[[]]]][[[[[][[[[[][[][]][[[[[]]]]]]][[]]][[[[[][][]]'], ['[[[[[[[[]]]][][][][[][]]][[[][]][[]]]]][[[[]]]'], ['[[[[]][[[[[[]]]][][][][[][]][[[][[]]]][][][]][[][]]][][[][]][][]]][[[]][[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][][[][[[[[]][[[]]][[]][][[]][][]]][[[[[[]][[[]]][][]]]][[[][]][[]]][[]]]][[[[[[[[]]]]][[[][]][[]]][]]]]'], ['[[]][[[[][[]]]][][][][[][]]][[[][]]][[][[[[[[]]][[[][[[]]][]]]][[[]][[[]]]]]'], ['][[[][[]]]][][][][[][]]][[[][]]][[]]]][[[]][[[]]]]'], ['[[]][[[[][[[[]]]][][][][[][]]][[[]][[[[[[]]][[[][[[]][[[[]]]][][][][[][]]][[[][]]]][[[[[[[[[][[[[[]]]]]][[[[[[][][]][[]]]]]][][][][[][]]][[[][]][[]]][[]]]][[[[[[[[[[][[[[[[][[][[[][]]][][[[]]][[]]]'], ['[[[[]]]][[[[[[][[][[[[[[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[]]]]]]]][][[]]]]]]]]]]]]][]]]]'], ['[[[[][[[[]][][[[[[[[]]]][[[][[[[[[][]]]][[]]][[][]][[[[[]]]]][[[]]]]][[]]]][][[][][[][]]][[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[[]['], ['[[[[[[[[]]]][][][][[][]]][[[][]][[][]]][[[[[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][][][[][]][][[[[]]][[]]'], ['[[][[]]]][][][][[][]]][[[][]]'], ['[[[][]][[[[][[]]]][][][][[][]]][[[][]][[[]][[[]][][]][]]][[[[]]]]][][][][[][]]][[[][]][[]]]][[][]][[[]]]][[[[][]]'], ['[[[[]]]][[[[[[[[[[[[[]]][][[[[[[]]]][[]]][[][]][[[[[]]][][][][[]][]][]][[[]]]][[]]]'], ['[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[]]]]]]]][][[]]]]]]]]]]]]][[[[]]]]]]]]'], ['[[[[[[][]]'], ['[[[[][[[[]]]]][][][][[][]]][[[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]][[][]][[]]]]]][][][][[][[[[[]][[[]]][[]][][[]][][]]][[[[[[]][[[]]][][]]]][[[[]]]][][][][[][]]][[[][]][[]]][[]][][[[[[[[[[[][[][[[[][[]][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]][[[[[]]]][[]]][[][]][[[[[]]]][][][[]][][[[[[]]]]][[[[[][[[[[[]][[[[]]][][[[[][]][[[[][[[[[]]]][[[[[]]][[[[]]]][][][][[][]]][[[][]][[][]]][[[[[]]]]][[][[]]]][][][][[][]]][[[][]][[]]]]]]]]]]][[[[][]][[]]][[]]]][[[[[['], [']]][[[[['], ['][]][[[['], ['[[[[[[[[]]]][][][][[][]]][[[][]][[]]][[]][][[[[[[[[[[][[][[[[][[]][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]][[[[[]]]][[]]][[][]][[[[[]]]][][][[]][][[[[[]]]]]]][[[[][[[[[[]]]]]]]][][[]]]]][[][[]]]][][][][[][]]][[[][]][[]]]]]]][[[[]][[[]]][]]]]][]]]][][][][[][][[[[[[]][][[][[[[[[]][][][[]]][[][]]]]]][][][[[]][]]][[[][]][[]]][[]][][[[][]][[[[[][][][[[[][[[[[[[[[[[[[]][[[[[[[[[[[[[]]]]][][[]]]]]]][[[[][[[[[[]]]]]]]][][[]]]]][[][[]]]][][][][[][]]][[[][]][[]]]]]]]]]]]['], ['[[[[]]]][][][][[][]]][[[][]][[]]][[]][][[[][]][[[[[][][][[[[][[[[[[[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][][[]]]]]][]]]]]['], ['[[[[[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[]]]][[]][][[]][]][]]][[[[[[]]][][][[]][][[[[[]]]]'], ['[[[[]]]][[[[[[[[[[[[[]]][][[[[[[]]]][[]]][[][]][[[[[]]][][][][[]][[]][]][[[]]]][[]]]'], ['[[[][]][[[[][[[[[]]]][[[[[[]][[[]]]][[[[]]][][[[[[[[]]]][[[][[[[[[][]]]][[]]][[][]][[[[[]]]]][[[]]]]][[]]'], ['[[]][][[]][]][]]]][[[[[[]]]'], ['[[[[[][[[[[[][[][[[][]]][][[[][]][[[[][[]]]][][][][[][]]][[[][]][[[]][[[]][][]][]]][[[[]]]]][][][][[][]]][[[][]][[]]]][[][]][[[]]]][[[[][]][[[]]]['], ['[[[[[]][[[]]]]][][[]]]]]]'], ['[][[[[[[[[[[][[[[[[[][]][[[[[][]][[[[[[[[[[[[]]]]]]]]]]]]][[[]]][][[[[[][[][[[]]]]][[[][]][[[[][[[[[]]]][[[[[]]][[[[][]]]][[]]]][[][][[]]'], ['[[][[[][][[[[[]]]'], ['[][[[[[[]][][][[]]][[][]][[[[[]]]][][][[][][[[][[]]]][][][][[][]]][[[][]][[[]][[[]][][[[[]][[[[[[]]]][][][][[][]][[[][[]]]][][][][[][]]][[[][]][][]]][[[]][[[]]]]][[[][]][[]]][]]]][]][]]][[][]][[[]]]][[[[[]]][[]]'], ['[[[][[['], ['[][[[[[[]][][[][[[[[[]][][][[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]]][[]]][[][[]][[[[[]]]][][][[[]]'], ['][[][[][][[[[[[[[[[[[[[[]]]]]]]][]][[[[][[[[[[]]]]]]][[[]]]'], ['][[[[]]]][][][][[][]]][[[][][[]]]]'], ['[[[[[[[[[[]][[[][]][[[[][[]]]][][][][[][]]][[[][]][[[]][[[]][][]][]]][[[[]]]]][][][][[][]]][[[][]][[]]]][[][]][[[]]]][[[[][]]]]][[[]]]]]]][[[[][[]]]]]]]][][[]]]]]]]]]]]]][[]]][[[[[[[[[[[[]]]'], ['[[]]][[[[[[[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[[[][[[[[[]]]]]]]]]][[[[][[[[[[[[]]]]]]][[[[[]]]][][][[]]][[]]]]]][]'], ['[[[[[][[[]]]]'], ['[[[[[][[][[[[][[[[[[]]]][[]]][[][[[[][[[[[[]]][][[[[]][[[]]][]][[[[][[[[[[]]]][[]]][[][]][[[[[[[][[[[[[]]]]]]]]]][[[[]][[[][[]]]][][][][[][]]][[[][]]][[]]]][[[]][[[]]]][[[[[[]]]]]]][[[[[]]]][][][[]][][]][[[[[[[][[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[[[]]]][][][[]]'], ['[[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[]][[[[[][[][[[[][[]][[[[]][][]][[[[[[]]]][[]]][[][]][[[[[]]]][][[[][]][[[[][[[[[]]]][[[[[]]][][[]]]][][][[]]'], ['[[[[][[[[]]]][][][][[][]]][[[][]][[]]]]]][][][]][][['], ['[][[[[[[[[[][[[[[[][[]][][][[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]][][[[][]][[[[[][][][[[[][[[[[[]'], ['[[[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[][[]]]]]]]][][[]]]]]][[[][][][[[][][[[[[[[][]][[[[[]]]]]]][[[[[]]]]]]]]]]]]]]][[[[[[]'], ['[[[[[]][[[][[[]]]]'], ['[[[[][[[[]]]][][][][[][]][][[[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]][[[[[[]][[[]]][]][]][[]]]]]][][][][[][[[[[]][[[]]][[]][][[]][][]]][[[[[[]][[[]]][][]]]][[[][]][[]]][[]]]][[[[[['], [']][][[][]][[[[[]]][[[]][[[[[[][]]]'], ['[[[[][[[[]]]][][[][][[][]]][[[[][]][[]]]]]][][][][[][]]][[[][]][[]][][[]]]][[[[[['], ['[[[[[[[[[[[]]]]]]'], ['[[[[[[[[[[[[[]]]][[]]][[[[[[[[[[[[]]]]]]]]][[[[][[[[[[]]]]]]]'], [']][[[[]][][[]][][]][[]['], ['[[[[[[[[[[[[[]]]]][[[[]]]]]]][[[[][[[[[[]]]][[[[[[][[[[[[]]]]]][[]]][[][[]][[[[[]]]][][][[]]][[[[[][[][[[[[]]]]]]'], ['[[[[]]]][[[[[[[[[[[[[]]]]]]]]]]][[[[][[[[[[]]]]]]][]]][[[[][]][[]]][[[[]]]'], ['[[[[]]]][][][][[]]['], ['[[]]]][[[[[[[][[[[[][[[[[[]]]]'], ['[[]][][[[]][]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[[[[]]]]]]]]][]][]]][[[[[[]]]'], ['[[][]][[[[[[[[[[][[[[[[][[][[[][]][[[[]]]][][][][[][]][[]]][[[][[]]]][][][][[][]]][[[][]][[[[[[][[[[]]]][][]][][[][]]][[[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[]]][[][]][[]]]]]][][[[]]]][[[[[]][][[][[[[[]][[[[]]][[]][][[]][][]]][[[[[[]][[[]]][][]]]][[[[][]][[]]][[]]]][[[[[[[]]][[[]][[[]]]]][[[][]][[]]]][][[[]]][]]][[[][]][[[[][[[[[]]]][[[[[]]]'], ['[[[[]]]][[[[[[[[[[[[[]]]]]]]]]]][[[[][[[[[[]]]]][[[[]][[[]]][]]][]]][[[[][]][[]]][[[]][[[[[[[]]]]]'], ['[][[[][[]]]][][][][[][]]][[[][]]][[]]][[[]][[[]]]]'], ['[[][]][[[[[[[[[]][[[[[[[[[[[[[]]]]][[[]]]]]]][[[[][[[[][[]]]]]]]][][[]]]]]]]][[[][]][[[[[][]]]]]]][[[]]]'], ['[[[[[[[[]][[[[[[[][[]]]]]]]][]][[]][[[][[[[]]]][][][][[][]]][[[][]][[]]]][]][[[[]'], ['[[[[[][[][[[[][[[[[[]]]][[]]][[][]][[[[[]]][[]][[][][[[[[[[[[[[[[[[]]]]]]]]]][[[[][[[[[[]]]]]]][[[]]]]'], ['[]['], ['[[][[][[[[]]]][][][][[][]]][[[][]][[]]][[]][][[[[[[[[[[][[][[[[][[]][[[][]][[[[[[]][][[]][][]][][[[[[[][[[[[[]]][[[[[]]]][[]]][[][]][[[[[]]]][][][[]][][[[[[]]]]]]][[[[][[[[[[]]]]]]]][][[]]]]][[][[[][[[[[[]][][][[]]][[][]][[[[[]]]][][][[][]][[[[[]]][[]][][[[][]][[[[[][][][[[[][[[[[[]]]]][][]][][[][]]][[[][]][[]]]]]]][[[[]][[[]]][]]]]][][[[[[[[]]]][[[[[[[][[[[[][[[[[]]]]]]]'], ['[[[[[[[[]]]][][][][[][]]][[[][]][[]]]][[[[[[[[[[][[[[[[][[][[[][]]][[[[]]]][][][][[][]][[]]][[[][[]]]][][][][[][]]][[[][]][[]]][[[]][[[]]]]][[[][]][[]]]]][][[[]]][]]]'], ['[[]]]][[[[[[[][[[[[][[[[[[]][][[]]]]'], ['][[[[[[][[[][[][][[[[]][[[[]][[]]]][[[[[[[[[]]]][][][][[][]]][[[][[]][[]]]]][[[[[]]]][[[[[[[[]]]][][][][[][]]][[[][]][[]]][[[[[][[][[]][[[[]][[]]][][[[[[[]][][][[]]][[][]][[[[[]]]][[][][[]]][[[[[][][]][[[[][[[[[[]]]][[]]][[][]][[[[[]]]][][][[]]][[[[[]]]][[[[[[]][][][[]]][[][]][[[[[]]]][][][[[]]][[[[[][][]]]][[[]]][[[]]]][][][][[][]]][[[][][[]]]][[[][[[[[[]][[]]]]][[[[][[[][][][][[[][]]][[[][]][[]]][[]]]][[[[[['], ['[[]][[[[]][[]]]][][[[[[[]][][][[]]][[][[[[[]]]][[[[[[[[[[[[[]]]]]]]]]]][[[[][[[[[[]]]]]]][]]][[[[][]][[]]][[[]][[[[[[[]]]]]]][[[[[]]]][][[[[[[[[[[[[[[]]]]][[[[]]]]]]][[[[][[[[[[]]]][[[[[][[[[[][[][]][[[[[]]]]]]]][[]]][[[[[][][]]'], [']][['], ['['], ['[['], ['[][][][][][][][][][][][][][][][][][][[[[[[[[[[[[[[[[[[[['], [']][]'], ['[]]['], ['[][[[][['], ['[[[]][[[]][][]][[[]]]][][][][[][]]][[[][]][[]]]'], ['[[[][]][][[][]]][[[][]][[]]]'], ['[[[]]]][[[[[[][[[[]][[[]]]]'], [']][[][]][[[[[]]][[['], [']][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]['], [']][[]][]][[[[[]]][[['], ['[[[[]][[[[[[]]]][][][][[][]]][[[][]][[]]][]]]]'], ['[[]]]][[[['], [']][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]]['], [']][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[['], ['[[][]][[[]]]'], ['[[[]]]][[[[[]'], [']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], ['[[]]][[[]][][]]'], ['[[]][[[[[]'], ['[[[[]]]][][][][[][][]][[[][]][[]]]'], [']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]]['], ['[[[[]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][]][]'], ['[[[]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]]'], ['[[]]]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[][]][[]]]'], ['[[[[]]][[]'], ['[[[[]]]][[[[[]'], ['[[]]]][[[[['], ['[][[[[[[]]]][[]]][][][][[]]'], ['[[[]][[[]][][]][[[]]]]][[][]][[[[[]]][[[][][][][[][]]][[[][]][[]]]'], ['[[[[[][]][[[[]]]]'], ['][[[]]]][[[[[[][[[[]][[[]]]]'], ['[[[]][]][[[[[]'], [']][[]][]][[[[[[]]][[['], ['[[[][]][][[][]]][[[][]][[]]][]'], ['[[][]][[[[]]]]][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]]['], ['[[][[[[]]]][[[[[[][[[[]][[[]]]]]]'], ['[[]][[[[[[]'], ['[[[[]]][[[]'], ['[[[[]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]][[[]]]][[[[[[][[[[]][[[]]]][]'], ['[[[[][[[][]][][[][]]][[[][]][[]]]]][[[]'], ['[[[][]][][[][]][][[[][]][[]]][]'], ['[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][]'], ['[[[[[[[]]][[[]]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]]'], ['][[[]]]][[[[[[][[[[]][[[[][]][][[][]]][[[][]][[]]][[[]]]]'], [']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][][[][]]][[[][]][[]]]]][['], ['[[[[]][[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][]][[[[[]]]'], ['[[[[]]]][[[]'], ['[[][[[[[[]]]][[]]]][][][[]][]][[[]][][]]'], ['[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][]'], ['[[[]][]][][[][]][][[[][]][[]]][]'], ['[[[[]][[]]][[[]][][]]][]'], ['[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]]'], ['[[[][]][][[][]]]][[][]][[[[[]][[[]][[[]][][[[[]]]][[[]]]][][][][[][]]][[[[][]][][[][]]][[[][]][[]]]]][[][[[][]][[]]][]'], ['[[[][]][][[][]]]][[][]][[[[[]][[[]][[[]][][[[[]]]][[[]]]][][][[[[][]][][[][]]][[[][]][[]]][[][]][[]]][]'], ['[[][]][[[]'], ['[[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[][][][][[][]]][[[][]][[]]]'], ['[[][]]]]'], [']][[]][]][[[[[[[]]][[['], ['[[[[]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]][[[]]]][[[[[[][[[[]][[[[]]]][[[[[[][[[[]][[[]]]][[]]]][]'], ['[[[]][]][][[][]][][[[]][]][[]]][]'], ['[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[]'], ['[[[]][[[]][][]][[[]]]][][][][][[][]]][[[][]][[]]]'], ['[[[]][[[]]]][[[[[[][[[[]][[[]]]]'], ['[[[[]][[[]]]]]]'], ['[[[][]][][[]][[[][]][[]]]'], ['[[[]][]][][[][]][][[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]]'], ['[[[[]]][[[[]'], ['[[[]][[[]][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[[[]]][][][[][]]][[[][]][[]]]'], [']][[][]][[[[[]]][[[]][[['], ['[[[[]]][[][]][[[[[]]][[[][[[]]]]'], ['[[[][]]][][[][]]][[[][]][[]]]'], ['[[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][]][]'], ['[[[[[[][]][][[][]]][[[][]][[]]]]]]][[[[[]'], ['[[[[]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]][[[]]]][[[[[[][[[[]][[[[]]]][[[[[[][[[[]][[[]]]][[[[[[]]][[[[]]]]][]'], ['[[[[]]][[][]][[[[[[[[[[[[]]][[[[]]]]][]'], ['[[[]][[[]][][]][[[]]]][][][][][[][]]][[[]][]][[]]]'], ['[[[[]]][[[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][]'], ['[[[]][[[]][][]][[[][[]]]][[[[[]][][[[[[[]]]][[]]]][][][[]]]]]'], ['[[]]]][[[[]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]][[[[]'], [']][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[['], ['[[[]]][[][]][][[[][]][[]]][[]'], ['[[]][[[]]]]]]'], ['[[[]][][][[[[[[]]]][[]]]][][][[]][]][[[]][][]]'], ['[[[[[[[]]][[[]]][[[]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]'], ['[[[]][[[]]][][]][[[]]]]][[][]][[[[[]]][[[][][][][[][]]][[[][]][[]]]'], ['[[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][]'], ['[[[]][[[]][][]][[[][[]]]][[[[[]][][[]]]][][][[]]]]]'], ['[[[]][[[]][][]][[[]]]][]][][][][[][]]][[[]][]][[]]]'], ['[[[[]]][[]]][[][]][[[[[]]][[[]][[[[]][[[[[[[[[[[[]]][[[[]]]]][]'], ['[[[[]]]][][][][[][][]][[[][]][[]]][[[[]]][[]]][[][]][[[[[]]][[[]][[[[]][[[[[[[[[[[[]]][[[[]]]]][]'], ['[[[]]]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][[]]]]]'], ['[[[][]][][[][]]]][[][]][[[[[]][[[]][[[]][][[[[]]]][[[]]]][]['], [']][[]][]][[[[[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[[]]]][][][][[][][]][[[][]][[]]][[]]][[['], ['[[]]]][[[[[[[]][[[]][][]][[[]]]][]][][][][[][]]][[[]][]][[]]]['], ['[[[]][]][][[][]][][[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][[][][[][]]][[[][]]][[]]]'], ['][[[]][[[]][][]][[[][[]]]][[[[[]][][[]]]][][][[]]]]]'], [']][[][]][[[[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], ['[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][[]][][]]'], ['[[[]][[[]][][]][[[][[[][][][][[][]]][[[][]][[]]]'], ['[[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][][]][[[[[[]]]'], ['[[[[]][[[[[[[[[[[[[]]]]]]]]]]]]]]][][][][[][][]][[[][]][[]]]'], ['[[[]][[[]][][]][[[]]]][][][][[][]]][[[[[[[[[[]]][[[]]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]]]'], ['[[][[[]][][]]'], ['[[[]][[[]]]]][[[[[[][[[[]][[[]]]]'], ['[[]]][[[]]]]]]'], ['[[]]]][[[[[[[]][[[]][][]][[[]]]][]][][][][[][]]][[[]]][]][[]]]['], ['[[[[]]]][][][][[][][]][[[[[]]][[][[]][]][[]]]'], ['[[[]][[[]][][]][[[]]]]][[][]][[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][[[[][[]]][[[]]]]]]]][[[][][][][[][]]][[[][]][[]]]'], ['[[[][]]][[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][][]][[[[[[]]][][[][]]][[[][]][[]]]'], ['[[[]]][[[][]]][[]]][[[[]'], ['[[][[[[[[]]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][[]][][]]'], ['[[[[]]][[][[[[]]]]][]'], ['[[[[][]]][[[]'], ['[]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], ['[[[[[[[]]][[[]]][[[]]][][]][[[]]]][][][][[][]]][[[[[[[[[]]][[[]]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]][][]]][[]]]'], ['[[][]][[[[[[]]][[[]][][]][]]]'], ['[[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[]][[]]]'], ['[[[[[]]][[][]][[[[[]]][[[][[[]]]][[[[[[[]]][[[]]][[[]]][][]][[[]]]][][][][[][]]][[[[[[[[[]]][[[]]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]][][]]][[]]]'], ['[[[][[[[]]][[]]][[][]][[[[[]]][[[]][[][[]][[[[[[[[[[[[]]][[[[]]]]][]][[[[[[[]'], ['[[[[[]][[[[]'], [']][[][]][[[[[]][[[][]][][[][]]]][[][]][[[[[]][[[]][[[]][][[[[]]]][[[]]]][][][[[]][[['], [']][[][]][[[[[]][[[]][[[]][][]][[[]]]][][][][[][]]][[[[][]][]]][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[[[[[][]][[]]]]][['], ['[[[]][[[]]]][[[[[[[]]]]'], ['[[[[[]]]]][[[[[]]][]][[[[[]'], [']][[][]][[[[]][[[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][]][][[[[][[[]][[[]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][['], ['[[[]][]][][[][]][][[[]][]][[]]][][[[]]][[[]]]][][]][[[]]]][][][][[][]]][[[][]]][[]]]'], ['[[[[[[[]][]][][[][]][][[[]][]][[]]][]]]][[][]][[[[[]]][[[][[[]]]]'], ['[[]]]][[[[[[]][[[]]][[[][]][][[][]]]][[][]][[[[[]][[[]][[[]][][[[[]]]][[[]]]][][][[[[][]][][[][]]][[[][]][[]]][[][]][[]]][]]]][[[]'], ['[[[[]][]][][[][]][][[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]][[]]'], ['[[[]][[[]][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[[[]]][][][[][]]][[[[][]][[]]]'], ['[[[[[[[]]][[[]]][[[]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]]'], ['[[[][]][][[][[][]]][[[][]][[]]]]][[][[[][]][[]]][]'], ['[[[[]]]][][[[[]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]][[[]]]][[[[[[][[[[]][[[[]]]][[[[[[][[[[]][[[]]]][[]]]][][][][[][][]][[[[[]]][[][[]][]][[]]]'], ['[[[]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[[]]]'], ['[[[[[[[]][[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][]]][[[[[]]][]]][]'], ['[[]][[[[[[[]'], ['[[][[[]][][][[[[[]][[[[]]'], ['[[[][]]][][[][]]][[[][]][[[]][[[[[[[][]]]'], ['[[]]]][[[[[[[]][[[]][][]][[[]]]][]][][][][[][]][]][[]]]['], ['][[[]][][]]'], [']][[]][]][[[[[]][[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[][][][][[][]]][[[][]][[]]]][[['], ['[[[[]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]][[[]]]][[[[[[][[[[]][[[[]]]][[[[[[][[[[][[[[][]]][[[]][[[]]]][[[[[[]]][[[[]]]]][]'], ['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]'], ['[[][[[][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]][][]]'], ['[[[]][[[]][][]][[[]]]][][][][[][]]][[[][]]][[]]]'], ['[[[[[][]]][][[][]]][[[][]][[[]][[[[[[[][]]][][]][][[]][[[[][]][[[]]]'], ['[[[[][[[][]]][][[][]]][[[][]][[]]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][]][]'], ['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], ['[[][]][[[[]]]]'], ['[[][[[[]]]][[[[[[][[[[]][[[]]]]]]]'], ['[[[]][[[]][][]][[[]]]][][][][][[][]]][[[][]][[[[[[[[]]][[[]]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]]]]]'], ['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], ['[[][[[[]]][]'], [']][[[]]]][[[[[[][[[[]][[[]]]][][][]][[[[[]]][[['], ['[[[][]][[]]][[[]][][]]][]'], ['[[[[[]]][]]][[[][]]][[]]][][]]][[]]]'], ['[[[][]][][[]]]][[[]]]][][][[[[][]][][[][]]][[][[[[[[]]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][[]][][]][[[][]][[]]][[][]][[]]][]'], [']][[]][]]][[[[[[[]]][[['], [']][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]'], ['[[[]][[[]]]]][[[[[[][[[[]][[[]][[[[[][]][[[[]]]]]'], ['[[]]]][[[[[[[]][[[]][][[]][[[]]]][]][][][][[][]][]][[]]]['], ['[][[[[[[][[[][]][][[][]]][[[][]][[]]]]][[[][[[[]]]][[]]]][][][[]]'], ['[[[]]][[][]][][[[][]][[[[[]][[[]][][]][[[]]]]][[][]][[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][[[[][[]]][[[]]]]]]]][[[][][][][[][]]][[[][]][[]]]]]][[]'], ['[][[]]]][[[[[]'], ['[[]][[[[[][[[][]][[]]][[[]][][]]][]'], ['[[[]][[[]][][]][[[]]]][][][][][[][]]][[[][]][][]]]'], ['[[[[]]]][][][][[][][][][[[][]][[]]]'], ['[[]]][[[]]]]'], ['[[][]][[[[[[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][[]][][]][]]]'], ['[[][[[[]]]][[[[[[][[[[]]][[[]]]]]]]'], ['[[[]][[[]][][]][[[]]]]][[]][]][[[[[]]]][[[]][[]]]'], ['[[[[[[][]][][[][]]][[[][]][[]]]]]]][[[[[][[]'], ['[[]][][[[][]]][][[][]]][[[][]][[]]]'], ['[[[]][[[]][][]][[[]]]]][[][][][[[[[[[[][]][][[][]]][[[][[]][[]]][[][][][[][]]][[[][]][[]]]'], ['[[][[]]]]'], [']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[[[]][[[[[[[]]][[['], ['[[[][[[[[[]]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][[]][][]][][]]]]'], ['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[][[[]][][]][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], ['[[][[[]][][][[[[[]][][[[]]'], ['[[][]][[[[[[]]][[[]][][]]][]]]'], ['[[[[[[[]]][[[]]][[[]]][][]][[[]]]][][][]][][][]]][[[][]]][[]]]'], ['[[[[]]][[][[[[][]]]][]'], ['[[][[[[]]]]'], ['[[[][]][][[][[][]]][[[][]][[]]]]][[][[[][]]][[]]][]'], [']][[]]]][[['], ['[[]][[][][][[[[[[[[][]][][[][]]][[[][[]][[]][[[]][[[[]'], ['[[[]][[[[]]][[]]][[][]][[[[[]]][[[]][[[[]][[[[[[[[[[[[]]][[[[]]]]][][[[]][][]][[[]]]]][[][]][[[[[]]][[[][][][][[][]]][[[][]][[]]]'], ['[[[]]][[[][[[]]][[[[]'], ['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]]]][[[[][[]]][[[[[[[]]][[][]][[[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], ['[[]]]][[[[]][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]][[]'], ['[[[[]][]][][[][]][][[[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][[][][[][]]][[[][]]][[]]]]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], ['[[[][]][][[][]]]][[][]][[[[[]][[[]][[[]][][[[[]]]][[[]]]][][][[[[][]][][[][]]][[]]]][[[[[[[]][[[]][][]][[[]]]][]][][][][[][]]][[[]]][]][[]]][[[[][]][[]]][[][]][[]]][]'], ['[[[]][[[]]][][]][[[]]]][][][][[][]]][[][]][[[][[[][]]][[]]]'], ['[]][[]][]][[[[[[]]][[[[[[]]][[[]'], ['[[[]][[[]]]][[[]]]'], [']][[[]]][[][]][][[[][]][[]]][[][[['], ['[[]]][[[]]'], ['[[][[[[[[[][]]'], [']][[]][]][[]]][[['], ['[[[]][[[]][][]][[[][[[][][][][[][]]][[[][]][[]]'], ['[[[][[[[]][[[]]]]'], ['[[[[[]]][[][]][[[[[]]][[[][[[]]]][[[[[[[]]][[[]]][[[]]][][]][[[]]]][][][][[][][[[[[]]][[[]]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]][][]]][[]]]'], ['[[[[][][[[]]]]]]]'], ['[[[][]]][][[][]]][[[][]][[[]][[[[[[[[][]]]'], [']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][][[]][[[[]][[[[[[[]]][[['], ['[[[[]][[[[[[[[[[[[[[[[[[[]]][[[]]][[[]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]][]]]]]]]]]]]]]]][][][][[][][]][[[][]][[]]]'], ['[[][[[[]]]][[[[[[][[[]]][[[]]][[[]]]]]][[]]]]]]]]'], ['[[[[]]]][][][][[][][]][[[][]][[[][]]][[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][][]][[[[[[]]][][[][]]][[[][]][[]]][[]]]'], ['[[]]][[[]][][[[][[[]][][][[[[[]][[[[]]]]'], ['[[[]][[[]][][]][[[]]]][][][][[][]]][[[][[[[][[[][]][][[][]]][[[][]][[]]]]][[[][]]]'], ['[[[]][]][[[[]]]][[[[[[[]][[[]][][]][[[]]]][]][][][][[][]]][[[]][]][[]]][[[[]'], ['[[[[]]][[][][[[]][[[]]][][]][[[]]]]][[][]][[[[[]]][[[][][][][[][]]][[[][]][[]]]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][]'], ['[[[[]]][[][[[[][]][[[[]]][[][[[[]]]]][]]][]'], ['[[[][[]]][][[][]]][[[][]][[]]]'], ['[[[[[]]][]]][[[][]]][[]]]][][]]][[]]]'], ['[[]]]][[[[]][[][]][[[[[[[[][]][][[][[[]][[[]]]][[[]]][]]][[[]]][[]'], ['[[][]][[[[[[]]][[[]][][]]][]]][[][[[[]]]][[[[[[][[[[]]][[[]]]]]]]'], ['[[[[]][[][]'], ['[[[[]]]][][][][[][]]][[[][]][[[]][[[]]]][[[]]][[]]]'], ['[[]]]][[[[[[[]][[[]][][]][[[]]]][[]][][][][[][]][]][[]]]['], ['[[]]][[[]]]'], ['[[]]][]'], ['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], ['[[[]][[[[]]][[]]][[][]][[[[[]]][[[]][[[[]][[[[[[[[[[[[]]][[[[]]]]][][[][[]]]][[[]][][]][[[]]]]][[][]][[[[[]]][[[][][][][[][]]][[[][]][[]]]'], [']][[][]][[[[[[[]]][[[][][][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][][]]][[[]][[['], ['[[[][]]][[[][[[[[[]]]][[]]]][[][[[]][[[]][][]][[[][[]]]][[[[[]][][[]]]][][][[]]]]]][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][][]][[[[[[]]][][[][]]][[[][]][[]]]'], ['[[[]][[[]]]]][[[[[['], ['[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[[]][[[[[[]]]][][][][[][]]][[[][]][[]]][]]]][[[]]]][]'], ['[[[]][[[]]]]]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][][[]][[[[]][[[[[[[]]][[[][[[[[[[][[[]][][]]]]]]'], ['[[]][][[[][]]][][[][]]'], ['[[[]][[[]][][]][[[]]]][][][][][[[][]]][[[][]][][]]]'], ['[[[]][[[]]][][]][[]][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[[[][]]][[[]]]'], ['[[[]][[[]][][]][[[][[[]][[[]][][]][[[][[[][][][][[][]]][[[][]][[]]][[[][][][][[][[[]]]][[[[[[[]][[[]][][[]][[[]]]][]][][][][[][]][]][[]]][[[[]][[[]]]]][[[[[[][[[[]][[[]]]]]]][[[][]][[]]'], ['[[][[[]][[[]][][]][[[]]]][][][][][[][]]][[[[][]][[]]]][[[]][][]]'], ['[[]]][[[[[[]][[[]][[[]]]][[[[[[][[[[]][[[]]]][[][]][[[[[]]][[[[]]][][][[][]]][[[[][]][[]]]]]]]]]'], ['[[][]][[[[[[[][[[]]]][[[[[[][[[[]][[[]]]]][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][[]][][]][]]]'], ['[][[[[[[]]]][[]]]][][][][[]]'], ['[[[[]]]][[[[]][[][]][[[[[[[[][]][][[][[[]][[[]]]][[[]]][]]][[[]]][[]]'], ['[[[]][[[]][][][][][][[][]]'], ['[[[]][]][][][[[][]][[]]][]'], ['[[[[]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]][[[[]]]][[[[[[][[[[]][[[[]]]][[[[[[][[[[]][[[]]]][[[[[[]]][[[[]]]]][]'], ['[[[]]]]][[[[[[][[[[]][[[]]]]'], ['[[[[[[[[]]][[][]][[[[[[[[[[[[]]][[[[]]]]][]]][[[]][][]][][[]]]][][][][[][]]][[[][][[[][]][][[][]][][[[][]][[]]][]][[]]][]][[[[[]]]'], ['[[[[[[[[[[]]][[[]]][[[]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]][]]][][[][]]]][[]]]'], [']][[[]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], ['[[][]][[[[[[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][[]][][]][]][[[[]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]][[[]]]][[[[[[][[[[]][[[]]]][]]'], ['[[[[[[[]]][[[]]]][[[]]][][]][[[]]]][][][][[][]]][[[[[[[[[]]][[[]]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]][][]]][[]]]'], ['[[[]]][[][]][][]][[]'], ['[][[[]]'], ['[[[]][[[[]][[[]][][]][[[]]]][][][][][[[][]]][[[][]][][]]]][][[[][]][[]]][]'], [']]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[]][[][[]][[[[[[[]]][[['], ['[[[]][[[]][][]][[[]]]][][][][[][]]][[[][[[[][[[][]][][[][]]][[[][]][[]]]]][[[[][[[]][[[]][][]][[[]]]][][][][][[][]]][[[[][]][[]]]][[[]][][]][][]][[[[]]][[][[[[][]]]][]]'], [']][[[]]]][[[[[[][[[[][[[[[]]][[][]][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][]][[[]]]][[][]][[[[[]]][[['], ['[[[]][[[][][[][]]][[[][]]][[]]]'], ['[[[[]]][[][]][[[[[[][]]][[[][[[]]][[[][[[]]]]'], ['[[[][]][][[][]][]]][[]][]][[[[[]][[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[][][][][[][]]][[[][]][[]]]][[[[[[][]][[]]][]'], ['[[[[[[[[]]][[][]][[[[[[[[[[[[]]][[[[]]]]][]]][[[]][][]][][[]]]][][][][[][]]][[[][][[[][]][][[][]][][[[][]][[]]][]][[]]][]][[[[[]]][[]][[[]][][]]'], ['[[[[[]]]]][[[[[]]][]][[[[][]][[[][[[]'], ['[[[[]]]][[[[]][[][]][[[[[[[[][]][][[][[[]][[[]]]]][[[]]][]]][[[]]][[]]'], ['[[[]]]]][[[[[[][[[]][]][][[][]][][[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]]'], ['[[]]][[[[[][]][[[[[[]]][[[]][][]]][]]]]]]]]]'], ['[[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][][][]][]'], ['[[[]][[[]][][]][[[]]]][][][][][[][]]][[[]'], ['[[[]][[[]][][]][][[[[[[][[[][]][][[][]]][[[][]][[]]]]][[[][[[[]]]][[]]]][][][[]][[[]]]][][][][][[][]]][[[][]][][]]]'], ['[[[]][[[]][][][][[[][[]]]][[[[[]][][[[[[[]]]][[]]]][][][[]]]]]'], [']][[][]][[[[[]][[[]][[[]][][]][[][]]]][][][][[][][]][[[[][]][][[][]]][[[][]][[]]]]][['], ['[[[]]][[][]][[[[[[[]]][[[][][][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][][]]][[[]][[[]]][[[[[[][[[[]][[[]]]]'], ['[[[[[]]][[[]'], ['[[[[[[[[]]][[][]][[[[[[[[[[[[]]][[[[]]][[[]][[[]][][]][[[]]]][][][][][[][]]][[[]]][]]][[[]][][]][][[]]]][][][][[][]]][[[][][[[][]][][[][]][][[[][]][[]]][]][[]]][]][[[[[]]][[]][[[]][][]]'], ['[[]]][[[][[]]]][[[[[[[]][[[]][][]][[[]]]][]][][][][[][]][]][[]]][]]]]]'], [']][[[]]]][[[[[[][[[[[]][[[]]]][[][]][[[[[]]][[['], ['[[[[[[]]]][][][][[][][][][[[][]][[]]]][[[[]]][]'], ['[[[]][][][[[[[[]]]][[]]]][][][[]][]][[[]]]'], ['[[][[[]][][][[[[[]]]]'], ['[[[]][[[]][][]][][[[[[[][[[][][[[[]][[[[[[[[[[[[[[[[[[[]]][[[]]][[[]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]][]]]]]]]]]]]]]]][][][][[][][]][[[][]][[]]]][][[][]]][[[][]][[]]][[[[]]]][[]]]][][][[]][[[]]]][][][][][[][]]][[[][]][][]]]'], [']][[][][][[[[[[[[][]][][[][]]][[[][[[[[[[[[[]]][[[]]][[[]]][[[]]]]][[[[[[][[[[]][[[]]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]][]]][][[][]]]][[]]][[]][[]]]['], ['[[[][]][][[][]][]]][[]][]][[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[][][][][[][]]][[[][]][[]]]][[[[[[][]][[]]][]'], ['[[[[]]]]][[[[[[][[[[]][[[]]]][[[[]][[[[]'], ['[[]][][[[][][[][]]'], ['[[[]][[[]]]]][[[][[[][[[[]][[[]]]]'], ['[[[[]][]][][[]][]][][[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]][[]]'], ['[[[[]]]][][][][[][[]]][[[][]][[]]]'], ['[[[[]][]][][[][]][][[[]][]][]]][][[[]][[[]]][][]][[[]]]][]]][[]]][[]]'], ['[[[]][]][][[][]][][[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][[][][[][]]][[[][]]][[[[[]]]]][[[[[]]][]][[[[[][[]]]'], ['[[[]]]]][[[[[[][[[]][]][][[][]][][[[]][]][[[]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]]'], ['[[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][]]]'], ['[[[[[[[[[]]][[][]][[[[[[[[[[[[]]][[[[]]]]][]]][[[]][][]][][[]]]][][][][[][]]][[[][][[[][]][][[][]][][[[][]]]][]][[]]][]][[[[[]]]'], ['[[[[[[[[]]][[][]][[[[[[[[[[[[]]][[[[]]]]]][]]][[[]][][]][][[]]]][][][][[][]]][[[][][[[][]][][[][]][][][[][]][[]]][]][[]]][]][[[[[]]]'], [']][[][]][[[[[]][[[][[[[]]]][[[]]]][][][[[]][[['], ['[][[[[[[]]]][[]]][][][][][]]'], [']][[][]][[[[[]]][[[[][[[[[[]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][]]]'], ['[[]]][[[][[[]][[[]]]]][[[[[[][[[[]][[[]]]]]]'], ['[[[][]][][[][]]][]][[[]]][[][]][][[[][]][[]]][[][[[[[]][][[[]][[[]]][][]][[[]]]][][][][[][[[[]]][[][]]][[][]][[[][[[][]]][[]]]]][[[][]][[]]][]'], [']][[][]][[[[[[[[][]][][[]]]['], ['[[[][]]][[[][[[[[[]]]][[]]]][[][[[]][[[]][][]][[[][[]]]][[[[[]][][[]]]][][][[]]]]]][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][][]][[[[[[]]][][[][]]][[[][]][[[]][[[]]]][[[[[[[]]]][[]]]'], ['[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]][[][]][[[[[[]]][[[]][][]]][]]][[][[[[]]]][[[[[[][[[[]]][[[]]]]]]]][[[[[[[][]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], ['[[][[[[]]]][[[[[[][[[[]][]]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][][[]][[[[]][[[[[[[]]][[[[[]]]]'], ['[][[[[[[][[[][]][][[][]]][[[][]][[]]]]][[[][[[[]]]][[]]'], ['[[[[][]]]][[[]'], ['[[[]][[[][][[][]][][[[][]]][[]]]'], ['[[]]]][[[[[[]][[[]]][[[][[[][[[[]]][[]]][[][]][[[[[]]][[[]][[][[]][[[[[[[[[[[[]]][[[[]]]]][]][[[[[[[][]][][[][]]]][[][]][[[[[]][[[]][[[]][][[[[]][[][[[[]]]][[[[[[][[[[]]][[[]]]]]]]]][[[]]]][][][[[[][]][][[][]]][[[][]][[]]][[][]][[]]][]]]][[[]'], ['[[][]][[[[[[]]][[[]][][]]][[[][[[]][][][[[[[]]]]]]]'], ['[[[[]]]][][][][[][][]][[[][]][[[][]]][[[][[[[[[]]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][][]][[[[[[]]][][[][]]][[[][]][[]]][[]]]'], ['[[[[]]][[][][][[[[[[[[][]][][[][]]][[[][[[[[[[[[[]]][[[]]][[[]]][[[]]]]][[[[[[][[[[]][[[]]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]][]]][][[][]]]][[]]][[]][[]]]['], ['[[[]]]][[]][[[[[[][[[[[]'], ['[[][[[[[[]]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]]'], ['[[[[[[]]]][][][][[][][][][[[][]][[]][[[[]]]]][[[[[[][[[[]][[[]]]][[[[]][[[[]]][[[[]]][]'], ['[[[[]][]][][[][]][][[[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]][[]]'], ['[[][]]][]]'], ['[[][[[[[[]]]]]'], ['[[[[[[[]]]][[[]]][[[]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]]'], ['[[[[]]][]][[]][]]][[[[[[[]]][[[[][]][[[[[]]][[[][[[]]]]'], ['[[][]][[]][]][[[[[[[]]][[[[]]]'], ['[[[]]]]][[[[[[][[[]][]][][[][]][][[[]][]][[[]][[[]]][][]][[[]]]][][][][[][]]][[[[[[[]]]][][][][[][][]][[[][]][[[][]]][[[][[[[[[]]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][][]][[[[[[]]][][[][]]][[[][]][[]]][[]]]][]]][[]]]'], ['[[][]][[[]]][[][]][[[[[[[]]][[[][][][[[[[[[[][]][][[][[[[[]][[[]]]][][[[[]][[[]]]][][][]]][[[]][[[]]][[[[[[][[[[]][[[]]]][[[[[[]]]'], ['[[[[[[]]][]'], ['[[[[]]][[][[[[]][[[]]]][[[[[[][[[[]][[[]]]]]][[[[[]]][[[][[[]]]]'], ['[[[]][[[]][][]][[[]]]]][[][]][[[[[]]][[[][][][][[][]]][[[]][]][[]]]'], ['[[[][[[[][[[]]]][[[[[]][[[]]]]'], ['[[[[]]][[][[[[][[[][]][][[][]][]]][[]][]][[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[][][][][[][]]][[[][]][[]]]][[[[[[][]][[]]][]]]][]'], ['[[[[[][[[[][[[]]][]]]'], ['[[[[]]][[][]][[[[[[[[[[[[]]][[[[[[[[[[[[[[]]][[[]]][[[]]][][]][[[]][[[]]]]][[[[]][]][][[][]][][[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]][[]][[[[[[[[[]]]][][][]][[][]]][[[][]]][[]]]][]]][][[][]]]][[]]]]'], ['[[[[[[[]]][[[]]][[[]]][][]][[[]]]][][][][[][]]][[[[[[[[[]][[]]][[[[[][]][[[[[[]]][[[]][][]]][]]]]]]]]]][[[]]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]][][]]][[]]]'], ['[[[[][[[][]][][[][]]][[[][]][[]]]]]][[[]'], [']][[]][]][[]]][[[]][[[['], ['[[[[][[[][]][[][[[[]]]][[[[[[][[[[]]][[[]]]]]]]]]]]][[[]'], ['[[][[[[[[]]]]]][[]]]][[][]][[[[[[[[][]][[][[][]]][[[][]][[]]][[]][][]]'], ['[[[][][[[]][][]][[[]]]]][[][]][[[[[]]]][[[]][[]]]'], ['[[[]][][][][][[][]]][[[][]]][[]]]'], ['[[][[[[]]]][[[[[[][[[[]][]]][[]][]][]][[][]][[[[[[[]]][[[][]][[[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][][[]][[[[]][[[[[[[]]][[[[[]]]][[[[]]][[][[[[]]]]][]'], ['[[[]][[[]][][]][[[]]]][]][][][][[][]]][[[]][]][[[[[[]]][[][[[[][[[][]][][[][]][]]][[]][]][[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[][][][][[][]]][[[][]][[]]]][[[[[[][]][[]]][]]]][]]'], [']][[[][[[[[]]][[][]][[[[[[[[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][]]]][[[[[[][[[[][][[[]]]][[][]][[[[[]]][[['], ['[[[][]][][[][]]]][[][]][[[[[]][[[]][[[][[]]][[[][[]]]][[[[[[[]][[[]][][]][[[]]]][]][][][][[][]][]][[]]][]]]]]][][[[[]]]][[[]]]][][][[[[][]][][[][]]][[]]]][[[[[[[]][[[]][][]][[[]]]][]][][][][[][]]][[[]]][]][[]]][[[[][]][[]]][[][]][[]]][]'], ['[[[]]][[[[][[[[]]]][[[[[[][[[[]]][[[]]]]]]]][[[]]][[[[]'], ['[[[]][[[[[]][[[]]]]]][[]][][]][[[]]]][][][][][[][]]][[[]'], ['[[[[]][]][][[][]][][[[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][[][][[][]]][[[][]]][[]]]]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][][[]]]][][[]]][[[[[[[]]][[][]][[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], ['[[]][[[[[[[][[[][][[[]][][]][[[]]]]][[][]][[[[[]]]][[[]][[]]]'], ['[[[[[]]][]]][][][]]][[]]]'], ['[][[[]]][[[]'], [']][[][][[[[[][[[][]]][][[][]]][[[][]][[]]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][]][][[[][[]][[]]]['], ['[[[]][[[]][][]][[[]]]]][][][][][[][]]][[[]][]][[]]]'], ['[[]]][[[]]]]]'], [']][[[][[[[[[]][]][][[][]][][[[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][[][][[][]]][[[][]]][[]]]]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[][[]]][[['], ['[[][][[]]][[[]]][[[[[]]]'], ['[[[]][[[]][[[]]]][[[[[[][[[[[[]][[[]]]][[[[[[][[[[]][[[]]]][]][[[]]]][[][]][[[[[]]][[[[]]][][][[][]]][[[][]][[]]]'], ['[[[][[[[]][[[[][[[[]][[[]]]][[]]]]'], ['[[]]][[[]]]]][[]]]][[[[[[[]][[[]][][]][[[]]]][[]][][][][[][]][]][[]]]['], ['[[[]]][[][]][][[[[[[[[[[]]][[][]][[[[[[[[[[[[]]][[[[]]]]]][]]][[[]][][]][][[]]]][][][[[]]][[[]]]]][[]]]][[[[[[[]][[[]][][]][[[]]]][[]][][][][[][]][]][[]]][][[][]]][[[][][[[][]][][[][]][][][[][]][[]]][]][[]]][]][[[[[]]][][]][[]]][[]'], ['[[[[[[[[]]]][[[]]][[[]]][][]][[[]]]][][][]][[][]]][[[][]]][[]]]]'], ['[[][]][[[[[[]]][[[]][][]]][[[][[[]][][][[[][[]]]]]]]'], ['[[[]][[[[[[[]'], ['[[[[]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]][[[]]]][[[[[[][[[[]][[[[]]]][[[[[[][[[[][[[[][]]][[[]][[[]]]][[[[[[]]]]][]'], ['[[[]]][[[][]]][[]]][[[[]]'], ['[[[[[][[[]][][]]][]][][[]][[[][]][[]]]'], ['[[[]][[[]][][]][[[]]]][][][][][[][]]][[[]]][]][[]]]'], [']][[[]]][[][]][][[]][[]][]][[]]][[[[][]][[]]][[][[['], ['[[]][[][][][[[[[[[[][]][][[][]]][[[][[]][][]][[[]][[[[]'], ['[[[]][[[][][[][]][][[[][]]][[[[]][[[]][][]][[[]]]][][][][][[][]]][[[][]]]'], ['[[[]][[[]][][]][[[]]]][][][][[][]]][[[][[[[][[[][]][][[][]]][[[][]][[]]]]][[[[][[[]][[[]][][]][[[]]]][][]][[]][]]][[[[[[[]]][[[][][][[][]]][[[[][]][[]]]][[[]][][]][][]][[[[]]][[][[[[][]]]][]]'], [']]][[][]][[[[[]]][[['], ['[[[[]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]][[[]]]][[[[[[][[[[]][[[[]]]][[[[[[][[[]][]][][[][]][][[[]][]][[]]][][[[]][[[]]][][]][[[]]]][][[][][[][]]][[[][]]][[]]][[[[]][[[]]]][[[[[[]]][[[[]]]]][]'], ['[[[]][[[]]]]][[[[[[][[[[]][[[][][[[[[][]][[[[]]]]]'], ['[[[]][[[[]]][[]]][[][]][[[[[]]][[[]][[[[]][[[[[[[[[[[[]]][[[[]]]]][][[][[]]]][[[]][][]][[[]]]]][[][]][[[[[]]][[[][][[[[][]]][[[][[[[[[]]]][[]]]][[][[[]][[[]][][]][[[][[]]]][[[[[]][][[]]]][][][[]]]]]][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][][]][[[[[[]]][][[][]]][[[][]][[]]]][][[][]]][[[][]][[]]]'], ['[[]]][[[[[[][[[[][[[]]][]]][[]]]]'], ['[[[][]][][[][]]]][[][]][[[[[]][[[]][[[][[]]][[[][[]]]][[[[[[[]][[[]][][]][[[]]]][]][][][][[][]][]][[]]][]]]]]][][[[[]]]][[[]]]][][][[[[][]][][[[][]]][[]]]][[[[[[[]][[[]][][]][[[]]]][]][][][][[][]]][[[]]][]][[]]][[[[][]][[]]][[][]][[]]][]'], ['[[[]][]][][[][]][][[[]][]][[]]]][][[[]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]]'], ['[[][]][[[]]][[][]][[[[[[[]]][[[]][[][[[[[[]][[[]]][[[[[[][[[[]][[[]]]][[[[[[]]]'], ['[[[[]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]]][[[]][][[[[]][[[]]]][]'], ['[[[[]]][[][]][[[[[[[[[[[[]]][[[[[[[[[[[[[[]]][[[]]][[[]]][][]][[[]][[[]]]]][[[[]][]][][[][]][][[[]][]]][[]]][][[[]][[[]]][][]][[[]]]][][][][[][]]][[[][]]][[]]][[]][[[[[[[[[]]][[]]]][[[[[[[]][[[]][][]][[[]]]][]][][][][[][]][]][[]]][][][][]][[][]]][[[][]]][[]]]][]]][][[][]]]][[]]]]'], ['[[[]][[[]][][]][[[]]]]][][][][][[][]]][[[[[]]][][[[]][]][[]]]'], ['[[][]][[[[[[][]][[[]][][]][]]]'], ['][][[][]]][[[][]][[]]][['], ['[[]]][[[[[][]][[[[[[[[[][]][][[]]]][[[]]]][][][[[[][]][][[][]]][[][[[[[[]]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][[]][][]][[[][]][[]]][[][]][[]]][]]]][[[]][][]]][]]]]]]]]]'], ['[[][]][[[[][[[[[[]]][]]]'], ['[[[]][[[]][][]][[[]]]][][][][[][]]][[[][[[[][[[][]][][[][]]][[[][]][[]]]]][[[[][[[]][[[]][][]][[[]]]][]][][[][]]][[[[][]][[]]]][[[]][][]][][]][[[[]]][[][[[[][]]]][]]'], ['[[[[[][]][][][]][]'], ['[[[]][[[][]][[[[[]]][[][][[][]]][[[][]]][[]]]'], ['[]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][][]][][[]][[[]]]][][[[[]][[[]]]][][[]][][]][[[[]'], ['[]][]][[][]][[[[[[[[][]][][[][]]][[[][[]][[]]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]'], ['[[]]]][[[[]][[][]][[[[[[[[[[]]]][[[[][]][][[][]]][[[][[]][[]]][[]'], ['[[[[]][[]][[]][]][[[[[[[]][[[[[[]]][[][]][[[[[[[[]]][[][[[[][[[][]][][[][]][]]][[]][]][[[]][[[]][][]][[[]]]]][[][]][[[[[]]]][[[][][][][[][]]][[[][]][[]]]][[[[[[][]][[]]][]]]][][]][[[]]]][][[[[]][[[[[[[[[]]][[[]]][[[]]][][]][[[]]]][[][][]][[][]]][[[][]]][[]]]][]][[[[]]][[][[[[][]][[[[]]][[][[[[]]]]][]]][]]][][]][][[[[][[[[]]]][][][][[][][]][[[][]][[]]][[]]][[[[]][][]][[[]]]][][][][[][]]][[[][]][[]]][]][[[[[]]]'], ['[[[[[][]][]][[][][][[[[[[[[][]][][[][]]][[[][[]][[]][]]]]'], ['[[[][]][][[][[][]]][[[[]][[][]]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[]][[][]][[[[[[]]][[[]][][]]][]]][[][[[[]]]][[[[[[][[[[]]][[[]]]]]]]][[[[[[[][]][[][]][[[[[[[][]][][[]][[[[[]][[[]]]][][[[[]][[[]]]][][[[]]][[[[[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]]][[][]][[[[[[[[[]][[[]]]][][[]][][]][[[[]][]][[]]]]][[][[[][]]][[]]][]'], ['[[[[]]][]][[]][[[[[]]]][][][][[][]]][[[][]][[[]][[[]]]][[[]]][[]]]]]][[[[[[[]]][[[[][]][[[[[]]][[[][[[]]]]'], ['[[][[[[[[]]]]][[]]]][[][]][[[[[[[[][]][][[][]]][[[][]][[]]][[]][][]][[[]][[[]][[[]]]][[[[[[][[[[[[]][[[]]]][[[[[[][[[[]][[[]]]][]][[[]]]][[][]][[[[[]]][[[[]]][][][[][]]][[[][]][[]]]'], ['[[[]][[[]][][]][[[[][][][[][]]][[[]][]][[]]]'], ['[[][]][[[[[[[][[[[[[]]]][[][]]][[][]][[[[[[[][]][][[][][[[[[[]]]][[]]][][][][][]][]]][[[][[]][][]][]]]'], ['[[[[]]][[[[[[[]]]][[[[]][[][]][[[[[[[[][]][][[][[[]][[[]]]][[[]]][]]][[[]]][[]]]']]\n    results = [True, False, False, False, True, False, True, False, False, True, True, False, False, False, True, True, False, False, False, True, True, True, False, True, False, False, True, True, False, True, True, True, True, True, True, True, False, False, False, True, True, True, True, True, False, True, False, False, False, True, False, True, True, True, True, False, False, True, True, True, False, True, True, True, True, True, False, True, True, False, False, True, True, True, True, False, True, True, True, True, False, True, True, True, True, True, True, True, True, True, False, True, True, True, False, False, True, True, True, True, True, True, True, False, True, True, True, True, False, True, True, True, True, True, True, True, True, True, False, True, True, True, True, False, True, True, True, True, False, True, False, True, True, True, True, True, False, True, True, True, True, True, True, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, True, True, False, True, False, True, False, True, True, True, True, True, True, True, True, True, True, False, True, True, True, True, True, True, True, False, True, True, True, True, True, True, True, True, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, True, True, True, True, True, True, True, True, True, True, True, False, True, True, True, True, True, True, True, True, True, True, True, False, True, True, True, True, False, True, False, True, True, True, True, True, True, True, True, True, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, True, True, True, True, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, True, True, True, True, True, True, True, True, True, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, True, True, True, True, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, False, True, True, True, True, True, True, True, True, True, True, True, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, False, True, True, True, True, True, False, False, False, False, False, False, False, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]\n    for i, (inp, exp) in enumerate(zip(inputs, results)):\n        assertion(candidate(*inp), exp, 0)\n",
      "entry_point": "is_nested",
      "complete_code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n\n    for i in range(len(string)):\n        if string[i] == \"]\": continue\n        cnt, max_nest = 0, 0\n        for j in range(i, len(string)):\n            if string[j] == \"[\":\n                cnt += 1\n            else:\n                cnt -= 1\n            max_nest = max(max_nest, cnt)\n            if cnt == 0:\n                if max_nest >= 2:\n                    return True\n                break\n    return False\n\n"
    },
    "execution_info": {
      "max_mutations_per_operator": 10,
      "total_operators_tested": 46,
      "operators_with_mutations": 14,
      "execution_timestamp": "2025-08-01T15:58:07.833925"
    }
  }
}