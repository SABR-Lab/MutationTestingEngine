{
  "timestamp": "20250801_154458",
  "test_type": "mutation_testing",
  "metadata": {
    "task_id": "HumanEval/50",
    "timestamp": "20250801_154458",
    "tester_version": "1.0",
    "total_operators_tested": 7,
    "operators_with_errors": 0
  },
  "summary": {
    "original_passes": true,
    "total_mutations": 32,
    "killed_mutations": 13,
    "mutation_score": 0.40625,
    "survival_rate": 0.59375
  },
  "detailed_results": {
    "task_id": "HumanEval/50",
    "dataset_type": "plus",
    "original_passes": true,
    "total_mutations": 32,
    "killed_mutations": 13,
    "mutation_score": 0.40625,
    "mutation_results": {
      "NumberReplacer": {
        "total_mutations": 10,
        "killed_mutations": 6,
        "survival_rate": 0.4,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 6 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 6 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:50.917314",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 4 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 4 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:51.140757",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 2,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 27 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 27 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:51.358068",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 3,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 25 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 25 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:51.559324",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 4,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 6 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 6 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpngkuua_w.py\", line 62, in <module>\n    check(decode_shift)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpngkuua_w.py\", line 56, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpngkuua_w.py\", line 49, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:44:51.740851",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 4 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 4 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp8bims1ct.py\", line 62, in <module>\n    check(decode_shift)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmp8bims1ct.py\", line 56, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp8bims1ct.py\", line 49, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:44:51.916399",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 6,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 27) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 27) % 26 + ord('a')) for ch in s])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp_ranp7qn.py\", line 62, in <module>\n    check(decode_shift)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmp_ranp7qn.py\", line 56, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp_ranp7qn.py\", line 49, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:44:52.152976",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 7,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 25) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 25) % 26 + ord('a')) for ch in s])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmph0_tz8z1.py\", line 62, in <module>\n    check(decode_shift)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmph0_tz8z1.py\", line 56, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmph0_tz8z1.py\", line 49, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:44:52.327353",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 8,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 27 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 27 + ord('a')) for ch in s])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpvyom228n.py\", line 62, in <module>\n    check(decode_shift)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpvyom228n.py\", line 56, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpvyom228n.py\", line 49, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:44:52.499213",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 9,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 25 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 25 + ord('a')) for ch in s])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmps24mupu3.py\", line 62, in <module>\n    check(decode_shift)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmps24mupu3.py\", line 56, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmps24mupu3.py\", line 49, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:44:52.688977",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 10,
        "mutations_tested": 10
      },
      "Add->Sub": {
        "total_mutations": 3,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 - ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 - ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:52.906379",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:53.141016",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 2,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 - ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 - ord('a')) for ch in s])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp8tfhy8u0.py\", line 62, in <module>\n    check(decode_shift)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmp8tfhy8u0.py\", line 56, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmp8tfhy8u0.py\", line 24, in decode_shift\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 - ord('a')) for ch in s])\n                    ~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nValueError: chr() arg not in range(0x110000)\n",
            "timestamp": "2025-08-01T15:44:53.407063",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 3,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 - 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 - 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:53.652376",
            "status": "SURVIVED",
            "reason": "tests_passed"
          }
        ],
        "mutation_count_available": 4,
        "mutations_tested": 4
      },
      "Sub->Add": {
        "total_mutations": 3,
        "killed_mutations": 2,
        "survival_rate": 0.3333333333333333,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 + ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 + ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:53.953651",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') + 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') + 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpab4xhn3c.py\", line 62, in <module>\n    check(decode_shift)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpab4xhn3c.py\", line 56, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpab4xhn3c.py\", line 49, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:44:54.223715",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) + ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) + ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpha46eog6.py\", line 62, in <module>\n    check(decode_shift)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpha46eog6.py\", line 56, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpha46eog6.py\", line 49, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:44:54.472323",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 3,
        "mutations_tested": 3
      },
      "Mod->FloorDiv": {
        "total_mutations": 2,
        "killed_mutations": 1,
        "survival_rate": 0.5,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) // 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) // 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:54.681291",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) // 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) // 26 + ord('a')) for ch in s])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp46gk2oxb.py\", line 62, in <module>\n    check(decode_shift)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmp46gk2oxb.py\", line 56, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp46gk2oxb.py\", line 49, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:44:54.881434",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Remove ReturnValue": {
        "total_mutations": 2,
        "killed_mutations": 1,
        "survival_rate": 0.5,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:55.087843",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpy4l4inde.py\", line 62, in <module>\n    check(decode_shift)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpy4l4inde.py\", line 56, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpy4l4inde.py\", line 49, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:44:55.296605",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "String->Empty": {
        "total_mutations": 4,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:55.534314",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:55.727829",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 2,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:55.932781",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 3,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:56.173054",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 4,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp6nogmwa7.py\", line 62, in <module>\n    check(decode_shift)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmp6nogmwa7.py\", line 56, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmp6nogmwa7.py\", line 24, in decode_shift\n    return ''.join([chr((ord(ch) - ord('') - 5 + 26) % 26 + ord('a')) for ch in s])\n                                   ~~~^^^^\nTypeError: ord() expected a character, but string of length 0 found\n",
            "timestamp": "2025-08-01T15:44:56.397701",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 5,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('')) for ch in s])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpimqgafe7.py\", line 62, in <module>\n    check(decode_shift)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpimqgafe7.py\", line 56, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmpimqgafe7.py\", line 24, in decode_shift\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('')) for ch in s])\n                                                             ~~~^^^^\nTypeError: ord() expected a character, but string of length 0 found\n",
            "timestamp": "2025-08-01T15:44:56.639642",
            "status": "BROKEN",
            "reason": "code_error"
          }
        ],
        "mutation_count_available": 6,
        "mutations_tested": 6
      },
      "String->X": {
        "total_mutations": 8,
        "killed_mutations": 3,
        "survival_rate": 0.625,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"X\"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"X\"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:56.856060",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return 'X'.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return 'X'.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:57.112656",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 2,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('X')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('X')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:57.333232",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 3,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('X')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('X')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:57.547223",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 4,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"X\"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"X\"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:44:57.868255",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 5,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return 'X'.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return 'X'.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpby4ux3td.py\", line 62, in <module>\n    check(decode_shift)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpby4ux3td.py\", line 56, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpby4ux3td.py\", line 49, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:44:58.134307",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 6,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('X') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('X') - 5 + 26) % 26 + ord('a')) for ch in s])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpb4xpzc5i.py\", line 62, in <module>\n    check(decode_shift)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpb4xpzc5i.py\", line 56, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpb4xpzc5i.py\", line 49, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:44:58.426942",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 7,
            "original_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
            "mutated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('X')) for ch in s])",
            "mutated_complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return ''.join([chr((ord(ch) + 5 - ord('a')) % 26 + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - 5 + 26) % 26 + ord('X')) for ch in s])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpedged9g8.py\", line 62, in <module>\n    check(decode_shift)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpedged9g8.py\", line 56, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpedged9g8.py\", line 49, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:44:58.668389",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 8,
        "mutations_tested": 8
      }
    },
    "problem_info": {
      "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
      "canonical_solution": "\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n",
      "test_code": "\n\nimport numpy as np\n\ndef is_floats(x) -> bool:\n    # check if it is float; List[float]; Tuple[float]\n    if isinstance(x, float):\n        return True\n    if isinstance(x, (list, tuple)):\n        return all(isinstance(i, float) for i in x)\n    if isinstance(x, np.ndarray):\n        return x.dtype == np.float64 or x.dtype == np.float32\n    return False\n\n\ndef assertion(out, exp, atol):\n    exact_match = out == exp\n\n    if atol == 0 and is_floats(exp):\n        atol = 1e-6\n    if not exact_match and atol != 0:\n        assert np.allclose(out, exp, rtol=1e-07, atol=atol)\n    else:\n        assert exact_match\n\n\ndef check(candidate):\n    inputs = [['tantywccpjkimslotpzs'], ['clknfxdnox'], ['dtzqyosaovdbafbg'], ['dffjvztknohzf'], ['brhkdngfwd'], ['amlcrporykmgbhzctpnh'], ['ondbgojmipwoofzeyrh'], ['atobiwyiitrvhuctz'], ['kyrzjawonglfbsedmhmk'], ['esusgpgnaelf'], ['jbocbcqiuggvenbq'], ['zmmcumljlx'], ['ibrcruwukgetv'], ['ncbelcfjqcgxshtdiz'], ['xgcckzjdfp'], ['gzlnmjjytxhydvy'], ['zxlxfflljav'], ['kfeabaemohxvodorv'], ['kdfcevzlswkkmkwdrcrg'], ['oxtrmhyjjbm'], ['bvhfetbvrspmepdqu'], ['lycqknawupoydpve'], ['vmbjsfxvtgjkxgvazub'], ['ffkskhcrjnixkkdivamc'], ['zszowxcyfksyaiov'], ['mcqqnjopwar'], ['dkglzmaccvjlrjuhgmp'], ['hudnjifakmaknaiwjjoz'], ['ppineedncm'], ['nhnnpeyazv'], ['hfgrlomgpnzomltm'], ['opejcxrnkfi'], ['caocjafernbzwkerkjul'], ['uenrgscamkc'], ['ntphbmfuyhgxxekrh'], ['lullbgnzzlpsf'], ['nfzgyzvqkkkhqwoc'], ['rseeagndpy'], ['jzfmflvqsujn'], ['zhemzjdbgmzhlojon'], ['bejmmyaivqmztwx'], ['dkrixwritnwanp'], ['phbenxhnsrceqgo'], ['lkwatqvqox'], ['sodavpratfhciez'], ['rdbebqamnqnrojlyc'], ['qpcjvbttxkfoarmbgaj'], ['buoybjwmnkca'], ['zhsxvqgydfzom'], ['ebqzwqwgczokyqlleqv'], ['zkblrdvzwzfcucl'], ['qhyokykhohqmbg'], ['ppivcuwwha'], ['tojlipluqsrqxmkl'], ['pmtxclojrsx'], ['ankmnlxytriytxuycfar'], ['vbxyasxabsgmm'], ['nvscnydxnomkbhzo'], ['qnfhjywwxbewrtwqz'], ['qcopkrvocdnbvok'], ['vmiimkfgpijybehf'], ['umivhawwroqbi'], ['ngtcnxdbfem'], ['rceydgerfqlcdjwqufp'], ['xiwqysuzxhrok'], ['pbiutcflmhcatu'], ['eigoipkfsygpkzdbfba'], ['pksrbhoobdcxuzztpry'], ['ufpgxygqut'], ['ruysajspjftawat'], ['htltipbsjyeyd'], ['nbdcbfdwridowau'], ['tmppfczqbbymxz'], ['uozrdjywqt'], ['hntgkfcaqplmvwigugcn'], ['fjvtaauddtbfxyx'], ['oueajaaouchg'], ['xjnoxinpwjxfkdhypha'], ['ydkfspcqqgoy'], ['zkhvcaficnsrpftfyacc'], ['uhvwguwpwp'], ['caqjqcvjknjpxvsh'], ['jgartypykutysuu'], ['kcjkljbqqqllnvvn'], ['cyhmtsgqyz'], ['kfznlgufze'], ['evvyotysuo'], ['bszxdxfofeuqowuul'], ['fxrorccues'], ['fjbitcryrirgche'], ['esmaafzdoathkfbr'], ['nyglikurdgsrxppfaaaq'], ['tbnxtryklhivaozovo'], ['ysapkxzhoyt'], ['szmyeptvbecdu'], ['aehjjihebqyikhgbfdv'], ['blxkxtkcpajpuyghrj'], ['yfctlzlvmg'], ['ltlczacgtm'], ['kenorgfepxvymu'], ['abcdefghijklmnopqrstuvwxyz'], ['encoded message with shift'], ['abcde'], ['vwxyz'], ['hello world'], ['the quick brown fox jumps over the lazy dog'], ['\u00e9\u00ee\u00f8\u00fc\u00f1'], [''], ['hello'], ['world'], ['the quick brown fox jumps over the abcdefghijklmnopqrstuvwxyzlazy dog'], ['\u00e9\u00ee\u00f8\u00fchello world\u00f1'], ['worlencoded message with shiftd'], ['abcdefghijklmnopqrsttuvwxyz'], ['worhello worldld'], ['worlencoded messagevwxyz with shift'], ['worlencoded messagevtwxyz with shift'], ['helleo'], ['abcdefghijklmnopqrsttupvwxyz'], ['the quick brown fox jumps olazy dog'], ['worello worl dld'], ['abcdefghijklmnopqrsttuvwxhello wo\u00e9\u00ee\u00f8\u00fchello world\u00f1rldyz'], ['hoello world'], ['\u00e9vwxyz\u00ee\u00f8\u00fc\u00f1'], ['worldd'], ['worlencoded messagetwxyz with shift'], ['abcdefghijklmnopqrsattupvwxyz'], ['abcworld\u00f1rldyz'], ['worello abcdew orl dld'], ['abcdefghijklmnopqrstuvwxyzhelleo'], ['abcwlorldabcdefghijklmnopqrsattupvwxyz\u00f1rldyz'], ['the quick brpown fox jumps olazy dog'], ['worello wor'], ['v'], ['worlencoded messagetwxyzt'], ['bdce'], ['worellco abcdew orl dld'], ['helllo'], ['worhello worrldld'], ['worello worl ldld'], ['abcdefghijklworlencoded messagetwxyz with shiftmnopqrsttuvwxyz'], ['abcwlorworello worl ldldghijkltmnopqrsattupvwxyz\u00f1rldyz'], ['worencoded message with shifworello worl ldldtld'], ['encoded message wsith sft'], ['abcwlorldabcdenfghijklmnopqrsattupvwxyz\u00f1rldyz'], ['vwxyhello woroldz'], ['worellrl dld'], ['hellllo'], ['worlencoded messagevwxyz with shivft'], ['abcdetfghijklworlencoded messagetwxyz with shiftmnopqrsttuvwxyz'], ['worellco abcdew orv dld'], ['wworlencoded messagevwxyz with shiftorldd'], ['abcdefghijklmnopqrstuworlencoded messagetwxyz with shiftvwxyzhelleo'], ['worlvwxyzcoded messagevtwxyz with shift'], ['\u00e9\u00ee\u00f8\u00fchello \u00f1world\u00f1'], ['encoded mwsith sft'], ['wworlenccoded messagevwxyz with shiftorldd'], ['vwxyyz'], ['encoded mwsith ssft'], ['worlthe quick brpown fox jumps olazy dogvwxyzcoded messagevtwxyz with shift'], ['worebcdew orl dld'], ['abcdefghijklmworlencoded messagevwxyz with shivftnopqrstuworlencoded messagetwxyz with shiftvwxyzhelleo'], ['worebcdew orl dworlencoded messagevwxyz with shivftld'], ['abc\u00f1world\u00f1rldyz'], ['vwxyzwxz'], ['abcwlorldabcdefghijklmnopqrsazttupvwxyz\u00f1rldyz'], ['worlencoded messagevwxyz wishifft'], ['worlddd'], ['worlthe quick brpown fox jumps olazy dogvwxyzcworlencoded messagevwxyz with shivftoded messagevtwxyz with shift'], ['worhdld'], ['worelllrl dld'], ['abcddefthe quick brpown fox jumps olazy dogghijklmnopqrsttuv\u00ee\u00f8\u00fchello world\u00f1rldyz'], ['abcdetfghijklworlencoded messagetwxyz with shiftmnopqrmsttuvwxyz'], ['abcdde'], ['worello worl lldldhelllo'], ['worellrdld'], ['encoded messagwworlencoded messagevwxyz wishifftsith sft'], ['abcede'], ['wworlencoded messagevwxgyz with shrldd'], ['worhello wold'], ['abcdefghijmnopqrstuvwxyz'], ['helabcwlorldabcdefghijklmnopqrsazttupvwxyz\u00f1rldyzlllo'], ['\u00e9\u00ee\u00f8\u00fchelwlo world\u00f1'], ['t fox jumps olazy dog'], ['abcddefthe quick brpown fox jumps olazy dogghijklm\u00e9\u00ee\u00f8\u00fchello \u00f1world\u00f1nopqrsttuv\u00ee\u00f8\u00fchello world\u00f1rldyz'], ['the quick brown fox jumps oulazy do\u00e9\u00ee\u00f8\u00fchello \u00f1world\u00f1g'], ['\u00e9\u00eeworhello worldld\u00f8\u00fc\u00f1'], ['abc\u00f1world\u00f1rldoyz'], ['the quick brown fox jumps over the abcdefghijklmnopqg'], ['the quick brown fox jumps overabcdefghijklmnopqrsattupvwxyz the abcdefghijklmnopqg'], ['abcwlorworlthe quick brpown fox jumps olazy dogvwxyzcworlencoded messagevwxyz with shivftoded messagevtwxyz with shiftldabcdefghijklmnopqrsazttupvwxyz\u00f1rldyz'], ['worlencoded message with shiftwd'], ['abcworhdldddefthe quick brpown fox jumps orlazy dogghijklmnopqrsttuv\u00ee\u00f8\u00fchello world\u00f1rldyz'], ['worlencoded messagetwxyz with worlencoded message with shiftwdshift'], ['habworlencoded messagetwxyz with worlencoded message with shiftwdshiftcdeellllo'], ['\u00e9\u00eeld\u00f1'], ['encoded message wsith worlencoded messagetwxyz with worlencoded message with shiftwdshiftsft'], ['worlencoded messagetwxyz witsh worlencoded message with shiftwdshift'], ['t fos olazy dog'], ['worleabcdefghijklmnopqrsttuvwxyzncoded message with shiftd'], ['thequickbrownfoxjumpsoverthelazydog'], ['1a2d3g4j5m6p9s8v7y0z'], ['thequickbrownfoxjumpsoverthelazydog123'], ['a'], ['xyz'], ['vwxyzabcdefghijklmnopqrstuvwxyz'], ['this is a test'], ['test input with spaces'], ['is'], ['abcdefghijklmnopqrstuvwxywithz'], ['xyzxyz'], ['vwxyzabcdefghijklmnopqrstuyvwqxyz'], ['thequickxyzbrownfoxjumpsoverthelazydog'], ['jumpsoverthelazydog123'], ['xyxyzxyz'], ['this'], ['itthis'], ['tihis'], ['tihisis'], ['with'], ['abcdefghijklmnopqrstuvwx'], ['1a28d3g4j5m6p9s8v7y0z'], ['input'], ['xyxzyzxyz'], ['1a28d3itthis6p9s8v7y0z'], ['itthis is a test'], ['thequickbrownfoxjumpsoverthelazydoeg'], ['xyxthequickbrownfoxjumpsoverthelazydoegyzxyz'], ['iput'], ['abcdefghijklmnopqrstuvwhx'], ['thequickxyzbrownfoxjumpsoverthitthiselaznydog'], ['wihth'], ['iputabcdefghijklmnopqrstuvwx'], ['wit'], ['abcdewithfghijklwithmnopqrsinputtuvwiputx'], ['spaces'], ['thequickxyzbwihthrownfoxjumpsoverthdog'], ['xyxzzxyz'], ['thequickxyzbrownfoxjumpsoverthelazthis is a testydog'], ['athequickbrownfoxjumpsoverthelazydoeg'], ['1a28d3ihtthis6p9s8v7y0z'], ['abcdefghiabcdefghijklmnopqrstuvwxyzjklmhx'], ['tiabcdefghijklmnopqrstuvwxywithzlshis'], ['vwxyzabcydefghijklmnopqrstuvwxyz'], ['iathequibrhownfoxjumpsoverthelazhydoeg'], ['abcdefghiabcdefbghijklmnopqrstuvwxyzjklmhx'], ['spvwxyzabcdefghijklmnopqrstuyvwqxyzaces'], ['thequickxyzbrownfoxjumpsoverthelazthis'], ['awhx'], ['abcdefghijklmnopqrinputstuvwx'], ['abcdefghiabcdefghijklmnobpqrstuvwxyzjklmhx'], ['thequickbrspvwxyzabcdefghijklmnopqrstuyvwqxyzacesownfoxjumpsoverthelazydoeg'], ['xyxzyyzxyz'], ['thequickxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegmpsoverthelazthis'], ['thequickxyzbrownfoxjumpsoverthelazyddog'], ['tiabcdespacesfghijklmnopqrstuvwxywithzlshis'], ['abcdewithfghivjklwithmnopqrsinputtuvpwiputx'], ['athequickbrolwnfoxjumpsoverthelazydoeg'], ['thequickxyzbrownfoexjumpsoverthelazthis'], ['iputabcdefghijklmnopqspvwxyzabcdefghijklmnopqrstuyvwqxyzacesrstuvwx'], ['awhwx'], ['abcdewithfghivjqrsinputtuvpwiputx'], ['t'], ['1a28d3itthis6p9s8z'], ['jumpsoazspacesydog123'], ['athezydoeg'], ['wihtjumpsoazspacesydog123h'], ['iathequibrhownfogxjumpsoverthelaxyxzyzxyzzhydoeg'], ['witth'], ['aabcdefghiabcdefbghijklmnopqr'], ['tiabcdefghijklmnopqrstuvwthequickxyzbrownfoxjumpsoverthelazyddogxywithzlshis'], ['theqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegmpsois'], ['athequickbrownfoxjumpsoverthelapzydoeg'], ['abcdefghixjklmnopqrstuvwx'], ['sxyzaces'], ['abcdefghiabcdefbghijklmnopqrstuvwxyzjklmawthequickxyzbwihthrownfoxjumpsoverthdoghwx'], ['sxthis is a testyzaces'], ['wihhth'], ['spacces'], ['tiabcdespaicesfghijklmnopqrstuvwxywithhzlshis'], ['tiasbcdespacesfghijklmnopqrstuvwxywithzlshis'], ['thequickxyzbrownfoxjumpsoverthelazthis is stydog'], ['test'], ['xthequickxyzbrownfoxjumpsoverthitthiselaznydogyz'], ['tiabcdefgihijklmnopqrstuvwxywithzlshis'], ['thxyxzyzxxyzyzequickbrownfoxjumpsoverthelazydoeg'], ['athezydoegt'], ['xvwxyzabcdefghijklmnopqrstuvwxyz'], ['thequickxyzbrownfoxjumpsoverthelazsthis is sabcdefghijklmnopqrstuvwxyzog'], ['abcdewithfghivjklwithmnopqrsinnputtuvpwiputx'], ['sabcdefghijklmnopqrstuvwxyzog'], ['theqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsois'], ['abcdewithtestfghijklwithmnopqrsituvwiputx'], ['spvwxyzabcdefghijklmnopqthequickbrownfoxjumpsoverthelazydog123rstuyvwqxyzaces'], ['iwitthtthis is a test'], ['spvwxyzaiathequibrhownfogxjumpsoverthelaxyxzyzxyzzhydoegbcdefghijklmnopqrstuyvwqxyzaces'], ['jumpsoaxyxthequickbrownfoxjumpsoverthelazydoegyzxyzzspthequickxyzbrownfoxjumpsoverthelazsthisacesydog123'], ['abjumpsoaxyxthequickbrownfoxjumpsoverthelazydoegyzxyzzspthequickxyzbrownfoxjumpsoverthelazsthisacesydog123cdefghijklmnopqrstuvwx'], ['thequickxyzbrownfoxjumpsoverthelazsthis'], ['wiiathequibrhownfogxjumpsoverthelaxyxzyzxyzzhydoegtth'], ['tthequickbrownfoxjumpsoverthelazydog123'], ['xvwcxyzabcdefghijklmnopqrstuvwxyz'], ['athequickbrownbfoxjumpsoverthelazydoeg'], ['athequictkbrownbfoxjumpsoverthelazydoeg'], ['itwitthtthis is a testspaces'], ['abcdefghijkathequickbrolwnfoxjumpsoverthelazydoeglmnopqrstuvwxyz'], ['thequickxyzbrownfoexjumpsoverthelazitthis is a testthis'], ['itthis tiabcdefghijklmnopqrstuvwxywithzlshisis a test'], ['jumpsoverthelazydo23'], ['wihtjumpsoazspacesydawhwxog123h'], ['asbcdefghijklmnopqrstuvwhx'], ['theqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuitathequibrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsois'], ['vwxyzabcdefghijklmnopqrstuyvwqxyisz'], ['abcdefghijklmqnopqrinputstuvwx'], ['doegyzxzyz'], ['wiiathequibrhownfogxjumpsoverthexlaxyxzyzxyzzhydoegtth'], ['vwxyzabcydefghijklmnoprs'], ['wihtjumpsoazspacesydawhwxo23h'], ['itwitthtthis'], ['testthis'], ['xythequickxyzbrownfoxjumpsoverthelazsthisxz'], ['xyabcdewithfghivjklwithmnopqrsinnputtuvpwiputxyyzxyz'], ['aethezydoegt'], ['watmhezydoegtheqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsois'], ['sxthis'], ['itestydognpwihtjumpsoazspacesydog1z23hut'], ['thequickxyzbrownfoexyabcdewithfghivjklwithmnopqrsinnputtuvpwiputxyyzxyzxjumpsoverthelazthis'], ['iathequibrhownfoxjumpsuoverthelazhydoeg'], ['thequickbrownfoxjumpsoverthelazydo3'], ['thequickxyzbrownfoxjuiathequthequickxyzbrownfoexyabcdewithfghivjklwithmnopqrsinnputtuvpwiputxyyzxyzxjumpsoverthelazthisibrhownfoxjumpsoverthelazhydoegmpsoverthelazthis'], ['thequickbrspvwxyzabctthequickbrownfoxjumpsoverthelazydog123defghijklmnopqrstuyvwqxyzacesownfoxjumpsoverthelazydoeg'], ['aeethezydspaccesoegt'], ['iwitthtthis'], ['abcdefghijkathequickbrolwnfoxjumpscoverthelazydoeglmnopqrstuvwxyz'], ['uiput'], ['tewatmhezydoegtheqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisst input with spaces'], ['athequickbrolwnfoxjumpswihtjumpsoazspacesydog123hoverthelazydoeg'], ['abcdefghiabcdefbghisjklmnopqrstuvwxyzjklmhx'], ['vwxyzabcydefgohijklmnopqrstuvwxyz'], ['hwihhthh'], ['thxyxzyzxxyzyzequickbrownfoxjumpsothequickxyzbrownfoxjumpsoverthitthiselaznydogverthelazydoeg'], ['sxyzacethequickxyzbrownfoxjumpsoverthelazsthiss'], ['theqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuitathhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsois'], ['testyzaces'], ['1a28d3itthis36p9s8z'], ['abcdefghijkavwxyzabcydefghijklmnoprsjumpsoverthelazydoeglmnopqrstuvwxyz'], ['tiabcdefghijklspvwxyzaiathequibrhownfogxjumpsoverthelaxyxzyzxyzzhydoegbcdefghijklmnopqrstuyvwqxyzacesmnopqrstuvwxywithzlshis'], ['thequickxyzbrownfoxjumpsovertheslazthis is a testydog'], ['wt'], ['test input with spacews'], ['testxthequickxyzbrownfoxjumpsoverthitthiselaznydogyzthis'], ['hwihhthhh'], ['thequickxyzbrthisownfoexjumpsoverthelazthis'], ['thequickxyzbrownfoxojumpsoveiputabcdefghijklmnopqspvwxyzabcdefghijklmnopqrstuyvwqxyzacesrstuvwxog'], ['aeetheezydspaccesoeitestydognpwithequickxyzbrownfoxjumpsoverthelazthishtjumpsoazspacesydog1z23hutgt'], ['vwyzabcdefghijklmnopqrstuyvwfqxyz'], ['spaccces'], ['vwxyzabcde'], ['splvwxyzabcdefghijklmnopqrstuycvwqxyzaces'], ['tihisabjumpsoaxyxthequickbrownfoxjumpsoverthelazydoegyzxyzzspthequickxyzbrownfoxjumpsoverthelazsthisacesydog123cdefghijklmnopqrstuvwx'], ['abcdewithfghivjklwithmnxvwcxyzabcdefghijklmnopqrstuvwxyzwiputx'], ['wihytjumpsoazspacesydawhwxo23h'], ['abcdefghiabcdefghijklmnopqrstuvwxcyzjklmhx'], ['xyxthequickvbrownfoxjumpsoverthelazydoegyzxyz'], ['theqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuitattihisabjumpsoaxyxthequickbrownfoxjumpsoverthelazydoegyzxyzzspthequickxyzbrownfoxjumpsoverthelazsthisacesydog123cdefghijklmnopqrsptuvwxhhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsois'], ['abcdefghijkavwxyzabcydefghijkvwxyz'], ['abcdefghithequickxyzbrownfoexjumpsoverthelazitthisvwxyz'], ['itithis is a test'], ['ttiabcdefgihijklmnopqrstuvwxywithzlshishis is a test'], ['ttimabcdefgihijklmnopqrstuvwxywithzlshishis is a test'], ['tabcdewithfghivjklwithmnopqrsinnputtuvpwiputx'], ['abcdefghiabcdefbghisjklmnopqrstu1a28d3ihtthis6p9s8v7y0zvwxyzjklathequickhwihhthhbrolwnfoxjumpsoverthelazydoegmhx'], ['tiabcdespacesfghijklmnopqrstulshis'], ['iputabcdefghijklmnopqrs1a28d3g4j5m6p9s8v7y0ztuvwx'], ['vwxyzabcdefghtestthisijklmnopqrstuyvwqxyisz'], ['xvxyz'], ['iputabcdefghijklmnopqrstuvx'], ['abcdefghiabcdefbghijklmnopqrstuvwxygzjklmhx'], ['abcttimabcdefgihijklmnopqrstuvwxywithzlshishis is a testdefghithequickxyzbrownfoexjumpsoverthelazitthisvwxyz'], ['ititsabcdefghijklmnopqrstuvwxyzoghis'], ['abcduthxyxzyzxxyzyzequickbrownfoxjumpsoverthelazydoegiputefghijkathequickbrolwnfoxjumpscoverthelazydoeglmnopqrstuvwxyz'], ['vwxyzabcdefghijkplmnopqrstuvwxyz'], ['thequickxyzbrownfoxojumpsoveiputabcdefghijklmnopqspvwxyzabcdefghijtihisklmnopqrstuyvwqxyzacesrstuvwxog'], ['abcdefghijkatlazydoeglmnopqrstuvwxyz'], ['tewatmhezydoegtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisst input with spaces'], ['ititsabcdefghijklmnopyqrstuvwxyzoghis'], ['abcdewithtestfghijklwithmnopqrsituvwipasbcdefghijklmnopqrstuvwhxutx'], ['tewatmhezydoegtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequifbrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisst input with spaces'], ['ththequickxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegmpsoverthelazthisis a test'], ['athequickbrownfoxjumpsoverthelazydoe'], ['abcdefghijklmqnopqrinathequickbrownfoxjumpsoverthelapzydoegputstuvwx'], ['tiabcdefghijklmnopqrstuvwxywithzlshisis'], ['iathelazhydoeg'], ['vwxyzabcdefghtestthisijklmnopqxrstuyvwqxyisz'], ['1a28da3itthis6p9s8v7yawhwxz'], ['1a28d3itthistestthis36p9s8z'], ['iwitthtthiwihtjumpsoazspacesydawhwxog12'], ['vwabcdewithtestfghijklwithmnopqrsituvwipasbcdefghijklmnopqrstuvwhxutxzabcydefgohijklmnopqrstuvwxyz'], ['abcdspacewsewithtestfghijklwithmnopqrsituvwiputx'], ['hwihh'], ['xyxthequickbrownfoxjumpsovevwxyzabcydefghijklmnoprsthelazydoegyzxyz'], ['iathelazzhydoeg'], ['jumlazydo23'], ['tewatmhezydoegtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequifbrhownfoexjumpsoverthelazhydoegxyxzyyzxyzmpsoisst input with spaces'], ['xvwthequickxyzbrownfoxjumpsoverthitthiselaznydogcxyzabcdefghijklmnopqrstuvwxyz'], ['tje'], ['jumpsoazspacesyzdog123'], ['aeetheezydspaccesoeitestydognpwithequickxyzbrownfoxjumpsoverthelazthishtjumpsoaszspacesydog1z23hutgt'], ['tabcdewithfghivjklwithmnopqrsinnputuvpwiputox'], ['jumpsoverthelazyedo23'], ['wiiathequibrhownfogxjumpsovaeethezydspaccesoegterthelaxyxzyzxyzzhydoegtth'], ['tiabcdespacesfdghijklmnopqrstulshis'], ['tiabcdefghijklmnopqrstuvwxywithzlshisttimabcdefgihijklmnopqrstuvwxywithzlshishis is a test'], ['iathequuibrhownfoxjumpsuoverthelazhydoeg'], ['xititsabcdefghijklmnopyqrstuvwxyzoghisyabcdewithfghivjklwithmnopqrabcdefghiabcdefghijklmnobpqrstuvwxyzjklmhxyyzxyz'], ['abcdefghijklmnopqrinputstuvvwx'], ['tiabcdespacesfghijklmnopqrstnuvwxywithzlshis'], ['tewatmhezydoegtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequifbrhownfoexjumpsozverthelazhydoegxyxzyyzxyzmpsoisst input with spaces'], ['tihisabjumpsoaxyxthequickbrownfoxjumpsoverthelazydoegyzxyzzspthequickxyzbrownfoxjumpsoverthelazsthisacesydog123cdefghijkitestydognpwihtjumpsoazspacesydog1z23hutlmnopqrstuvwx'], ['thequickbrownifoxjumpsoverthelazydog123'], ['hwihhwitthhhh'], ['iwitthtthiwihtjumpxyabcdewithfghivjklwithmnopqrsinnputtuvpwiputxyyzxyzsoazspacesydawhwxog12'], ['tiabcdespaceshfghijklmnopqrstulshis'], ['wihtjumpsoazspacesydog23h'], ['thequickbrownifoxjumpsoaverthelazydog123'], ['abcdefthequickxyzbrownfoxjuiathequthequickxyzbrownfoexyabcdewithfghivjklwithmnopqrsinnputtuvpwiputxyyzxyzxjumpsoverthelazthisibrhownfoxjumpsoverthelazhydoegmpsoverthelazthisghijklmnopqrinputtuvwx'], ['abcdspacewsewithtestfghijklwithmnopqrsituvwi1a28da3itthis6p9s8v7yawhwxzputx'], ['watmhezyxyxzyzxyzdoegtheqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibbrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsois'], ['sabcdefghijklmnopqrstuvwxytestyzaceszog'], ['aththequickbrownfoxjumpsoverthelazydog123equickbrownfoxjumpsoverthelazydoeg'], ['theqzuicktxyzbrownfoxjumpsovertheslazthis is a testydog'], ['athezyddoegt'], ['abcttimabcdefgihijklmnopqrstuvwxywithzlshishis is a testdefghithequickxyzbrownfoexjumpsotthisvwxyz'], ['thequickbrownfoxjumpsovertheilazydog123'], ['tewatmhezydoegtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverlthelazhydoegxyxzyyzxyzmpsoisst input with spaces'], ['vtuyvwqxyisz'], ['abcdefghijkathequiiathelazhydoeglwnfoxjumpscoverthelazydoeglmnopqrstuvwxyz'], ['thequtjeickxyzbrthisowsoverthelazthis'], ['thequicsabcdefghijklmnopqrstuvwxyzogkxyzbrownfoxjumpsovertheslazthis'], ['itithis'], ['abcdewithfghivjklwithiwitthtthismnopqrsinnputtuvpwiputx'], ['sxthtewatmhezydoegtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisst input with spacesis'], ['tst'], ['thequictestthiskbrspvwxyzabcdefghijeklmnopqrstuyvwqxyzacesownfoxjumpsoverthelazydoeg'], ['thequickbrownfoxjumpsoverthelazydospvwxyzaiathequibrhownfogxjumpsoverthelaxyxzyzxyzzhydoegbcdefghijklmnopqrstuyvwqxyzacesg123'], ['vwxjklmnoprs'], ['uiputt'], ['iwitthtthiwihtjumpsoazspacesaydawhwxog12'], ['twt'], ['vwxyzabcdevwqxyisz'], ['vwxyzathequickxyzbrownfoexjumpsoverthelazitthisbcdefghtestthisijklmnopqxrstuyvwqxyisz'], ['tewatmhezydoegtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequifborhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisst input with spaces'], ['testspaces'], ['itititsabcdefghijklmnopyqabcdewithfghivjklwithmnopqrsinnputtuvpwiputxrstuvwxyzoghiswitthis'], ['thequickbgrownifoxjumpsoverthelazydog123'], ['1a28abcdefghiabcdefbghijklmnopqrstuvwxyzjklmawthequickxyzbwihthrownfoxjumpsoverthdoghwxd3g4j5m6p9s8v7y0z'], ['xyxthequickbrownfoxjumpsovevathequickbrolwnfoxjumpswihtjumpsoazspacesydog123hoverthelazydoegwxyzabcydefghijklmnoprsthelazydoegyzxyz'], ['spac1a28abcdefghiabcdefbghijklmnopqrstuvwxyzjklmawthequickxyzbwihthrownfoxjumpsoverthdoghwxd3g4j5m6p9s8v7y0z'], ['thequickxyzbrowwihtjumpsoazspacesydog123hnfoxjumpsoverthitthiselaznydog'], ['abcdefghijkathequththequickxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegmpsoverthelazthisiszydoeglmnopqrstuvwxyz'], ['vwxyzabcydefghijklmnop1a28d3itthis6p9s8zrs'], ['vwx'], ['splvwxyzabvcdefghijklmnopqrstuycvwqxyzaces'], ['abcdefghiabthequickxyzbrowwihtjumpsoazspacesydog123hnfoxjumpsoverthitthiselaznydogcdefbghijklmnopqrstuvwxygzjklmhx'], ['1a28d3gs4j58m6p9s8v7y0z'], ['jumpsoaxyxthesquickbrownfoxjumpsoverthelazydoegyzxyzzspthequickxyzbrownfoxjumpsoverthelazsthisacesydog123'], ['tytewatmhezydoegtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequifbrhownfoexjumpsoverthelazhydoegxyxzyyzxyzmpsoisstestspaces'], ['wittth'], ['1a28d3ihtthis6p9s8v7yiwitthtthiwihtjumpsoazspacesydawhwxog120z'], ['tthequickbrownfoxjumpsovert1helazydog123'], ['abcdexyxzyyzxyzfghijklmnopqrinputstuvvwx'], ['bxvwxyzabcdefghijklmnopqrstuvwxyz'], ['tthequick1a28d3gs4j58m6p9s8v7y0zbrownfoxjumpsovert1helazydog123'], ['thequickbrownfoxjumpsoverthelazydospvwxyzaiathequibrhownfogxjumpsoverthelaxyxzyzxyzzhydoegbcdefghijklmnopqrstuyvwqxyzacesg12v3'], ['ttheqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuitathhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisydospvwxyzaiathequibrhownfogxjumpsoverthelaxyxzyzxyzzhydoegbcdefghijklmnopqrstuyvwqxyzacesg123'], ['spac1a28abcdefghiabcdefbghijklmnopqrsgtuvwxyzjklmawthequickxyzbwihthrownfoxjumpsoverthdoghwxd3g4j5m6p9s8v7y0z'], ['itthis eis a test'], ['vwxyzabcdefghtestthisijklmnoqxrstuyvwqxyisz'], ['abcdefghiabcdefbghisjklmnopqrstu1a28d3ihtthis6p9s8v7y0zvwxyzjklathequickhwihhthhbrolwnfoxjumpsoverthelazydoegmhxthxyxzyzxxyzyzequickbrownfoxjumpsoverthelazydoeg'], ['y1a28d3g4j5m6p9s8vv7y0z'], ['tewatmhezydoegtheqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequisst input with spaces'], ['xyxzyyzxtheqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuitathhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisyz'], ['xyxthefquickvbrownfoxjumthequickxyzbwihthrownfoxjumpsoverthdogzydoegyzxyz'], ['abcdefghidjklmnopqrstuvwx'], ['abjumpsoaxyxthequickbrownfoxjumpsoverthelazydoegyzxyzzspthequickxititsabcdefghijklmnopqrstuvwxyzoghisuvwx'], ['tewatmhezydoegtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverlthelazhydoegxyxzyyzxyzmpsoisst'], ['abcdewithfghivjklwithmpnopqrsinnputtuvpwiputx'], ['abcdefghiabthequickxyzbrowwihtjumpsoazspacesydog123hnfoxjumpsoverthitthisthequickxyzbrownfoxjumpsoverthitthiselaznydogelaznydogcdefbghijklmnopqrstuvwxygzjklmhx'], ['abcdefghiabthequickxyzbroywwihtjumpsoazspacesydog123hnfoxjumpsoverthitthiselaznydogcdefbghijklmnopqrstuvwxygzjklmhx'], ['w'], ['atheabcdefghijklmnopqrstuvwxzyddoegt'], ['tiabcdespacesfdnopqrstulshis'], ['thequickxyzbrownfoabcdefghijkathequiiathelazhydoeglwnfoxjumpscoverthelazydoeglmnopqrstuvwxyzxjumpsoverthitstthiselaznydog'], ['atheabcdefghijklmnopqrstuvwxzzyddoegt'], ['spvwxyzaiathequibrhownfogxjumpsoverthelaxyxzyzxyzzhydoegbcdefghijklmnopqrstuhyvwqxyzaces'], ['testydog'], ['tewatmhezydoegtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequifborhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisst input with hspaces'], ['1a28d3vwxyzabcdevwqxyiszg4j5m6p9s8v7y0z'], ['abcdefghijklmqnopqrinathequickbwx'], ['hspaces'], ['hsabcdefghiabcdefbghijklmnopqrstuvwxyzjklmawthequickxyzbwihthrownfoxjumpsoverthdoghwxpaces'], ['wiiaxthequibrhownfogxjumpsoverthexlaxyxzyzxyzzhydoegtth'], ['wihhh'], ['tewatmhezydoegtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisst'], ['owatmhezyxyxzyzxyzdoegtheqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibbrhownfoxjumpsoverthelazhydoegxyxzyyzxfyzmpsois'], ['watmhezydoegtheqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzskxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsois'], ['lthequickbrooxjumsoaverthelazydog12spacces3'], ['thequidoegbcdefghijklmnopqrstuyvwqxyzacesg12v3'], ['athzezyddoegt'], ['ttimabcdefgihijklmnopqrstuvwxywithzlshishis'], ['cdefghijklmnopqrrstuyvwqxyzaces'], ['jumpsovj58m6p9s8v7y0zbmpsovert1helazydog123thelazydog123'], ['abcdefghijkatlazydoeglm'], ['hwihhthhvwabcdewithtestfghijklwithmnopqrsituvwipasbcdefghijklmnopqrstuvwhxutxzabcydefgohijklmnopqrstuvwxyz'], ['tewatmheozydoegtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequifbrhownfoexjumpsoverthelazhydoegxyxzyyzxyzmpsoisst input with spaces'], ['ihtthis is a ttest'], ['tiasbcdespacesfghijklmnopqrstuvwxycwithzlshis'], ['thequickbrownifoxjumpsoverthelazydog1hwihh23'], ['txyxyzxyzestthis'], ['abcdefgxyxthequickbrownfoxjumpsovevathequickbrolwnfoxjumpswihtjumpsoazspacesydog123hoverthelazydoegwxyzabcydefghijklmnoprsthelazydoegyzxyzhixjklmnopqrstuvwx'], ['wiiathequibirhownfogxjumpsoverthexlaxyxzyzxyzzhydoegtth'], ['sxyzacethequrickxyzbrownfoxjumpmsoverthelazsthiss'], ['vtuyvwqxyiysplvwxyzabvcdefghijklmnopqrstuycvwqxyzacessz'], ['abcdefghiabcdefbghisjklmnopqrstu1a28d3ihtthis6p9s8v7y0zvwxyzjklathequickhwihhthhbrolwnfoxjumpsovazydoegmhx'], ['tj'], ['tthequickxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegmpsoverthelazthisj'], ['wiiatheqyuibirhownfogxjumpsoverthexlaxyxzyzxyzzhydoegtth'], ['abcdewixvwthequickxyzbrownfoxjumpsoverthitthiselaznydogcxyzabcdefghijklmnopqrstuvwxyzthfghivjqrsinputtuvpwiputx'], ['test with spacews'], ['xtewatmhezydoegtheqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequisstvxyz'], ['wihthequickxyzbrownfoxojumpsoveiputabcdefghijklmnopqspvwxyzabcdefgttestnopqrstuyvwqxyzacesrstuvwxogtjumpsoazspacesydawhwxo23h'], ['itabcdewithfghivjklwithmnopqrsinnputtuvjpwiputx'], ['thequickxyzbrownselaznydog'], ['witttth'], ['tthequickbrownfoxjumppsovert1helazydog123'], ['abcdewithfghivjklwithiwitthtthismnopqrsinnputtuvpwicputx'], ['owatmhezyxyxzyzxyzdoegtheqxyxthequickbrownfoxjumpsoverthelazydoelgyzxyzkxyzbrownfoxjuiathequibbrhownfoxjumpsoverthelazhydoegxyxzyyzxfyzmpsois'], ['aeetheezydspaccesoeitestydognpwitiabcdespacesfdghijklmnopqrstulshisthequickxyzbrownfoxjumpsoverthelazthishtjumpsoaszspacesydog1z23hutgt'], ['vtuyvwqxyiysplvwxyzabvcdefghijklmnopqrstuycvwq1a28d3ihtthis6p9s8v7y0zxyzacessz'], ['tabcdewithfghivjklwithmnopqrsinnputuvwpwiputox'], ['wihtjumpsoazsopacesydog23h'], ['abcdefghiabthequickxyzbrowwihtjumpsoazspacesydog123hnfoxjumpsoverthitthiselaznydogcdefbghijklmnopqrsotuvwxygzjklmhx'], ['ttiabcdefghijkownfoxjumpsoverthelazyddogxywithzlshis'], ['hwihhhh'], ['jumpsoazspacesyzdog123uiput'], ['testyxyxthequickvbrownfoxjumpsoverthelazgydoegyzxyzzacejumpsoaxyxthesquickbrownfoxjumpsoverthelazydoegyzxyzzspthequickxyzbrownfoxjumpsoverthelazsthisacesydog123s'], ['vwxyzabcdefghijklmnopqrstuyvabjumpsoaxyxthequickbrownfoxjumpsoverthelazydoegyzxyzzspthequickxititsabcdefghijklmnopqrstuvwxyzoghisuvwxwqxyisz'], ['1a28da3itthis6p9s8v'], ['iputabcdefghijklmnopqspvwxyzabcdefghijklmnopqrstuyvwqxyzitithis is a testacesrstuvwx'], ['vwxyzabcdefghijkplmnoathequictkbrownbfoxjumpsoverthelazydoegtuvwxyz'], ['1a28d3vwxyzabcdevwqxyiszg4j5m6p9s8vtewatmhezydoegtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverlthelazhydoegxyxzyyzxyzmpsoisst7y0z'], ['thequickbrspvwxyzabctthequicsplvwxyzabcdefghijklmnopqrstuycvwqxyzaceskbrownfoxjumpsoverthelazydog123defghijklmnopqrstuyvwqxyzacesownfoxjumpsoverthelazydoeg'], ['tthequickxyzbelazhydoegmpsoverthelazthisj'], ['tiabcdespaces1a28da3itthis6p9s8vnopqrstulsrhis'], ['atheabcdefghijklmnopqrstuvvwxyzathequickxyzbrownfoexjumpsoverthelazitthisbcdefghtestthisijklmnopqxrstuyvwqxyiszyddoegt'], ['vwxyzabcydefghijklmnoprwatmhezydoegtheqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoiss'], ['abcdefghijkathequickbrtuvwxyz'], ['abcdevwxyzabcdefghijkplmnoathequictkbrownbfoxjumpsoverthelazydoegtuvwxyzfghijklmnopqrstuvwhx'], ['tewatmhezydoegtheqxyxthequickbrowwnzfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverlthelazhydoegxyxzyyzxyzmpsoisst input with spaces'], ['itiititsabcdefghijklmnopyqabcdewithfghivjklwithmnopqrsinnputtuvpwiputxrjumpsoverthelazydo23stuvwxyzoghiswitthis'], ['abcdewithfghijklwithmnopqrsinputtuvpwiputx'], ['sixthis'], ['tthequickbrownfoxjumpsoverthelazydog12'], ['thxyxzwiiathequibrhownfogxjumpsovaeethezydspaccesoegterthelaxyxzyzxyzzhydoegtthickxyzbrownfoxjumpsoverthitthiselaznydogverthelazydoeg'], ['theqzuicktxyzbrownfoxjumpsovedog'], ['abcdefghithequickxyzbrownfoexjumpsovexyxyzxyzrthelazitthisvwxyz'], ['tiabcdefghijklmnopqrstuvwxywithzlshisttimabcdefgihijklmnopqrstuvwxywithzlshishis'], ['tliabcdespaicesfghijklmnopqrstuvwxywithhzlshis'], ['tewatmhezydoexgtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisst input with spaces'], ['tiabcdespaicesfghijklmnopqrstuvwxyxvwxyzabcdefghijklmnopqrstuvwxyzwithhzlshis'], ['vwxyzabcydefghijklmnoprwatmhezydoegtheqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoizss'], ['abcdefghijklmnopqrstuvwsixthisz'], ['abcdefghijkathequickbrolwnfoxjumepsoverthelazydoeglmnopqrstuvwxyz'], ['abcdefghithequickxyzbrownfoexjumpsovexyxyzxyzrthelazitthiosvwxyz'], ['testjumpsoazspacesyzdog123uiputyzaces'], ['iathequihbrhownfoxjumpsoverthelazhydoeg'], ['thequickbgrownifoxjumpshelazydog123'], ['xvxyabcdewithfghivjklwithiwitthtthismnopqrsinnputtuvpwiputxz'], ['lw'], ['thequickbrownfoxjumpsoverthelazydospvwxyzaiathequibrhownfogxjumpsoverthelaxyxzyzvwabcdewithtestfghijklwithmnopqrsituvwipasbcdefghijklmnopqrstuvwhxutxzabcydefgohijklmnopqrstuvwxyzxyzzhydoegbcdefghijklmnopqrstuyvwqxyzacesg12v3'], ['sxyzacethequrickxyzbrownfoxjvwxyzumpmsoverthelazsthiss'], ['vwxythequickbrownfoxjumpsoverthelazydospvwxyzaiathequibrhownfogxjumpsoverthelaxyxzyzvwabcdewithtestfghijklwithmnopqrsituvwipasbcdefghijklmnopqrstuvwhxutxzabcydefgohijklmnopqrstuvwxyzxyzzhydoegbcdefghijklmnopqrstuyvwqxyzacesg12v3thelazydoegyzxyzzspthequickxititsabcdefghijklmnopqrstuvwxyzoghisuvwxwqxyisz'], ['hvwxythequickbrownfoxjumpsoverthelazydospvwxyzaiathequibrhownfogxjumpsoverthelaxyxzyzvwabcdewithtestfghijklwithmnopqrsituvwipasbcdefghijklmnopqrstuvwhxutxzabcydefgohijklmnopqrstuvwxyzxyzzhydoegbcdefghijklmnopqrstuyvwqxyzacesg12v3thelazydoegyzxyzzspthequickxititsabcdefghijklmnopqrstuvwxyzoghisuvwxwqxyiszwihh'], ['athequickbrotewatmhezydoegtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequifborhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisst input with hspacesuwnfoxjumpsoverthelazydoeg'], ['thequickxyzbrownfoexjumpsoverthelathis'], ['tewatmhezydoegtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequifbrhownfoexjumpsozverthelazhydoegxyxzyyzxyzmpsoisst'], ['spvwxyzaiathequibrhownfogxjumpsoverthelaxytihisxzyzxyzzhyjdoegbcdefghijklmnopqrstuyvwqxyzaces'], ['iathequibrhownfoxjumpsuovertheliazhydoeg'], ['sxthies is a testyzaces'], ['owatmhezyxyxzyzxyzdoegtheqxyxthequickbrownfoxjumpsoverthelazydoelgyzxyzkxyzbrownfhoxjuiathequibbrhownfoxjumpsoverthelazhydoegxyxzyyzxfyzmpsois'], ['thequickxyzbrownfoxjuiathequthequickxyzbrownfoexyatewatmhezydoexgtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisst input with spacesbcdewithfghivjklwithmnopqrsinnputtuvpwiputxyyzxyzxjumpsoverthelazthisibrhownfoxjumpsoverthelazhydoegmpsoverthelazthis'], ['d'], ['thdequickbrownfoxjumpsoverthelazydog123'], ['itthis eis a '], ['owatmhezyxyxzyzxyzdoegtheqxyxthequickbrownfoxjumpsoverthelazydoelgyzxyzkxyzbsxyzacethequickxyzbrownfoxjumpsoverthelazsthissrhownfoxjumpsoverthelazhydoeis'], ['iathequibrhownfoxjumpsuoveortheliazhydoeg'], ['owatmhezyxyxzyzxyzdoegtheqxyxthequickbrownfoxsxthtewatmhezydoegtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisst input with spacesisjumpsoverthelazydoelgyzxyzkxyzbrownfhoxjuiathequibbrhownfoxjumpsoverthelazhydoegxyxzyyzxfyzmpsois'], ['hwiihhwitthhhh'], ['tthequick1a28d3gs4j58m6p9s8v7ry0zbrownfoxjumpsovert1helazydog123'], ['wihtjumpsoazspacesydawhwxo23'], ['aththequickbrownfoxjumpsove23equickbrownfoxjumpsoverthelazydoeg'], ['xythequickxryzbrownfoxjumpsoverthelazsthisxz'], ['athezydspac1a28abcdefghiabcdefbghijklmnopqrsgtuvwxyzjklmawthequickxyzbwihthrownfoxjumpsoverthdoghwxd3g4j5m6p9s8v7y0zoegt'], ['wihytjumpsoaspacesydawhwxo23h'], ['nvwxyzabcdefghijkpmnopqrstuvwxyz'], ['hwihthequickxyzbrownfoxjuiathequthequickxyzbrownfoexyatewatmhezydoexgtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisst input with spacesbcdewithfghivjklwithmnopqrsinnputtuvpwiputxyyzxyzxjumpsoverthelazthisibrhownfoxjumpsoverthelazhydoegmpsoverthelazthishthhh'], ['itwitthtthhsabcdefghiabcdefbghijklmnopqrstuvwxyzjklmawthequickxyzbwihthrownfoxjumpsoverthdoghwxpacesis'], ['ithwitthtthis is a testspaces'], ['theqzuicktxyzbrownfoxjumpsovertheslazthis'], ['vwxyzabcydefgohijklmnopqrstuvathezydoegyz'], ['jumpsoverthelaabcdefghijkavwxyzabcydefghijkvwxyz23'], ['xyxthequickbrownfoxjuiputtumpsovevwxyzabcydefghijklmnoprsthelazydoegyzxyz'], ['tewatmhezydoegtheqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisst'], ['theqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuitattihisabjumpsoaxyxthequickbrownfoxjumpsoverthelazydoegyzxyzzspthequickxyzbrownfoxjumpsoverthelazsthisacesydog123cdefghijklmnopqrsptuvwxhhownfoxjumpsoverths'], ['abcdspacewsewithtestfghijklwithmnopqrsituvwabcdewixvwthequickxyzbrownfoxjumpsoverthitthiselaznydogcxyzabcdefghijklmnopqrstuvwxyzthfghivjqrsinputtuvpwiputxiputx'], ['theqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuitattihisabjumpsoaxyxthequickquickxyzbrownfoxjumpsoverthelazsthisacesydog123cdefghijklmnopqrsptuvwxhhownfoxjumpsoverths'], ['xyxzyzxtiabcdespacesfghijklmnabcdefghiabthequickxyzbroywwihtjumpsoazspacesydog123hnfoxjumpsoverthitthiselaznydogcdefbghijklmnopqrstuvwxygzjklmhxqrstulshisyz'], ['1a28d3ihtthis6py0z'], ['xvxyabcdewithfghivjklwithiwitthtthismnopqrsinnputttuvpwiputxz'], ['aeetheabcdspacewsewithtestfghijklwithmnopqrsituvwi1a28da3itthis6p9s8v7yawhwxzputxezydspaccesoeitestydognpwithequickxyzbrownfoxjumpsoverthelazthishtjumpsoazspacesydog1z23hutgt'], ['thequickxyzbrownfottestxjuiathequthequickxyzbrownfoexyabcdewithfghivjklwithmnopqrsinnputtuvpwiputxxyxzyzxtiabcdespacesfghijklmnabcdefghiabthequickxyzbroywwihtjumpsoazspacesydog123hnfoxjumpsoverthitthiselaznydogcdefbghijklmnopqrstuvwxygzjklmhxqrstulshisyzyyzxyzxjumpsoverthelazthisibrhownfoxjumpsoverthelazhydoegmpsoverthelazthis'], ['tthequickbrovwxyzabcdefghtestthisijklmnopqxrstuyvwqxyiszwnfoxjumppsovert1helazydog123'], ['vwxyzabcdefghtestthisijklmnoqxrstuyvwqxyis'], ['swihthequickxyzbrownfoxojumpsoveiputabcdefghijklmnopqspvwxyzabcdefgttestnopqrstuyvwqxyzacesrstuvwxogtjumpsoazspacesydawhwxo23hxyzaces'], ['hwtiabcdespaceshfghijklmnopqrstulshishhthhh'], ['hhwihhthh'], ['athequickbrownfoxjumpsoverthelapzydjumpsoaxyxthequickbrownfoxjumpsoverthelazydoegyzxyzzspthequickxyzbrownfoxjumpsoverthelazsthisacesydogabcdefghijklmnopqrstuvwxyz123oeg'], ['abcdewithfghivjsxthisklwithmnopqrsinputtuvpwiputx'], ['witttthequickbrownifoxjumpsoaverthelazydog123h'], ['hvwxythequickbrownfoxjumpsoverthelazydospvwxyzaiathequibrhownfogxjumpsoverthelaxyxzyzvwabcdewithtestfghijklwithmnopqrsituvwipasbcdefghijklmnopqrstuvwhxutxzabcydefgohijklmnopqrstuvwxyvzxyzzhydoegbcdefghijklmnopqrstuyvwqxyzacesg12v3thelazydoegyzxyzzspthequickxititsabcdefghijklmnopqrstuvwxyzoghisuvwxwqxyiszwihh'], ['1a28ththequickxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegmpsoverthelazthisis a test3itthistestthis36p9s8z'], ['sxyezaces'], ['sxthies is a testyz'], ['xxyxyzxyz'], ['ithwittthtthis is a testspaces'], ['1a28abcdefghiabgcdefbghijklmnopqrstuvwxyzjklmawthequickxyzbwihthrownfoxjumpsoverthdoghwxd3g4j5m6p9s8v7y0z'], ['ttiabcdefgihijklmnopqrstuvwxywithzlshishis is a testvwxyzabcydefgwhijklmnopprs'], ['spvwxyzaiathequibrhowntuhyvwqxyzaces'], ['ititsabcdefghiqjklmnopqrstuvwxyzoghis'], ['abwithcdewithfghivjklwithiwitthtthismnopqrsinnputtuvpwiputx'], ['vwxyzabcydefghijklbmnop1ais6p9s8zrs'], ['iathequibrhownfoxjumpsuoownfoxjhumpszoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisst input with spaceseg'], ['abcdathequickbrotewatmhezydoegtheqxyxthequickbrowwnfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequifborhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisst input with hspacesuwnfoxjumpsoverthelazydoegefghijkatlazydoeglm'], ['itthxyzxyzis eis a '], ['sxyzacethequickxyziputabcdefghijklmnopqrstuvxthiss'], ['spacesis'], ['txthequickbrownfoxjumpsoverthelazydog12'], ['cesis'], ['wihtjumpsoavtuyvwqxyiysplvwxyzabvcdefghijklmnopqrstuycvwq1a28d3ihthequickxyzbrownfottestxjuiathequthequickxyzbrownfoexyabcdewithfghivjklwithmnopqrsinnputtuvpwiputxxyxzyzxtiabcdespacesfghijklmnabcdefghiabthequickxyzbroywwihtjumpsoazspacesydog123hnfoxjumpsoverthitthiselaznydogcdefbghijklmnopqrstuvwxygzjklmhxqrstulshisyzyyzxyzxjumpsoverthelazthisibrhownfoxjumpsoverthelazhydoegmpsoverthelazthiscesydawhwxog123h'], ['tiasbcdespacesfghijklmnopqthequickxyzbrownfoexjumpsoverthelazitthisrstuvwxycwithzlshis'], ['theqxyxthequickubrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuitattihisabjumpsoaxyxthequickbrownfoxjumpsoverthelazydoegyzxyzzspthequickxyzbrownfoxjumpsoverthelazsthisacesydog123cdefghijklmnopqrsptuvwxhhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsois'], [' itithis is a test'], ['sabcdefghijklmnopqrstuvwxytesceszog'], ['ttest'], ['abcdefghijkulmnopqrinputstuvwx'], ['abcdspacewsaewithtestfghijklwdithmnopqrsituvwiputx'], ['abcdewithfghivjklwithmpnoitthis tiabcdefghijklmnopqrstuvwxywithzlshisis a testpqrsinnputtuvpwiputx'], ['itwitthtthtis'], ['xyxzyzxtiabcdespacesfghijklmnabcdefghiabthequickxyzbroywwihtjumpsoazspacoesydog123hnfoxjumpsoverthitthiselaznydogcdefbghijklmnopqrstuvwxygzjklmhxqrstulshisyz'], ['tiabcdefgirstuvwxywithzlshis'], ['tiabcdespaceshvwxyzabcydefghijklmnoprwatmhezydoegtheqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoissfghijklmnopqrstulshis'], ['thequickbrownifozydog123'], ['abcdefghijkdlmnopqrstuvwsixthisz'], ['vabcdewithfghivjklwithmpnoitthis tiabcdefghijklmnopqrstuvwxywithzlshisis a testpqrsinnputtuvpwiputxwxyzabcydefghijklmnoprs'], ['aabcdefghvwxyzabcdefghijklmnopqrstuyvwqxyziabcdefbghijklmnopqbr'], ['thequickxyzbrowwihtjumpsoazspacesydog123hnfoxjitabcdewithfghivjklwithmnopqrsinnputtuvjpwiputxumpsoverthitthiselaznydog'], ['itths'], ['abcdefghijkdlmnopqirstuvwsixthisz'], ['wiiatheqyuibirhownfogxjumpsoverthexlaxyxzyzxypzzhydoegtth'], ['abcduthxyxzyzxxyzyzzequickbrownfoxjumpsoverthelazydoegiputefghijkathequickbrolwnfoxjumpscoverthelazydoeglmnopqrstuvwxyz'], ['iathequibrhownfogxjumpsoverthaelaxyxzyzxyzzhydoeg'], ['vwxyzabcydefgghijklmnopqrstuvwxyz'], ['tiasbcdespacesfghijklmnopqthequickxyzbhzlshis'], ['tiabcdespacesfdghijklmnopqrsttestydogulshis'], ['iwitthtthiwihtjumpsoazspacesaydawhabcdefghiabcdefbghijklmnopqrstuvwxygzjklmhxwxog12'], ['aeettiabcdespaicesfghijklmnopqrstuvwxyxvwxyzabcdefghijklmnopqrstuvwxyzwithhzlshisheezydspaccesoeitestydognpwithequickxyzbrownfoxjumpsoverthelazthishtjumpsoazspacesydog1z23hutgt'], ['wlw'], ['theqzuicktxyzbrownwihthequickxyzbrownfoxojumpsoveiputabcdefghijklmnopqspvwxyzabcdefgttestnopqrstuyvwqxyzacesrstuvwxogtjumpsoazspacesydawhwxo23hfoxjumpsovertheslazthis'], ['hwtiabcdespaceshfghijklmnopqrstuatheabcdefghijklmnopqrstuvwxzzyddoegtlshishhthhh'], ['theqyxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuitathhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsois'], ['1a28ththequickxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegmpsoverthelazthisis a test3itthis9testthis36p9s8z'], ['hwihhhthh'], ['abcdiefghijklmnopqrstuvwxabcdewithfghivjsxthisklwithmhnopqrsinputtuvpwiputxywithz'], ['iabcdspacewsewithtestfghijklwithmnopqrsituvwiputx'], ['abcdewithfghivjklwithmpnoitthis tiabcdefghijklmnopqrstuvxyxthequickbrownfoxjumpsovevwxyzabcydefghijklmnoprsthelazydoegyzxyzsis a testpqrsinnputtuvpwiputx'], ['xyxzyyzxthspvwxyzabcdefghijklmnopqrstuyvwqxyzaceseqxyxthequickbrownfoxjumhhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisyz'], ['tthequickbrownfoxjumpsovert1helazydo3'], ['thequickbrownfoxjumpabcdefghijkathequiiathelazhydoeglwnfoxjumpscoverthelazydoeglmnopqrstuvwxyzsovertheilazydog123'], ['tihisabjumpsoaxyxthequickbrownfoxjumpsoverthelazydoegyzxyzzspacesydog1z23hutlmnopqrstuvwx'], ['tcdefghijklmnopqrrstuyvwqxyzacesestyzaces'], ['1a28abcdefghiabgcdefb1a28ththequickxyzbrownfoxjuiathequibrhownfoxjumpsoverthelazhydoegmpsoverthelazthisisghijklmnopqrstuvwxyzjklmawthequickxyzbwihthrownfoxjumpsoverthdoghwxd3g4j5m6p9s8tihisisv7y0z'], ['xyxzyzxtiabcdespacesfghijklmnabcdefghiabthequickxyzbroywwihtjumpsoazspacoesydog123hnfoxjumpsoverthitthiselaznydogacdefbghijklmnopqrstuvwxygzjklmhxqrstulshisyz'], ['iwitthtthiwihtjumpsoaabcdefghiabthequickxyzbrowwihtjumpsoazspacesydog123hnfoxjumpsoverthitthiselaznydogcdefbghijklmnopqrstuvwxygzjklmhxzspacesaydawhwxog12'], ['tabcdefghijkathequickbrolwnfoxjumpsoverthelazydoeglmnopqrstuvwxyziabcdefgirstuvwxywithzlshis'], ['ttheqxyxthequickbrownfoxjumpsoverthelazydoegyzxyzkxyzbrownfoxjuityathhownfoxjumpsoverthelazhydoegxyxzyyzxyzmpsoisydospvwxyzaiathequibrhownfogxjumpsoverthelaxyxzyzxyzzhydoegbcdefghijklmnopqrstuyvwqxyzacesg123'], ['witttthequickbrownifoxjumpsodavterthelazydog123h'], ['abcdefghiabcdefbghijklmnopqrstuvwxyzjklmawthequickxyzbwihthrownfoxjumpsovertsabcdefghijklmnopqrstuvwxyzogoghwx'], ['itthis etthequickbrownfoxjumpsoverthelazydog12is a '], ['iputabcdefghijklmnopqrs1a28d3g4j5m6p9s8vxthequickxyzbrownfoxjumpsoverthitthiselaznydogyz7y0ztuvwx'], ['iitititsabcdefghijklmnopyqabcdewithfghivjklwithmnopqrsinnputtuvpwiputxrstuvwxyzoghiswitthiswitthtthiwihtjumpsoaabcdefghiabthequickxyzbrowwihtjumpsoazspacesydog123hnfoxjumpsoverthitthiselaznydogcdefbghijklmnopqrstuvwxygzjklmhxzspacesaydawhwxog12'], ['itestyddognpwihtjumpsoazspacesydog1z23hut'], ['athezydaeetheezydspaccesoeitestydognpwitiabcdespacesfdghijklmnopqrstulshisthequickxyzbrownfoxjumpsoverthelazthishtjumpsoaszspacesydog1z23hutgtoeg'], ['testyxyxthequickvbrownfoxjumpsoverthelazgydoegyzxyzzacejumpsoaxyxthesquickbrownfoxjumpsoveequickxyzbrownfoxjumpsoverthelazsthisacesydog123s'], ['jumpsoaxyxthequickbrownfoxjumpsoverthelazydoegyzxyzzspthequickxyzbrownfoxjuampsoverthelazsthisacesydog123'], ['abcdefghiijklmnopqrinputstuvwx'], ['sxyzacethequickxyzbrownfoxjumpsoverthelazsiputabcdefghijklmnopqspvwxyzabcdefghijklmnopqrstuyvwqxyzitithis is a testacesrstuvwxthiss'], ['abcdewithtestfghijklwithmnopqrsituvrwiputx'], ['tt'], ['thequickbrownfoxjumpsovverthelazydog'], ['1a2d3g4j'], ['aa'], ['ttt'], ['1a2d3g41a2d3g4jj'], ['testwith'], ['iis'], ['iis1a2d3g41a2d3g4jj'], ['stestwith'], ['2iis1a2d3g41a2d3g4jj'], ['tttt'], ['thazydog'], ['etehstwith'], ['sis'], ['thedquickbrownfoxjumpsoverthelazydog123'], ['thequickbrownfoxjumpsovverthelazydogiis'], ['1a2d3g41a2d3gj4jj'], ['testwith2iis1a2d3g41a2d3g4jj'], ['testwhith2iis1a2d3g41a2d3g4jj'], ['iis1iis1a2d3g41a2d3g4jja2d3g41a2d3g4iis'], ['siis'], ['testthequickbrownfoxjumpsoverthelazydog123with2iis1a2d3g41a2d3g4jj'], ['testth'], ['testt input with spaces'], ['thequickbrownfoxjumpsoverwith'], ['testwjhith2iis1a2d3g41a2d3g4jj'], ['iss'], ['txyzhequickbrownfoxjumpsoverwith'], ['iis1iis1a2d3g41a2d3g4jja2d3g41a2dj3g4iis'], ['speaces'], ['aiispeacs'], ['iis1iis1a2d3g41a2d3g4jja2d3g4tt1a2d3g4iis'], ['abcdefghijklmpqrstuvwxyz'], ['aaa'], ['testaath'], ['withthequickbrownfoxjumpsoverthelazydog123'], ['1a2d3g43j'], ['1a2d3g41a2d3ga4jj'], ['1a2d3gthequickbrownfoxjumpsovverthelazydogiis4j5m6p9s8yv7y0z'], ['ttestwithhazydog'], ['abcdefghijklmnopzqrstuvwxyz'], ['s2iis1da2d3g41a2id3g4jjis'], ['s2iis1da2d3g41a2i'], ['thequickbrownfoxojumpsovverthelazydog'], ['testwiththequickbrownfoxjuthis is a testmpsoverwith'], ['ttteswtwithhazydog'], ['vwxyzabcdefghijklmnopisqrstuvwxyz'], ['withthequickbrownfoxjumpsoverthelthequickbrownfoxojumpsovverthelazydogdog123'], ['agbcdefghijklmpqrstuvwxyz'], ['tth'], ['tttestwitaiispeacshhazydogttt'], ['thequickbrownfabcdefghijklmnop2iis1a2d3g41a2d3g4jjqrstuvwxyzoxojumpsovverthelazydog'], ['ttttt'], ['thequickbrownfoxjuelazydog'], ['aaaa'], ['thazydspacesog'], ['s2iis1dga2d3g41a2i'], ['testvwxyzabcdefghijklmnopisqrstuvwxyzwhith2iis1a2d3g41a2d3g4jj'], ['thtitths'], ['aitestwiththequickbrownfoxjuthisispeacs'], ['testwithhthequickbrownfoxjuthais'], ['iis1a2d3gttteswtwithhazydog41a2daiispeacsjj'], ['vwxyzabcdefghijkl mntest input with spacesopisqrstuvwxyz'], ['spacesopisqrstuvwxyz'], ['testmpsoverwith'], ['thattteswtwithhazydogzydog'], ['vwxyzabcdefghijvklmnopqrstuvwxyz'], ['thazydspacesoog'], ['iis1a2sd3gttteswtwithhazydog41a2dtestwiththequickbrownfoxjuthis is a testmpsoverwithaiispeacsjj'], ['tttteswtwithhazydog'], ['iis1a2tteswtwithhazydog41a2dtestwiththequickbrownfoxjuthis is ia testmpsoverwithaiispeacsjj'], ['withthequickbrownfoxjumpsoverthewlazydog123'], ['xy'], ['testmpsoverttth'], ['withthequickbrownfoxjumpsovertehelthequickbrownfoxojumpsovverthelazydogdog123'], ['vwxyzabcdevwxyzabcdefghijklmnopqrstuvwxyzfghijklmnopisqrstuvwxyz'], ['vwxyzabcdefghijklmnopisqrstitthsuvwxyz'], ['1a2d3g41a2d3gtestmpsoverwithj4jj'], ['theq1a2d3g4juickbrownfoxjumpsoverthelazydog'], ['yxy'], ['testwhith2iis1a2withthequickbrownfoxjumpsoverthelthequickbrownfoxojumpsovverthelazydogdog123dr3g41a2d3gf4jj'], ['1a2d3gthewiththequickbrownfoxjumpsoverthewlazydog123quickbrownfoxjumpsovverthelazydogiis4j5m6p9s8yv7y0z'], ['withthequickbrownfoxjumpsovertehtestwithelthequickbrownfoxojumpsovverthelazydogdog123'], ['etehtstwith'], ['iisjj'], ['vwxyzabcdevwxyzabcdefghijklmnopqrstuvwxytuvwxyzthedquickbrownfoxjumpsoverthelazydog123'], ['aitestwiththewquickbrownfoxjuthisispeacs'], ['abcdefghijklmsnopzqrstuvwxyz'], ['etehyxysswith'], ['sii'], ['iis1a2tteswtwithhazydog41a2dtestwiththequickbrownfoxjuthis is ia testmpsoverwiispeacsjj'], ['abcdefghijklmsnopzqrstuvwxyz1a2d3g4j'], ['vwxhyzabcdefghijklmnopisqrstitthsuvwxyz'], ['vwxyzabcdevwxyzabcdefghijklmnopqrstuvwxytuvwxyzthedquickbrownfoxjumpsoverthelazydokg123'], ['testthequickbrownfoxjumpsoverthelazydoog123with2iis1a2d3g41a2d3g4jj'], ['vwxyzabcdevwxyzabcdefghijklmnopqrstuvwxytuvwxyzthedquickbrownfoxjumpsoverthelazydokg123iiss'], ['si'], ['1a2d3g41thequickbrownfoxojumpsovverthelazydoga2d3gtestmpsoverwithj4jj'], ['tttiis1a2tteswtwithhazydog41a2dtestwiththequickbrownfoxjuthis'], ['ttttts2iis1dga2d3g411a2i'], ['1a2d3g'], ['thedquickbrownfoxjumpsoverthvwxyzabcdefghijkl'], ['iis1a2sttttd3gttteswtwithhazydog41a2dtestwiththequickbrownfoxjuthis is a testmpsoverwithaiispeacsjj'], ['ttttvwxyzabcdefghijkl mntest input with spacesopisqrstuvwxyzt'], ['ttteswtwiaitestwitvwxhyzabcdefghijklmnopisqrstitthsuvwxyzhthewquickbrownfoxjuthisispeacsydog'], ['s2diis1dga2d3g41a2i'], ['1a2d3g41thequickbrownfoxojumpsovverthelazydoga2d3gtestmpsoverwtheq1a2d3g4juickbrownfoxjumpsoverthelazydogithj4jj'], ['1a2dd3g41a2d3g4jj'], ['testvwxitthsyzabcdefghijklmnopisqrstuvwxyzwhith2iis1a2d3g41a2d3g4jj'], ['thequtestwjhith2iis1a2d3g41a2d3g4jjickbrownfoxjuelazydsog'], ['etethattteswtwithhazydogzydoghyxysswith'], ['wirththequickbrownfoxjumpsoverthelazydog123'], ['iiss'], ['s2diis1dg3a2d3g41a2i'], ['tttts2diis1dg3a2d3g41at2i'], ['vwxyzabcdevwxyzabcdefghijklmnopqrstuvwxytuvwxyzthedquickbrgownfroxjumpsoverthelazydog123'], ['testthequickbrownfoxjumpsoverthelazydoog123with2iis1a2d3g41da2d3g4jjaa'], ['aitestwiththewquickbrownfoxjutttacss'], ['t1a2d3gthequickbrownfoxjumpsovverthelazydogiis4j5m6p9s8yv7y0z'], ['abcdefghijklmnoptestmpsoverwithaiispeacsjjqrstuvwxyz'], ['abcdefgpzqrstuvwxyz'], ['ttteswtwithzhazydog'], ['vwxyzabcdevwxyzabcdefghijklmnopqrstuvwxytuvwxyzthedquickbrownsiisfoxjumpsoverthelazydog123'], ['spacesopisqrstuvwxetehtstwithyzt'], ['iisvwxhyzabcdefghijklmnopisqrstitthsuvwxyzs'], ['stestwittestwhith2iis1a2withthequickbrownfoxjumpsoverthelthequickbrownfoxojumpsovverthelazydogdog123dr3g41a2d3gf4jjh'], ['iistestwiththequickbrownfoxjuthis is a testmpsoverwith'], ['siisiistestwiththequickbrownfoxjuthis'], ['testwjhs1a2d3g41a2d3g4jjtestth'], ['testwithhthequickbrvwxyzabcdefghijvklmnopqrstuvwxyzownfoxjuthais'], ['htth'], ['i'], ['1ad3g43j'], ['2iis1a2d3ga41a2d3g4jj'], ['vwxyzabcdefghijksl mntest input with spacesopisqrstuvwxyz'], ['iis1iis1a2d3g4etehtstwith1a2d3g4jja2d3g4tt1a2dt3g4iis'], ['etethattteswtitthswithhazydogzydoghyxysswith'], ['1ad3g43ttttvwxyzabcdefghijkl mntest input with spacesopisqrstuvwxyztj'], ['vwxyzabcdevwxyzabcndefghijklmnopqrstuvwxyzfghijklmnopisqrstuvwxyz'], ['iisvwxhyzabcdefghijklmnopisqrstitthsuvwxwiththequickbrownfoxjumpsoverthelazydog123yzs'], ['iis1a2tteswtwithhazydog41a2dtestwiththequickbrownfoxjuthis'], ['iis1a2sd3gwttteswtwithhazydog41a2dtestwiththequickbrownfoxjuthis is a testmpsoverwithaiispeacsjj'], ['thazydmntestspacesoog'], ['ssii'], ['1a22d3g4j'], ['tiistestwiththequickbrownfoxjuthistest'], ['iis1a2d3gttteswtwithhazydoge41a2daiispeacsjj'], ['1a2d3g41a2d3g4j3j'], ['tttiis1a2tteswtawithhazydog41a2dtestwiththequickbrownfoxjuthis'], ['abcdefghijkwxyz'], ['1a2d3g41thequickbrownfoxojumpsovverthelazydoga2d3gtestmpsoverwtheq1a2d3g4jvwxyzabcdevwxyzabcdefghijklmnopqrstuvwxytuwvwxyzthedquickbrgownfroxjumpsoverthelazydog123uickbrownfoxjumpsoverthelazydogithj4jj'], ['iistestwiththequickbrownfoxjuthis'], ['thequickbrownfoxjumpsovverthelag'], ['iis1iis1a2d3g41a2d3g4jja2d3g41a2d3gg4iis'], ['teest'], ['testwjhith2iis1a2d3g41thequickbrownfoxjumpsovverthelazydogiisjj'], ['iisvwxhyzabcdefghijklmnopisqrstitthsuvwxwiththequickbrownfoxjumpsoverthelazydmog123yzs'], ['thequickbrownfoxjumpsovverthelazydogiiis'], ['ittvwxyzabcdevwxyzabcdefghijklmnopqrstuvwxytuvwxyzthedquickbrownfoxjumpsovertheldazydog123hs'], ['ttteswtwithvwxyzabcdefghijkl mntest input with spacesopisqrstuvwxyzzhazydog'], ['vwxyzabcdevwxyzabcdefghijklmnopqrstuvwxytuvwxyzthedqitthsuickbrgownfroxjumpsoveazydog123'], ['etethattteswtwithhazydogzydoghythequickbrownfoxojumpsovverthelazydogysswith'], ['iisvwxhyzabcdefthisghijklmnopisqrstitthsuvwxyzs'], ['etehtstwtith'], ['1a2d3'], ['abcdefghijkwxyzz'], ['thazydmnt1a2d3estspacesoog'], ['thequickbrownfoxjuelazydgog'], ['aiistestwjhs1a2d3g41a2d3g4jjtestthpeacs'], ['ii'], ['testwiththequickbrownfoxjuthis'], ['txyzhequickbrownfoxjumpspoverwith'], ['1a2d3etethattteswtwithhazydogzydoghyxysswith'], ['testwhith2iis1a2d3g41a2d3g4j1j'], ['1a2dttttvwxyzabcdefghijkl mntest input with spacesopisqrstuvwxyzt3'], ['iitestt input with spacessjwj'], ['1a2dd3'], ['iis1a2d3g41a2dg3g4jj'], ['iiisjj'], ['aisispeacs'], ['eteshtstwtith'], ['testthequiiistestwiththequickbrownfoxjuthis is a testmpsoverwithckbrownfoa2d3g4jj'], ['ttttts2iis1dga2d3g411a2ixy'], ['ttttts2iis1idga2d3g411a2i'], ['ttestthequickbrownfoxjumpsoverthelazydoog123with2iis1a2d3g41da2d3g4jjaatt'], ['testwhith2iis1a2withthequickbrownfoxjumpsoverthelthequickbrownfoxojumpsovverthelazydogdog1g41a2d3gf4jj'], ['testwithhthequickbrvwxyzabcdefghijvklmnopqrstuvwxoxjuthais'], ['withthequickbrownfoxjumpsoverthewlazydog1iisvwxhyzabcdeftesttthisghijklmnopisqrstitthsuvwxyzs23'], ['vwxyzabcdevwxyzabcdefghijklmnopqrstuvwxytuvwxownfoxjumpsoverthelazydokg123iiss'], ['abcdefghijklmnopestmpsoverwithaiispeacsjjqrstuvwxyz'], ['1a2d3g41thequickbrowniis1a2sd3gttteswtwithhazydog41a2dtestwiththequickbrownfoxjuthis is a testmpsoverwithaiispeacsjjfoxojumpsovverthelazydoga2d3gtestmpsoverwithj4jj'], ['etethattteswtitthswithhazydogzydwith'], ['thequickbrownvwxyzabcdefghijvklmnopqrstuvwxyzfoxjumxpsiistestwiththequickbrownfoxjuthisovverthelag'], ['iis1a2sd3gwttteswtwithhazydog41a2dtestwiththequickbrownfoxjuthis'], ['vwxyzabcdefghietehyxysswithntest input with spacesopisqrstuvwxyz'], ['testwjhs1a2td3g41a2d3g4jjth'], ['testwhith2iis1a2withthequickbrownfoxjumpsoverthelthequickbrownfoxojumpsovverthelazydogdog123dr3getethattteswtitthswithhazydogzydoghyxysswith41a2d3gf4jj'], ['thedquickbrownfoxjumpsovexrthvwxyzabcdefghijkl'], ['tttiis1a2tteswtwithhazydog41a2dtestwiththequickbrownfoxjis'], ['iisvwxhyzabcdefghijklmnopisqrstitthsuvwxyzzs'], ['thequickbrownvwxyzabcdefghijvklmnopqrstuvwxyzfoxjumxpsiistestwiththequickbrownfoxjuthisovverthelarg'], ['etethatttes1a2d3gthewiththequickbrownfoxjumpsoverthewlazydog123quickbrownfoxjumpsovverthelazydogiis4j5m6p9s8yv7y0zoghyxysswith'], ['tttttest'], ['spacesopisqrstuvwxetehtstwithyzt1a2d3g4j'], ['aitestwiththewquickiabrownfoxjuthisispeacs'], ['speacses'], ['abcdefegpzqrstuvwxyz'], ['1a2dttttvwxyzabcdefghijkl'], ['yxyy'], ['iiis'], ['thazytdmntestspacesoog'], ['wirthvwxyzabcdefghijksl mntest input with spacesopisqrstuvwxyzthequickbrownfoxjumpsoverthelaezydog123'], ['tvwxyzabcdefghabcdefghijklmpqrstuvwxyzijkl'], ['tttttt'], ['testwjhs1a2d3gt41a2d3g4jjtestth'], ['spacesopisqrstuvwxyzthequickbrownfoxjumpsoverthelaezydog123'], ['abcdefghijktletethattteswtwithhazydogzydoghyxysswithmsnopzqrstuvwxyz'], ['yetethattteswtitthswithhazydogzydoghyxysswithxxyy'], ['spacesopisqrstuvwxyzthequickbrownfoxejumpsoverthelaezydog123'], ['testwhith2iis1a2withthequickbrownfoxjumpsoverthelthequickbrownfoxojumpsovverthelazydogdog123dr3getethattteswtitth1a2d3g41thequickbrownfoxojumpsovverthelazydoga2d3gtestmpsoverwithj4jjogzydoghyxysswith41a2d3gf4jj'], ['tethazydmntestspacesoogst'], ['aitewirthvwxyzabcdefghijksl mntest input with spacesopisqrstuvwxyzthequickbrownfoxjumpsoverthelaezydog123stwiththequickbrownfoxjuthnisispeacs'], ['1a2d3g41a2dvwxyzabcdevwxyzabcdefghijklmnopqrstuvrwxyzfghijklmnopisqrstuvwxyzg4j3j'], ['tttts2diis1dg3a2d3g41ayxyyt2i'], ['vwyxyzabcdefghijklmnopisqrstitthsuvwxyz'], ['1a2d3g433j'], ['thtitthstestwhith2iis1a2d3g41a2d34g4j1j'], ['withthequickbrownfoxjumpswiththequickbrownfoxjumpsoverthewlazydog123overthelazydog123'], ['speacstestes'], ['aiiiaspeacs'], ['tettttttstwjhs1a2tdth'], ['ttteswtzhazydog'], ['thtitthstestwhhith2iis1a2d3g41a2d34g4j1j'], ['theequickbrownfoxjumpsovvertthelag'], ['iisvwxttteswtwithzhazydoghyzabcdefghijklmnopisqrstitthsuvwxyzs'], ['thequickbrownfoxjumpvverthelaazydog'], ['abcdefghijklmnoptestmpsoverwithaiispemacsjjqrstuvwxyz'], ['etethattteswtitthswithhazydogzydogetehstwithhyxysswith'], ['iisvwxttteswtwithzhazydoghyzabcdefghijklmnopisqrstwitthsuvwxyzs'], ['thequickbrownvwxyzabcdefghijvklmnopqrstuvwxyzfoxjumxpsiistettttvwxyzabcdefghijklthisovverthelag'], ['aisithedquickbrownfoxjumpsovexrthvwxyzabcdefghijklspeacs'], ['etehyxyss1ad3g43ttttvwxyzabcdefghijklh'], ['iisvwxhyzabcdefth1a2dd3isghijklmnopisqrstitthsuvwxyzs'], ['iis1a2sd3gttteswtwithhazydog41a2dtestwiththequickbrownfoxjuthis is a testmpsoverwithaiispeacsjj3g43j'], ['tttteswtwithdog'], ['iis1iis1a2d3g41a2d3g4jja2d3vwxyzabcdefghijklmnopisqrstitthsuvwxyzg41a2d3g4iis'], ['1a2dttttestwhith2iis1a2d3g41a2d3g4j1jtvwxyzabcdefghijkl mntest itestmpsoverwiispeacsjjnput with spacesopisqrstuvwxyzt3'], ['aisithedquickbrownfoxjumpsovexrththequickbrownfoxjumpvverthelaazydogvwxyzabcdefghijklspeacs'], ['vwxyzabcdefghijksl mmntest input with spacesopisqrstuvwxyz'], ['hkijklh'], ['thequickbrownfosxjumpsovverthelazydogiiis'], ['theq1a2d3g4juickbrownfoxvjumpsoverthelazydog'], ['vwxyzaabcdefgttteswtwithvwxyzabcdefghijklhijkwxyzzitthsuickbrgownfroxjumpsoveazydog123'], ['s2iis1da2d23g41a2i'], ['tttestmpsovertttht'], ['etethattteswtwithhazydogzydoghyxyssgwith'], ['iistestwiththequickbrownfoxjuthis is a testmpsosverwith'], ['abcdefghiejkwxyzz'], ['tthequickbrownfoxjumpsovverthelazydogiis'], ['testwhith2testiis1a2d3g41a2d3g4jj'], ['abcdefghijklmnoptestmpsoverwithaiispeaecsjjqrstuvwxyz'], ['iis1a2tteswtwithhaacsjj'], ['tttiis1a2tteswtwithhazydog41a2dtestwiththequickbrownfoxjistest'], ['thequickbrownfoxjumpsovertheladog'], ['vvwxhyzabcdefghijklmnopisqrstitthsuvwxyz'], ['aaaaa'], ['htttestmpsoverttthth'], ['abcdefghijklmsnttttvwxyzabcdefghijklopzqrstuvwxyz1a2d3g4j'], ['tttestt'], ['testwhith2testiis1a2d3g41stestwitha2d3g4jj'], ['this its a test'], ['ttttvwxyzabcdefghijkl'], ['spacesopisabcdefghijklmnoptestmpsoverwithaiispeacsjjqrstuvwxyzqrstuvwxyz'], ['spacesopisabcdefghijklmnoptestmpsoverwqithaiispeacsjjqrstuvwxyzqrstuvwxyz'], ['theq1a2d3g4jcuickbrownfoxjumpsoverthelazydog'], ['1a2d3gthewiththequickbrownfoxjumpsoverthewlazydog123quickbrownfoxjumpsovverthelazydo1a22d3g4jgiis4j5m6p9s8yv7y0z'], ['thequickbrownfabcdefghijklmnop2iis1a2d3g41a2od3g4jjqrstuvwxyzoxojumpsovverthelazydog'], ['aisispitthseacs'], ['aisithedquickbrownfoxjumpsovexrthvvwxyzabcdevwxyzabcdefghijklmnopqrstuvwxytuvwxyzthedquickbrownsiisfoxjumpsoverthelazydog123wxyzabcdefghijklspeacs'], ['1a2d3g41thequickbrownfoxojumpsovverthelazydoga2d3gtestmpsoverwtheq1a2d3g4jvwxyzabcdevwxyzabcdefghijklmnopqrstuvwumpsoverthelazydogithj4jj'], ['withthequickbrownfoxjumpsovertehtestwithelthequickbrownfoxojumpsovve1a2d3g41a2d3ga4jjrthelazydogdog123'], ['1iis1a2sttttd3gttteswttwithhazydogaitestwiththewquickiabrownfoxjuthisispeacssd3g43j'], ['tttttettttst'], ['thestwhhith2iis1a2d3g41a2d34g4j1j'], ['1ad3g433j'], ['1a3j'], ['spacesaopisqrstuvwxyzthequickbrownfoxejumpsoverthelaezydogsii123'], ['abcdefghijktletethattteswtwithhazydogzydoghyxyssithmsnopzqrstuvwxyz'], ['withthequickbrwnfoxjumpsovertehelthequickbrownfoxojumpsovverthelazydogdog123'], ['iisvwxhypzabcdefth1a2dd3isghijklmnopisqrstitthsuvwxyzs'], ['itestmpsoverwiispeacsjjnput'], ['1a2d3ttestthequickbrownfoxjumpsoverthelazydoog123with2iis1a2d3g41da2d3g4jjaattg41a2d3g4j3j'], ['ttteswtwithzha'], ['itttiis1a2tteswtawithhazydog41a2dtestwiththequickbrownfoxjuthis'], ['etethatttes1a2d3gthewiththequickbrownfoxjaumpsoverthewlazydog123quickbrownfoxjumpsovverthelazyd1ogiis4j5m6p9s8yv7y0zoghyxysswith'], ['etethattteswtitthswithhazydogzydoghyxysswithazytdmntestspacesoogth'], ['spacesaopisqrstuvwxyzthequickbrownfoxejumteestpsoverthelaezydogsii123'], ['iisvwxhyzabcdefghijklmnopisqrstitthsuvwxyziis'], ['aisithedquickbrownfoxjumpsovexrththequickbrownfoxjumpvverthabcdefghithequickbrownfabcdefghijklmnop2iis1a2d3g41a2d3g4jjqrstuvwxyzoxojumpsovverthelazydogjklspeacs'], ['iis1a2d3g41a2dg4jj'], ['1a2d3etethattteswtwithhazydabcdefghijkwxyz'], ['vwxyzabtestwhith2iis1a2withthequickbrownfoxjumpsoverthelthequickbrownfoxojumpsovverthelazydogdog123dr3getethattteswtitthswithhazydogzydoghyxysswith41a2d3gf4jjxownfoxjumpsoverthelazydokg123iiss'], ['abcdmefghijklmpqrstuvwxyz'], ['1a2d34g4j'], ['1a2d3etethattteswtwithhazdogzydoghyxysswith'], ['agbcdefgvwxyzabcdefghijksl mntest input with spacesopisqrstuvwxyzhijklmpqrstuvwxyz'], ['yetethattteswtitthswithhazydogizydoghyxysswithxxyy'], ['spacesopisqrstuvwxyzzhazydog'], ['iis1a2sd3gttteswtwithhazydog41a2dtestwiththequickbrownfoxjuthis'], ['xxy'], ['s2diis1dga2d3g4testwhith2iis1a2withthequickbrownfoxjumpsoverthelthequickbrownfoxojumpsovverthelazydogdog123dr3g41a2d3gf4jj11ad3g43ja2i'], ['testwithtttttettttst'], ['y'], ['spa1cesaopisqrstuvwxyzthequickbrownfoxejumteestpsoverthelaezydogsii123'], ['iis1a2sttttd3gttteswtwithhazydog41a2dtestwiththequickbrownfuoxjuthis is a testmpsover'], ['withthequickbrownfoxjumpswiththequickbrownfoxjumpsoverthetttteswtwithdogwlazydog123overthelazydog123'], ['iijklmnos'], ['1a2d3g41a2dvwxyzabcdevwxyzaqbcdefghijklmnopqrstuvrwxyzfghijklmnopisqrstuvwxyzg4j3j'], ['thvwxyzabcdevwxyzabcdefghijklmnopqrstuvwxytuvwxyzthedquickbrgownfroxjumpsoverthelazydog123equickbrownfoxjumpsovverthelazydog'], ['steistwith'], ['s2iis1da2d3g41a2ixy'], ['abcdefghijklmsnopzqrstuvwxmyzttt'], ['thequickbriisvwxhyzabcdefghijklmnopisqrstitthsuvwxyzzsverthelag'], ['withthequickbrownfoxjumpswiththequickbrvwxyzabcdefghijkl ymntest input with spacesopisqrstuvwxyzownfoxjumpsoverthetttteswtwithdogwlazydog123overthelazydog123'], ['iisvwxhyzabcdefthisughijklmnopisqrstitthsuvwxyzs'], ['thestwhhi1a2d3g4jth2iia2d3g41a2d34g4j1j'], ['tetestt input with spacest'], ['1a'], ['1a2d3g41thequickbrownfoxojumpsovverthelazydoga2d3gtestmpsoverwtheq1a2d3g4juickbrtttownfoxjumpsoverthelazydogithj4jj'], ['ttsi1a2d3ttestthequickbrownfoxjumpsoverthelazydoog123with2iis1a1a2d3etethattteswtwithhazydogzydoghyxysswith3jistteswtwithhazydog'], ['spacesopisqrstuvwxetehtzstwithyzt1a2d3g4j'], ['withthequickbrownfoxjumpswiththequickbrvwxyzabcdefghijkl'], ['yxytttttsswith'], ['withthequickbrownfoxjumpsoverthelazydoqg123'], ['testwhith2iis1etehtstwitha2withthequickbrownfoxjumpsoverthelthequickbrownfoxojumpsovverthelazydogdog1g41a2d3gf4jj'], ['xxx'], ['ttttvwxyzaiissbcdefghijkl'], ['spaes'], ['iisitestmpsoverwiispeacsjjnput1iis1a2d3g41a2d3g4jja2d3g41a2d3gg4iis'], ['iisvwsxhyzabcdefthisughijthequickmpsovverthelagklmnopisqrstitthsuvwxyzs'], ['iissvwxhyzabcdefth1a2dd3isghijklmnopisqrstitthsuvwxyzs'], ['abcdefghijklmpqrstus2iis1dga2d3g41a2i'], ['etethattteswtwithhazydogzydoghythequicownfoxojumpsovverthelazydogysswith'], ['itttiis1a2tteswtawithhazydog41a2dtestwiththequickbrowfoxjuthis'], ['aiiiaspiisvwxhyzabcdefth1a2dd3isghijklmnopisqrstitthsuvwxyzseacs'], ['withthequickbrownfoxjumtettttttstwjhs1a2tdthequickbrownfoxjumpsoverthettttteswtwithdogwlazydog123overthelazydog123'], ['theq1a2d3g4jcuickbrownfoxjumepsoverthelazydo1a2d3g433jg'], ['iistttteswtwithdogs'], ['vwxyzabcdefghijksl mntest input with sxyz'], ['aetethattteswtwithwithhazydogzydoghythequicownfoxojumpsovverthelazydogysswithbcdefghijklmpqrstuvwxyz'], ['aisithedquickbrownfoxjuvwxyzabcdefghijklmnopisqrstitthsuvwxyzmpsovexrthvwxyzabcdefghijklspeacs'], ['spacesopisqrstuvwxyzth1equickbrownfoxjumpsoverthelaezydog123stwiththequickbrownfoxjuthnisispeacs'], ['spacesopisqabcdefghijklmnoptestmpsoverwithaiispeyzqrstuvwxyz'], ['etethattteswtwithhazydogzydoghyxyssgwitth'], ['theequickbrowrnfoxjumpsovvertthelag'], ['spacesopisqrstuvwxyzth1equickbrownfoxjumpsoverthelaezydog123stwiththequickbrownfoxjuthhnisispeacs'], ['abcdefghijvwxyzabcdefghietehyxysswithntest input with spacesopisqrstuvwxyzklmpqrstuvwxyz'], ['1a2d3g41thequickbrownfoxojumpsovverthelazydoga2d3gtestmpsoverwtheq1a2d3g4jvwxyzabcdevwxyzabcdefghijklmnopqrstuvtttttestwumpsoverthelazydogithj4jj'], ['htttestmpsoverttthtttttts2iis1idga2d3g411a2ih'], ['ttttts2itis1dga2d3g411a2ixy'], ['spacesopisqrstuvwxyzt'], ['ittttiis1a2tteswtawithhazydog41a2dtestwiththequickbrownfoxjuthis'], ['thestwhhi1a2d3g4jth2iia2d3g41a2d34g14j1j'], ['s2iis1da2d3g41a22id3g4jjis'], ['vwxyzabcdevwxyzabcdefghijklmnopqrsetuvwxytuvwxyzthedqitthsuickbrgownfroxjumpsoveazydog123'], ['1a2d3g41thequickbrowniis1a2sd3gttteswtwithhazydog4stmpsoverwithaiispeacsjjfoxojumpsovverthelazydoga2d3gtestmpsoverwithj4jj'], ['tvwxpyzabcdefghabcdefghijklmpqrstuvwxyzijkl'], ['iis1a2sd3gwttteswtazydog41a2dtestwiththequickbrownfoxjuthis'], ['etethattteswtwithhazydogzydoghyxysswiththequickbrownvwxyzabcdefghijvklmnopqrstuvwxyzfoxjuelazydog'], ['tvwxyzabcdefghabcdefghijklmpqrstuvwxyzijklspeacsses'], ['iis1iiyetethattteswtitthswithhazydogzydoghyxysswithxxyys1a2d3g4etehtstwith1a2d3jg4jja2d3g4tt1a2dt3g4iis'], ['sithequickbrownfabcdefghijklmnop2iis1a2d3g41a2d3g4jjqrstuvwxyzoxojumpsovverthelazydogs'], ['vwxyzabcdefghijkl mntest input with spacetttsopisqrstuvwxyz'], ['theq1a2d3g4jcuickbrownfoxjumepsov1a2d3g43jerthelazydo1a2d3g433jg'], ['iistestwiththequickbroewnfoxjuthis is a testmpsosverwith'], ['etethattteswtwithhazyddoghyxyssgwitth'], ['vwxyzabcdevwxyzabcdeftheq1a2d3g4jcuickbrownfoxjumepsov1a2d3g43jerthelazydo1a2d3g433jgqrstuvwxytuvwxownfoxjumpsoverthelaiiss'], ['etethattteswtwithhazydogzydxxyoghyxyssgwitth'], ['iits1a2tteswtwithhaacsjj'], ['testmpsosverwith'], ['iis1iis1a2d3g41a2d3g4jja2disqrstitthsuvwxyzg41a2d3g4iis'], ['ia'], ['vwxyzabcdefghijkl s2iis1da2d3g41a2ixymntest input with spacesopisqrstuvwxyz'], ['1a2d3gthequickbabcdefghijklmnopqrstuvwxyzrownfoxjumpsovverthelazydogiis4j5m6p9s8yv7y0z'], ['1a2d3gthequickbabcdefghijklmnopqrstuvwxyzrownfoxjumpsovverthelazydogiis4j5m6paisithedquickbrownfoxjuvwxyzabcdefghijklmnopisqrstitthsuvwxyzmpsovexrthvwxyzabcdefghijklspeacsaisithedquickbrownfoxjumpsovexrthvwxyzabcdefghijklspeacs9s8yv7y0z'], ['1a2d3g41a2dvwxyzabcdevwxyzabcdefghijklmnopqrstuvrwxyzfghijklmn4j3j'], ['1a3jj'], ['tethazydmntesiisjjtspacesoogst'], ['etethattteswtitthsswithhazydogzydoghyxysswithazytdmntestspacesoogth'], ['iistestwiththequickbrownfoxspeacstestesjuthis is a testmpsosverwith'], ['vwxyzabcdefghijklmnopisqqrstitthsuvwxyz'], ['qthequiis1iis1a2d3g41a2d3g4jja2disqrstitthsuvwxyzg41a2d3g4iisag']]\n    results = ['oviotrxxkefdhngjokun', 'xgfiasyijs', 'youltjnvjqywvawb', 'yaaequofijcua', 'wmcfyibary', 'vhgxmkjmtfhbwcuxokic', 'jiywbjehdkrjjauztmc', 'vojwdrtddomqcpxou', 'ftmuevrjibgawnzyhchf', 'znpnbkbivzga', 'ewjxwxldpbbqziwl', 'uhhxphgegs', 'dwmxmprpfbzoq', 'ixwzgxaelxbsncoydu', 'sbxxfueyak', 'bugiheetosctyqt', 'usgsaaggevq', 'fazvwvzhjcsqjyjmq', 'fyaxzqugnrffhfrymxmb', 'jsomhcteewh', 'wqcazowqmnkhzkylp', 'gtxlfivrpkjtykqz', 'qhwenasqobefsbqvupw', 'aafnfcxmeidsffydqvhx', 'unujrsxtafntvdjq', 'hxlliejkrvm', 'yfbguhvxxqegmepcbhk', 'cpyiedavfhvfivdreeju', 'kkdizzyixh', 'iciikztvuq', 'cabmgjhbkiujhgoh', 'jkzexsmifad', 'xvjxevazmiwurfzmfepg', 'pzimbnxvhfx', 'iokcwhaptcbsszfmc', 'gpggwbiuugkna', 'iaubtuqlfffclrjx', 'mnzzvbiykt', 'euahagqlnpei', 'uczhueywbhucgjeji', 'wzehhtvdqlhuors', 'yfmdsrmdoirvik', 'kcwziscinmxzlbj', 'gfrvolqljs', 'njyvqkmvoacxdzu', 'mywzwlvhilimjegtx', 'lkxeqwoosfajvmhwbve', 'wpjtwerhifxv', 'ucnsqlbtyaujh', 'zwlurlrbxujftlggzlq', 'ufwgmyquruaxpxg', 'lctjftfcjclhwb', 'kkdqxprrcv', 'ojegdkgplnmlshfg', 'khosxgjemns', 'vifhigstomdtosptxavm', 'qwstvnsvwnbhh', 'iqnxitysijhfwcuj', 'liacetrrswzrmorlu', 'lxjkfmqjxyiwqjf', 'qhddhfabkdetwzca', 'phdqcvrrmjlwd', 'iboxisywazh', 'mxztybzmalgxyerlpak', 'sdrltnpuscmjf', 'kwdpoxaghcxvop', 'zdbjdkfantbkfuywawv', 'kfnmwcjjwyxspuuokmt', 'pakbstblpo', 'mptnvenkeaovrvo', 'cogodkwnetzty', 'iwyxwayrmdyjrvp', 'ohkkaxulwwthsu', 'pjumyetrlo', 'ciobfaxvlkghqrdbpbxi', 'aeqovvpyyowasts', 'jpzvevvjpxcb', 'seijsdikresafyctkcv', 'tyfankxllbjt', 'ufcqxvadxinmkaoatvxx', 'pcqrbprkrk', 'xvlelxqefieksqnc', 'ebvmotktfpotnpp', 'fxefgewlllggiqqi', 'xtchonbltu', 'fauigbpauz', 'zqqtjotnpj', 'wnusysajazpljrppg', 'asmjmxxpzn', 'aewdoxmtmdmbxcz', 'znhvvauyjvocfawm', 'itbgdfpmybnmskkavvvl', 'owisomtfgcdqvjujqj', 'tnvkfsucjto', 'nuhtzkoqwzxyp', 'vzceedczwltdfcbwayq', 'wgsfsofxkvekptbcme', 'taxogugqhb', 'gogxuvxboh', 'fzijmbazksqthp', 'vwxyzabcdefghijklmnopqrstu', 'zixjyzyihznnvbzirdocincdao', 'vwxyz', 'qrstu', 'czggjirjmgy', 'oczilpdxfiwmjriiajsiephknijqzmioczigvutiyjb', 'bgquj', '', 'czggj', 'rjmgy', 'oczilpdxfiwmjriiajsiephknijqzmioczivwxyzabcdefghijklmnopqrstugvutiyjb', 'bgquczggjirjmgyj', 'rjmgzixjyzyihznnvbzirdocincdaoy', 'vwxyzabcdefghijklmnoopqrstu', 'rjmczggjirjmgygy', 'rjmgzixjyzyihznnvbzqrstuirdocincdao', 'rjmgzixjyzyihznnvbzqorstuirdocincdao', 'czggzj', 'vwxyzabcdefghijklmnoopkqrstu', 'oczilpdxfiwmjriiajsiephknijgvutiyjb', 'rjmzggjirjmgiygy', 'vwxyzabcdefghijklmnoopqrsczggjirjbgquczggjirjmgyjmgytu', 'cjzggjirjmgy', 'bqrstugquj', 'rjmgyy', 'rjmgzixjyzyihznnvbzorstuirdocincdao', 'vwxyzabcdefghijklmnvoopkqrstu', 'vwxrjmgyjmgytu', 'rjmzggjivwxyzrijmgiygy', 'vwxyzabcdefghijklmnopqrstuczggzj', 'vwxrgjmgyvwxyzabcdefghijklmnvoopkqrstujmgytu', 'oczilpdxfiwmkjriiajsiephknijgvutiyjb', 'rjmzggjirjm', 'q', 'rjmgzixjyzyihznnvbzorstuo', 'wyxz', 'rjmzggxjivwxyzrijmgiygy', 'czgggj', 'rjmczggjirjmmgygy', 'rjmzggjirjmgigygy', 'vwxyzabcdefgrjmgzixjyzyihznnvbzorstuirdocincdaohijklmnoopqrstu', 'vwxrgjmrjmzggjirjmgigygybcdefgohijklmnvoopkqrstujmgytu', 'rjmzixjyzyihznnvbzirdocincdarjmzggjirjmgigygyogy', 'zixjyzyihznnvbzirndocinao', 'vwxrgjmgyvwxyziabcdefghijklmnvoopkqrstujmgytu', 'qrstczggjirjmjgyu', 'rjmzggmgiygy', 'czggggj', 'rjmgzixjyzyihznnvbzqrstuirdocincdqao', 'vwxyzoabcdefgrjmgzixjyzyihznnvbzorstuirdocincdaohijklmnoopqrstu', 'rjmzggxjivwxyzrijmqiygy', 'rrjmgzixjyzyihznnvbzqrstuirdocincdaojmgyy', 'vwxyzabcdefghijklmnoprjmgzixjyzyihznnvbzorstuirdocincdaoqrstuczggzj', 'rjmgqrstuxjyzyihznnvbzqorstuirdocincdao', 'bgquczggjijrjmgyj', 'zixjyzyihrndocinao', 'rrjmgzixxjyzyihznnvbzqrstuirdocincdaojmgyy', 'qrsttu', 'zixjyzyihrndocinnao', 'rjmgoczilpdxfiwmkjriiajsiephknijgvutiyjbqrstuxjyzyihznnvbzqorstuirdocincdao', 'rjmzwxyzrijmgiygy', 'vwxyzabcdefghrjmgzixjyzyihznnvbzqrstuirdocincdqaoijklmnoprjmgzixjyzyihznnvbzorstuirdocincdaoqrstuczggzj', 'rjmzwxyzrijmgiyrjmgzixjyzyihznnvbzqrstuirdocincdqaogy', 'vwxjrjmgyjmgytu', 'qrstursu', 'vwxrgjmgyvwxyzabcdefghijklmnvuoopkqrstujmgytu', 'rjmgzixjyzyihznnvbzqrstuirdncdaao', 'rjmgyyy', 'rjmgoczilpdxfiwmkjriiajsiephknijgvutiyjbqrstuxrjmgzixjyzyihznnvbzqrstuirdocincdqaojyzyihznnvbzqorstuirdocincdao', 'rjmcygy', 'rjmzgggmgiygy', 'vwxyyzaoczilpdxfiwmkjriiajsiephknijgvutiyjbbcdefghijklmnoopqgquczggjirjmgyjmgytu', 'vwxyzoabcdefgrjmgzixjyzyihznnvbzorstuirdocincdaohijklmhnoopqrstu', 'vwxyyz', 'rjmzggjirjmgiggygyczgggj', 'rjmzggmygy', 'zixjyzyihznnvbrrjmgzixjyzyihznnvbzqrstuirdncdaaondocinao', 'vwxzyz', 'rrjmgzixjyzyihznnvbzqrsbtuirdocincmgyy', 'rjmczggjirjgy', 'vwxyzabcdehijklmnopqrstu', 'czgvwxrgjmgyvwxyzabcdefghijklmnvuoopkqrstujmgytugggj', 'bgquczgrgjirjmgyj', 'oiajsiephknijgvutiyjb', 'vwxyyzaoczilpdxfiwmkjriiajsiephknijgvutiyjbbcdefghbgquczggjijrjmgyjijklmnoopqgquczggjirjmgyjmgytu', 'oczilpdxfiwmjriiajsiephknijpgvutiyjbgquczggjijrjmgyjb', 'bgrjmczggjirjmgygyquj', 'vwxjrjmgyjmgyjtu', 'oczilpdxfiwmjriiajsiephknijqzmioczivwxyzabcdefghijklb', 'oczilpdxfiwmjriiajsiephknijqzmvwxyzabcdefghijklmnvoopkqrstuioczivwxyzabcdefghijklb', 'vwxrgjmrjmgoczilpdxfiwmkjriiajsiephknijgvutiyjbqrstuxrjmgzixjyzyihznnvbzqrstuirdocincdqaojyzyihznnvbzqorstuirdocincdaogyvwxyzabcdefghijklmnvuoopkqrstujmgytu', 'rjmgzixjyzyihznnvbzirdocincdaory', 'vwxrjmcygyyyzaoczilpdxfiwmkjriiajsiephknijmgvutiyjbbcdefghijklmnoopqgquczggjirjmgyjmgytu', 'rjmgzixjyzyihznnvbzorstuirdocirjmgzixjyzyihznnvbzirdocincdaoryncdao', 'cvwrjmgzixjyzyihznnvbzorstuirdocirjmgzixjyzyihznnvbzirdocincdaoryncdaoxyzzggggj', 'bggyj', 'zixjyzyihznnvbzirndocirjmgzixjyzyihznnvbzorstuirdocirjmgzixjyzyihznnvbzirdocincdaoryncdaonao', 'rjmgzixjyzyihznnvbzorstuirdoncirjmgzixjyzyihznnvbzirdocincdaoryncdao', 'oiajnijgvutiyjb', 'rjmgzvwxyzabcdefghijklmnoopqrstuixjyzyihznnvbzirdocincdaoy', 'oczlpdxfwmjriajsephknjqzmoczgvutyjb', 'zvaybbcedhekhngqftyu', 'oczlpdxfwmjriajsephknjqzmoczgvutyjbzab', 'v', 'stu', 'qrstuvwxyzabcdefghijklmnopqrstu', 'ocdnidniviozno', 'oznoidikpoirdocinkvxzn', 'dn', 'vwxyzabcdefghijklmnopqrstrdocu', 'stustu', 'qrstuvwxyzabcdefghijklmnoptqrlstu', 'oczlpdxfstuwmjriajsephknjqzmoczgvutyjb', 'ephknjqzmoczgvutyjbzab', 'ststustu', 'ocdn', 'doocdn', 'odcdn', 'odcdndn', 'rdoc', 'vwxyzabcdefghijklmnopqrs', 'zvagybbcedhekhngqftyu', 'dikpo', 'stsutustu', 'zvagybdoocdnekhngqftyu', 'doocdnidniviozno', 'oczlpdxfwmjriajsephknjqzmoczgvutyjzb', 'stsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustu', 'dkpo', 'vwxyzabcdefghijklmnopqrcs', 'oczlpdxfstuwmjriajsephknjqzmocdoocdnzgvuityjb', 'rdcoc', 'dkpovwxyzabcdefghijklmnopqrs', 'rdo', 'vwxyzrdocabcdefgrdochijklmndikpoopqrdkpos', 'nkvxzn', 'oczlpdxfstuwrdcocmjriajsephknjqzmocyjb', 'stsuustu', 'oczlpdxfstuwmjriajsephknjqzmoczgvuocdnidnivioznotyjb', 'voczlpdxfwmjriajsephknjqzmoczgvutyjzb', 'zvagybdcoocdnekhngqftyu', 'vwxyzabcdvwxyzabcdefghijklmnopqrstuefghcs', 'odvwxyzabcdefghijklmnopqrstrdocugncdn', 'qrstuvwxtyzabcdefghijklmnopqrstu', 'dvoczlpdwmcjriajsephknjqzmoczgvuctyjzb', 'vwxyzabcdvwxyzawbcdefghijklmnopqrstuefghcs', 'nkqrstuvwxyzabcdefghijklmnoptqrlstuvxzn', 'oczlpdxfstuwmjriajsephknjqzmoczgvuocdn', 'vrcs', 'vwxyzabcdefghijklmdikponopqrs', 'vwxyzabcdvwxyzabcdefghijwklmnopqrstuefghcs', 'oczlpdxfwmnkqrstuvwxyzabcdefghijklmnoptqrlstuvxznjriajsephknjqzmoczgvutyjzb', 'stsuttustu', 'oczlpdxfstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbhknjqzmoczgvuocdn', 'oczlpdxfstuwmjriajsephknjqzmoczgvutyyjb', 'odvwxyznkvxznabcdefghijklmnopqrstrdocugncdn', 'vwxyzrdocabcdqefgrdochijklmndikpoopqkrdkpos', 'voczlpdxfwmjgriajsephknjqzmoczgvutyjzb', 'oczlpdxfstuwmjriajzsephknjqzmoczgvuocdn', 'dkpovwxyzabcdefghijklnkqrstuvwxyzabcdefghijklmnoptqrlstuvxznmnopqrs', 'vrcrs', 'vwxyzrdocabcdqelmndikpoopqkrdkpos', 'o', 'zvagybdoocdnekhngu', 'ephknjvunkvxzntyjbzab', 'voczutyjzb', 'rdcoephknjvunkvxzntyjbzabc', 'dvoczlpdwmcjriajbsephknjqzmoczgvstsutustuuctyjzb', 'rdooc', 'vvwxyzabcdvwxyzawbcdefghijklm', 'odvwxyzabcdefghijklmnopqroczlpdxfstuwmjriajsephknjqzmoczgvutyyjbstrdocugncdn', 'oczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbhknjdn', 'voczlpdxfwmjriajsephknjqzmoczgvkutyjzb', 'vwxyzabcdsefghijklmnopqrs', 'nstuvxzn', 'vwxyzabcdvwxyzawbcdefghijklmnopqrstuefghvroczlpdxfstuwrdcocmjriajsephknjqzmocyjbcrs', 'nsocdnidnivioznotuvxzn', 'rdccoc', 'nkvxxzn', 'odvwxyznkvdxznabcdefghijklmnopqrstrdoccugncdn', 'odvnwxyznkvxznabcdefghijklmnopqrstrdocugncdn', 'oczlpdxfstuwmjriajsephknjqzmoczgvuocdnidninotyjb', 'ozno', 'soczlpdxfstuwmjriajsephknjqzmocdoocdnzgvuityjbtu', 'odvwxyzabdcdefghijklmnopqrstrdocugncdn', 'ocstsutusstutuzlpdxfwmjriajsephknjqzmoczgvutyjzb', 'voczutyjzbo', 'sqrstuvwxyzabcdefghijklmnopqrstu', 'oczlpdxfstuwmjriajsephknjqzmoczgvunocdnidninvwxyzabcdefghijklmnopqrstujb', 'vwxyzrdocabcdqefgrdochijklmndiikpoopqkrdkpos', 'nvwxyzabcdefghijklmnopqrstujb', 'oczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdn', 'vwxyzrdocoznoabcdefgrdochijklmndopqrdkpos', 'nkqrstuvwxyzabcdefghijkloczlpdxfwmjriajsephknjqzmoczgvutyjbzabmnoptqrlstuvxzn', 'drdoocoocdnidniviozno', 'nkqrstuvdvoczlpdwmcjriajbsephknjqzmoczgvstsutustuuctyjzbwxyzabcdefghijklmnoptqrlstuvxzn', 'ephknjvstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustuunkoczlpdxfstuwmjriajsephknjqzmoczgvunocdnvxzntyjbzab', 'vwephknjvstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustuunkoczlpdxfstuwmjriajsephknjqzmoczgvunocdnvxzntyjbzabxyzabcdefghijklmnopqrs', 'oczlpdxfstuwmjriajsephknjqzmoczgvunocdn', 'rddvoczlpdwmcjriajbsephknjqzmoczgvstsutustuuctyjzbooc', 'ooczlpdxfwmjriajsephknjqzmoczgvutyjbzab', 'sqrxstuvwxyzabcdefghijklmnopqrstu', 'voczlpdxfwmjriwajsephknjqzmoczgvutyjzb', 'voczlpdxofwmjriwajsephknjqzmoczgvutyjzb', 'dordoocoocdnidnivioznonkvxzn', 'vwxyzabcdefvoczlpdxfwmjgriajsephknjqzmoczgvutyjzbghijklmnopqrstu', 'oczlpdxfstuwmjriajzsephknjqzmoczgvudoocdnidnivioznoocdn', 'doocdniodvwxyzabcdefghijklmnopqrstrdocugncdndniviozno', 'ephknjqzmoczgvutyjab', 'rdcoephknjvunkvxzntyvrcrsjbzabc', 'vnwxyzabcdefghijklmnopqrcs', 'oczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdovoczlpdwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdn', 'qrstuvwxyzabcdefghijklmnoptqrlstdnu', 'vwxyzabcdefghlijklmdikponopqrs', 'yjzbtusutu', 'rddvoczlpdwmcjriajbsephknjqzmoczsgvstsutustuuctyjzbooc', 'qrstuvwxtyzabcdefghijkmn', 'rdcoephknjvunkvxzntyvrcrsjabc', 'dordoocoocdn', 'oznoocdn', 'stoczlpdxfstuwmjriajsephknjqzmoczgvunocdnsu', 'stvwxyzrdocabcdqefgrdochijklmndiikpoopqkrdkposttustu', 'vzoczutyjzbo', 'rvohczutyjzboczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdn', 'nsocdn', 'doznotyjbikrdcoephknjvunkvxzntyjbzuabcpo', 'oczlpdxfstuwmjriajzstvwxyzrdocabcdqefgrdochijklmndiikpoopqkrdkposttustusephknjqzmoczgvuocdn', 'dvoczlpdwmcjriajsephknpjqzmoczgvuctyjzb', 'oczlpdxfwmjriajsephknjqzmoczgvutyjb', 'oczlpdxfstuwmjriajsepdvoczlpoczlpdxfstuwmjriajzstvwxyzrdocabcdqefgrdochijklmndiikpoopqkrdkposttustusephknjqzmoczgvuocdndwmcjriajsephknjqzmoczgvuctyjzbhknjqzmoczgvuocdn', 'oczlpdxfwmnkqrstuvwxooczlpdxfwmjriajsephknjqzmoczgvutyjbzabyzabcdefghijklmnoptqrlstuvxznjriajsephknjqzmoczgvutyjzb', 'vzzoczutynkvxxznjzbo', 'drdoocoocdn', 'vwxyzabcdefvoczlpdxfwmjgriajsephknxjqzmoczgvutyjzbghijklmnopqrstu', 'pdkpo', 'ozrvohczutyjzboczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocinkvxzn', 'voczlpdxfwmjgriajsephknrdcoephknjvunkvxzntyjbzabcjqzmoczgvutyjzb', 'vwxyzabcdvwxyzawbcdnefghijklmnopqrstuefghcs', 'qrstuvwxtyzabjcdefghijklmnopqrstu', 'crdccocc', 'ocstsutusstutuzlpdxfwmjriajsephknjoczlpdxfstuwmjriajsephknjqzmocdoocdnzgvuityjbqzmoczgvutyjzb', 'nstuvxzoczlpdxfstuwmjriajsephknjqzmoczgvunocdnn', 'oczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdovoccjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdn', 'oznotuvxzn', 'zvagybdoocdnbekhngu', 'vwxyzabcdefvqrstuvwxtyzabcdefghijkmnephknjqzmoczgvutyjzbghijklmnopqrstu', 'odvwxyzabcdefgnkqrstuvdvoczlpdwmcjriajbsephknjqzmoczgvstsutustuuctyjzbwxyzabcdefghijklmnoptqrlstuvxznhijklmnopqrstrdocugncdn', 'oczlpdxfstuwmjriajsephknjqzmoczngvuocdnidnivioznotyjb', 'ro', 'oznoidikpoirdocinkvxzrn', 'oznosoczlpdxfstuwmjriajsephknjqzmocdoocdnzgvuityjbtuocdn', 'crdccoccc', 'oczlpdxfstuwmocdnjriajzsephknjqzmoczgvuocdn', 'oczlpdxfstuwmjriajsjephknjqzdkpovwxyzabcdefghijklnkqrstuvwxyzabcdefghijklmnoptqrlstuvxznmnopqrsjb', 'vzzoczzutynkvxxznjzdoznotyjbikrdoczlpdxfstuwmjriajsephknjqzmoczgvuocdncoephknjvunkvxzntyjbzuabcpobo', 'qrtuvwxyzabcdefghijklmnoptqralstu', 'nkvxxxzn', 'qrstuvwxyz', 'nkgqrstuvwxyzabcdefghijklmnoptxqrlstuvxzn', 'odcdnvwephknjvstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustuunkoczlpdxfstuwmjriajsephknjqzmoczgvunocdnvxzntyjbzabxyzabcdefghijklmnopqrs', 'vwxyzrdocabcdqefgrdochisqrxstuvwxyzabcdefghijklmnopqrsturdkpos', 'rdctoephknjvunkvxzntyvrcrsjabc', 'vwxyzabcdvwxyzabcdefghijklmnopqrsxtuefghcs', 'stsoczlpdxfqwmjriajsephknjqzmoczgvutyjzbtustu', 'oczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdovoodcdnvwephknjvstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustuunkoczlpdxfstuwmjriajsephknjqzmoczgvunocdnvxzntyjbzabxyzabcdefghijklmnkopqrsccjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdn', 'vwxyzabcdefvqrstuvwxtyzabcdefqrstu', 'vwxyzabcdoczlpdxfstuwmjriajzsephknjqzmoczgvudoocdnqrstu', 'dodocdnidniviozno', 'oodvwxyzabdcdefghijklmnopqrstrdocugncdncdnidniviozno', 'oodhvwxyzabdcdefghijklmnopqrstrdocugncdncdnidniviozno', 'ovwxyzrdocabcdqefgrdochijklmndiikpoopqkrdkpos', 'vwxyzabcdvwxyzawbcdnefghijklmnopzvagybdcoocdnekhngqftyuqrstuefgvoczlpdxfcrdccoccwmjgriajsephknjqzmoczgvutyjzbhcs', 'odvwxyznkvxznabcdefghijklmnopgncdn', 'dkpovwxyzabcdefghijklmnzvagybbcedhekhngqftyuopqrs', 'qrstuvwxyzabcoznoocdndefghijklmnoptqrlstdnu', 'sqstu', 'dkpovwxyzabcdefghijklmnopqs', 'vwxyzabcdvwxyzawbcdefghijklmnopqrstbuefghcs', 'vwxoodhvwxyzabdcdefghijklmnopqrstrdocugncdncdnidnivioznoyzabcdoczlpdxfstuwmjriajzsephknjqzmoczgvudoocdnqrstu', 'dodonvwxyzabcdefghijklmnopqrstujbcdn', 'vwxypocstsutusstutuzlpdxfwmjriajsephknjqzmoczgvutyjzbdkpozabcdefvoczlpdxfwmjgriajsephknxjqzmoczgvutyjzbghijklmnopqrstu', 'qrstuvwxyzabcdefkghijklmnopqrstu', 'oczlpdxfstuwmjriajsjephknjqzdkpovwxyzabcdefghijklnkqrstuvwxyzabcdeodcdnfghijklmnoptqrlstuvxznmnopqrsjb', 'vwxyzabcdefvogvutyjzbghijklmnopqrstu', 'ozrvohczutyjzboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocinkvxzn', 'dodonvwxyzabcdefghijktlmnopqrstujbcdn', 'vwxyzrdocoznoabcdefgrdochijklmndopqrdkvnwxyzabcdefghijklmnopqrcspos', 'ozrvohczutyjzboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdawmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocinkvxzn', 'ococzlpdxfstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbhknjqzmoczgvuocdndniviozno', 'voczlpdxfwmjriajsephknjqzmoczgvutyjz', 'vwxyzabcdefghlijklmdivoczlpdxfwmjriajsephknjqzmoczgvkutyjzbkponopqrs', 'odvwxyzabcdefghijklmnopqrstrdocugncdndn', 'dvoczgvuctyjzb', 'qrstuvwxyzabcoznoocdndefghijklsmnoptqrlstdnu', 'zvagyvbdoocdnekhngqftvrcrsu', 'zvagybdoocdnoznoocdnbekhngu', 'drdoocoocdrdcoephknjvunkvxzntyvrcrsjbza', 'qrvwxyzrdocoznoabcdefgrdochijklmndopqrdkvnwxyzabcdefghijklmnopqrcsposuvwxtyzabjcdefghijklmnopqrstu', 'vwxynkvxzrnzrdocoznoabcdefgrdochijklmndopqrdkpos', 'crdcc', 'stsoczlpdxfwmjriajsephknjqzqrstuvwxtyzabcdefghijkmnoczgvutyjzbtustu', 'dvoczgvuuctyjzb', 'ephgvutyjab', 'ozrvohczutyjzboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdawmcjriajzsephknjqzmoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocinkvxzn', 'sqroczlpdxfstuwmjriajsephknjqzmocdoocdnzgvuityjbxstuvwxyzabcdefghijklmnopqrstu', 'oez', 'ephknjvunkvxzntuyjbzab', 'vzzoczzutynkvxxznjzdoznotyjbikrdoczlpdxfstuwmjriajsephknjqzmoczgvuocdncoephknjvnunkvxzntyjbzuabcpobo', 'ovwxyzrdocabcdqefgrdochijklmndiikpopqkrdkpojs', 'ephknjqzmoczgvutzyjab', 'rddvoczlpdwmcjriajbsephknjqvzzoczutynkvxxznjzbozmoczgvstsutustuuctyjzbooc', 'odvwxyznkvxznaybcdefghijklmnopgncdn', 'odvwxyzabcdefghijklmnopqrstrdocugncdnoodhvwxyzabdcdefghijklmnopqrstrdocugncdncdnidniviozno', 'dvoczlppdwmcjriajsephknpjqzmoczgvuctyjzb', 'sdodonvwxyzabcdefghijktlmnopqrstujbcdntvwxyzrdocabcdqefgrdochijklmvwxyzabcdvwxyzabcdefghijwklmnopqrstuefghcsttustu', 'vwxyzabcdefghijklmdikponopqqrs', 'odvwxyznkvxznabcdefghijklmnoipqrstrdocugncdn', 'ozrvohczutyjzboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdawmcjriajzsephknjuqzmoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocinkvxzn', 'odcdnvwephknjvstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustuunkoczlpdxfstuwmjriajsephknjqzmoczgvunocdnvxzntyjbzabxyzabcdefdoznotyjbikrdcoephknjvunkvxzntyjbzuabcpoghijklmnopqrs', 'oczlpdxfwmjridajsephknjqzmoczgvutyjbzab', 'crdccrdoocccc', 'drdoocoocdrdcoephkstvwxyzrdocabcdqefgrdochijklmndiikpoopqkrdkposttustunjvunkvxzntyvrcrsjbza', 'odvwxyznkvxzncabcdefghijklmnopgncdn', 'rdcoephknjvunkvxzntyjbabc', 'oczlpdxfwmjridajsephknjvqzmoczgvutyjbzab', 'vwxyzaoczlpdxfstuwmjriajsepdvoczlpoczlpdxfstuwmjriajzstvwxyzrdocabcdqefgrdochijklmndiikpoopqkrdkposttustusephknjqzmoczgvuocdndwmcjriajsephknjqzmoczgvuctyjzbhknjqzmoczgvuocdnbcdefghijklmdikpoopqrs', 'vwxynkvxzrnzrdocoznoabcdefgrdochijklmndopqrdzvagyvbdoocdnekhngqftvrcrsukpos', 'rvohczutstsutustuyjzboczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdn', 'nvwxyzabcdefghijklmnopqrstoznotuvxznujb', 'vococzlpdxfwmjriajsephknjqzmoczgvutyjbzabzlpdxfwmjriajsephknjqzmoczgvutyjzb', 'oczlupdxfostuwmjriajsephknjqzmoczngvuocdnidnivioznotyjb', 'voczutyyjzbo', 'vwxoodhvwxyzabdcdefghijklmnopqrstrdocugncdncdnidnivioznoyzabcdoczlpdxfstuwmjriajzsephknjoocdnqrstu', 'oczlpdxfwmjriajsephknjqzmoczdgvutyjbzab', 'ozrvohczutyjzboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmgoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocinkvxzn', 'qoptqrlstdnu', 'vwxyzabcdefvoczlpddvoczgvuctyjzbgriajsephknxjqzmoczgvutyjzbghijklmnopqrstu', 'oczlpoezdxfstuwmocdnjrnjqzmoczgvuocdn', 'oczlpdxnvwxyzabcdefghijklmnopqrstujbfstuwmjriajsephknjqzmoczngvuocdn', 'dodocdn', 'vwxyzrdocabcdqefgrdocdrdoocoocdnhijklmndiikpoopqkrdkpos', 'nsocozrvohczutyjzboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocinkvxzndn', 'ono', 'oczlpdxoznoocdnfwmnkqrstuvwxyzabcdezfghijklmnoptqrlstuvxznjriajsephknjqzmoczgvutyjzb', 'oczlpdxfwmjriajsephknjqzmoczgvutyjnkqrstuvdvoczlpdwmcjriajbsephknjqzmoczgvstsutustuuctyjzbwxyzabcdefghijklmnoptqrlstuvxznbzab', 'qrsefghijkmn', 'pdkpoo', 'drdoocoocdrdcoephknjvunkvxznvtyvrcrsjbza', 'oro', 'qrstuvwxyzqrlstdnu', 'qrstuvoczlpdxfstuwmjriajzsephknjqzmoczgvudoocdnwxyzabcoznoocdndefghijklsmnoptqrlstdnu', 'ozrvohczutyjzboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdawjmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocinkvxzn', 'oznonkvxzn', 'dododonvwxyzabcdefghijktlvwxyzrdocabcdqefgrdochijklmndiikpoopqkrdkposmnopqrstujbcdnrdoocdn', 'oczlpdxfwbmjridajsephknjqzmoczgvutyjbzab', 'zvagvwxyzabcdvwxyzawbcdefghijklmnopqrstuefghvroczlpdxfstuwrdcocmjriajsephknjqzmocyjbcrsybbcedhekhngqftyu', 'stsoczlpdxfwmjriajsephknjqzqvoczlpdxfwmjgriajsephknrdcoephknjvunkvxzntyjbzabcjqzmoczgvutyjzbrstuvwxtyzabcdefghijkmnoczgvutyjzbtustu', 'nkvxzvagvwxyzabcdvwxyzawbcdefghijklmnopqrstuefghvroczlpdxfstuwrdcocmjriajsephknjqzmocyjbcrsybbcedhekhngqftyu', 'oczlpdxfstuwmjrrdcoephknjvunkvxzntyjbzabciajsephknjqzmocdoocdnzgvuityjb', 'vwxyzabcdefvoczlpococzlpdxfstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbhknjqzmoczgvuocdndnutyjzbghijklmnopqrstu', 'qrstuvwxtyzabcdefghijkzvagybdoocdnekhngumn', 'qrs', 'nkgqrstuvwqxyzabcdefghijklmnoptxqrlstuvxzn', 'vwxyzabcdvwoczlpdxfstuwmjrrdcoephknjvunkvxzntyjbzabciajsephknjqzmocdoocdnzgvuityjbxyzawbcdefghijklmnopqrstbuefghcs', 'zvagybbncedghekhngqftyu', 'ephknjvstsocznlpdxfwmjriajsephknjqzmoczgvutyjzbtustuunkoczlpdxfstuwmjriajsephknjqzmoczgvunocdnvxzntyjbzab', 'otozrvohczutyjzboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdawmcjriajzsephknjqzmoczgvuctyjzbstsuttustuhknjdnnoznonkvxzn', 'rdoooc', 'zvagybdcoocdnekhngqftdrdoocoocdrdcoephknjvunkvxzntyvrcrsjbzayu', 'ooczlpdxfwmjriajsephknjqzmozczgvutyjbzab', 'vwxyzstsuttustuabcdefghijklmdikponopqqrs', 'wsqrstuvwxyzabcdefghijklmnopqrstu', 'ooczlpdxfzvagybbncedghekhngqftyuwmjriajsephknjqzmozczgvutyjbzab', 'oczlpdxfwmjriajsephknjqzmoczgvutyjnkqrstuvdvoczlpdwmcjriajbsephknjqzmoczgvstsutustuuctyjzbwxyzabcdefghijklmnoptqrlstuvxznbzaqb', 'ooczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdovoccjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdntyjnkqrstuvdvoczlpdwmcjriajbsephknjqzmoczgvstsutustuuctyjzbwxyzabcdefghijklmnoptqrlstuvxznbzab', 'nkvxzvagvwxyzabcdvwxyzawbcdefghijklmnbopqrstuefghvroczlpdxfstuwrdcocmjriajsephknjqzmocyjbcrsybbcedhekhngqftyu', 'doocdnizdniviozno', 'qrstuvwxyzabcoznoocdndefghijlsmnoptqrlstdnu', 'vwxyzabcdvwxyzawbcdnefghijklmnopzvagybdcoocdnekhngqftyuqrstuefgvoczlpdxfcrdccoccwmjgriajsephknjqzmoczgvutyjzbhcsocstsutusstutuzlpdxfwmjriajsephknjqzmoczgvutyjzb', 'tzvagybbcedhekhngqqftyu', 'ozrvohczutyjzboczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdnnoidikpoirdocinkvxzn', 'stsuttusoczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdovoccjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdntu', 'stsoczalpdxfqwmjriajsephoczlpdxfstuwrdcocmjriajsephknjqzmocyjbutyjzbtustu', 'vwxyzabcdyefghijklmnopqrs', 'vwephknjvstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustuunkoczlpdxfsdodonvwxyzabcdefghijklmnopqrstujbcdnpqrs', 'ozrvohczutyjzboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmgoczgvuctyjzbstsuttustuhknjdnno', 'vwxyzrdocabcdqefgrdochkijklmndiikpoopqkrdkpos', 'vwxyzabcdvwoczlpdxfstuwmjrrdcoephknjvunkvxzntyjbzabciajsephknjqzmocdoocdnoczlpdxfstuwmjriajsephknjqzmocdoocdnzgvuityjbzgvuityjbxyzawbcdefghijklmnopqrstbuefghcs', 'vwxyzabcdvwoczlpdxfstuwmjtrrdcoephknjvunkvxzntyjbzabciajsephknjqzmocdoocdnzgvuityjbxyzawbcdefghijklmnopqrstbuefghcs', 'r', 'voczvwxyzabcdefghijklmnopqrsutyyjzbo', 'odvwxyznkvxznayijklmnopgncdn', 'oczlpdxfstuwmjriajvwxyzabcdefvoczlpddvoczgvuctyjzbgriajsephknxjqzmoczgvutyjzbghijklmnopqrstusephknjqzmocdonoocdnzgvuityjb', 'voczvwxyzabcdefghijklmnopqrsuutyyjzbo', 'nkqrstuvdvoczlpdwmcjriajbsephknjqzmoczgvstsutustuuctyjzbwxyzabcdefghijklmnopctqrlstuvxzn', 'oznotyjb', 'ozrvohczutyjzboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdawjmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocicnkvxzn', 'zvagybqrstuvwxyzqrlstdnubcedhekhngqftyu', 'vwxyzabcdefghlijklmdivoczlpdxfwrs', 'cnkvxzn', 'cnvwxyzabcdvwxyzawbcdefghijklmnopqrstuefghvroczlpdxfstuwrdcocmjriajsephknjqzmocyjbcrskvxzn', 'rddvsoczlpdwmcjriajbsephknjqzmoczsgvstsutustuuctyjzbooc', 'rdccc', 'ozrvohczutyjzboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdnno', 'jrvohczutstsutustuyjzboczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwwmcjriajsephknjqzmoczgvuctyjzbstsuttusatuhknjdn', 'rvohczutyjzboczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustunfstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdn', 'goczlpdxfwmjjsephnjvqzmoczgvutyjbzankvxxznb', 'oczlpdyjzbwxyzabcdefghijklmnoptqrlstuvxznbzaqb', 'vocuzutyyjzbo', 'oodhvwxyzabdcdefghijklmnopqrstrdocugncdncdn', 'xyzabcdefghijklmmnoptqrlstuvxzn', 'ephknjqedghekhngqftyuwhknjqzmozczgvutyjbzaboczgvutyjbzab', 'vwxyzabcdefvogvutyjzbgh', 'crdccoccqrvwxyzrdocoznoabcdefgrdochijklmndopqrdkvnwxyzabcdefghijklmnopqrcsposuvwxtyzabjcdefghijklmnopqrstu', 'ozrvohczjutyjzboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdawmcjriajzsephknjqzmoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocinkvxzn', 'dcoocdnidnivioozno', 'odvnwxyznkvxznabcdefghijklmnopqrstxrdocugncdn', 'oczlpdxfwmjridajsephknjqzmoczgvutyjbzcrdccab', 'oststustuznoocdn', 'vwxyzabstsoczlpdxfwmjriajsephknjqzqvoczlpdxfwmjgriajsephknrdcoephknjvunkvxzntyjbzabcjqzmoczgvutyjzbrstuvwxtyzabcdefghijkmnoczgvutyjzbtustucdsefghijklmnopqrs', 'rddvoczlpdwdmcjriajbsephknjqzmoczsgvstsutustuuctyjzbooc', 'nstuvxzoczlpmdxfstuwmjriajsephkhnjqzmoczgvunocdnn', 'qoptqrlstdtnkgqrstuvwqxyzabcdefghijklmnoptxqrlstuvxznnu', 'vwxyzabcdvwxyzawbcdnefghijklmnopzvagybdcoocdnekhngqftyuqrstuefgvoczlpdxfcrdccoccwmjgriajsephknjqvutyjzbhcs', 'oe', 'ooczlpdxfstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbhknjqzmoczgvuocdne', 'rddvoczltpdwdmcjriajbsephknjqzmoczsgvstsutustuuctyjzbooc', 'vwxyzrdsqroczlpdxfstuwmjriajsephknjqzmocdoocdnzgvuityjbxstuvwxyzabcdefghijklmnopqrstuocabcdqelmndikpoopqkrdkpos', 'oznoirdocinkvxzrn', 'sozrvohczutyjzboczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdnnoqstu', 'rdcoczlpdxfstuwmjriajsjephknjqzdkpovwxyzabcdefghijklnkqrstuvwxyzabooznoijklmnoptqrlstuvxznmnopqrsjboephknjvunkvxzntyvrcrsjabc', 'dovwxyzrdocabcdqefgrdochijklmndiikpoopqekrdkpos', 'oczlpdxfstuwmjrinzgvuityjb', 'rdooooc', 'ooczlpdxfwmjriajsephkknjqzmozczgvutyjbzab', 'vwxyzrdocabcdqefgrdocdrdoocoocdnhijklmndiikpoopqkrdxkpos', 'jrvohczutstsutustuyjzboczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzgbtustufstuwmjriajsepdvoczlpdwwmcjriajsephknjqzmoczgvuctyjzbstsuttusatuhknjdn', 'vzzoczzutynkvxxznjzdoznotyjbikrdodvwxyznkvxznaybcdefghijklmnopgncdnoczlpdxfstuwmjriajsephknjqzmoczgvuocdncoephknjvnunkvxzntyjbzuabcpobo', 'qoptqrlstdtnkgqrstuvwqxyzabcdefghijklmnoptxqrlzvagybdcoocdnekhngqftyustuvxznnu', 'ovwxyzrdocabcdqefgrdochijklmndiikpopqrkrdkpojs', 'rdcoephknjvunjkvxzntyjbabc', 'vwxyzabcdvwoczlpdxfstuwmjrrdcoephknjvunkvxzntyjbzabciajsephknjqzmocdoocdnzgvuityjbxyzawbcdefghijklmnjopqrstbuefghcs', 'oodvwxyzabcdefjriajsephknjqzmoczgvutyyjbstrdocugncdn', 'crdcccc', 'ephknjvunkvxzntuyjbzabpdkpo', 'oznotstsoczlpdxfqwmjriajsephknjqzmoczgvubtyjzbtustuuvxzephknjvstsocznlpdxfwmjriajsephknjqzmoczgvutyjzbtustuunkoczlpdxfstuwmjriajsephknjqzmoczgvunocdnvxzntyjbzabn', 'qrstuvwxyzabcdefghijklmnoptqvwephknjvstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustuunkoczlpdxfsdodonvwxyzabcdefghijklmnopqrstujbcdnpqrsrlstdnu', 'zvagyvbdoocdnekhngq', 'dkpovwxyzabcdefghijklnkqrstuvwxyzabcdefghijklmnoptqrlstudodocdnidnivioznovxznmnopqrs', 'qrstuvwxyzabcdefkghijvoczlpdxofwmjriwajsephknjqzmoczgvutyjzbopqrstu', 'zvagybqrstuvwxyzqrlstdnubcedhekhngqozrvohczutyjzboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmgoczgvuctyjzbstsuttustuhknjdnnoftyu', 'oczlpdxfwmnkqrstuvwxooczlpdxnkgqrstuvwxyzabcdefghijklmnoptxqrlstuvxznfwmjriajsephknjqzmoczgvutyjbzabyzabcdefghijklmnoptqrlstuvxznjriajsephknjqzmoczgvutyjzb', 'ooczlpdxfstuwzgvuctyjzbhknjqzmoczgvuocdne', 'odvwxyznkvxznzvagyvbdoocdnekhngqijklmnopgnmcdn', 'voczvwxyzabcdefghijklmnopqqrstuvoczlpdxfstuwmjriajzsephknjqzmoczgvudoocdnwxyzabcoznoocdndefghijklsmnoptqrlstdnutyyjzbo', 'qrstuvwxtyzabcdefghijkmrvohczutyjzboczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdnn', 'vwxyzabcdefvoczlpdxfwmopqrstu', 'vwxyzqrstuvwxyzabcdefkghijvoczlpdxofwmjriwajsephknjqzmoczgvutyjzbopqrstuabcdefghijklmnopqrcs', 'ozrvohczutyjzboczlstsoczlpdxfwmjrriuajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmgoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocinkvxzn', 'doddodonvwxyzabcdefghijktlvwxyzrdocabcdqefgrdochijklmndiikpoopqkrdkposmephknjqzmoczgvutyjabnopqrstujbcdnrdoocdn', 'vwxyzrdocabcdefgrdochijklmndikpoopqkrdkpos', 'ndsocdn', 'ooczlpdxfwmjriajsephknjqzmoczgvutyjbza', 'ocstsurddvoczlpdwmcjriajbsephknjqvzzoczutynkvxxznjzbozmoczgvstsutustuuctyjzboocdxfstuwmjriajsephknjqzmocdoocdnzgvuityjbqzmoczgvutyjzb', 'oczlupdxfostuwmjriajsephknjqzyjb', 'vwxyzabcdoczlpdxfstuwmjriajzsephknjqzststustumoczgvudoocdnqrstu', 'odvwxyzabcdefghijklmnopqrstrdocugncdnoodhvwxyzabdcdefghijklmnopqrstrdocugncdncdn', 'ogdvwxyznkvdxznabcdefghijklmnopqrstrdoccugncdn', 'ozrvohczutyjzsboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocinkvxzn', 'odvwxyznkvdxznabcdefghijklmnopqrstsqrstuvwxyzabcdefghijklmnopqrsturdoccugncdn', 'qrstuvwxtyzabcdefghijkmrvohczutyjzboczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdunn', 'vwxyzabcdefghijklmnopqrndsocdnu', 'vwxyzabcdefvoczlpdxfwmjgriajsephzknjqzmoczgvutyjzbghijklmnopqrstu', 'vwxyzabcdoczlpdxfstuwmjriajzsephknjqzststustumoczgvudoocdjnqrstu', 'oznoephknjvunkvxzntuyjbzabpdkpotuvxzn', 'dvoczlpdcwmcjriajsephknjqzmoczgvuctyjzb', 'oczlpdxfwbmjridajsephknczgvutyjbzab', 'sqstvwxyzrdocabcdqefgrdocdrdoocoocdnhijklmndiikpoopqkrdkposu', 'gr', 'oczlpdxfwmjriajsephknjqzmoczgvutyjnkqrstuvdvoczlpdwmcjriajbsephknjqzmoczgvstsutuqrvwxyzrdocoznoabcdefgrdochijklmndopqrdkvnwxyzabcdefghijklmnopqrcsposuvwxtyzabjcdefghijklmnopqrstustuuctyjzbwxyzabcdefghijklmnoptqrlstuvxznbzaqb', 'nstuvxzoczlpmdxfstuwmjriajseqrstuphkhnjqzmoczgvunocdnn', 'qrstoczlpdxfwmjriajsephknjqzmoczgvutyjnkqrstuvdvoczlpdwmcjriajbsephknjqzmoczgvstsutuqrvwxyzrdocoznoabcdefgrdochijklmndopqrdkvnwxyzabcdefghijklmnopqrcsposuvwxtyzabjcdefghijklmnopqrstustuuctyjzbwxyzabcdefghijklmnoptqrlstuvxznbzaqboczgvutyjzbtustuunkoczlpdxfsdodonvwxyzabcdefghijklmnopqrstujbcdnpqrsrlstdnu', 'cqrstoczlpdxfwmjriajsephknjqzmoczgvutyjnkqrstuvdvoczlpdwmcjriajbsephknjqzmoczgvstsutuqrvwxyzrdocoznoabcdefgrdochijklmndopqrdkvnwxyzabcdefghijklmnopqrcsposuvwxtyzabjcdefghijklmnopqrstustuuctyjzbwxyzabcdefghijklmnoptqrlstuvxznbzaqboczgvutyjzbtustuunkoczlpdxfsdodonvwxyzabcdefghijklmnopqrstujbcdnpqrsrlstdnurdcc', 'voczlpdxfwmjozrvohczutyjzboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdawjmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocicnkvxznpriajsephknjqzmoczgvutyjzb', 'oczlpdxfstuwmjriajzsephknjqzmoczgvocdn', 'ozrvohczutyjzboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdawmcjriajzsephknjuqzmoczgvuctyjzbstsuttustuhknjdnno', 'nkqrstuvdvoczlpdwmcjriajbsephknjqzmoczgvstodcdnsutustuucteyjzbwxyzabcdefghijklmnoptqrlstuvxzn', 'dvoczlpdwmcjriajsephknpjqzmoczgdvuctyjzb', 'nsocdznidnivioznotuvxzn', 'jrvohczutstsutustuyjzboczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzgbtustufstuwmjriacjsepdvoczlpdwwmcjriajsephknjqzmoczgvuctyjzbstsuttusatuhknjdn', 'oczlpdxfstuwmjriajsepdvoczlpoczlpdxfstuwmjriajzstvozrvohczutyjzsboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocinkvxznwxyzrdocabcdqefgrdochijklmndiikpoopqkrdkposttustusephknjqzmoczgvuocdndwmcjriajsephknjqzmoczgvuctyjzbhknjqzmoczgvuocdn', 'y', 'ocyzlpdxfwmjriajsephknjqzmoczgvutyjbzab', 'doocdnizdnivi', 'jrvohczutstsutustuyjzboczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzgbtustufstuwnstuvxzoczlpdxfstuwmjriajsephknjqzmoczgvunocdnnmcjriajsephknjqzmoczgvuctyjzdn', 'dvoczlpdwmcjriajsephknpjqzjmoczgdvuctyjzb', 'jrvohczutstsutustuyjzboczlstsoczlpdxfwmjriajsnsocozrvohczutyjzboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocinkvxzndnephknjqzmoczgvutyjzgbtustufstuwmjriacjsepdvoczlpdwwmcjriajsephknjqzmoczgvuctyjzbstsuttusatuhknjdn', 'crddccrdoocccc', 'ooczlpdxfzvagybbncedghekhngqfmtyuwmjriajsephknjqzmozczgvutyjbzab', 'rdcoephknjvunkvxzntyvrcrsjab', 'vococzlpdxfwmjriajsephknjqzabzlpdxfwmjriajsephknjqzmoczgvutyjzb', 'stoczlpdxfsmtuwmjriajsephknjqzmoczgvunocdnsu', 'voczutynkvxzvagvwxyzabcdvwxyzawbcdefghijklmnbopqrstuefghvroczlpdxfstuwrdcocmjriajsephknjqzmocyjbcrsybbcedhekhngqftyujzbo', 'rdctoephknjvnkvxzntyvrcrsjabc', 'iqrstuvwxyzabcdefkhijklmnopqrstu', 'crdcoczlpdxfstuwmjriajsepdvoczlpoczlpdxfstuwmjriajzstvozrvohczutyjzsboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocinkvxznwxyzrdocabcdqefgrdochijklmndiikpoopqkrdkposttustusephknjqzmoczgvuocdndwmcjriajsephknjqzmoczgvuctyjzbhknjqzmoczgvuocdncoccc', 'dordoocooccnvwxyzabcdvwxyzawbcdefghijklmnopqrstuefghvroczlpdxfstuwrdcocmjriajsephknjqzmocyjbcrskvxzndn', 'docrdoocoocdnidnivioznonkvxzn', 'oczlupdxfostuwmjriajsephknjqzmoczngvuocdn', 'qrstuvwxtyzabjcdefghijklmnopqvoczutyjzbtu', 'ephknjqzmoczgvvwxyzabcdefvqrstuvwxtyzabcdefqrstuab', 'stsoczlpdxfwmjriajsepdkpoophknjqzqrstuvwxtyzabcdefghijkmnoczgvutyjzbtustu', 'ozrvohczutyjzboczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdnno', 'oczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdovoodcdnvwephknjvstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustuunkoczlpdxfstuwmjriajsephknjqzmoczgvunocdnvxzntyjbzabxyzabcdefghijklmnkopqrsccjriajsephknjqzmocn', 'vwxynkvxzrnzrdocoznoabcdefgrdochijklmndopqrvwxyzrdsqroczlpdxfstuwmjriajsephknjqzmocdoocdnzgvuityjbxstuvwxyzabcdefghijklmnopqrstuocabcdqelmndikpoopqkrdkposdkpos', 'oczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdovoodcdnvwephknjvstsoczlpdxflpdxfstuwmjriajsephknjqzmoczgvunocdnvxzntyjbzabxyzabcdefghijklmnkopqrsccjriajsephknjqzmocn', 'stsutusodvwxyznkvxznabcdefghivwxyzabcdvwoczlpdxfstuwmjtrrdcoephknjvunkvxzntyjbzabciajsephknjqzmocdoocdnzgvuityjbxyzawbcdefghijklmnopqrstbuefghcslmnopgncdntu', 'zvagybdcoocdnektyu', 'sqstvwxyzrdocabcdqefgrdocdrdoocoocdnhijklmndiikpooopqkrdkposu', 'vzzoczvwxynkvxzrnzrdocoznoabcdefgrdochijklmndopqrdzvagyvbdoocdnekhngqftvrcrsukposzutynkvxxznjzdoznotyjbikrdoczlpdxfstuwmjriajsephknjqzmoczgvuocdncoephknjvunkvxzntyjbzuabcpobo', 'oczlpdxfstuwmjriajooznosepdvoczlpoczlpdxfstuwmjriajzstvwxyzrdocabcdqefgrdochijklmndiikpoopqkrdkposstsutusodvwxyznkvxznabcdefghivwxyzabcdvwoczlpdxfstuwmjtrrdcoephknjvunkvxzntyjbzabciajsephknjqzmocdoocdnzgvuityjbxyzawbcdefghijklmnopqrstbuefghcslmnopgncdntuttustusephknjqzmoczgvuocdndwmcjriajsephknjqzmoczgvuctyjzbhknjqzmoczgvuocdn', 'ooczlpdxfwmjqrstuvwxyzabcoznoocdndefghijklsmnoptqrlstdnuriajsephkknjqzmozczgvutyjbzab', 'qrstuvwxyzabcoznoocdndefghijlsmnoptqrlstdn', 'nrdcoczlpdxfstuwmjriajsjephknjqzdkpovwxyzabcdefghijklnkqrstuvwxyzabooznoijklmnoptqrlstuvxznmnopqrsjboephknjvunkvxzntyvrcrsjabcstuvxzn', 'crodvwxyznkvxzncabcdefghijklmnopgncdnccoccc', 'ccrdccocc', 'voczlpdxfwmjriajsephknjqzmoczgvkutyephknjvstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustuunkoczlpdxfstuwmjriajsephknjqzmoczgvunocdnvxzntyjbvwxyzabcdefghijklmnopqrstuzabjzb', 'vwxyzrdocabcdqensocdnfgrdochijklmndikpoopqkrdkpos', 'rdooooczlpdxfwmjridajsephknjvqzmoczgvutyjbzabc', 'cqrstoczlpdxfwmjriajsephknjqzmoczgvutyjnkqrstuvdvoczlpdwmcjriajbsephknjqzmoczgvstsutuqrvwxyzrdocoznoabcdefgrdochijklmndopqrdkvnwxyzabcdefghijklmnopqrcsposuvwxtyzabjcdefghijklmnopqrstqustuuctyjzbwxyzabcdefghijklmnoptqrlstuvxznbzaqboczgvutyjzbtustuunkoczlpdxfsdodonvwxyzabcdefghijklmnopqrstujbcdnpqrsrlstdnurdcc', 'zvagococzlpdxfstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbhknjqzmoczgvuocdndnivioznobdoocdnoznoocdnbekhngu', 'nstzuvxzn', 'nsocdznidnivioznotu', 'sststustu', 'docrdooocoocdnidnivioznonkvxzn', 'zvagvwxyzabcdvwbxyzawbcdefghijklmnopqrstuefghvroczlpdxfstuwrdcocmjriajsephknjqzmocyjbcrsybbcedhekhngqftyu', 'oodvwxyzabdcdefghijklmnopqrstrdocugncdncdnidnivioznoqrstuvwxtyzabrcdefghijkkmn', 'nkqrstuvdvoczlpdwmcjriopctqrlstuvxzn', 'dodonvwxyzabcdlefghijklmnopqrstujbcdn', 'vwrdocxyzrdocabcdqefgrdocdrdoocoocdnhijklmndiikpoopqkrdkpos', 'qrstuvwxtyzabcdefgwhijkzvdnekhngumn', 'dvoczlpdwmcjriajsephknpjjriajsecphknujqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocinkvxznzb', 'vwxyvoczlpdxfwmjozrvohczutyjzboczlstsoczlpdxfwmjrriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdawjmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdnnoidikpoirdocicnkvxznpriajsephknjqzmoczgvutyjzbzabcdefvogvutyjzbgh', 'doocstustudnizdnivi', 'nstuvxzoczlpdxfstudkpovwxyzabcdefghijklmnopqsocdnn', 'nkvxzndn', 'osoczlpdxfwmjriajsephknjqzmoczgvutyjbza', 'xzndn', 'rdcoephknjvqoptqrlstdtnkgqrstuvwqxyzabcdefghijklmnoptxqrlzvagybdcoczlpdxfstuwmjriajooznosepdvoczlpoczlpdxfstuwmjriajzstvwxyzrdocabcdqefgrdochijklmndiikpoopqkrdkposstsutusodvwxyznkvxznabcdefghivwxyzabcdvwoczlpdxfstuwmjtrrdcoephknjvunkvxzntyjbzabciajsephknjqzmocdoocdnzgvuityjbxyzawbcdefghijklmnopqrstbuefghcslmnopgncdntuttustusephknjqzmoczgvuocdndwmcjriajsephknjqzmoczgvuctyjzbhknjqzmoczgvuocdnxzntyvrcrsjbzabc', 'odvnwxyznkvxznabcdefghijkloczlpdxfstuwmjriajzsephknjqzmoczgvudoocdnmnopqrstxrdocugncdn', 'oczlstsoczlpdxfpwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdovoodcdnvwephknjvstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustuunkoczlpdxfstuwmjriajsephknjqzmoczgvunocdnvxzntyjbzabxyzabcdefghijklmnkopqrsccjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdn', 'idodocdnidniviozno', 'nvwxyzabcdefghijklmnopqrstoznxznujb', 'oozno', 'vwxyzabcdefpghijklmdikponopqrs', 'vwxynkvxzrnvzrdocoznoabcdefgrydochijklmndopqrdkpos', 'vwxyzrdocabcdqefgrdochkijdoocdniodvwxyzabcdefghijklmnopqrstrdocugncdndnivioznoklmndiikpoopqkrdkpos', 'dordoocoocodn', 'stsutusodvwxyznkvxznabcdefghivwxyzabcdvwoczlpdxfstuwmjtrrdcoephknjvunkvxjzntyjbzabciajsephknjqzmocdoocdnzgvuityjbxyzawbcdefghijklmnopqrstbuefghcslmnopgncdntu', 'odvwxyzabdmnopqrstrdocugncdn', 'odvwxyznkvxzncqrstuvwxtyzabcdefghijkmrvohczutyjzboczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdnnabcdefghijklmnopgncdn', 'oczlpdxfwmjridajutyjbzab', 'vwxyzabcdefyghijklmnopqrndsocdnu', 'qvwxyzrdocabcdqefgrdochkijdoocdniodvwxyzabcdefghijklmnopqrstrdocugncdndnivioznoklmndiikpoopqkrdkposrstuvwxtyzabcdefghijkmn', 'vvwxyzabcqrstuvwxyzabcdefghijklmnoptqrlstudvwxyzawbcdefghijklwm', 'oczlpdxfstuwmjrrdcoephknjvunkvxzntyjbzabciajsedovwxyzrdocabcdqefgrdochijklmndiikpoopqekrdkposphknjqzmocdoocdnzgvuityjb', 'doocn', 'vwxyzabcdefyghijkldmnopqrndsocdnu', 'rddvoczltpdwdmcjriajbsephknjqzmoczsgvstsutustkuuctyjzbooc', 'vwxypocstsutusstutuuzlpdxfwmjriajsephknjqzmoczgvutyjzbdkpozabcdefvoczlpdxfwmjgriajsephknxjqzmoczgvutyjzbghijklmnopqrstu', 'dvoczlpdwmcjriajbsephknjqzmocvzgvstsutustuuctyjzb', 'qrstuvwxtyzabbcdefghijklmnopqrstu', 'odvnwxyznkvxznabcdefghijkloczlpdxfstuwcugncdn', 'odvwxyznkvxznaybcdefghijklmnooznotyjbpgncdn', 'drdoocoocdrdcoephknjvunkvxznvtyvrcvwxyzabcdvwxyzawbcdefghijklmnopqrstbuefghcsrsjbza', 'vzzoodvwxyznkvdxznabcdefghijklmnopqrstsqrstuvwxyzabcdefghijklmnopqrsturdoccugncdnczzutynkvxxznjzdoznotyjbikrdoczlpdxfstuwmjriajsephknjqzmoczgvuocdncoephknjvunkvxzntyjbzuabcpobo', 'rgr', 'oczlupdxfostuwmjrirdcoczlpdxfstuwmjriajsjephknjqzdkpovwxyzabcdefghijklnkqrstuvwxyzabooznoijklmnoptqrlstuvxznmnopqrsjboephknjvunkvxzntyvrcrsjabcajsephknjqzmoczngvuocdn', 'crodvwxyznkvxzncabcdefghijklmnopvoczvwxyzabcdefghijklmnopqrsuutyyjzbogncdnccoccc', 'oczltstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdovoccjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdn', 'zvagococzlpdxfstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbhknjqzmoczgvuocdndnivioznobdoocdnhoznoocdnbekhngu', 'crdcccocc', 'vwxydzabcdefghijklmnopqrsvwxyzrdocabcdqensocdnfgrdochcijklmndikpoopqkrdkpostrdocu', 'dvwxynkvxzrnzrdocoznoabcdefgrdochijklmndopqrdkpos', 'vwxyzrdocabcdqefgrdochkijdoocdniodvwxyzabcdefghijklmnopqstsoczlpdxfwmjriajsephknjqzqrstuvwxtyzabcdefghijkmnoczgvutyjzbtustundnivioznoklmndiikpoopqkrdkpos', 'stsuttusocnkqrstuvwxyzabcdefghijklmnoptqrlstuvxznzlstsoczlpdxfwmjriajsephccjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdntu', 'ooczlpdxfwmjriajsephknjqzmozczgvutyjb', 'oczlpdxfwmjriajsephkvwxyzabcdefvoczlpddvoczgvuctyjzbgriajsephknxjqzmoczgvutyjzbghijklmnopqrstunjqzmoczdgvutyjbzab', 'odcdnvwephknjvstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustuunkvxzntyjbzuabcpoghijklmnopqrs', 'oxyzabcdefghijklmmnoptqrlstuvxznznotuvxzn', 'zvagvwxyzabcdvwbxyzawzvagococzlpdxfstuwmjriajsepdvoczlpdwmcjriajsephknjqzmoczgvuctyjzbhknjqzmoczgvuocdndnbcdefghijklmnopqrstuefghvroczlpdxfstuwrdcocmjriajsephknjqzmocyjbcrsybbcedhekhngodcdndnqftyu', 'stsutusodvwxyznkvxznabcdefghivwxyzabcdvwoczlpdxfstuwmjtrrdcoephknjvunkvxjzntyjbzabciajsephknjqzmocdoocdnzgvuityjbvxyzawbcdefghijklmnopqrstbuefghcslmnopgncdntu', 'drdoocoocdrdcoephknjvvwxyzabcdvwoczlpdxfstuwmjrrdcoephknjvunkvxzntyjbzabciajsephknjqzmocdoocdnzgvuityjbxyzawbcdefghijklmnopqrstbuefghcsunkvxznvtyvrcrsjbza', 'ovwxyzabcdefvoczlpdxfwmjgriajsephknjqzmoczgvutyjzbghijklmnopqrstudvwxyzabdmnopqrstrdocugncdn', 'ooczlstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustufstuwmjriajsepdotvoccjriajsephknjqzmoczgvuctyjzbstsuttustuhknjdntyjnkqrstuvdvoczlpdwmcjriajbsephknjqzmoczgvstsutustuuctyjzbwxyzabcdefghijklmnoptqrlstuvxznbzab', 'rdooooczlpdxfwmjridajsephknjyvqozmoczgvutyjbzabc', 'vwxyzabcdvwxyzawbcdefghijklmnopqrstuefghvroczlpdxfstuwrdcocmjriajsephknjqzmonvwxyzabcdefghijklmnopqrstujbjbcrs', 'doocdnizooczlpdxfwmjriajsephknjqzmoczgvutyjbzadnivi', 'dkpovwxyzabcdefghijklmnzvagybbcedhekhngqsoczlpdxfstuwmjriajsephknjqzmocdoocdnzgvuityjbtuftyuopqrs', 'ddododonvwxyzabcdefghijktlvwxyzrdocabcdqefgrdochijklmndiikpoopqkrdkposmnopqrstujbcdnrdoocdnrdoocoocdrdcoephknjvvwxyzabcdvwoczlpdxfstuwmjrrdcoephknjvunkvxzntyjbzabciajsephknjqzmocdoocdnzgvuityjbxyzawbcdefghijklmnopqrstbuefghcsunkvxznvtyvrcrsjbza', 'doznotyyjbikrdcoephknjvunkvxzntyjbzuabcpo', 'voczutyvzzoczzutynkvxxznjzdoznotyjbikrdodvwxyznkvxznaybcdefghijklmnopgncdnoczlpdxfstuwmjriajsephknjqzmoczgvuocdncoephknjvnunkvxzntyjbzuabcpobojzb', 'oznotstsoczlpdxfqwmjriajsephknjqzmoczgvubtyjzbtustuuvxzephknjvstsocznlpdxfwmjriajsephknjqzzlpdxfstuwmjriajsephknjqzmoczgvunocdnvxzntyjbzabn', 'ephknjvstsoczlpdxfwmjriajsephknjqzmoczgvutyjzbtustuunkoczlpdxfstuwmjriajsepvhknjqzmoczgvunocdnvxzntyjbzab', 'vwxyzabcddefghijklmdikponopqrs', 'nstuvxzoczlpdxfstuwmjriajsephknjqzmoczgvundkpovwxyzabcdefghijklnkqrstuvwxyzabcdefghijklmnoptqrlstudodocdnidnivioznovxznmnopqrsocdnn', 'vwxyzrdocoznoabcdefgrdochijklmndopqmrdkpos', 'oo', 'oczlpdxfwmjriajsephknjqqzmoczgvutyjb', 'zvaybbce', 'vv', 'ooo', 'zvaybbczvaybbcee', 'oznordoc', 'ddn', 'ddnzvaybbczvaybbcee', 'noznordoc', 'addnzvaybbczvaybbcee', 'oooo', 'ocvutyjb', 'zozcnordoc', 'ndn', 'oczylpdxfwmjriajsephknjqzmoczgvutyjbzab', 'oczlpdxfwmjriajsephknjqqzmoczgvutyjbddn', 'zvaybbczvaybbecee', 'oznordocaddnzvaybbczvaybbcee', 'oznorcdocaddnzvaybbczvaybbcee', 'ddnzddnzvaybbczvaybbceevaybbczvaybbcddn', 'nddn', 'oznooczlpdxfwmjriajsephknjqzmoczgvutyjbzabrdocaddnzvaybbczvaybbcee', 'oznooc', 'oznooidikpoirdocinkvxzn', 'oczlpdxfwmjriajsephknjqzmrdoc', 'oznorecdocaddnzvaybbczvaybbcee', 'dnn', 'ostuczlpdxfwmjriajsephknjqzmrdoc', 'ddnzddnzvaybbczvaybbceevaybbczvayebbcddn', 'nkzvxzn', 'vddnkzvxn', 'ddnzddnzvaybbczvaybbceevaybbcoozvaybbcddn', 'vwxyzabcdefghklmnopqrstu', 'vvv', 'oznovvoc', 'rdococzlpdxfwmjriajsephknjqzmoczgvutyjbzab', 'zvaybbcbe', 'zvaybbczvaybbvcee', 'zvaybboczlpdxfwmjriajsephknjqqzmoczgvutyjbddncedhekhngtqftyu', 'ooznordoccvutyjb', 'vwxyzabcdefghijkulmnopqrstu', 'naddnzyvaybbczvadybbceedn', 'naddnzyvaybbczvad', 'oczlpdxfwmjriajsjephknjqqzmoczgvutyjb', 'oznordococzlpdxfwmjriajsepocdnidnivioznohknjqzmrdoc', 'oooznrordoccvutyjb', 'qrstuvwxyzabcdefghijkdnlmnopqrstu', 'rdococzlpdxfwmjriajsephknjqzmoczgoczlpdxfwmjriajsjephknjqqzmoczgvutyjbyjbzab', 'vbwxyzabcdefghklmnopqrstu', 'ooc', 'oooznordovddnkzvxnccvutyjbooo', 'oczlpdxfwmjriavwxyzabcdefghijkaddnzvaybbczvaybbceelmnopqrstujsjephknjqqzmoczgvutyjb', 'ooooo', 'oczlpdxfwmjriajsepzgvutyjb', 'vvvv', 'ocvutynkvxznjb', 'naddnzybvaybbczvad', 'oznoqrstuvwxyzabcdefghijkdnlmnopqrsturcdocaddnzvaybbczvaybbcee', 'ocodoocn', 'vdoznordococzlpdxfwmjriajsepocdndnkzvxn', 'oznordoccoczlpdxfwmjriajsepocvdn', 'ddnzvaybboooznrordoccvutyjbczvayvddnkzvxnee', 'qrstuvwxyzabcdefgihioznoidikpoirdocinkvxznjkdnlmnopqrstu', 'nkvxznjkdnlmnopqrstu', 'oznohknjqzmrdoc', 'ocvoooznrordoccvutyjbutyjb', 'qrstuvwxyzabcdeqfghijklmnopqrstu', 'ocvutynkvxznjjb', 'ddnzvanybboooznrordoccvutyjbczvayoznordococzlpdxfwmjriajsepocdnidnivioznohknjqzmrdocvddnkzvxnee', 'ooooznrordoccvutyjb', 'ddnzvaooznrordoccvutyjbczvayoznordococzlpdxfwmjriajsepocdnidnidvioznohknjqzmrdocvddnkzvxnee', 'rdococzlpdxfwmjriajsephknjqzmoczrgvutyjbzab', 'st', 'oznohknjqzmoooc', 'rdococzlpdxfwmjriajsephknjqzmozczgoczlpdxfwmjriajsjephknjqqzmoczgvutyjbyjbzab', 'qrstuvwxyzqrstuvwxyzabcdefghijklmnopqrstuabcdefghijkdnlmnopqrstu', 'qrstuvwxyzabcdefghijkdnlmnodoocnpqrstu', 'zvaybbczvaybboznohknjqzmrdocecee', 'oczlzvaybbcepdxfwmjriajsephknjqzmoczgvutyjb', 'tst', 'oznorcdocaddnzvardococzlpdxfwmjriajsephknjqzmoczgoczlpdxfwmjriajsjephknjqqzmoczgvutyjbyjbzabymbbczvaybbacee', 'zvaybboczrdococzlpdxfwmjriajsephknjqzmoczrgvutyjbzablpdxfwmjriajsephknjqqzmoczgvutyjbddncedhekhngtqftyu', 'rdococzlpdxfwmjriajsephknjqzmozcoznordoczgoczlpdxfwmjriajsjephknjqqzmoczgvutyjbyjbzab', 'zozconordoc', 'ddnee', 'qrstuvwxyzqrstuvwxyzabcdefghijklmnopqrstopqrstuoczylpdxfwmjriajsephknjqzmoczgvutyjbzab', 'vdoznordococzrlpdxfwmjriajsepocdndnkzvxn', 'vwxyzabcdefghnijkulmnopqrstu', 'zozctstnnrdoc', 'ndd', 'ddnzvaooznrordoccvutyjbczvayoznordococzlpdxfwmjriajsepocdnidnidvioznohknjqzmrddnkzvxnee', 'vwxyzabcdefghnijkulmnopqrstuzvaybbce', 'qrsctuvwxyzabcdefghijkdnlmnodoocnpqrstu', 'qrstuvwxyzqrstuvwxyzabcdefghijklmnopqrstopqrstuoczylpdxfwmjriajsephknjqzmoczgvutyjfbzab', 'oznooczlpdxfwmjriajsephknjqzmoczgvutyjjbzabrdocaddnzvaybbczvaybbcee', 'qrstuvwxyzqrstuvwxyzabcdefghijklmnopqrstopqrstuoczylpdxfwmjriajsephknjqzmoczgvutyjfbzabddnn', 'nd', 'zvaybbczoczlpdxfwmjriajsjephknjqqzmoczgvutyjbvaybboznohknjqzmrdocecee', 'oooddnzvaooznrordoccvutyjbczvayoznordococzlpdxfwmjriajsepocdn', 'ooooonaddnzybvaybbczzvad', 'zvaybb', 'oczylpdxfwmjriajsephknjqzmocqrstuvwxyzabcdefg', 'ddnzvanooooybboooznrordoccvutyjbczvayoznordococzlpdxfwmjriajsepocdnidnivioznohknjqzmrdocvddnkzvxnee', 'ooooqrstuvwxyzabcdefgihioznoidikpoirdocinkvxznjkdnlmnopqrstuo', 'oooznrordvdoznordoqrsctuvwxyzabcdefghijkdnlmnodoocnpqrstucoczrlpdxfwmjriajsepocdndnkzvxntyjb', 'nayddnzybvaybbczvad', 'zvaybbczoczlpdxfwmjriajsjephknjqqzmoczgvutyjbvaybboznohknjqzmroczlzvaybbcepdxfwmjriajsephknjqzmoczgvutyjbdocecee', 'zvayybbczvaybbcee', 'oznoqrsdoocntuvwxyzabcdefghijkdnlmnopqrsturcdocaddnzvaybbczvaybbcee', 'oczlpoznorecdocaddnzvaybbczvaybbceedxfwmjriajsepzgvutynjb', 'zozocvoooznrordoccvutyjbutyjbctstnnrdoc', 'rdmococzlpdxfwmjriajsephknjqzmoczgvutyjbzab', 'ddnn', 'nayddnzybbvaybbczvad', 'oooonayddnzybbvaybbczvoad', 'qrstuvwxyzqrstuvwxyzabcdefghijklmnopqrstopqrstuoczylpdxfwmbjriamjsephknjqzmoczgvutyjbzab', 'oznooczlpdxfwmjriajsephknjqzmoczgvutyjjbzabrdocaddnzvaybbczyvaybbceevv', 'vdoznordococzrlpdxfwmjriajsepooovxnn', 'ozvaybboczlpdxfwmjriajsephknjqqzmoczgvutyjbddncedhekhngtqftyu', 'vwxyzabcdefghijkoznohknjqzmrdocvddnkzvxneelmnopqrstu', 'vwxyzabkulmnopqrstu', 'oooznrordocucvutyjb', 'qrstuvwxyzqrstuvwxyzabcdefghijklmnopqrstopqrstuoczylpdxfwmjrinddnajsephknjqzmoczgvutyjbzab', 'nkvxznjkdnlmnopqrszozconordoctuo', 'ddnqrsctuvwxyzabcdefghijkdnlmnodoocnpqrstun', 'noznordooznorcdocaddnzvardococzlpdxfwmjriajsephknjqzmoczgoczlpdxfwmjriajsjephknjqqzmoczgvutyjbyjbzabymbbczvaybbaceec', 'ddnoznordococzlpdxfwmjriajsepocdnidnivioznohknjqzmrdoc', 'nddnddnoznordococzlpdxfwmjriajsepocdn', 'oznorecnzvaybbczvaybbceeoznooc', 'oznordoccoczlpdxfwmqrstuvwxyzabcdeqfghijklmnopqrstujriajsepocvdn', 'cooc', 'd', 'zvybbcbe', 'addnzvaybbvczvaybbcee', 'qrstuvwxyzabcdefngihioznoidikpoirdocinkvxznjkdnlmnopqrstu', 'ddnzddnzvaybbczozconordoczvaybbceevaybbcoozvayobbcddn', 'zozocvoooznrodoocnrdoccvutyjbutyjbctstnnrdoc', 'zvybbcbooooqrstuvwxyzabcdefgihioznoidikpoirdocinkvxznjkdnlmnopqrstuoe', 'qrstuvwxyzqrstuvwxiyzabcdefghijklmnopqrstuabcdefghijkdnlmnopqrstu', 'ddnqrsctuvwxyzabcdefghijkdnlmnodoocnpqrsrdococzlpdxfwmjriajsephknjqzmoczgvutyjbzabtun', 'ddnzvaooznrordoccvutyjbczvayoznordococzlpdxfwmjriajsepocdn', 'ddnzvanybbroooznrordoccvutyjbczvayoznordococzlpdxfwmjriajsepocdnidnivioznohknjqzmrdocvddnkzvxnee', 'ocvutyhioznonkvxznjjb', 'nndd', 'zvaaybbce', 'oddnoznordococzlpdxfwmjriajsepocdnozno', 'ddnzvaybboooznrordoccvutyjbzczvayvddnkzvxnee', 'zvaybbczvaybbcebe', 'oooddnzvaooznrovrdoccvutyjbczvayoznordococzlpdxfwmjriajsepocdn', 'vwxyzabcdefrstu', 'zvaybbczoczlpdxfwmjriajsjephknjqqzmoczgvutyjbvaybboznohknjqzmroczlzvaybbceqrstuvwxyzqrstuvwxyzabcdefghijklmnopqrstoprqrstuoczylpdxfwmbjriamjsephknjqzmoczgvutyjbzabpdxfwmjriajsephknjqzmoczgvutyjbdocecee', 'ddnoznordococzlpdxfwmjriajsepocdn', 'oczlpdxfwmjriajsephknjqqzmoczgvb', 'ddnzddnzvaybbczvaybbceevaybbczvaybbbcddn', 'ozzno', 'oznorecdocaddnzvaybbczoczlpdxfwmjriajsephknjqqzmoczgvutyjbddnee', 'ddnqrsctuvwxyzabcdefghijkdnlmnodoocnpqrsrdococzlpdxfwmjriajsephknjqzmoczgvutyhjbzabtun', 'oczlpdxfwmjriajsephknjqqzmoczgvutyjbdddn', 'dooqrstuvwxyzqrstuvwxyzabcdefghijklmnopqrstopqrstuoczylpdxfwmjriajsephknjqzmoczgyvutyjbzabcn', 'oooznrordocqrstuvwxyzabcdefgihioznoidikpoirdocinkvxznjkdnlmnopqrstuucvutyjb', 'qrstuvwxyzqrstuvwxyzabcdefghijklmnopqrstopqrstuoczyldoocnpdxfwmbjriamjsephknjqzvutyjbzab', 'zozocvoooznrordoccvutyjbutyjbctoczlpdxfwmjriajsjephknjqqzmoczgvutyjbtnnrdoc', 'ddnqrsctuvwxyzaocdnbcdefghijkdnlmnodoocnpqrstun', 'zozconorodoc', 'zvayb', 'vwxyzabcdefrstuu', 'ocvutyhiozvaybznonkvxznjjb', 'oczlpdxfwmjriajsepzgvutybjb', 'vddnoznorecnzvaybbczvaybbceeoznoockzvxn', 'dd', 'oznordococzlpdxfwmjriajsepocdn', 'ostuczlpdxfwmjriajsephknkjqzmrdoc', 'zvaybzozocvoooznrordoccvutyjbutyjbctstnnrdoc', 'oznorcdocaddnzvaybbczvaybbceze', 'zvayooooqrstuvwxyzabcdefgihioznoidikpoirdocinkvxznjkdnlmnopqrstuob', 'ddoznooidikpoirdocinkvxznnere', 'zvayyb', 'ddnzvaybbczvaybbbcee', 'dddnee', 'vdndnkzvxn', 'zoznconorodoc', 'oznooczlpdddnoznordococzlpdxfwmjriajsepocdnidnivioznohknjqzmrdocxfwmjriajvaybbcee', 'ooooonaddnzybvaybbczzvadst', 'ooooonaddnzdybvaybbczzvad', 'ooznooczlpdxfwmjriajsephknjqzmoczgvutyjjbzabrdocaddnzvaybbczyvaybbceevvoo', 'oznorcdocaddnzvardococzlpdxfwmjriajsephknjqzmoczgoczlpdxfwmjriajsjephknjqqzmoczgvutyjbyjbzbczvaybbacee', 'oznordoccoczlpdxfwmqrstuvwxyzabcdeqfghijklmnopqrsjsepocvdn', 'rdococzlpdxfwmjriajsephknjqzmoczrgvutyjbzddnqrsctuvwxyzaoznooocdnbcdefghijkdnlmnodoocnpqrstunab', 'qrstuvwxyzqrstuvwxyzabcdefghijklmnopqrstopqrsjriajsephknjqzmoczgvutyjfbzabddnn', 'vwxyzabcdefghijkznohknjqzmrdocvddnkzvxneelmnopqrstu', 'zvaybbczoczlpdxfwmjriddnzvanybboooznrordoccvutyjbczvayoznordococzlpdxfwmjriajsepocdnidnivioznohknjqzmrdocvddnkzvxneeajsjephknjqqzmoczgvutyjbvaybboznohknjqzmrdocecee', 'zozocvoooznrodoocnrdoccvutyjbutyrdoc', 'oczlpdxfwmjriqrstuvwxyzabcdeqfghijklmnopqrstuajsephsknddnoznordococzlpdxfwmjriajsepocdnjqqzmoczgvb', 'ddnzvanybbroooznrordoccvutyjbczvayoznordococzlpdxfwmjriajsepocdn', 'qrstuvwxyzabcdzozctstnnrdocioznoidikpoirdocinkvxznjkdnlmnopqrstu', 'oznorecnzvaoybbczvaybbceeoc', 'oznorcdocaddnzvardococzlpdxfwmjriajsephknjqzmoczgoczlpdxfwmjriajsjephknjqqzmoczgvutyjbyjbzabymbbzozocvoooznrodoocnrdoccvutyjbutyjbctstnnrdocczvaybbacee', 'oczylpdxfwmjriajsephknjqzsmocqrstuvwxyzabcdefg', 'oooddnzvaooznrordoccvutyjbczvayoznordococzlpdxfwmjriajsedn', 'ddnqrsctuvwxyzabcdefghijkdnlmnodoocnpqrstuun', 'oczlpdxfwmjriqrstuvwxyzabcdeqfghijklmnopqrstuajsephsknddnoznordococzlpdxfwmjriajsepocdnjqqzmoczgvmb', 'zozocvoooznzvaybboczrdococzlpdxfwmjriajsephknjqzmoczrgvutyjbzablpdxfwmjriajsephknjqqzmoczgvutyjbddncedhekhngtqftyujbctstnnrdoc', 'ooooozno', 'nkvxznjkdnlmnopqrszozconordoctuozvaybbce', 'vdoznordococzrlpdxfdvwmjriajsepocdndnkzvxn', 'nkzvxnzn', 'vwxyzazbkulmnopqrstu', 'zvayooooqrstuvwxyzabcdefg', 'tstt', 'dddn', 'ocvutoyhioznonkvxznjjb', 'rdmocqrstuvwxyzabcdefngihioznoidikpoirdocinkvxznjkdnlmnopqrstuoczlpdxfwmjriajsephknjqzmoczgvzutyjbzab', 'oqrstuvwxyzabcvwxyzabcdefghklmnopqrstudefg', 'oooooo', 'oznorecnzvaybboczvaybbceeoznooc', 'nkvxznjkdnlmnopqrstuoczlpdxfwmjriajsephknjqzmoczgvzutyjbzab', 'vwxyzabcdefogzozocvoooznrordoccvutyjbutyjbctstnnrdochnijkulmnopqrstu', 'tzozocvoooznrodoocnrdoccvutyjbutyjbctstnnrdocsstt', 'nkvxznjkdnlmnopqrstuoczlpdxfwmjriajszephknjqzmoczgvzutyjbzab', 'oznorcdocaddnzvardococzlpdxfwmjriajsephknjqzmoczgoczlpdxfwmjriajsjephknjqqzmoczgvutyjbyjbzabymbbzozocvoooznrodooczvaybbczoczlpdxfwmjriajsjephknjqqzmoczgvutyjbvaybboznohknjqzmrdoceceejbutyjbctstnnrdocczvaybbacee', 'ozocvutyhioznonkvxznjjbno', 'vdozrdmocqrstuvwxyzabcdefngihioznoidikpoirdocinkvxznjkdnlmnopqrstuoczlpdxfwmjriajsephknjqzmoczgvzutyjbzabnordococzlpdxfwmjriajsepocidndnkzvxn', 'zvaybbczvayqrstuvwxyzqrstuvwxyzabcdefghijklmnopqmrstuabcdefghijkdnlmnopqrstubcebe', 'oooonayddnzybbvaybbczvtsttoad', 'qrtstuvwxyzabcdefghijkdnlmnodoocnpqrstu', 'zvaybbcbbe', 'ocodoocnoznorcdocaddnzvaybbczvaybcbceze', 'rdococzlpdxfwmjriajsephknrdococzlpdxfwmjriajsephknjqzmoczrgvutyjbzabjqzmoczgvutyjbzab', 'nkzvxnoznozn', 'vdddvnkzvxn', 'ozoooooonorecnzvaoyoc', 'oooznroucvutyjb', 'ocodoocnoznorccdocaddnzvaybbczvaybcbceze', 'oczzlpdxfwmjriajsephknjqqzmooczgvb', 'ddnqrsoooznrordocucvutyjbctuvwxyzabcdefghijkdnlmnodoocnpqrstun', 'oczlpdxfwmjriajsephkqqzmoczgvvutyjb', 'vwxyzabcdefghijkoznohknjqzmrdocvddnkzhvxneelmnopqrstu', 'zozocvoooznrodoocnrdoccvutyjbutyjbzozcnordocctstnnrdoc', 'ddnqrsoooznrordocucvutyjbctuvwxyzabcdefghijkdnlmnordoocnpqrstun', 'oczlpdxfwmjriqrstuvwxyzabcdeqfghijklmnopqrstuajsephsknddnozooooqrstuvwxyzabcdefgocdnjqqzmoczgvb', 'vdndoczylpdxfwmjriajsephknjqzsmocqrstuvwxyzabcdefgnkzvxn', 'zozctstnnzvybbcbooooqrstuvwxyzabcdefgc', 'ddnqrsctuvwxyzaoczvayybdnbcdefghijkdnlmnodoocnpqrstun', 'ddnzvanybboooznrordoccvutyjbczvayoznordococzlpdxfwmjriajsepocdnidnivioznohknjqzmrdocvddnkzvxneebbcbe', 'ooooznrordocyjb', 'ddnzddnzvaybbczvaybbceevaybqrstuvwxyzabcdefghijkdnlmnodoocnpqrstubczvaybbcddn', 'zvayooooznorcdocaddnzvaybbczvaybbcezeoqrstuvwxyzabcdefgihioznoidoznohknjqzmrddnkzvxneeikpoirdocinkvxznjkdnlmnopqrstuob', 'vdndoczylpdxfwmjriajsephknjqzsmococzlpdxfwmjriajsephkqqzmoczgvvutyjbqrstuvwxyzabcdefgnkzvxn', 'qrstuvwxyzabcdefngihhioznoidikpoirdocinkvxznjkdnlmnopqrstu', 'cfdefgc', 'oczlpdxfwmjriajnsephknjqqzmoczgvutyjbdddn', 'oczlzvaybbcepdxfwmjriajsqephknjqzmoczgvutyjb', 'qrstuvvwxyzaboooznrordocqrstuvwxyzabcdefgcdefrstuudoocnpdxfwmbjriamjsephknjqzvutyjbzab', 'naddnzyvayabbczvad', 'oooznohknjqzmoooco', 'zozocvoooznrordoccvutyjbutyjbctstnnbrdoc', 'ddnoznordococzlpdxfwmjriajsepocdnidnivioznohknjnqzmrdoc', 'vwxyzabcdzefrstuu', 'ooczlpdxfwmjriajsephknjqqzmoczgvutyjbddn', 'oznorcdocaoznoddnzvaybbczvaybbcee', 'vwxyzabcdefghijkoznohknjqzmrdocvddnkzvzxneelmnopqrstu', 'ddnzvaooznrordoccvvxnee', 'oooddnzvaooznrordoccvutyjbczvayoznordococzlpdxfwmjriajsednozno', 'oczlpdxfwmjriajsephknjqzmoczgvyjb', 'qqrsctuvwxyzabcdefghijkdnlmnodoocnpqrstu', 'vvvvv', 'coooznohknjqzmooococ', 'vwxyzabcdefghniooooqrstuvwxyzabcdefgjkulmnopqrstuzvaybbce', 'oooznoo', 'oznorcdocaoznoddnzvaybbcznoznordocvaybbcee', 'ocdnidoniviozno', 'ooooqrstuvwxyzabcdefg', 'nkvxznjkdnvwxyzabcdefghijkoznohknjqzmrdocvddnkzvxneelmnopqrstulmnopqrstu', 'nkvxznjkdnvwxyzabcdefghijkoznohknjqzmrldocvddnkzvxneelmnopqrstulmnopqrstu', 'oczlzvaybbcexpdxfwmjriajsephknjqzmoczgvutyjb', 'zvaybboczrdococzlpdxfwmjriajsephknjqzmoczrgvutyjbzablpdxfwmjriajsephknjqqzmoczgvutyjzvaaybbcebddncedhekhngtqftyu', 'oczlpdxfwmjriavwxyzabcdefghijkaddnzvaybbczvajybbceelmnopqrstujsjephknjqqzmoczgvutyjb', 'vdndnkdoocnzvxn', 'vdndoczylpdxfwmjriajsephknjqzsmocqqrstuvwxyzqrstuvwxyzabcdefghijklmnopqrstopqrstuoczylpdxfwmjrinddnajsephknjqzmoczgvutyjbzabrstuvwxyzabcdefgnkzvxn', 'zvaybbczoczlpdxfwmjriajsjephknjqqzmoczgvutyjbvaybboznohknjqzmroczlzvaybbceqrstuvwxyzqrstuvwxyzabcdefghijklmnopqrphknjqzmoczgvutyjbdocecee', 'rdococzlpdxfwmjriajsephknjqzmozcoznordoczgoczlpdxfwmjriajsjephknjqqzzvaybbczvaybbvceemoczgvutyjbyjbzab', 'zddnzvanooooybboooznroordoccvutyjbvdoznordococzrlpdxfdvwmjriajsepocdndnkzvxnnybbcbe', 'ooooozoooono', 'ocznorccdocaddnzvaybbczvaybcbceze', 'zvybbcbbe', 'zvbe', 'nkvxznvjkdnlmnopqrstuoczlpdxfwmjriajszephknjqzmoczgvzutyjbnddzab', 'vwxyzabcdefogzozocvoooznrordoccvutyjbutyjbctstnndochnijkulmnopqrstu', 'rdococzlpdxfwmriajsephknjqzmozczgoczlpdxfwmjriajsjephknjqqzmoczgvutyjbyjbzab', 'ddnqrsctkuvwxyzaoczvayybdnbcdefghijkdnlmnodoocnpqrstun', 'doznohknjqzmrddnkzvxneeikpo', 'zvaybooznooczlpdxfwmjriajsephknjqzmoczgvutyjjbzabrdocaddnzvaybbczyvaybbceevvoobczvaybbcebe', 'oooznrordocucv', 'doooddnzvaooznrovrdoccvutyjbczvayoznordococzlpdxfwmjriajsepocdn', 'zozocvoooznzvaybboczrdococzlpdxfwmjriajsevphknjqzmoczrgvutyjbzablpdxfwmjriajsephknjqqzmoczgvutyzjbddncedhekhngtqftyujbctstnnrdoc', 'zozocvoooznrodoocnrdoccvutyjbutyjbctstnnrdocvutoyhioznonkvxznjjboc', 'nkvxznvjkdnlmnopqrstuoczlpdxfwmjriajszephozznoknjqzmoczgvzutyjbnddzab', 'ddnqrsctuvwxyzabcdefghijkdnlmnodoocnpqrstuddn', 'vdndoczylpdxfwmjriajsephknjqzsmococzlpdxfwmjriajsephkqqzmocvwxyzabcdoczlpdxfwmjriavwxyzabcdefghijkaddnzvaybbczvaybbceelmnopqrstujsjephknjqqzmoczgvutyjbefgnkzvxn', 'ddnzvaybbczvaybcee', 'zvaybzozocvoooznrordoccvutyvwxyzabcdefrstu', 'qrstuvwoznorcdocaddnzvardococzlpdxfwmjriajsephknjqzmoczgoczlpdxfwmjriajsjephknjqqzmoczgvutyjbyjbzabymbbzozocvoooznrodoocnrdoccvutyjbutyjbctstnnrdocczvaybbaceesjriajsephknjqzmoczgvutyjfbzabddnn', 'vwxyhzabcdefghklmnopqrstu', 'zvaybcbce', 'zvaybzozocvoooznrordoccvuyjbutyjbctstnnrdoc', 'vbwxyzabqrstuvwxyzabcdefngihioznoidikpoirdocinkvxznjkdnlmnopqrstucdefghklmnopqrstu', 'tzozocvoooznrodoocnrdoccvutyjbdutyjbctstnnrdocsstt', 'nkvxznjkdnlmnopqrstuucvutyjb', 'ddnzvanybboooznrordoccvutyjbczvayoznordococzlpdxfwmjriajsepocdn', 'sst', 'nayddnzybvaybbcoznorcdocaddnzvardococzlpdxfwmjriajsephknjqzmoczgoczlpdxfwmjriajsjephknjqqzmoczgvutyjbyjbzabymbbczvaybbaceezzvybbcbevad', 'oznordocooooozoooono', 't', 'nkvzxznvjkdnlmnopqrstuoczlpdxfwmjriajszephozznoknjqzmoczgvzutyjbnddzab', 'ddnzvanooooybboooznrordoccvutyjbczvayoznordococzlpdxfwmjriapjsepocdnidnivioznohknjqzm', 'rdococzlpdxfwmjriajsephknrdococzlpdxfwmjriajsephknjqzmoczooooznrordocyjbrgvutyjbzabjqzmoczgvutyjbzab', 'ddefghijn', 'zvaybbczvayqrstuvwxyzqrstuvlwxyzabcdefghijklmnopqmrstuabcdefghijkdnlmnopqrstubcebe', 'ocqrstuvwxyzqrstuvwxyzabcdefghijklmnopqrstopqrstuoczylpdxfwmbjriamjsephknjqzmoczgvutyjbzabzlpdxfwmjriajsephknjqqzmoczgvutyjb', 'nozdnordoc', 'naddnzyvaybbczvadst', 'vwxyzabcdefghnijkulmnopqrshtuooo', 'oczlpdxfwmddnqrsctuvwxyzabcdefghijkdnlmnodoocnpqrstuunqzmoczgvb', 'rdococzlpdxfwmjriajsephknrdococzlpdxfwmqrstuvwxyzabcdefgithioznoidikpoirdocinkvxznjkdnlmnopqrstujriajsephknjqzmoczooooznrordocyjbrgvutyjbzabjqzmoczgvutyjbzab', 'ddnqrsctuvwxyzaocdnpbcdefghijkdnlmnodoocnpqrstun', 'ocznorccdzvaybbceocaddvaybbczvaybcbceze', 'ozoznooidikpoirdocinkvxzno', 'zv', 'zvaybbczoczlpdxfwmjriajsjephknjqqzmoczgvutyjbvaybboznohknjqzmroczlzvaybbcepdxfwmooojriajsephknjqzmoczgvutyjbdocecee', 'oondzvaybooznooczlpdxfwmjriajsephknjqzmoczgvutyjjbzabrdocaddnzvzvaybzozocvoooznrordoccvutyjbutyjbctstnnrdocbednooznrordoccvutyjb', 'nkvxznjkdnlmnopqrszozcounordoctuozvaybbce', 'rdococzlpdxfwmjriajsephknrdococzlpdxfwmqrstuvwxyzabcdefg', 'tstooooonnrdoc', 'rdococzlpdxfwmjriajsephknjqzmoczgvutyjlbzab', 'oznorcdocaddnzzozconordocvardococzlpdxfwmjriajsephknjqzmoczgoczlpdxfwmjriajsjephknjqqzmoczgvutyjbyjbzbczvaybbacee', 'sss', 'ooooqrstuvddnnwxyzabcdefg', 'nkvzn', 'ddndoznohknjqzmrddnkzvxneeikpozddnzvaybbczvaybbceevaybbczvaybbbcddn', 'ddnqrnsctuvwxyzaocdnpbcdeoczlpdxfhknjqqzmoczgvbfghijkdnlmnodoocnpqrstun', 'ddnnqrsctuvwxyzaoczvayybdnbcdefghijkdnlmnodoocnpqrstun', 'vwxyzabcdefghklmnopnaddnzybvaybbczvad', 'zozocvoooznrordoccvutyjbutyjbctoczlpdxjriajsjephknjqqzmoczgvutyjbtnnrdoc', 'doooddnzvaooznrovrdoccvutyjbczvayoznordococzlpdxfwmjrajsepocdn', 'vdddvnkddnqrsctuvwxyzaoczvayybdnbcdefghijkdnlmnodoocnpqrstunzvxn', 'rdococzlpdxfwmjriajsephozoooooonorecnzvaoyoczlpdxfwmjriajsephknjqzmoczoooooznrordocyjbrgvutyjbzabjqzmoczgvutyjbzab', 'oczlzvaybbcexpdxfwmjriajsephzknjqzmoczgvutyjzvaybbcbbeb', 'ddnooooznrordocyjbn', 'qrstuvwxyzabcdefngihioznoidikpoirdocinstu', 'vzozocvoooznrordocrdoccvutyjbutyjbctoczlpdxjriajsjephknjqqzmoczgvutyjbtnnrdocwxyzabcdefghklmnopqrstu', 'vdndoczylpdxfwmjriajsepqrstuvwxyzabcdefghijkdnlmnodoocnpqrstuhknjqzsmocqrstuvwxyzabcdefgnkzvxn', 'nkvxznjkdnlmnopqrstuoczzlpdxfwmjriajsephknjqzmoczgvzutyjbzabnordococzlpdxfwmjriajsepocidndnkzvxn', 'nkvxznjkdnlvwxyzabcdefghijkoznohknjqzmrdocvddnkztulmnopqrstu', 'zozocvoooznrordoccvutyjbutyjbctstnnbrdooc', 'oczzlpdxfwmjrmiajsephknjqqzmooczgvb', 'nkvxznjkdnlmnopqrstuoczzlpdxfwmjriajsephknjqzmoczgvzutyjbzabnordococzlpdxfwmjriajsepoccidndnkzvxn', 'vwxyzabcdeqrstuvwxyzabcdzozctstnnrdocioznoidikpoirdocinkvxznjkdnlmnopqrstufghklmnopqrstu', 'zvaybbczoczlpdxfwmjriajsjephknjqqzmoczgvutyjbvaybboznohknjqzmroczlzvaybbceqrstuvwxyzqrstuvwxyzabcdefghijklmnopqoooooznorphknjqzmoczgvutyjbdocecee', 'coooznohknjqzmooocoooooonaddnzdybvaybbczzvadc', 'ooooonadodnzybvaybbczzvadst', 'nkvxznjkdnlmnopqrstuo', 'dooooddnzvaooznrovrdoccvutyjbczvayoznordococzlpdxfwmjriajsepocdn', 'ocznorccdzvaybbceocaddvaybbczvaybcbzceze', 'naddnzyvaybbczvaadybbceedn', 'qrstuvwxyzqrstuvwxyzabcdefghijklmnzopqrstopqrstuoczyldoocnpdxfwmbjriamjsephknjqzvutyjbzab', 'zvaybbczoczlpdxfwmjriddnzvanybboooznrordoccvutyjbcnohknjqzmrdocvddnkzvxneeajsjephknjqqzmoczgvutyjbvaybboznohknjqzmrdocecee', 'oqrsktuvwxyzabcvwxyzabcdefghklmnopqrstudefg', 'ddnzvanybbroooznrovutyjbczvayoznordococzlpdxfwmjriajsepocdn', 'zozocvoooznrordoccvutyjbutyjbctstnnrdococzlpdxfwmjriqrstuvwxyzabcdeqfghijklmnopqrstuajsepzgvutyjb', 'oqrstuvwxyzabcvwxyzabcdefghklmnopqrstudefgnkzvxnnzn', 'ddnzddtzozocvoooznrodoocnrdoccvutyjbutyjbctstnnrdocssttnzvaybbczozconordoczvaybebceevaybbcoozvayobbcddn', 'ndoczlpdxfwmjriavwxyzabcdefghijkaddnzvaybbczvaybbceelmnopqrstujsjephknjqqzmoczgvutyjbn', 'qrstuvwxyzabcdefgihioznoidikpoirdocinkvxzooonjkdnlmnopqrstu', 'oczlzvaybbcexpdxfwmjriajsephzknjqzvaybbcbezmoczgvutyjzvaybbcbbeb', 'ddnoznordococzlpdxfwmjzriajsepocdnidnivioznohknjnqzmrdoc', 'zozocvoooznrordoccvutyyjbctstnnbrdooc', 'qrstuvwxyzqrstuvwxyzaoczlzvaybbcexpdxfwmjriajsephzknjqzvaybbcbezmoczgvutyjzvaybbcbbeblmnopqrstopqrsjriajsephknjqzmoczgvddnn', 'zozocvoooznrordoccvutyjbutysstjbctstnnbrdooc', 'ddonzvaooznrordoccvvxnee', 'oznohknjnqzmrdoc', 'ddnzddnzvaybbczvaybbceevaydnlmnodoocnpqrstubczvaybbcddn', 'dv', 'qrstuvwxyzabcdefginaddnzyvaybbczvadsthioznoidikpoirdocinkvxznjkdnlmnopqrstu', 'zvaybboczlpdxfwvwxyzabcdefghijklmnopqrstumjriajsephknjqqzmoczgvutyjbddncedhekhngtqftyu', 'zvaybboczlpdxfwvwxyzabcdefghijklmnopqrstumjriajsephknjqqzmoczgvutyjbddncedhekvdndoczylpdxfwmjriajsepqrstuvwxyzabcdefghijkdnlmnodoocnpqrstuhknjqzsmocqrstuvwxyzabcdefgnkzvxnvdndoczylpdxfwmjriajsephknjqzsmocqrstuvwxyzabcdefgnkzvxnhngtqftyu', 'zvaybbczvayqrstuvwxyzqrstuvwxyzabcdefghijklmnopqmrstuabcdefghicebe', 'zvbee', 'ozocvutyhioznddneeonkvxznjjbno', 'zozocvoooznrodoocnnrdoccvutyjbutyjbctstnnrdocvutoyhioznonkvxznjjboc', 'ddnoznordococzlpdxfwmjriajsnkzvxnoznoznepocdnidnivioznohknjnqzmrdoc', 'qrstuvwxyzabcdefghijkdnllmnodoocnpqrstu', 'loczlpddnzddnzvaybbczvaybbceevaydnlmnodoocnpqrstubczvaybbcddnvb']\n    for i, (inp, exp) in enumerate(zip(inputs, results)):\n        assertion(candidate(*inp), exp, 0)\n",
      "entry_point": "decode_shift",
      "complete_code": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n\n\n    return \"\".join([chr((ord(ch) - ord(\"a\") - 5 + 26) % 26 + ord(\"a\")) for ch in s])\n\n"
    },
    "execution_info": {
      "max_mutations_per_operator": 10,
      "total_operators_tested": 46,
      "operators_with_mutations": 7,
      "execution_timestamp": "2025-08-01T15:44:58.670612"
    }
  }
}