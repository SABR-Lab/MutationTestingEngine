{
  "timestamp": "20250801_160039",
  "test_type": "mutation_testing",
  "metadata": {
    "task_id": "HumanEval/153",
    "timestamp": "20250801_160039",
    "tester_version": "1.0",
    "total_operators_tested": 9,
    "operators_with_errors": 1
  },
  "summary": {
    "original_passes": true,
    "total_mutations": 21,
    "killed_mutations": 13,
    "mutation_score": 0.6190476190476191,
    "survival_rate": 0.38095238095238093
  },
  "detailed_results": {
    "task_id": "HumanEval/153",
    "dataset_type": "plus",
    "original_passes": true,
    "total_mutations": 21,
    "killed_mutations": 13,
    "mutation_score": 0.6190476190476191,
    "mutation_results": {
      "NumberReplacer": {
        "total_mutations": 8,
        "killed_mutations": 4,
        "survival_rate": 0.5,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (1, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (1, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T16:00:34.736301",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (-1, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (-1, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T16:00:35.082613",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 1)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 1)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T16:00:35.400102",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 3,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, -1)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, -1)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T16:00:35.658578",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 4,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 2\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 2\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmphqpou1mc.py\", line 86, in <module>\n    check(Strongest_Extension)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmphqpou1mc.py\", line 80, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmphqpou1mc.py\", line 73, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T16:00:35.864114",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 0\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 0\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpf6ic5b3p.py\", line 86, in <module>\n    check(Strongest_Extension)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpf6ic5b3p.py\", line 80, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpf6ic5b3p.py\", line 73, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T16:00:36.076273",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 6,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 2\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 2\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpq421j07t.py\", line 86, in <module>\n    check(Strongest_Extension)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpq421j07t.py\", line 80, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpq421j07t.py\", line 73, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T16:00:36.283355",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 7,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 0\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 0\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp3h75rbuu.py\", line 86, in <module>\n    check(Strongest_Extension)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp3h75rbuu.py\", line 80, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp3h75rbuu.py\", line 73, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T16:00:36.451889",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 8,
        "mutations_tested": 8
      },
      "Add->Sub": {
        "error": "division by zero"
      },
      "Sub->Add": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP + SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP + SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp59ppbsnn.py\", line 86, in <module>\n    check(Strongest_Extension)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp59ppbsnn.py\", line 80, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp59ppbsnn.py\", line 73, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T16:00:37.053406",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "AddEq->SubEq": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP -= 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP -= 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpqwvdqmsn.py\", line 86, in <module>\n    check(Strongest_Extension)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpqwvdqmsn.py\", line 80, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpqwvdqmsn.py\", line 73, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T16:00:37.260859",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM -= 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM -= 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpmchuzv4g.py\", line 86, in <module>\n    check(Strongest_Extension)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpmchuzv4g.py\", line 80, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpmchuzv4g.py\", line 73, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T16:00:37.480489",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Eq->NotEq": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) != max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) != max_strength:\n            return class_name + '.' + e",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp2ppdcueo.py\", line 86, in <module>\n    check(Strongest_Extension)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp2ppdcueo.py\", line 80, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp2ppdcueo.py\", line 73, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T16:00:37.722731",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Remove ReturnValue": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp2xr67w_8.py\", line 86, in <module>\n    check(Strongest_Extension)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp2xr67w_8.py\", line 80, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmp2xr67w_8.py\", line 45, in Strongest_Extension\n    max_strength = max(map(strength, extensions))\nTypeError: '>' not supported between instances of 'NoneType' and 'NoneType'\n",
            "timestamp": "2025-08-01T16:00:37.960510",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp7dcv9olb.py\", line 86, in <module>\n    check(Strongest_Extension)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp7dcv9olb.py\", line 80, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp7dcv9olb.py\", line 73, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T16:00:38.180549",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Zero->One": {
        "total_mutations": 2,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (1, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (1, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T16:00:38.439189",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 1)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 1)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T16:00:38.675966",
            "status": "SURVIVED",
            "reason": "tests_passed"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "One->Zero": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 0\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 0\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpt1syn9n6.py\", line 86, in <module>\n    check(Strongest_Extension)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpt1syn9n6.py\", line 80, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpt1syn9n6.py\", line 73, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T16:00:38.873949",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 0\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 0\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmppxkg9xzp.py\", line 86, in <module>\n    check(Strongest_Extension)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmppxkg9xzp.py\", line 80, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmppxkg9xzp.py\", line 73, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T16:00:39.102053",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "String->Empty": {
        "total_mutations": 2,
        "killed_mutations": 1,
        "survival_rate": 0.5,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"\"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T16:00:39.274761",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '' + e",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpk6uyaeq0.py\", line 86, in <module>\n    check(Strongest_Extension)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpk6uyaeq0.py\", line 80, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpk6uyaeq0.py\", line 73, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T16:00:39.476852",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "String->X": {
        "total_mutations": 2,
        "killed_mutations": 1,
        "survival_rate": 0.5,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"X\"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"X\"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + '.' + e",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T16:00:39.655118",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
            "mutated_code": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + 'X' + e",
            "mutated_complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def strength(s: str) -> int:\n        CAP, SM = (0, 0)\n        for ch in s:\n            if ch.isupper():\n                CAP += 1\n            if ch.islower():\n                SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + 'X' + e",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpcphjtxhg.py\", line 86, in <module>\n    check(Strongest_Extension)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpcphjtxhg.py\", line 80, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpcphjtxhg.py\", line 73, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T16:00:39.832891",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      }
    },
    "problem_info": {
      "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
      "canonical_solution": "\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n",
      "test_code": "\n\nimport numpy as np\n\ndef is_floats(x) -> bool:\n    # check if it is float; List[float]; Tuple[float]\n    if isinstance(x, float):\n        return True\n    if isinstance(x, (list, tuple)):\n        return all(isinstance(i, float) for i in x)\n    if isinstance(x, np.ndarray):\n        return x.dtype == np.float64 or x.dtype == np.float32\n    return False\n\n\ndef assertion(out, exp, atol):\n    exact_match = out == exp\n\n    if atol == 0 and is_floats(exp):\n        atol = 1e-6\n    if not exact_match and atol != 0:\n        assert np.allclose(out, exp, rtol=1e-07, atol=atol)\n    else:\n        assert exact_match\n\n\ndef check(candidate):\n    inputs = [['Watashi', ['tEN', 'niNE', 'eIGHt8OKe']], ['Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']], ['__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']], ['K', ['Ta', 'TAR', 't234An', 'cosSo']], ['__HAHA', ['Tab', '123', '781345', '-_-']], ['YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']], ['finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']], ['_', ['Bb', '91245']], ['Sp', ['671235', 'Bb']], ['Test1', ['UPPERCASE', 'uppercase', '1111']], ['Test2', ['capitalLETTERS', 'lowercaseletters', 'mIxEdcAsE']], ['Test3', ['oneUPPERcaseletter', 'TWoUPPERcaseletTErs', 'threeUppercaseletters', 'fourlowercaseletters']], ['Test4', ['ALLUPPERcaseletters', 'ALLlowercaseletters', 'Nolettersatall123', '12345']], ['Test5', ['ZERO', 'one', 'Two', 'THREE', 'four', 'FIVE', 'six', 'seven', 'eight', 'nine', '10']], ['Person', ['TEst', 'Name', 'naMe', 'AGE']], ['Animal', ['CAMel', 'hOrSE', 'DoG']], ['Vehicle', ['Automobile', 'CAR', 'SuPerbIkE', 'Z']], ['Computer', ['Laptop', 'DEsktop', 'TABLET', 'MONITOR', 'MOUSE', 'KEYboard']], ['Book', ['NOVEL', 'picturebook', 'COOkbook', 'Dictionary', 'Encyclopedia']], ['Computer', ['Laptop', 'DEsktop', 'TABLET', 'MONITOR', 'MOUSE', 'KEYboard', 'KEYeightboard']], ['Compter', ['Laptop', 'DEsktop', 'TABLET', 'MONITOR', 'MOUSE', 'KEYboard', 'KEYeightboard']], ['Computer', ['Laptop', 'DEsktop', 'TABLET', 'MONITOR', 'MOUSE', 'KEYeightboard']], ['Vehcice', ['Automobile', 'CAR', 'Vehicle', 'SuPerbIkE', '']], ['VehciceBook', ['Automobile', 'CAR', 'Vehicle', 'SuPerbIkE', '']], ['Animaal', ['CAMel', 'hOrSE', 'DoG']], ['Animal', ['capitalLETTERS', 'lowercaseletters', 'mIxEdcAsE']], ['Test1', ['UPPERCASE', 'uppercase', 'uppercasse', '1111']], ['Test1', ['UPPERCASE', 'uppercase', 'Animal']], ['Vehcice', ['Automobile', 'CAR', 'Vehicele', 'SuPerbIkE', '']], ['T1e1st1', ['UPPERCASE', 'uppercase', '1111']], ['Test3', ['oneUPPERcaseletter', 'threeUppercaseletters', 'fourlowercaseletters', 'threeUppercaseletters']], ['Vehcice', ['bIkE', 'Automobile', 'CAR', 'Vehicle', 'SuPerbIkE', '']], ['eightTeste3', ['UPPERCASE', 'uppercase', 'Animal']], ['AniVehcicemal', ['CAMel', 'hOrSE', 'DoG']], ['Test5', ['ZERO', 'one', 'Two', 'THREE', 'four', 'FIVE', 'six', 'FVIVE', 'seven', 'eight', 'nine', '10']], ['VehciceBo', ['Automobile', 'CAR', 'Vehicle', 'SuPerbIkE', '']], ['Test1', ['UPPERSCASE', 'uppercase', 'Animal']], ['Test1', ['UPPERCASE', 'uppercase', 'uppercasse', '1Test5111']], ['Animal', ['Do', 'CAMel', 'hOrSE', 'ZERO']], ['eightTeste3', ['aAnimal', 'UPPERCASE', 'uppercase', 'Animal']], ['TeTst3CTest3omputer', ['oneUPPERcaseletter', 'TWoUPPERcaseletTErs', 'fourlowercaseletteNamers', 'threeUppercaseletters', 'fourlowercaseletters']], ['Vehcpicturebccookoobk', ['Automobile', 'CAR', 'Vehicle', 'SuPerbIkE', '']], ['Test5', ['ZERO', 'one', 'Two', 'THREE', 'fur', 'four', 'FIVE', 'six', 'FVIVE', 'seven', 'eight', 'nine', '10']], ['AnimAnimaonelal', ['CAMel', 'hOrSE', 'DoG']], ['_', ['yolo', '900000000', 's3cr3tK3y', 'GIMMETH3L00TZ!']], ['ClassName', ['XXXXXXx', 'AAA', 'ffffff', 'Bbcde', 'GHIJKLMN']], ['My_class', ['Aaa', 'ZZZZ', 'ddd', 'E', 'HHHHHH']], ['Another_class', ['AbCdEfG', 'Hijklmno', '12345', 'pqrstuvwxy', 'Z']], ['MYCLASS', ['qwerty', 'asdfgh', 'zxcvbn', 'QWERTY', 'ASDFGHJKL', 'ZXCVBNM']], ['testing1', ['TESTING2', 'TEST', 'test', 'tEstin3g']], ['AnotherClass', ['hello', 'WORLD', 'Python321', 'TEST', 'Extend']], ['MyClass', ['AbcDEFg', 'hIjKlmn', 'OPqrst', 'UVWxYZ']], ['YetAnotherClass', ['1', 'BBB', 'ccc', 'DDDDDD', 'EEEeeeE', 'ffffff']], ['OneMoreClass', ['AAAaA', 'bbBbB', 'CcCcC', 'ddddDDD', 'EEE', 'FgHiJ', 'kLMNop']], ['s3cr3tK3y', ['AbCdEfG', 'Hijklmno', '12345', 'pqrstuvwxy', 'Z']], ['MyCslass', ['hIjKlmn', 'OPqrst', 'UVWxYZ']], ['AnotherClass_', ['hello', 'WORLD', 'Python321', 'TEST', 'Python3yolo21', 'Extend']], ['MExtendy_class', ['Aaa', 'ZZZZ', 'ddd', 'E', 'HHHHHH']], ['MYCLASS', ['qwerty', 'asdfgh', 'zxcvbn', 'QWERTY', 'ASDFGHJKL', 'qweqrty', 'ZXCVBNM']], ['My_classMYCLASS', ['Aaa', 'ZZZZ', 'ddd', 'E', 'HHHHHH', 'ZZZZ']], ['ClassaName', ['XXXXXXx', 'AAA', 'ffffff', 'Bbcde', 'GHIJKLMN']], ['ClassaName', ['XXXXXXx', 'AAA', 'ffffff', 'Bbcde', 'GHIJKLN']], ['otherClahellorss', ['hello', 'WORLD', 'Python321', 'TEST', 'Extend']], ['s3cr3tK3y', ['Hijklmno', 'pqrstuvwxy', 'Z']], ['s3cr3tK3y', ['Hijklmno', '12345', 'pqrstuvwxy', 'Z', 'Hijklmno']], ['ClassaName', ['GHIHJKLN', 'XXXXXXx', 'AAA', 'ffffff', 'Bbcde', 'GHIJKLN']], ['otherClahellorss', ['hello', 'WORLD', 'ExtAbCdEfGend', 'TEST', 'Extend']], ['My_classMYCLASS', ['Aaa', 'ZZZZ', 'dddd', 'E', 'HHHHHH', 'ZZZZ']], ['Python321_', ['yolo', '900000000', 's3cr3tK3y', 'GIMMETH3L00TZ!']], ['My_classLMYCLASS', ['Aaa', 'ZZZZ', 'ddd', 'E', 'HHHHHH', 'ZZZZ']], ['s3cr3tK3y', ['AbCdEfG', 'Hijklmno', '12345', 'pqrstuvwxy']], ['YetAnotherClass', ['1', 'BBB', 'GIMMETH3L00TZ!', 'ccc', 'DDDDDD', 'EEEeeeE', 'ffffff']], ['Another_class', ['AbCdEfG', 'Hijklmno', '12345', 'pqrstuvwxy', 'Z', '12345']], ['MExtendy_class', ['Aaa', 'ddd', 'E', 'HHHHHH']], ['My_class', ['qwerty', 'asdfgh', 'zxcvbn', 'ASDFGHJKL', 'qwewrty', 'ZXCVBNM']], ['Another_class', ['AbCdEfG', 'Hijklmno', '12345', 'AbCdEfASDFGHJKLG', 'pqrstuvwxy', 'Z', '12345']], ['dddd', ['Hijklmno', 'pqrstuvwxy', 'Hijklmno']], ['ClassaNamse', ['XXXXXXx', 'AAA', 'ffffff', 'Bbcde', 'GHIJKLMN', 'XXXXXXx']], ['MyClass', ['AbcDEFg', 'hIjKlmn', 'OPqrst', 'UVotherClahellorssWxYZ']], ['_', ['yolo', '900000000', 's3cr3tKK3y', 'GIMMETH3L00TZ!']], ['My_classLMYCLASS_', ['yolo', '900000000', 's3cr3tK3y', 'GIMMETH3L00TZ!']], ['s3cr3tK3y', ['AbCdEfG', 'Hijklmno', 'My__classMYCLASS', 'pqrstuvwxy', 'Hijklmno']], ['_', ['yolo', '900000000', 's3cr3tK3y']], ['s3cr3tK3y', ['Hijklmno', 'pqrstuvwxy', 'Z', 'pqrstuvwxy']], ['ClassaName', ['XXXXXX', 'AAA', 'ffffff', 'Bbcde', 'GHIJKLN']], ['MYCLASS', ['qwerty', 'zxcvbn', 'QWERTY', 'ASDFGHJKL', 'ZXCVBNM']], ['MyClasss', ['AbcDEFg', 'hIjKlmn', 'OPqrst', 'UVWxYZ']], ['s3cr3tK3y', ['AbCdEfG', 'My__classMYCLASS', 'pqrstuvwxy', 'Hijklmno']], ['otherClahellorss', ['ClassaNamse', 'WORLD', 'ExtAbCdEfGend', 'TEST', 'Extend']], ['My_classMYCLASS', ['Aaa', 'ZZZZ', 'dddd', 'E', 'HHHHHH', 'ZZZZ', 'ZZZZ']], ['MYCLASMyClasssS', ['qwerty', 'asdfgh', 'zxcvbn', 'QWERTY', 'ASDFGHJKL', 'qweqrty', 'ZXCVBNM']], ['Another_class', ['AbCdEfG', 'Hijklmno', '12345', 'pqrstuvwxy', 'Z', '12345', 'AbCdEfG']], ['AnotherClas_', ['hello', 'WORLD', 'Python321', 'TEST', 'Python3nyolo21', 'Extend', 'Python3yolo21']], ['ClassaNamse', ['XXXXXXx', 'AAA', 'bbBbB', 'Bbcde', 'MyClasss', 'XXXXXXx']], ['ddGHIHJKLNdd', ['Hijklmno', 'pqrstuvwxy', 'Hijklmno']], ['qwewrty', ['ylo', 'yolo', '900000000', 's3cr3tK3y']], ['OPqrst', ['AbCdEfG', 'Hijklmno', '12345', 'pqrstuvwxy']], ['MExtendy_class', ['Aaa', 'ZZZZ', 'ddd', 'E', 'HHHHHH', 'ZZZZ']], ['AnotAbCdEfASDFGHJKLGher_class', ['AbCdEfG', 'Hijklmno', '12345', 'AbCdEfASDFGHJKLG', 'pqrstuvwxy', 'Z', '12345']], ['My_class', ['Aaa', 'ZZZzxcvbnZ', 'ddd', 'E', 'HHHHHH']], ['otherClahellorss', ['ClassaNamsse', 'WORLD', 'ExtAbCdEfGend', 'TEST', 'Extend']], ['ys3cr3tK3y', ['Hijklmno', 'pqrstuvwxy', 'Z']], ['YetAnotherClasUVWxYZs', ['1', 'BBB', 'ccc', 'DDDDDD', 'EEEeeeE', 'ffffff', 'EEEeeeE']], ['MnYetAnSlaassYCLASS', ['qwerty', 'zxcvbn', 'QWERTY', 'ASDFGHJKL', 'ZXCVBNM']], ['My_class', ['ddddDDD', 'asdfgh', 'zxcvbn', 'ASDFGHJKL', 'qwewrty', 'ZXCVBNM', 'asdfgh']], ['nYetAnotherCMYCLASSlassnothGIM!METYoetAnoEEErClassH3L00TZ!yoloerClass', ['qwerty', 'zxcvbn', 'QWERTY', 'ASDFGHJKL', 'ZXCVBNM']], ['ClassaName', ['XXXXXX', 'AAA', 'ffffff', 'Bbcde', 'GHIJKLN', 'GHIJKLN']], ['Python321_', ['yolo', 'nYetAnotherCMYCLASSlaass', 's3cr3tK3y', 'GIMMETH3L00TZ!']], ['test', ['AbCdEfG', 'Hijklmno', '12345', 'pqrstuvwxy', 'Z', '12345', 'AbCdEfG']], ['MMy_classMYCLASS', ['Aaa', 'ZZZZ', 'ddd', 'E', 'HHHHHH', 'ZZZZ']], ['x1UXXXXXXxVWxYZ', ['1', 'BBB', 'ccc', 'DDDDDD', 'EEEeeeE', 'ffffff', 'EEEeeeE']], ['Another_css', ['AbCdEfG', 'Hijklmno', '12345', 'pqrstuvwxy', 'Z', '12345']], ['test', ['Hijklmno', '12345', 'pqrstuvwxy', 'Z', '12345', 'AbCdEfG']], ['My_class', ['Aaa', 'ZZZZ', 'ddd', 'E', 'HHHHHH', 'E']], ['MMy_classMYCLASS', ['Aaa', 'ZZZZ', 'ddd', 'HHHHHH', 'ZZZZ']], ['My_class', ['ddddDDD', 'asdfgh', 'Aaa', 'zxcvbn', 'ASDFGHJKL', 'qwewrty', 'ZXCVBNM', 'asdfgh']], ['MYCLASS', ['Aaa', 'ZZZZ', 'ddd', 'E', 'HHHHHH', 'ZZZZ']], ['My_classMYCLASS', ['Aa', 'ZZZZ', 'HHHHHH', 'ZZZZ']], ['Another_class', ['AbCdEfG', 'Hijklmno', '12345', 'pqrstuvwxy', 'Z', 'AbCdEfG']], ['ClassNaMqwertyy_classLMYCLA_e', ['XXXXXXx', 'AAA', 'ffffff', 'Bbcde', 'GHIJKLMN']], ['My__classMYCLASS', ['ZZZZ', 'dddd', 'E', 'HHHHHH', 'ZZZZ', 'ZZZZ', 'ZZZZ']], ['My_class', ['Aaa', 'ZZZZ', 'HHHMeyOneMoreClassClass', 'ddd', 'E', 'HHHHHH', 'E', 'ZZZZ']], ['My_class', ['Aaa', 'ZZZZ', 'ddd', 'E', 'HHHHH', 'HHHHHH']], ['ddGHIHJKLNdd', ['hello', 'WORLD', 'Python321', 'TEST', 'Python3yolo21', 'Extend']], ['OPqrst', ['AbCdEfG', 'Hijklmno', '12345', 'pqrstuvwxy', '12345']], ['ClassaNamse', ['XXXXXX', 'AAA', 'ffffff', 'Bbcde', 'GHIJKLN', 'GHIJKLN']], ['otherClahellorss', ['ClassaNamsse', 'WORLD', 'ExtAbCdEfGend', 'Extend']], ['ClassaNamse', ['Aaa', 'ZZZZ', 'ddd', 'E', 'HHHHHH', 'ZZZZ']], ['MExty_class', ['Aaa', 'ddd', 'E', 'HHYetAnotherClassHHHH']], ['MMExtendy_classy_classMYCLASS', ['Aaa', 'ZZZZ', 'dddd', 'AAaa', 'HHHHHH', 'ZZZZ']], ['s3cr3tKK3y', ['AbCdEfG', 'Hijklmno', '12345', 'pqrstuvwxy', 'Z', '12345']], ['MExtendy_clasAnotherClasss', ['Aaa', 'ZZZZ', 'ddd', 'E', 'HHHHHH', 'ZZZZ']], ['My_class', ['qwerty', 'asdfgh', 'zxcvbHHHMeyOneMoreClassClassn', 'ASDFGHJKL', 'qwewrty', 'ZXCVBNM']], ['JDLRFD', ['AbcDEFg', 'hIjKlmn', 'OPqrst', 'UVotherClahellorssWxYZ', 'hIjKlmn']], ['test', ['AbCdEfG', 'Hijklmno', '12345', 'pqrstuvwxy', 'Z', '12345', 'AbCdEfG', 'pqrstuvwxy']], ['My_classLMYCLASS_nnYetAnotherCMYsCLASSUVWxYZlass', ['yolo', '900000000', 's3cr3tK3y', 'GIMMETH3L00TZ!']], ['YoetAnoEEErClasslassaName', ['XXXXXXx', 'AAA', 'ffffff', 'Bbcde', 'GHIJKLMN']], ['MExtendyc_class', ['Aaa', 'ZZZZ', 'E', 'HHHHHH']], ['MyClasssnYetAnotherCMYsCLASMqwertyy_classLMYCLASS_', ['AbcDEFg', 'hIjKlmn', 'OPqrst', 'UVWxYZ', 'OPqrst']], ['My_class', ['qwerty', 'asdfgCcCcC', 'zxcvbHHHMeyOneMoreClassClassn', 'ASDFGHJKL', 'qwewrty', 'ZXCVBNM']], ['MMy_clasMEAAAaAxtendy_classsMYCLASS', ['Aaa', 'ZZZZ', 'HHHHHH', 'ZZZZ']], ['', ['HhAas', 'okIWILL123']], ['$pecial_&_Cl@ss_name', ['YoUReXt']], ['123ThisIsTheClassName456', ['Ex1', 'ex2', 'ex3', 'EX4']], ['ThisIsTheClassName', ['ThisIsTheExtension']], ['NoExtensionHasUpperCaseOrLowerCase', ['1234', '5678', '9987', 'hello']], ['', ['abc', 'DEF', 'gHi']], ['SampleClass', ['Abc', 'ddD', 'eFG']], ['SampleClass', ['AAA', 'BBB', 'CCC']], ['SampleClass', ['aBc', 'dEf', 'Ghi']], ['SampleClass', ['AbC', 'DeF', 'gHI']], ['UVWxYZ', ['hello', 'WORLD', 'Python321', 'Exteasdfghnd', 'TEST', 'Extend']], ['AAA', ['AbcDEFg', 'hIjKlmn', 'OPqrst', 'UVWxYZ']], ['testing1', ['TESTING2', 'TOPqrstEST', 'test', 'tEstin3g']], ['MyClass', ['AbcDEFg', 'hIjKlmn', 'OPqrst']], ['AbCdEfG', ['AAAaA', 'bbBbB', 'CcCcC', 'ddddDDD', 'EEE', 'FgHiJ', 'kLMNop']], ['UVWxYZ', ['WORLD', 'Python321', 'Exteasdfghnd', 'TEST', 'Extend']], ['YetAnotherClass', ['1', 'BBB', 'ccc', 'DDDDDD', 'ffffff']], ['MyClass', ['AbcDEFg', 'hIjKlmn', 'Bbcde', 'UVWxYZ']], ['My_class', ['Aaa', 'ZZZZ', 'ddd', 'E']], ['AbCdETESTING2fG', ['AAAaA', 'bbBbB', 'CcCcC', 'ddddDDD', 'EEE', 'FgHiJ', 'kLMNop']], ['AbCdEfG', ['AAAaA', 'bbBbB', 'CcCcC', 'ddddDDD', 'EEE', 'FgHiJ', 'kLMNop', 'ddddDDD']], ['MYCLASS', ['hello', 'WORLD', 'Python321', 'TEST', 'Extend']], ['Tg1', ['TESTING2', 'TOPqrstEST', 'TOPqrsttEST', 'test', 'tEstin3g']], ['fffffBbcdeAaaff', ['AAAaA', 'bbBbB', 'CcCcC', 'ass', 'EEE', 'FgHiJ', 'kLMNop', 'ddddDDD']], ['Another_class', ['AbCdEfG', '1235', 'Hijklmno', '12345', 'vpqrstuvwxy', 'Z']], ['Tg', ['TESTING2', 'TOPqrstEST', 'TOPqrsttEST', 'test', 'tEstin3g']], ['TESTING2', ['AAAaA', 'bbBbB', 'CcCcC', 'ddddDDD', 'EEE', 'FgHiJ', 'kLMNop']], ['M1235yClass', ['AbcDEFg', 'hIjKlmn', 'Bbcde', 'UVWxYZ']], ['T1', ['TESTING2', 'TOPqrstESST', 'TOPqrsttEST', 'test', 'tEstin3g']], ['MYCLASS', ['qwerty', 'asdfgh', 'zxcvbn', 'QWERTY', 'MYCLASS', 'ASDFGHJKL', 'ZXCVBNM']], ['1', ['TESTING2', 'TOPqrstEST', 'TOPqrsttEST', 'test', 'tEstin3g']], ['TESTING2', ['AAAaA', 'bbBbB', 'CcCcC', 'ddddDDD', 'EEE', 'hello', 'kLMNop']], ['T1', ['hello', 'WORLD', 'Python321', 'Exteasdfghnd', 'TEST', 'Extend']], ['TESTING2', ['AAAaA', 'bbBbB', 'CcCcC', 'ddddDDD', 'EEE', 'kLMNop']], ['OneMorCassNaame', ['AAAaA', 'bbBbB', 'CcCcC', 'ddddDDD', 'EEE', 'FgHiJ', 'kLMNop']], ['testing1', ['yolo', '900000000', 's3cr3tK3y', 'GIMMETH3L00TZ!']], ['M1235yClas', ['AbcDEFg', 'hIjKlmn', 'Bbcde', 'UVWxYZ']], ['T1', ['TESTING2', 'TOPqrstEST', 'TOPqrsttEST', 'test', 'tEstin3g']], ['T1', ['hello', 'WORLD', 'Python321', 'Exteasdfghnd', 'TEST', 'Extend', 'WORLD']], ['MCyClass', ['AbcDEFg', 'hIjKlmn', 'OPqrst', 'UVWxYZ']], ['_', ['yolo', '900000000', 's3cr3tK3y', 'GIMMETH3L00TZ!', 'GIMMETH3L00TZ!']], ['1234GHIJKLMN5', ['TESTING2', 'TOPqrstEST', 'TOPqrsttEST', 'test', 'tEstin3g']], ['YetAtEstin3gnotherClass', ['1', 'BBB', 'ccc', 'DDDDDD', 'EEEeeeE', 'ffffff']], ['Ye1234GHIJKLMN5tAnotherClass', ['1', 'BBB', 'ccc', 'DDDDDD', 'ffffff']], ['M1235yClass', ['AbcDEFg', 'hIjKlmn', 'Bbcde', 'UVWxYZ', 'AbcDEFg']], ['Tg', ['AbcDEFg', 'hIjKlmn', 'OPqrst', 'UVWxYZ', 'UVWxYZ']], ['Ye1234GHIJKLMN5tAnotherClass', ['HHHHHM1235yClassHExteand1', 'BBB', 'ccc', 'DDDDDD', 'ffffff']], ['TESTINT2G2', ['AAAaA', 'bbBbB', 'CcCcC', 'testiffffffngg1', 'EEE', 'kLMNop', 'bbBbB']], ['_Exteasdfghnd', ['yolo', '900000000', 's3cr3tK3y', 'GIMMETH3L00TZ!']], ['T11', ['hello', 'WORLD', 'Python321', 'Exteasdfghnd', 'TEST', 'Extend']], ['AbCEdEfG', ['AAAaA', 'bbBbB', 'CcCcC', 'ddddDDD', 'EEE', 'FgHiJ', 'kLMNop']], ['YetAtEstin3gnotherClass', ['1', 'BBB', 'ccc', 'DDDDDD', 'bbBbBeeE', 'ffffff']], ['AbCdEfG', ['AAAaA', 'bbBbB', 'CcCcC', 'ddddDDD', 'xcvbnAAAaA', 'EEE', 'FgHiJ', 'kLMNop', 'ddddDDD']], ['MyClMasss', ['1', 'BBB', 'ccc', 'DDDDDD', 'bbBbBeeE', 'ffffff']], ['TgTg1', ['AbcDEFg', 'hIjKlmn', 'OPqrst', 'UVWxYZ', 'UVWxYZ']], ['Another_class', ['AbCdEfG', '1235', 'Hijklmno', '12345', 'vpqrstuvwxy', 'Z', 'Hijklmno']], ['YCBBBLASS', ['1', 'BBB', 'ccc', 'DDDDDD', 'ffffff']], ['T1', ['hello', 'Python321', 'Exteasdfghnd', 'TEST', 'Extend']], ['M12ss', ['AbcDEFg', 'hIjKlmn', 'Bbcde', 'UVWxYZ', 'AbcDEFg']], ['BBBB', ['AAAaA', 'bbBbB', 'CcCcC', 'testiffffffngg1', 'EEE', 'kLMNop', 'bbBbB']], ['_Exteasdfghnd', ['yMCyClassolo', 'yolo', '900000000', 's3cr3tK3y', 'GIMMETH3L00TZ!']], ['T1', ['hello', 'WORLD', 'Python321', 'Exteasdfghnd', 'helHHHHHHEHxteasdkLMNopfBBBghndo', 'TEST', 'Extend']]]\n    results = ['Watashi.eIGHt8OKe', 'Boku123.YEs.WeCaNe', '__YESIMHERE.NuLl__', 'K.TAR', '__HAHA.123', 'YameRore.okIWILL123', 'finNNalLLly.WoW', '_.Bb', 'Sp.671235', 'Test1.UPPERCASE', 'Test2.capitalLETTERS', 'Test3.TWoUPPERcaseletTErs', 'Test4.12345', 'Test5.THREE', 'Person.AGE', 'Animal.CAMel', 'Vehicle.CAR', 'Computer.MONITOR', 'Book.NOVEL', 'Computer.MONITOR', 'Compter.MONITOR', 'Computer.MONITOR', 'Vehcice.CAR', 'VehciceBook.CAR', 'Animaal.CAMel', 'Animal.capitalLETTERS', 'Test1.UPPERCASE', 'Test1.UPPERCASE', 'Vehcice.CAR', 'T1e1st1.UPPERCASE', 'Test3.oneUPPERcaseletter', 'Vehcice.CAR', 'eightTeste3.UPPERCASE', 'AniVehcicemal.CAMel', 'Test5.THREE', 'VehciceBo.CAR', 'Test1.UPPERSCASE', 'Test1.UPPERCASE', 'Animal.ZERO', 'eightTeste3.UPPERCASE', 'TeTst3CTest3omputer.TWoUPPERcaseletTErs', 'Vehcpicturebccookoobk.CAR', 'Test5.THREE', 'AnimAnimaonelal.CAMel', '_.GIMMETH3L00TZ!', 'ClassName.GHIJKLMN', 'My_class.HHHHHH', 'Another_class.AbCdEfG', 'MYCLASS.ASDFGHJKL', 'testing1.TESTING2', 'AnotherClass.WORLD', 'MyClass.UVWxYZ', 'YetAnotherClass.DDDDDD', 'OneMoreClass.AAAaA', 's3cr3tK3y.AbCdEfG', 'MyCslass.UVWxYZ', 'AnotherClass_.WORLD', 'MExtendy_class.HHHHHH', 'MYCLASS.ASDFGHJKL', 'My_classMYCLASS.HHHHHH', 'ClassaName.GHIJKLMN', 'ClassaName.GHIJKLN', 'otherClahellorss.WORLD', 's3cr3tK3y.Z', 's3cr3tK3y.Z', 'ClassaName.GHIHJKLN', 'otherClahellorss.WORLD', 'My_classMYCLASS.HHHHHH', 'Python321_.GIMMETH3L00TZ!', 'My_classLMYCLASS.HHHHHH', 's3cr3tK3y.AbCdEfG', 'YetAnotherClass.GIMMETH3L00TZ!', 'Another_class.AbCdEfG', 'MExtendy_class.HHHHHH', 'My_class.ASDFGHJKL', 'Another_class.AbCdEfASDFGHJKLG', 'dddd.Hijklmno', 'ClassaNamse.GHIJKLMN', 'MyClass.AbcDEFg', '_.GIMMETH3L00TZ!', 'My_classLMYCLASS_.GIMMETH3L00TZ!', 's3cr3tK3y.My__classMYCLASS', '_.900000000', 's3cr3tK3y.Z', 'ClassaName.GHIJKLN', 'MYCLASS.ASDFGHJKL', 'MyClasss.UVWxYZ', 's3cr3tK3y.My__classMYCLASS', 'otherClahellorss.WORLD', 'My_classMYCLASS.HHHHHH', 'MYCLASMyClasssS.ASDFGHJKL', 'Another_class.AbCdEfG', 'AnotherClas_.WORLD', 'ClassaNamse.XXXXXXx', 'ddGHIHJKLNdd.Hijklmno', 'qwewrty.900000000', 'OPqrst.AbCdEfG', 'MExtendy_class.HHHHHH', 'AnotAbCdEfASDFGHJKLGher_class.AbCdEfASDFGHJKLG', 'My_class.HHHHHH', 'otherClahellorss.WORLD', 'ys3cr3tK3y.Z', 'YetAnotherClasUVWxYZs.DDDDDD', 'MnYetAnSlaassYCLASS.ASDFGHJKL', 'My_class.ASDFGHJKL', 'nYetAnotherCMYCLASSlassnothGIM!METYoetAnoEEErClassH3L00TZ!yoloerClass.ASDFGHJKL', 'ClassaName.GHIJKLN', 'Python321_.GIMMETH3L00TZ!', 'test.AbCdEfG', 'MMy_classMYCLASS.HHHHHH', 'x1UXXXXXXxVWxYZ.DDDDDD', 'Another_css.AbCdEfG', 'test.Z', 'My_class.HHHHHH', 'MMy_classMYCLASS.HHHHHH', 'My_class.ASDFGHJKL', 'MYCLASS.HHHHHH', 'My_classMYCLASS.HHHHHH', 'Another_class.AbCdEfG', 'ClassNaMqwertyy_classLMYCLA_e.GHIJKLMN', 'My__classMYCLASS.HHHHHH', 'My_class.HHHHHH', 'My_class.HHHHHH', 'ddGHIHJKLNdd.WORLD', 'OPqrst.AbCdEfG', 'ClassaNamse.GHIJKLN', 'otherClahellorss.WORLD', 'ClassaNamse.HHHHHH', 'MExty_class.E', 'MMExtendy_classy_classMYCLASS.HHHHHH', 's3cr3tKK3y.AbCdEfG', 'MExtendy_clasAnotherClasss.HHHHHH', 'My_class.ASDFGHJKL', 'JDLRFD.AbcDEFg', 'test.AbCdEfG', 'My_classLMYCLASS_nnYetAnotherCMYsCLASSUVWxYZlass.GIMMETH3L00TZ!', 'YoetAnoEEErClasslassaName.GHIJKLMN', 'MExtendyc_class.HHHHHH', 'MyClasssnYetAnotherCMYsCLASMqwertyy_classLMYCLASS_.UVWxYZ', 'My_class.ASDFGHJKL', 'MMy_clasMEAAAaAxtendy_classsMYCLASS.HHHHHH', '.okIWILL123', '$pecial_&_Cl@ss_name.YoUReXt', '123ThisIsTheClassName456.EX4', 'ThisIsTheClassName.ThisIsTheExtension', 'NoExtensionHasUpperCaseOrLowerCase.1234', '.DEF', 'SampleClass.eFG', 'SampleClass.AAA', 'SampleClass.aBc', 'SampleClass.AbC', 'UVWxYZ.WORLD', 'AAA.UVWxYZ', 'testing1.TESTING2', 'MyClass.AbcDEFg', 'AbCdEfG.AAAaA', 'UVWxYZ.WORLD', 'YetAnotherClass.DDDDDD', 'MyClass.UVWxYZ', 'My_class.ZZZZ', 'AbCdETESTING2fG.AAAaA', 'AbCdEfG.AAAaA', 'MYCLASS.WORLD', 'Tg1.TESTING2', 'fffffBbcdeAaaff.AAAaA', 'Another_class.AbCdEfG', 'Tg.TESTING2', 'TESTING2.AAAaA', 'M1235yClass.UVWxYZ', 'T1.TESTING2', 'MYCLASS.ASDFGHJKL', '1.TESTING2', 'TESTING2.AAAaA', 'T1.WORLD', 'TESTING2.AAAaA', 'OneMorCassNaame.AAAaA', 'testing1.GIMMETH3L00TZ!', 'M1235yClas.UVWxYZ', 'T1.TESTING2', 'T1.WORLD', 'MCyClass.UVWxYZ', '_.GIMMETH3L00TZ!', '1234GHIJKLMN5.TESTING2', 'YetAtEstin3gnotherClass.DDDDDD', 'Ye1234GHIJKLMN5tAnotherClass.DDDDDD', 'M1235yClass.UVWxYZ', 'Tg.UVWxYZ', 'Ye1234GHIJKLMN5tAnotherClass.DDDDDD', 'TESTINT2G2.AAAaA', '_Exteasdfghnd.GIMMETH3L00TZ!', 'T11.WORLD', 'AbCEdEfG.AAAaA', 'YetAtEstin3gnotherClass.DDDDDD', 'AbCdEfG.AAAaA', 'MyClMasss.DDDDDD', 'TgTg1.UVWxYZ', 'Another_class.AbCdEfG', 'YCBBBLASS.DDDDDD', 'T1.TEST', 'M12ss.UVWxYZ', 'BBBB.AAAaA', '_Exteasdfghnd.GIMMETH3L00TZ!', 'T1.WORLD']\n    for i, (inp, exp) in enumerate(zip(inputs, results)):\n        assertion(candidate(*inp), exp, 0)\n",
      "entry_point": "Strongest_Extension",
      "complete_code": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n\n    def strength(s: str) -> int:\n        CAP, SM = 0, 0\n        for ch in s:\n            if ch.isupper(): CAP += 1\n            if ch.islower(): SM += 1\n        return CAP - SM\n    max_strength = max(map(strength, extensions))\n    for e in extensions:\n        if strength(e) == max_strength:\n            return class_name + \".\" + e\n\n"
    },
    "execution_info": {
      "max_mutations_per_operator": 10,
      "total_operators_tested": 46,
      "operators_with_mutations": 9,
      "execution_timestamp": "2025-08-01T16:00:39.834775"
    }
  }
}