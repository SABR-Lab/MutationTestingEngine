{
  "timestamp": "20250801_154526",
  "test_type": "mutation_testing",
  "metadata": {
    "task_id": "HumanEval/56",
    "timestamp": "20250801_154526",
    "tester_version": "1.0",
    "total_operators_tested": 11,
    "operators_with_errors": 0
  },
  "summary": {
    "original_passes": true,
    "total_mutations": 31,
    "killed_mutations": 29,
    "mutation_score": 0.9354838709677419,
    "survival_rate": 0.06451612903225812
  },
  "detailed_results": {
    "task_id": "HumanEval/56",
    "dataset_type": "plus",
    "original_passes": true,
    "total_mutations": 31,
    "killed_mutations": 29,
    "mutation_score": 0.9354838709677419,
    "mutation_results": {
      "NumberReplacer": {
        "total_mutations": 10,
        "killed_mutations": 10,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 1\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 1\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpe6qrah53.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpe6qrah53.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpe6qrah53.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:19.971880",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = -1\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = -1\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmptsq_uk3r.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmptsq_uk3r.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmptsq_uk3r.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:20.128166",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 2\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 2\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp_2pa5cl8.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp_2pa5cl8.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp_2pa5cl8.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:20.291990",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 0\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 0\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpeitydf_b.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpeitydf_b.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpeitydf_b.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:20.463736",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 4,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 2\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 2\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp83y0tdnc.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp83y0tdnc.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp83y0tdnc.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:20.674096",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 0\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 0\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpto2symio.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpto2symio.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpto2symio.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:20.875115",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 6,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 1:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 1:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpn23uh6fk.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpn23uh6fk.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpn23uh6fk.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:21.080135",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 7,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < -1:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < -1:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpw6xgv4kd.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpw6xgv4kd.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpw6xgv4kd.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:21.265792",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 8,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return 1\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return 1\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpbp8sc3v9.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpbp8sc3v9.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpbp8sc3v9.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:21.452835",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 9,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return -1\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return -1\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpdgtllise.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpdgtllise.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpdgtllise.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:21.674139",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 12,
        "mutations_tested": 10
      },
      "AddEq->SubEq": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt -= 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt -= 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpcmfvsic8.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpcmfvsic8.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpcmfvsic8.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:21.913294",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "SubEq->AddEq": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt += 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt += 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpyayhnvv7.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpyayhnvv7.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpyayhnvv7.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:22.161420",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Eq->NotEq": {
        "total_mutations": 3,
        "killed_mutations": 3,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x != '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x != '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpyturb_zr.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpyturb_zr.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpyturb_zr.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:22.353711",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x != '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x != '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpp8qu177p.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpp8qu177p.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpp8qu177p.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:22.538060",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt != 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt != 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmprdc2xrgt.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmprdc2xrgt.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmprdc2xrgt.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:22.722940",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 3,
        "mutations_tested": 3
      },
      "Lt->Gt": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt > 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt > 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmps7tn4coc.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmps7tn4coc.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmps7tn4coc.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:22.952998",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Remove ReturnValue": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp1k5bgthh.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp1k5bgthh.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp1k5bgthh.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:23.216374",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpba2r5aec.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpba2r5aec.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpba2r5aec.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:23.664781",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "False->True": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return True\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return True\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpyskhs4tm.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpyskhs4tm.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpyskhs4tm.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:23.928017",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Zero->One": {
        "total_mutations": 4,
        "killed_mutations": 4,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 1\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 1\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpboe9neig.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpboe9neig.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpboe9neig.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:24.146569",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 1:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 1:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpx27z43cg.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpx27z43cg.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpx27z43cg.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:24.368968",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return 1\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return 1\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmplrir1txq.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmplrir1txq.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmplrir1txq.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:24.609476",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 1",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 1",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpmnmc0k_m.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpmnmc0k_m.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpmnmc0k_m.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:24.845222",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 4,
        "mutations_tested": 4
      },
      "One->Zero": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 0\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 0\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmplfv3y1nq.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmplfv3y1nq.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmplfv3y1nq.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:25.107568",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 0\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 0\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpx7t_53c1.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpx7t_53c1.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpx7t_53c1.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:25.338369",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "String->Empty": {
        "total_mutations": 3,
        "killed_mutations": 2,
        "survival_rate": 0.3333333333333333,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\"\"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\"\"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:45:25.548912",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpr3mn31d5.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpr3mn31d5.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpr3mn31d5.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:25.801512",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpif7hj17b.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpif7hj17b.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpif7hj17b.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:26.086054",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 3,
        "mutations_tested": 3
      },
      "String->X": {
        "total_mutations": 3,
        "killed_mutations": 2,
        "survival_rate": 0.3333333333333333,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\"X\"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\"X\"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:45:26.333094",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == 'X':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == 'X':\n            cnt += 1\n        if x == '>':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp6amkl_xi.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp6amkl_xi.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp6amkl_xi.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:26.572032",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
            "mutated_code": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == 'X':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "mutated_complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    cnt = 0\n    for x in brackets:\n        if x == '<':\n            cnt += 1\n        if x == 'X':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return cnt == 0",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpih7qlnxh.py\", line 75, in <module>\n    check(correct_bracketing)\n    ~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpih7qlnxh.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpih7qlnxh.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:26.818078",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 3,
        "mutations_tested": 3
      }
    },
    "problem_info": {
      "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
      "canonical_solution": "\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n",
      "test_code": "\n\nimport numpy as np\n\ndef is_floats(x) -> bool:\n    # check if it is float; List[float]; Tuple[float]\n    if isinstance(x, float):\n        return True\n    if isinstance(x, (list, tuple)):\n        return all(isinstance(i, float) for i in x)\n    if isinstance(x, np.ndarray):\n        return x.dtype == np.float64 or x.dtype == np.float32\n    return False\n\n\ndef assertion(out, exp, atol):\n    exact_match = out == exp\n\n    if atol == 0 and is_floats(exp):\n        atol = 1e-6\n    if not exact_match and atol != 0:\n        assert np.allclose(out, exp, rtol=1e-07, atol=atol)\n    else:\n        assert exact_match\n\n\ndef check(candidate):\n    inputs = [['<>'], ['<<><>>'], ['<><><<><>><>'], ['<><><<<><><>><>><<><><<>>>'], ['<<<><>>>>'], ['><<>'], ['<'], ['<<<<'], ['>'], ['<<>'], ['<><><<><>><>><<>'], ['<><><<><>><>>><>'], ['><'], ['<<<>>>'], ['><<<>>'], ['<<>>><><><><>>>><'], ['<<><><><>>>><>'], ['<<<'], ['>><<'], ['<><>>>><<<<><>>><<>><>>>><<<<><>>>><<<<><>>>><<<<><>>>><'], ['>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<'], ['<<>><>'], ['<<<<>><>>><>'], ['<<>>><><><>>>>><'], ['><<><><><>>>><><'], [''], ['<<><<'], ['<<<<<>>><><><>>>>><'], ['<<<<<<<>>><><><>>>>><<'], ['<><>>>><<<<><>>><<>><>>>><<<<><<<<<<<<>>><><><>>>>><<>>>><<<<><>>>><<<<><>>>><'], ['<<<>>>><<><><><>>>>><><'], ['<<<<><<'], ['<>><<<><><><>>>><>'], ['><<<><<><><><>>>><><>>'], ['<<<>'], ['<<>><><<<<><<<'], ['<<>>><><<><><>>>><'], ['<>><><><>>>><>'], ['<<><><>>>><<<<><>>><<>><>>>><<<<><>>>><<<<><>>>><<<<><>>>><<><><>>>><>'], ['>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<'], ['><<<<>>'], ['>>><<'], ['><<<<<>>'], ['<<><><><>>>>><>'], ['><<><<><><><>>>><><<>>'], ['><<<<<<<><><>>>><<<<><>>><<>><>>>><<<<><>>>><<<<><>>>><<<<><>>>><<><><>>>><>>>'], ['><<<><>'], ['><<<>>>'], ['<><>>>><<<<><>>><<>><>>>><<<<><<<<<<<<>>><><><>>>>><<>><>><<<<><>>>><<<<><>>>><'], ['<<><<<>>><><><><>>>><<'], ['<<><<<'], ['<<><<<>>><><><><>>>>><<'], ['<<><>>>><<<<><>>><<>><>>>><<<<><<<<<<<<>>><><><>>>>>><<>><>><<<<><>>>><<<<><>>>><<<>>><><><>>>>><<'], ['<<<<<<<>>><><><>>>>><<><<><<><><><>>>><><<>>'], ['><<<>><><<<>>'], ['<<<<<<>><>'], ['><<><><><>>>><'], ['<<<>>>><<<><><><>>>>><><'], ['<<<<<<>>><><><>>>>><'], ['><<<><<><><><>>>><><>><<><<'], ['<<<<<>>><><><>>>>>><'], ['>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<><<<<<<<<<<<'], ['<><<<<><<'], ['><<><<><><>>>><><<>>'], ['<<><><><>>><>'], ['><<><<>><><><>>>><><<>>'], ['<<<<<<<>>><>><><>>>>><<><<><<><><><>>>><><<>>'], ['><<'], ['<<<>>>>><<<><><><>>>>><><'], ['<<<>>>><<<><>><><>>>>><><'], ['<>><><><>>>><<<><><><>>>>><>>'], ['<<<>><<<<<'], ['<<><<><>>>><<<<<>><><><>>><<>><>>>><<<<><>>>><<<<><>>>><<<<><><<><><><>>>>><>>>><<><><><>>><><<<'], ['<<<<><<<<><<<<>>><><><>>>>>><'], ['<<>><<<<<><<<<><<<<>>><><><>>>>>><<<<<<<><><>>>><<<<><>>><<>><>>>><<<<><>>>><<<<><>>>><<<<><>>>><<><><>>>><>>>><>'], ['<<><'], ['<<<>>><>>><<<><><><<>>>>><><<'], ['<<><<<<'], ['<<>>><><><><>>><'], ['<<<><'], ['<<><<<<<'], ['<<>>><><>><><>>><'], ['>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<'], ['<<<><<<>><'], ['<<>><><><>>>><><<'], ['<<<>>>>>><<<><><><>>>>><><'], ['<<<>>>><<<><><><>>>>>><><'], ['>>><<<<'], ['<<<>>>>>><<<><><><>>>>><><<<>>><><><>>>>><'], ['<><>>>><<<<><>>><<>><>>>><<<<><<<<<<<<>>><><><>>>>><<>><>><<<<><>><'], ['<<>>>><<><>>>><'], ['><<><<>><><><>>>>><><<>>'], ['<<>>><><><>>><<<><<><><><>>>><><>><<><<>>><'], ['<<>><<<<<><<<<><<<<>>><><><>>>>>><<<<<<<><><>>>><<<<><>>><<>><>>>><<<<><>>>><<<<><>>>><<<<><>>>><<<>><><<<>><>>>><>'], ['<<><<<<<>>><><><>>>>><><><><>>>><><<'], ['<<>><<<<<><<<<><<<<><<<>>><>>><<<><><><<>>>>><><<>><><><>>>>>><<<<<<<><><>>>><<<<><>>><<>><>>>><<<<><>>>><<<<><>>>><<<<><>><>><<><><>>>><>>>><>'], ['<<<<>>>><<><><><>>>>><><<<>>>><<<><>><><>>>>><><'], ['<<<><><><>>>><><><<<'], ['><<><><><>>>><><<<<<>>'], ['<<<>>>>'], ['<<<>>><>>><<<><><><<>>>>><<><<>><><><>>>>><><<>>><><<'], ['<<>>><><>><><>><'], ['<<>>>><><<>><<>>><><>><><>><<><>>><'], ['<<<>><>><<<><><><>>>>>><><'], ['><<<<>>><>>><<<><><><<>>>>><<><<>><><><>>>>><><<>>><><<<<<>>'], ['><<><<><><><>>>><<>>'], ['<><><<><<>><><><>>>>><><<>>><<<'], ['<>><<<>><><><<<>>><><<><><>>>><>><>'], ['><<<><<><>><><>>>><>><>><<><<'], ['<<<<<<>><><><><<><<>><><><>>>>><><<>>><<<'], ['>>><<<'], ['<<<>>>><<<<>>>>>>><<<<<<<'], ['>>>><<<<<'], ['><><><><><><><><><'], ['>>>>><<<<<<<<<<>>>>>>>>'], ['<>><<<>>>>><<<<>>>>>><<>>'], ['><>><<<<>>>>'], ['<<<<<>>>><<<<<<<>>>><<<<<>>>>'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>'], ['><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<>>>>'], ['><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><'], ['>><>>>>>><<<<<<<<<<>>>>>>>><><><><><><><><'], ['><>><<<><>><<<<>>>><>>>>>'], ['>>>>><<<<<<<<<<<>>>>>>>>'], ['>><'], ['<<<>>>><<<<>>>>>>><<<<>><<<<'], ['><>><<<>>>>><<<<<<<<<<>>>>>>>><>>>>'], ['><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>>>>>>'], ['>>>><<<<><'], ['><><><><<<<<>>>><<<<<<<>>>><<<<<>>>><><><><><><'], ['><><><><><><><><>><'], ['><><><><><><><><><><><>><><><><><><>><'], ['><>><><><><><><><><'], ['<<<<<>>>><<<<<<<>>>>><<<<<>>>>'], ['><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><'], ['><><><><><><>><><><'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<'], ['><><><><<<<<>>>>><<<<<<<>>>><<><><><'], ['><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><'], ['>>>><<<<>>>>>><<>>'], ['>>>>><<<<<<<<<<>>><>>>>>'], ['>>>>><<<<<<<<<<>>>>><>><><><><><><><><>>>>'], ['><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>>'], ['><>><<<<<<<<<<<>>>>>>>>><>>>>'], ['><>>>>><<<><<<<<'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<'], ['<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<'], ['<>><<>>><<<>>>><<>>'], ['><><><><<<<<>>>><<<<<<<>>>><<<<<<>>>>><><><><'], ['><>>>>><<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<>>>><<<<<'], ['<<<>><>><<<>>>>><<<<<<<<<<>>>>>>>><>>>>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<'], ['<<<>>>>>>><><><><<<<<<<<'], ['>>>>><<<<><>><<<><>><<<<>>>><>>>>>>>>'], ['><>><<<>>>>><<<<<<<<<<>>>>>>>>><>>>>'], ['>>>>'], ['><>><<<>>>>><<<<<<<<<<>>>>>><><><><><><><><>><<>>>>'], ['<<<<<<<<>>>><<<<<>>>>'], ['>>>>><<<<>>>>>><<>>'], ['><><><><<'], ['<<<>>>><<<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<'], ['><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>>'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><><><><><><><><><><><><>><><><><><><>><<<<<>>>>><><><><<<<<<<<'], ['>>>'], ['>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><'], ['<<<<<<<<>><>><<<<<>>>>'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<>>>><<<<<><><><><><><><><><>>>><<<<<<<<<<>>>>>>>>><'], ['><>><<<<<<<<<<>>>>>>>>><>>>>'], ['><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><>'], ['<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<<>>>>>>>><<'], ['><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<'], ['<<<<<>>>><<<<<<>>>>><<<<<>>>>'], ['<<<<<>><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<>>><<<<<<<>>>><<<<<>>>>'], ['><>><<>>>>'], ['><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<>>>>>>'], ['<<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><<<<<<<>>>><<<<<>>>>'], ['<<<<<>>>><<<<<<<>>>><<<<<>>>>>>>'], ['><>>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>>'], ['><><><><<<<<>>>>><<<<<<<>>>><<<<<<>>>>><><><><'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<<>>>>>'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<>>>>>>><<<<>><<<<<'], ['><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>>'], ['><<<<<>>>><<<<<<<>>>><<<<<>>>>>>><<<<>>>>>>>>><>>>>'], ['><<<<<<<<>>>><<<<<>>>>>>>><<<<>>>>>><<>>'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><>>>>>><<><<>>>>>><<>><<<<<<<<<'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<'], ['>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<'], ['><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><'], ['><>><<<<<<<<<<<<>>>>>>>>><>>>>'], ['<<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><><<<<<<<>>>><<<<<>>>>'], ['<<<<>>>><<<<>>>>>>><<<<<<<'], ['><><<><><><><>><><><'], ['<<<<<<<<<<>>>>><<<<<>>>>'], ['><<<<<>>>><<<<<<<>>>><<<<<>>>>>>><<<<>>>>>>>>><>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>><><><><><><>>>'], ['>><>>>>>><<<<<<<>>>><<<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<<<<<<<>>>>>>>>><><><><><><><><'], ['><<<<<<<<>>>><<<<<>>>>>>>><<<<>>>>>>'], ['><><><><<<<<>>>><<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<<<<<<>>>><<<<<>>>>><><><>'], ['><>>>>><<><<<<<<>>>><<<<<<<>>>>><<<<<>>>>><<<<<'], ['><><><><><><><<<<<<>>>><<<<<<<>>>>><<<<<>>>>><>><'], ['><><><><<<><<>>>>><<<<<<<>>>>><<><><><'], ['<<<<<>>>><<<<<<<>><>><<<<<>>>>>>>'], ['<<<>>>><<<<>>>>>>><<<<>><<<<<'], ['><>><<<><>><<<<>>>><<>><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>>'], ['><><><><><><<<<>>>><<<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><>><<<<<<<<<<<>>>>>>>>><>>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<><><><'], ['><>><<<><>><<<<>>>><>>><>>>>><<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<>>>><<<<<>>>'], ['<<<<<>>>>><<<<<<<>>>><<<<<>>>>>>>'], ['><>>>><><<<><<<<<'], ['>>>>><<<<<<<<<<<>>><>>>'], ['<<><<<>>>><<<<<<<>><>><<<<<>>>>>>>'], ['<<<>><><<<<<<<<'], ['><<<<<>>>><<<<<<<>>>><<<<<>>>>>>><<<<>>>>>>>>><>>><>>>><<<<>>>>>><<>><<<>>>>>>>>'], ['<<<<>>>><<<<>>>>>>><<<<<<<<<<<<>>>><<<<<>>>><<<'], ['><>><><<<<>>>>><>>>>><<<<<<<>>>>>><<<>>>><<<<<'], ['><><><><<<<<>>>><<<<<<<>><>><<<>>>>><<<<<<<<<<>>>>>>>><>>>>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<<>>>><><><><><><'], ['><>>><><<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<<<'], ['<<<>>>><<<<>>>>>>><<<<<>><<<<'], ['<<<>>>><<<<<>>>><><><><>><<<<<<<<<<>>>>>>>>><>>>>><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>>>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<'], ['><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><>><><><><><>><<<<<>>>>>><>>>>'], ['><><><><><><><>><><><><<<><<>>>>><<<<<<<>>>>><<><><><>>>>><<<<<<<<<<>>>>>>>>><'], ['>>><<<<<'], ['><>><><<<<>>>>>>>>><<<>>>><<<<<'], ['>>>>><<<<<<<<<<>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<>>><>>>>>'], ['><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<><<<<>>>><<<<>>>>>>><<<<<<<>>'], ['>>>>><<<<<<<<<<<<>>><>>>'], ['><>>>>><<<>><><<<<>>>>><<<<<<>>>><<<<<'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<>>>>>>><<<<<>>>>>'], ['<<<><>><><><><><><><><>>>><<<<>>>>>>><<<<><><><><><><><><><><><>><><><><><>>>><>><<>><<<<'], ['<<<<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<><<<<>>>><<<<>>>>>>><<<<<<<>>>>>><<<<<<<>>>><<<<<>>>>>>>'], ['><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>><><><><<<<<>><>><<<<<<<<>>>><<<<<>>>>><><><><<>>>>>>'], ['><><><><<<<<>>>><<<<<<<>><>><<<>>>>><<<<<<<<<><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<<>>>><><><><><><'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<<<>>>>><><><>>>>>><<><<>>>>>><<>><<<<<<<<<'], ['><>><><>>>><<<>>>><<<<<'], ['><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<>><'], ['<<<>>>><<<<>>><<>><<<<<'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>>><><><><<<<<<<<<'], ['<<<>>>><<<<<>>>><><><><>><<<<<<<<<<>>>>>>>>><>>>>><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>>>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<><<<<'], ['>>>>><<<<<<<<<<<<>>>>>>>>'], ['<<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>>'], ['><><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<><><><<<<<>>>><<<<<<<>><>><<<>>>>><<<<<<<<<><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<<>>>><><><><><><'], ['><><><><<<<<>>>><<<<<<<>><>><<<>>>>><<<<<<<<<<>>>>>>>><>>>>>>><<<<>>>>>>>><><>><><><><><><><<<<<<>>>><<<<<<<>>>>><<<<<>>>>><>><<><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<>>>>>>><><><><<<<<<<<<<<<<<<<<<<>>>><<<<<>>>><><><><><><'], ['><><><><>><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><'], ['>>><><<'], ['<><<<<>>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>'], ['><>>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>'], ['>>>>>'], ['><<<<<>><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<>>><<<<<<<>>>><<<<<>>>><><<<<>>>>><>>>>><<<<<<>>>><>>>>>>><<<<<<><<<<>>>><<<<>>>>>>><<<<<<<>>'], ['><>>><<<><>><<<<>>>><<><<<<>>>><<<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>>'], ['<<<<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<><<<<>>>><<<<>>>>>>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><<<<>>>>>><<<<<<<>>>><<<<<>>>>>>>'], ['<<<<>>>><<<<>>>>>>><<<<<<<<<<<<>>><><<<<<>>>><<<'], ['>>>>><<<<><>><<<><>><<>>><<<<<>>>><>>>>>>>>'], ['><><><><>><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>><><><>><'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>>>>>'], ['<<<<<>><><><><><><>><><>>>>><>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>>'], ['><>><><>>><<<<<>><><><><><><>><><>>>>><>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>>><<<>>>><<<<<'], ['>>>>><<<<<<<<<<<<>>>><>>>'], ['><>><<<><>><<<<>>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>>><<<<<<<>><><><><<<<<>><>><<<<<<<<>>>><<<<<>>>>><><><><<>>>>>>'], ['><>>><<<><>><<<<>>>><<><<<<>>>><<<<<<<<>>>><<>>><>>>>>><><><><<><><><><>><<<<<>>>>>>'], ['><><>>>><>>><><<<<>><><<<<>>>>><<<<<<>>>><<<<<'], ['>>>><<<<><<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>>><><<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><><<<<<<<>>>><<<<<>>>><<<<<<<>>>><<<<<>>>><'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<>>>>>'], ['><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><><><><><<<<<>>>>><<><<<<<>>>><<>><><><'], ['><><><><<<<<>>>><<<<<<<<<<<<>>>><<<<<<>>>>><<<<<>>>><>>>><<<<<<>>>>><><><><'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><>>>>>>><<<<<<<<<<<<>>><>>><<<<<'], ['>>>><<<><>>>><><<<><<<<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><'], ['>>>>><<>>'], ['><<<<>>>><<<<>>>>>><<>>'], ['><<>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>><><><><<<<<>><>><<<<<<<<>>>><<<<<>>>>><><><><<>>>>>>'], ['><><><><<<<<>>>>><<<<<<<>>>><<<<<>>>><<<<>>>>>>><<<<<<<<<<<>>>>><><><><'], ['<<<<<>><><><><><><>><><>>>>><>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<>>>>>>><<<<>><<<<<<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>><><><><><><><><>>'], ['><<<<<>>>><<<<<<<>>>><<<<<>>>>>>><<<<>>>>>>>>><>><><><><<<<<>>>><<<<>>>><<<<<<<<>>>><<<<<>>>><><><><><><>>>'], ['>>>>>>>>>><<><>><<<><>><<>>><<<<<>>>><>>>>>>>>'], ['><><<<<>>>>><>>>>><<<<<<<><<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<>>><><><><><><><><><<<<<<<>>>>'], ['<<<>>>><<<<<>>>><><><><>><<<<<<<<<<>>>>>>>>><>>>>><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>>>>>>><<<<<<<<<<<>>>>>>>>><<<<>>>>>>><<><<<<'], ['<<<<<>><<<<<<>><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<>>><<<<<<<>>>><<<<<>>>>><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><<<<<<<>>>><<<<<>>>>'], ['><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><<>'], ['>>>>>><<<<<<<<<<<>>><>>>'], ['<<<<<>><><><><><><>><><>>>><<<>>>><<<<>>>>>>><<<<<>><<<<><>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<>>>>>>><<<<>><<<<<<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>><><><><><><><><>>'], ['<>>>>><<<<<>>>>><>><<><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<>>>>>>><><><><<<<<<<<<<<<<<<<<<<>>>><<<<<>>>><><><><><><'], ['>>>>><<<<<<<>>><>>>>>'], ['><><>>>><>>><><<<<>>><><<<<>>>>><<<<<<>>>><><><><><>><><>><>><<<>><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>><<<><>><<<<>>>>>><<>>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><<<<<'], ['<<<<<>>>>><<<<<<<>>>>>>'], ['>><>>>><><<<><<<<<'], ['><><><><<<<<<>><><<<<<<<<>><><><><'], ['><>>>><><<<><<<<<<>>>><<<<<>>>><<<<>>>>>>><<<<<<<<<<<>>>>><><><><'], ['<<<>>>><<<<<>>>><><><><>><<<<<<<<<<>>>>>>>>><>>>>><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<>>>>>><<<<>>>>>>><<<<>><<<<'], ['><<><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><>><><><><><>><<<<<>>>>>><>>>><<>>>><<<<>>>>>><<>>'], ['<><<<<><<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<>>>>><<<<<>>>><<<><>><><><><><><><><>>>><<<<>>>>>>><<<<><><><><><><><><><><><>><><><><><>>>><>><<>><<<<>'], ['<>><<<>>>>><<<<>>>>>><<>><<<<<<<<>>>><<<<<>>>>>>>><<<<>>>>>><<>>'], ['>><>>>>>>>>>><><><><><><><><'], ['><><>>>><>>>><><<<<>><><<<<>>>>><<<<<<>>>><<<><><><><>><><>><>><<<><>><<<>><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<>>>>>><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>><><><>><<'], ['<<<<<<<<><<<>>>><<<<<<<>><>><<<<<>>>>>>><<>>>><<<<<>><<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><><<<<<<<>>>><<<<<>>>>>>'], ['><><><><<<<<>>>><>>>>><<<<<<<<<<<<<>>><>>><<<<<<<<<<<>>>><<<<<<>>>>><<<<<>>>><>>>><<<<<<>>>>><><><><'], ['><><<<<>>>>><<>>>>><<<<<<<>>>>>>><<<<<<>>>>'], ['><>>>>>>>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><>>>>>><<<<<<<<<<<<>>>>>>>><><><><><><>><<<<<>>>>>'], ['<<<>>>><<<<<>>>><><><><>><<<<<<<<<<>>>>>>>>><>>>>><><<<<<>>>><<<<<<<<>>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>>>>>>><<<<<<<<<<<>>>>>>>>><<<<>>>>>>><<><<<<'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<><>>>><><<<><<<<<<>>>><<<<<>>>><<<<>>>>>>><<<<<<<<<<<>>>>><><><><<<>>>>><><><>>>>>>><<<<<<<<<<<<>>><>>><<<<<'], ['><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<><><><>><<<<<>>>>>><>>>><><>><'], ['<<<<<<>>>><<<<<<<>>>><>>>>'], ['><><>>>><>>><><<<<>>><><<<<>>>>><<<<<<>>>><><><><><>><><>><>><<<>><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>><<<<><<<<>>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><>><<<<>>>>>><<>>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><<<<<'], ['>>>>>>'], ['>>><<<>>>><<<<<>>>><><><><>><<<<<<<<<<>>>>>>>>><>>>>><><<<<<<>>>><<<<<<<<>>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>>>>>>><<<<<<<<<<<>>>>>>>>><<<<>>>>>>><<><<<<<<><<<'], ['><><>>>><>>>><><<<<>><><<<<>>>>><<<<<<>>>><<<><><><><>><><>><>><<<><>><<<>><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>><>><><>>><<<<<>><><><><><><>><><>>>>><>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>>><<<>>>><<<<<><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<>>>>>><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>><><><>><<'], ['<<<>><><<>><<>>><<<>>>><<>><<<<<<<'], ['>>>>><<<<<<<>>>><>>>>>'], ['><>>>>>>>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><>>>>>><<<<<<<<<<<<>>>>>>>><><><><><><>>><<<<<>>>>>'], ['><>><<<>>>>>><<<<<<<<<<>>>>>>>>><>>>>'], ['>><>>>>>>>><><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<><><><<<<<>>>><<<<<<<>><>><<<>>>>><<<<<<<<<><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<<>>>><><><><><><>>><><><><><><><><'], ['>>>><>><<<<<<<<<<<>>>>'], ['<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>><>>><<'], ['<<<<<<<<<>>>><<<<<>>>>'], ['>>>>><<<<<<<<<<>>><>>>'], ['<>>>>><<<<<>>>>><>><<><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<>>>>>>><><><><<<<<<<<<<<<<<<<<<<>>>><<<<<>>>><><><><><><>><>>>><><<><<<<<'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<<<>>>>><><><>>>>>><<><<>>>>>>><<>><<<<<<<<<'], ['<><<>>><><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>>><><><>>>><>><<<<<<<<<<<>>>>><<<<<<<<<'], ['><>><<<>>>>>><<<<<<<<<<>>>>>>><>><>>>>><<<><<<<<>>>'], ['><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><<<>><>><<<>>>>><<<<<<<<<<>>>>>>>><>>>>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<><><>><<<<<>>>>>><>>>><><>><'], ['>><>>>>>>>><><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<><><><<<<<>>>><<<<<<<>><>><<<>>>>><<<<<<<<<><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<<><><><><><><><'], ['><>>>><><<<><<<<<<>>>><<<<<>>>><<<<>>>>>>><<<<<<<<<<<>>>>><><>><><'], ['><>>>>><<<<<>>>>><>><<><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<>>>>>>><><><><<<<<<<<<<<<<<<<<<<>>>>><<<<<>>>><><><><><><>><>>>><><<><<<<<>>>><<<<<<<<<<<<>>>>>>>>'], ['><><><><>><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><>><<<<<>>>>>><>>><><><>><'], ['><><><><><><<<<>>>><<<<<>>>><><><><><<<<<>>>>><<<<<<<<>>>><>><<<<<<<<<<<>>>>>>>>><>>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<><><><'], ['><><><><><><<>>>>><>><'], ['><<<<<>>>><<><<<<<<<<>>>><<<<<>>>><><><><><><>>>'], ['><>><<<><>><<<<<>>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>>><<<<<<<>><><><><<<<<>><>><<<<<<<<>>>><<<<<>>>>><><><><<>>>>>>'], ['<<<>><><<>><<>>><<<<<>>>><<<<<>>>><><><><>><<<<<<<<<<>>>>>>>>><>><>>><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>>>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<<>>>><<>><<<<<<<'], ['<><<<<>>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>'], ['<<<>>>><<<<>>>>>>>><><><><<<><><><><<<<<<<<<<<>>>><<<<>>>>>>><<<<>><<<<'], ['><><><><<<<<>>>><<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<<<<<<>>>>><<<<<>>>>><><><>'], ['>>>>>><<<<<<<<<<<<>>><>>>'], ['><>><<<<<<<<<<<<><>>>>>>>><>>>>'], ['>>>><><><><><<<<<>>>><>>>>><<<<<<<<<<<<<>>><>>><<<<<<<<<<<>>>><<<<<<>>>>><<<<<>>>><>>>><<<<<<>>>>><><><><<<<<'], ['<<<<<<><<>><>><<<<<>>>>'], ['>>>>>><<<<<<<>>><>>>>>'], ['<<<><>><><><><><><><><>>>><<<<>>>>>>><<<<><><><><>>>>><<<<<>>>>><>><<><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<>>>>>>><><><><<<<<<<<<<<<<<<<<<<>>>>><<<<<>>>><><><><><><>><>>>><><<><<<<<>>>><<<<<<<<<<<<>>>>>>>>><><><><><><><><>><><><><><>>>><>><<>><<<<'], ['><>>><<<>>>>><<<<<<<<<<>>>>>>>>><>>>>'], ['><>>><><<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<<<'], ['><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>><><><><<<<<>>>><<<><>><<<<<<<<<<>>>>>>>>><>>>><<<<<>>>><<<<<>>>>><><><><<>>>>>>'], ['>>>>>>>'], ['><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<>>><><><><'], ['><>>>>>>>><<<><>><<<<>>>>>><<<<<<<<<<<<>>>>>>>>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><>>>>>><<<<<<<<<<<<>>>>>>>><><><><><><>><<<<<>>>>>'], ['><>>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><>><<<<<>>>>>'], ['<>><<<><>>>><<<<>>>>>><<>><<<<<<<<>>>><<<<<>>>>>>>><<<<>>>>>><<>>'], ['><<<<<>>>><<<<<<<>>>><<<<<>>>>>>><<<<>>>>><>>><<<><>><<<<>>>><<><<<<>>>><<<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>>>>>><>><><><><<<<<>>>><<<<<<<>>>><<<<>>><<<<>>>><><><><><><>>>'], ['<<<>>>><><><><><<<<<>>>><<<<<<<<>>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<><>>>><><<<><<<<<<>>>><<<<<><<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><><<<<<<<>>>><<<<<>>>>>>><<<<<'], ['<><<<<>>>><<<<<<<>>>><<>>>>>>'], ['><><><><><><<<<>>>><<<<<>>>><><><><><<<<<>>>>><<<<<<<<>>>><>><<<<<<<<<<<>>>>>>>>><>>>>><<<<<>>>>><><><><<<<>>><<<>>>><<<<>>>>>>>><><><><<<><><><><<<<<<<<<<<>>>><<<<>>>>>>><<<<>><<<<>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<><><><'], ['><>>>>><<<>><><<<<>>>>><>>>>><>><<<><>><<<<>>>><<>><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>>><<<<<<<>>>>>>><<<<<<>>>><<<<<'], ['><<<<<>>>><<<<<<<>>>><<<<<>>>>>>><<<<>>>>><>>><<<><>><<<<>>>><<><<<<>>>><<<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>>>>>><>><><><><<<<<>>>><<<<<<<<<<<>>>><<<<<<<>><>><<<<<>>>>>>><>>>'], ['><><><><<<<<<>>><><><'], ['<<<<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<><<<<<>>>><<<<>>>>>>><<<<<<<>>>>>><<<<<<<>>>><<<<<>>>>>>>'], ['><><><><<<<<>>>><<<><><>'], ['><><><><<<<<>>>><<<<<<<>>>><<<<<>>>><><><><><>>>>><<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<>>>><<<<<><>><'], ['<<<<<>>>>><<<<<<<>>>>><<<<<>>>>'], ['><<<<<>>>><<<<<<<>>>><<<<<>>>>>>><<<<>>>>><>>><<<><>><<<<>>>><<><<<<>>>><<<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>>>>>><>><><<><><<<<<>>>><<<<<<<<<<<>>>><<<<<<<>><>><<<<<>>>>>>><>>>'], ['><<<<<>>>><<<<<<<>>>><<<<<>>>>>>><<<<>>>>><>>><<<><>><<<>><<<<>>><<<<>>>><><><><><><>>>'], ['>>>>><'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<><><><><><><><><>>>>><<>>>>>>><<>>>>>>><<<<<>>>>>'], ['<<<<>>>><<<<>>>>>>><<<<><>>>><><<<><<<<<<<<<'], ['><>><<<<<<<<<<>>>>>>>>><>>>><<<>>>><<<<>>>>>>><<<<>><<<<'], ['<<<>>>><<<<>>>>>>><<<<<><><<<<'], ['<<<>>>><<<<>>><<><><><><><><<<<>>>><<<<<>>>><><><><><<<<<>>>>><<<<<<<<>>>><>><<<<<<<<<<<>>>>>>>>><>>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<><><><>><<<<<'], ['<<<<>><>>>>>><<<<<<<>>>><<<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<><>>>><><<<><<<<<<>>>><<<<<>>>><<<<>>>>>>><<<<<<<<<<<>>>>><><>><><<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<<<<<<<>>>>>>>>><><><><><><><><<<<<<>>>><>>>>'], ['><>><<<><>><<<<>>><><<><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>>'], ['><><><><<<<<>>>><<<<<<<>>>><<>>>>><><><><'], ['><><><><><><<>>>>><>><<>>><<<>>>>><<<<<<<<<<>>>>>>>>><>>>>'], ['><>>>><><<<><<<<<<>>>><<<<<>>>><<<<>>>>>>><<<<<<<<<<<>>>>><>>>>>><<<<<<<<<<<<>>>><>>>><><'], ['><><><><><><>><><><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>>>>>>><'], ['><><><><<<<<>>>><<<<<<<>>>><<<>><<>>>><><><><><><'], ['<<<<>><><<<<<<<<<'], ['><><><><<<><<>>>>><<<<<<<>>>>><<><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<'], ['><<<<<<<<>>><<<>>>><><><><><<<<<>>>><<<<<<<<>>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<><<<<<>>>>>>>><<<<>>>>>><<>>'], ['><><><><<<<<>>>><<<<<<<>>>>><<<<<<>>>><><><><'], ['><><><><<<<<>>>><>>>>><<<<<<<<<<<<<>>><>>><<<<<<<<<<<>>>><<<<<<>>>><><><><>><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>><><><>><>><<<<<>>>><>>>><<<<<<>>>>><><><><'], ['<<<<>><>>>>>><<<<<<<>>>><<<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<><>>>><><<<>><<<<<<>>>><<<<<>>>><<<<>>>>>>><<<<<<<<<<<>>>>><><>><><<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<<<<<<<>>>>>>>>><><><><><><><><<<<<<>>>><>>>>'], ['>>>>><><<<<<<>>>><<<<<<<<>>>><<<<<>>>>>>>><<<<>>>>>><<>><>>>>>'], ['<<><<<>>>><<<<<<<>><>><<<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><><><><><><><><><><><><>><><><><><><>><<<<<>>>>><><><><<<<<<<<<<<>>>>>>>'], ['<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>><>>><<<<<>>>>><<<<>>>>><<<<<<<<<<>>><>>><<<<<<<>>>>><>>><<'], ['<<><<<>>>><<<<<<<>>><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>><<<<<>>>>>><<<>>>><<<<<>>>><><><><>><<<<<<<<<<>>>>>>>>><>>>>><><<<<<<>>>><<<<<<<<>>>>><<<<<>>>>><><><><<<<>>><<<<<<<<>>>>>>>>><<<<>>>>>>><<><<<<<<><<<>>>>'], ['><>><<<><>><<<<>>>><>>><>>>>><<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<>>>>><<<<<>>>'], ['>><>>>>>><<<<<<<>>>><<<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><><<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<<<<<<<>>>>>>>>><><><><><><><><'], ['><><>>>><>>><><<<<>><><>>><><<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<<<><<<<>>>>><<<<<<>>>><<<<<'], ['>>>>><<<<<<<>>>><>><<<<<>><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<>>><<<<<<<>>>><<<<<>>>>>>>'], ['><>><><><><><><>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><<<>><>><<<>>>>><<<<<<<<<<>>>>>>>><>>><><><><<<<<>>>><<<<<<<>><>><<<>>>>><<<<<<<<<><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<<>>>><><><><><><>>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<><><>><<<<<>>>>>><>>>><><>><'], ['>>>>>>><<<<<<<>>><>>>>>'], ['><>>>>><<<<<<<>>><><><><<<<<<<<<<<>>>><<<<<>>>>><>>>>>'], ['><>><<<><>><<<<>>><><<><>>>>><<<<><>><<<><>><<>>><<<<<>>>><>>>>>>>><<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>>'], ['><><><><><><>><><>>>>><><<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<'], ['><><><><>><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><>><<<<<>>>>>>><>>><><><>><'], ['><><><><><><<<<>>>><<<<<>>>><><><>>>>>><<<<>>>>>><<>><><<<<<>>>>><<<<<<<<>>>><>><<<<<<<<<<<>>>>>>>>><>>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<><><><'], ['<><<<<>>>><<<<<<<>>>><<<>>>>>>'], ['>><<<<<<<<<<>>><>>>>>'], ['><>><<><<<<>>>>>>>>><<<>>>><<<<<'], ['<<<<<>>>><<<<<<<>>>><<><<<>>>>>>>'], ['><>><<<>>>>><<<<<<<<<<>>>>>><><><><><><><><>><<>>>>><<'], ['<<<><><>>>><>>><><<<<>><><>>><><<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<<<><<<<>>>>><<<<<<>>>><<<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<><>>>><><<<><<<<<<>>>><<<<<>>>><<<<>>>>>>><<<<<<<<<<<>>>>><><><><<<>>>>><><><>>>>>>><<<<<<<<<<<<>>><>>><<<<<'], ['><><><><<<<<>>>><<<<<<<>><>><<<>>>>><<<<<<<<<<>>>>>>>><>>>>>>><<<<>>>>>>>><><>><><><><><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<>>>>><><><<<<<<>>>><<<<<<<>>>>><<<<<>>>>>><>><<><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<>>>>>>><><><><<<<<<<<<<<<<<<<<<<>>>><<<<<>>>><><><><><><'], ['><<<<<>><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<>>><<<<<<<>>>><<<<<>>>><><<<<>>>>><>>>>><<<<<<>>>><>>>>>>>><<<<<<><<<<>>>><<<<>>>>>>><<<<<<<>>'], ['><><><><<<><<>>>>><<<<<<<>>>>><<><><>>>>><<<<<><><><><><><><><><><><><><<<<>>>><<<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><>><<<<<<<<<<<>>>>>>>>><>>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<><><><>>><<'], ['<><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<><<<<>>>><<<<>>>>>>><<<<<<<>>'], ['><>><<<>>>>>><<<<<<<<<<>>>>>>><>><>>>>><>>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><>>>>>><<<><<<<<>>>'], ['<<<>>>><<<<<>>>><><><><>><<<<<<<<<<>>>>>>>>><>>>>><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>><<<<<<<<><<<>>>><<<<<<<>><>><<<<<>>>>>>><<>>>><<<<<>><<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><><<<<<<<>>>><<<<<>>>>>>>>>>>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<'], ['<<<>><>><<<>>>>><<<<<<<<<>>>><<<<<<<>>>>><<<<<>>>><<<<<<>>>>>>>><>>>>>>><<<<>>>>>>>><><><><<<<<>>>>>><<<<><>><<<><>><<>>><<<<<>>>><>>>>>>>>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<'], ['<><<<<>>>>><<<<<<<<>>>>>>><<<<<>>>>>'], ['><>><>><><><><><><><'], ['>>><<><<<'], ['><>><<<<<<<<<<<<><>>>>>>>><>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>><><><><><><'], ['<<<<<>><><><><><><>><><>>>>><>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<><>><>><><><><><><><<><><><>>'], ['<><<<<>>>>><<<<<<<>>>><<<<<>>>>>>>'], ['><>><<<><>><<<<>>>><<>><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>><<<<>>>><<<<>>>>>>><<<<<<<<<<<<>>>><<<<<>>>><<<>>'], ['<<<<<>><><><><><><>><><>>>><<><>><><<<<>>>>>>>>><<<>>>><<<<<<>>>><<<<>>>>>>><<<<<>><<<<><>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<>>>>>>><<<<>><<<<<<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>><><><><><><><><>>'], ['>>>>><<><>><<><<<<>>>>>>>>><<<>>>><<<<<<<<<<>>><>>>>>'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><<<<<<>>>><<<<<<<>>>><<><<<>>>>>>>><<<<<<<<<<'], ['<<<<<<><<><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<>>><><><><>><>><<<<<>>>>'], ['>><>>>>>>>><><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<><><><<<<<>>>><<<<<<<>><>><<<>>>>>><<<<<<<<<><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<<><><><><><><><'], ['><><><><<<<<>>>>>><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<><<><><><'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<><>>>><><<<><<<<<<>>>><<<<<><<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<>><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><><<<<<<<>>>><<<<<>>>>>>><<<<<'], ['><><<><><<<<<>>>><<<<<<<<<<<<>>>><<<<<<>>>>><<<<<>>>><>>>><<<<<<>>>>><><><><'], ['>>>>><<<><><><><><><<>>>>><>><<>>>>>><<>>'], ['><><><><>><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><>>>>><<<<<>>>>><>><<><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<>>>>>>><><><><<<<<<<<<<<<<<<<<<<>>>><<<<<>>>><><><><><><>><>>>><><<><<<<<<<>>><>>>>>><>><<<<<<>>>>>>><>>><><><>><'], ['><><><><><><>><<><><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>>>>>>><'], ['><><><><<<<<>>>><<<<<<<>>>>><<<<<>>>>><>><><>'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<><>>>><><<<><<<<<<>>>><<<<<>>>><<<<>>>>>>><<<<<<<<<<<>>>>><><><><<<>>>>>><><>>>><>>><><<<<>>><><<<<>>>>><<<<<<>>>><><><><><>><><>><>><<<>><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>><<<<><<<<>>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><>><<<<>>>>>><<>>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><<<<<<><><>>>>>>><<<<<<<<<<<<>>><>>><<<<<'], ['<<><<<>>>><<<<<<<>><>><<<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><><><><><><><><><><><><>><><><><><><>><<<<<>>>>><><><><<<<<<<<<<<>>><>>>>'], ['><>><<<><>><<<<>>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>>><<<<<<<>><><><><<<<<>>><>><<<<<<<<>>>><<<<<>>>>><><><><<>>>>>>'], ['><><><><><><<<<>>>><<<<<>>>><><><>>>>>><<<<>>>>>><<>><><<<<<>>>>><<<<<<<<>>>><>><<<<<<<<<<<>>>>>>>>><>>>>><<<<<>>>>><<<<>><<<<><><><'], ['><>>>>><<<>><><<<<>>>>><<<<<<<>>>><<<<<'], ['><<<<>>>><<<<>>>>>><<>><><<<<>>>>><<<<<<<>>>><<<<<>>>>>>>'], ['>>>><<<<<><><><><><><><><>>>>><<<<<<<<>>>>>>>>><<'], ['><>><<<>>>>><<<<<<<><<<>><><><><><><>><<>>>>'], ['<<<<<<>>>>><<<<<<<>>>>>>'], ['>>>>><<<><><><><><><<>>>>><<>>'], ['><<<<<<<<>>><<<>>>><><><><><><><<<<<<>>>><<<<<<<>>>>><<<<<>>>>><>><><><><><><<<<<>>>><<<<<<<<>>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<><<<<<>>>>>>>><<<<>>>>>><<>>'], ['<<<<<>>>>><<<<<<<>>>><<<<<<<<>>>><<<<>>>>>>><<<<>><<<<>>>>>>>'], ['><<<<<>>>><<<<>>>>>><<>>'], ['><><><><><><><<><><><><>><><><><><><>><'], ['><><><><<<<<>>>><<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<<<<<><<<>>>><<<<<<<>><>><<<<<>>>>>>><<<>>>>><<<<<>>>>><><><>'], ['<<<<<<<<><<<>>>><<<<<<<>><>><<<<<>>>>>>><<>>>><<<<<>><<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><><<<<<<<>>>><<<<<>>>>>>><>><<<<>>>>'], ['><><><><<<<<><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<><<><><><'], ['>>>>>><<<<<<<<<<>>><>>>'], ['><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<>>>>>>>>>'], ['<<<<<<<<><<<>>>><<<<<<<>><>><<<<<>>>>>>><<>>>><<<<<>><<<<<>><><>><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><><<<<<<<>>>><<<<<>>>>>>'], ['<<<>>>><<<<<>>>><><><<<<<>>>>>>>>><>>>>><><<<<<>>><<<<>><<<<'], ['>>>>><<<<<<<<<>>>>>'], ['<<<>>>>>>><><><><<<<<<<<>><<<<<<>><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<>>><<<<<<<>>>><<<<<>>>>><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><<<<<<<>>>><<<<<>>>><<<<<'], ['><><><><<<<<>>>><<<<>>>>><><><><'], ['><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><>>>>>><>>>><><>><'], ['<<<<<>><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>>><><>>>><>>>><><<<<>><><<<<>>>>><<<<<<>>>><<<><><><><>><><>><>><<<><>><<<>><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>><>><><>>><<<<<>><><><><><><>><><>>>>><>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>>><<<>>>><<<<<><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<>>>>>><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>><><><>><<<<<<<<<<<<>>>>>>>>><<>>><<<<<<<>>>><<<<<>>>>'], ['><>>>><><<<<><<<<<'], ['><><<<><><><><>><><><<><><<<<<>>>><<<<<<<<<<<<>>>><<<<<<>>>>><<<<<>>>><>>>><<<<<<>>><><><><><><'], ['><>><><><<<<>>>><<<<>>>>>>><<>>><><><><<<<<<>>>><<<<<<<>>>>><<<<<>>>>><>><'], ['>>>>><<<<<<<<<<<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<>>>>>>>>'], ['><>><<<><>><<<<>>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>>><<<<<<<>><><><><<<<<>><>><<<<<<<<>>>>><<<<<>>>>><><><><<>>>>>>'], ['<<<<<<>>>>>>>>'], ['>>>>><<<<><>>>>><>>>>>>>>'], ['>><>><<<<><'], ['><><><><><><><>><><><><<<><<>>>>>><<<<<<<>>>>><<><><><>>>>><<<<<<<<<<>>>>>>>>><'], ['>>>>><<<<>>>>><<<<><>>>>><>>>>>>>><<<<<<<<>>>><>>>'], ['><><<<<>>>>><>>>>><<<<<<<>><>>>>><<<<<<><<<<>>>><<<<>>>>>>><<<<<<<>>'], ['>><>>>>>>>><><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<><><><<<<<>><>><<<<<<<>><>><<<>>>>><<<<<<<<<><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<<><><><><><><><'], ['><>>><><<<<>>>><><><><><<<<<>>>><<<<<<<<<>>>><<<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<<<'], ['><><><><><><<<<>>>><<<<<>>>><><><><><<<<<>>>>><<<<<<<<>>>><>><<<<<<<<<<<>>>>>>>>><>>>>><<<<<>>>>><><><><<<<>>>>>>><<><<<>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<><><><'], ['><>><<<><>><<<<>>>><<>><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<'], ['><<<<<>>>><<<<<<<>>>><<<<<>>>>>>>>><>>>>'], ['<<<<<>><><><><><><>><><>>>>><>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<><<<<<<<<<<<<>>>><<<<<>>>><><><><><><>>><>>>><<><<<<>>>><<<<<<<><>><>><><><><><><><<><><><>>'], ['><><>>>><>>>><><<<<>><><<<<>>>>><<<<<<>>>><<<><><><><>><><>><>><<<><>><<<>><>><<<><>><<<<>>>><<><><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>><><><><<<<<>><>><<<<<<<<>>>><<<<<>>>>><><><><<>>>>>><<<>>>><<<<<<<>><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<>>>>>><>><<<<>>>><<><<<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<<<>>>>><><><>>>>>><<><<>>>>>>><<>><<<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>><><><>><<'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><<<<<<>>>><<<<<<<>>>><<><<<>>>>>>>>><<<<<<<<<<'], ['>>>>><<<<<<<<<<><>>><><<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<<<<>>>>>>>>'], ['><><><><<<<<>>>><<<<<<<<<<<<>>>><<<<<<>>>>>><<<<<>>>><>>>><<<<<<>>>>><><><><'], ['<><><><><<<<<>>>>><<><<<<<>>>><<>><><><'], ['><<<<<>>>><<<<<<<>>>><<<<<>>>>>>><<<<>>>>><>>><<<><>><<<<>>>><<><<<<>>>><<<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>>>>>><>><><><><<<<<>>>><<<<<<<<<<<>>>><<<<<<<>><>><<<<>><>>>'], ['><><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<><><><<<<<>>>><<<<<<<>><>><<<>>>>><<<<<<<<<><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<<>>>><><><><<<<<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<><<<<>>>><<<<>>>>>>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><<<<>>>>>>>>>>><><'], ['><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><>><><><><><<>><<<<<>>>>>><>>>>><<<<<<<<<<>>>>>>>>>>>>'], ['><><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>>><><><<<<<>>>><<<<<<<>>>><<>>>>><><><><'], ['<><<<>>>><<<<>>>>>>><<<<><>>>><><<<><<<<<<<<<'], ['<<<<<>>>>>><<<<<<<>>>>>>>'], ['<<<<<<<<><<<>>>><<<<<<<>><>><<<<<>>>>>>><<>>>><<<<<>><<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><<><<<>>>><<<<<<<>><>><<<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><><><><><><><><><><><><>><><><><><><>><<<<<>>>>><><><><<<<<<<<<<<>>>>>>><><><><>><<<<<>>>>>><>>>><><>><><<<<<<<>>>><<<<<>>>>>>><>><<<<>>>>'], ['<><><><><<<<<>>>>><<><<<<<<>>>><<>><><><'], ['><>>>><><<<<><<<<><'], ['><<<<<>>><><>>>><>>><><<<<>>><><<<<>>>>><<<<<<>>>><><><><><>><><>><>><<<>><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>>>>>><<<<<<<<<<<<>>><>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>><<<><>><<<<>>>>>><<>>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><<<<<>><<><<<<<<<<>>>><<<<<>>>><><><><><><>>>'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<><<<<>>>><<<<>>>>>>><<<<>><<<<<'], ['><>>>><><<<><<<<<<<>>>><<<>><<><>><><'], ['>>>>><<<<<<<>>>><>><<<<<>><><><><><><>><<<>>>><<<<<>>>><><><><>><<<<<<<<<<<>>>>>>>>><>>>>><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>>>>>>><<<<<<<<<<<>>>>>>>>><<<<>>>>>>><<><<<<<><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<>>><<<<<<<>>>><<<<<>>>>>>>'], ['><>><<<><>><<<<>>><<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>>>>><<<<<<>>>><<<<<>>>'], ['><>><<<><>><<<<>>><><<><>>>>><<<<><>><<<><>><<>>><<<<<>>>><>>>>>>>><<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>><><><><><><><><>><<<<<>>>>>>'], ['><><<<<>>>>><<>>>>><<<<<<<>>>>>>><<<<<<>>>>>'], ['>>>>>><<<<<<<<>>>>>>>>><<'], ['><><><><<<<<>><>>><<<<<<<<>>>><<><><><'], ['><<<<<>><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<><>>>>><<<><<<<<<<<>>>>>>>>><<>>><<<<<<<>>>><<<<<>>>><><<<<>>>>><>>>>><<<<<<>>>><>>>>>>>><<<<<<><<<<>>>><<<<>>>>>>><<<<<<<>>'], ['><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<<><<<<>>>><<<<>>>>>>><<<<<<<>>'], ['<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<><>>>><><<<><<<<<<>>>><<<<<>>>><<<<>>>>>>><<<<<<<<<<<>>>>><><><><<<>>>>><><><>>><<<<<<<<<<>>><><<<<>>>>><<<<<<<>>>><<<<<>>>>>>>>>><<<<<'], ['<><<<<>>>><<<<<>>>><<<>>>>>>'], ['><><<<<>>><<<<<>>>><<<<<<<>>>><<<<<>>>>>>><<<<>>>>>>>>><>>>>>>><>>>>><<<<<<<>>>>>>><<<<<<>>>>'], ['><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><>><>'], ['<>>>>>>>><<<<>>>>>><<>>'], ['><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<><><><>><<<<<>>>><<<>>>><<<<>>><<>><<<<<>><>>>><><>><'], ['<<<>>>><<<<<>>>><><><><>><<<<<<<<<<>>>>>>>>><>>>>><><<<<<>>>><<<<<<<<>>>>><<<<<>>>>><><><><<<<>><>>>>>><<<<<<<<<<>>>>>>>><><><><><><><><>>>>>>>>><<<<<<<<<<<>>>>>>>>><<<<>>>>>>><<><<<<'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><><><><><<<<<>>>>><<><<<<<>>>><<>><><><<<<<<<<>>>>>'], ['><><><><><><><><><><><>><><><<<>>>><<<<<>>>><><><><>><<<<<<<<<<>>>>>>>>><>>>>><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>><<<<<<<<><<<>>>><<<<<<<>><>><<<<<>>>>>>><<>>>><<<<<>><<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><><<<<<<<>>>><<<<<>>>>>>>>>>>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<<><><><>><'], ['<<<<<<<<><<<>>>><<<<<<<>><>><<<<<>>>>>>><<>>>><<<<<>><<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><>><><><><><><<<<>>>><<<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><>><<<<<<<<<<<>>>>>>>>><>>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<><><><<><><><><>><<<<<>>>>>><>>>><><>><><<<<<<<>>>><<<<<>>>>>>><>><<<<>>>>'], ['><>><<<><>><<<<>>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>>><<<<<<<>><><<>><<<<<<<<>>>><<<<<>>>>><><><><<>>>>>>'], ['><><><<><><><><>><><><><<<><<>>>>>><<<<<<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<><<<<>>>><<<<>>>>>>><<<<<<<>>>>>><<<<<<<>>>><<<<<>>>>>>><<<<<>>>>><<><><><>>>>><<<><<<<<<<>>>>>>>>><'], ['<<<>>>><><><><><<<<<>>>><<<<<<<<>>>>><<<<<>>>>><><><>><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<'], ['<<<>>>><<<<<>>>><><><><>><<<<<<<<<<>>>>>>>>><>>>>><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>><<<<<<<<><<<>>>><<<<<<<>><>><<<<<>>>>>>><<>>>><<<<<>><<<<<>><><><><><><>><><>>>>><<<<<><><<><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><><<<<<<<>>>><<<<<>>>>>>>>>>>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<'], ['><<<<<>>>><<<<<<<>>>><<<<<>>>>>>><<<<>>>>>>>>><>><><><><<<<<>>>><<<<>>>><<<<<<<<>>>><<<<<>>>><><><><><><>>><<<<<<<>>>><<>>>>><><><><'], ['<<<<<>>>><<<>>>>>>'], ['><><><><<<<<>>>><<<>><>>>>><<<<<>>>>><>><<><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<>>>>>>><><><><<<<<<<<<<<<<<<<<<<>>>>><<<<<>>>><><><><><><>><>>>><><<><<<<<>>>><<<<<<<<<<<<>>>>>>>><><>'], ['><>><<<><>><<<<>>>><<>><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><>><<<<<>>>>>>'], ['><>><><>>><<<<<>><><><><><><>><><>><>>><>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>>><<<>>>><<<<<'], ['><><<<<>>>>><>>>>><<<<<<<>>>>>>>><<<<<<>>>>'], ['>><<<<<<<<<<>'], ['<><<<<>>>>><<<<<<<<>>>>>>><<<<<>>>>'], ['><>><<<>>>>><<<<<<<<<<>>>>>><><><><><><><><<>><<>>>>><<'], ['><><><><<<<<>>>><<<<<<<<<<<<>>>><<<<<<><><'], ['<<<>><><<>><<>>><<><>>>><<>><<<<<<<'], ['><>><<<><<<<<<<<>>>><<<<<>>>>>>>><<<<>>>>>><<>><<<<<<<>>>>>>>>><>>>>'], ['>>>>><><><><>><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><>><<<<<>>>>>>><>>><><><>><><<<<><>>>>><>>>>>>>>'], ['<><>><><<'], ['><><>>>><>>><><<<<>>><><<<<>>>>><<<<<<>>>><><><><><>><><>><>><<<>><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>><<<<><<<<>>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><>><<<<>>>>>><<>>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><<<<<'], ['>>>>><><><><><><><>>>>><<<<<<<<>>>>>>>>><<'], ['<<<<<>><><><><><><>><><>>>>><>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><><><<><><><>>'], ['><><><><><><><<><><><><>><><><><><>><><><><><><>><<><><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>>>>>>><<>><'], ['<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>><>>><<<<<>>>>><<<<>>>>><<<<<<<<<<>>><>>><<<<<<<>>>>><<<>>>><<<<>>><<>><<<<<<<'], ['<<<<<<>>>><<<<<<<>>>><><>>'], ['<<<<<>>>><<<<<<<>>><><<<<<>>>>>>>'], ['<<<<<<<<><<<>>>><<<<<<<>><>><<<<<>>>>>>><<>>>><<<<<>><<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><<><<<>>>><<<<<<<>><>><<<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><><><><><><><><><><><><>><><><><><><>><<<<<>>>>><><><><<<<<<<<<<<>>>>>>><><><><>><<<<<>>>>>><>>>><><>><><<><<<<<>>>><<<<<>>>>>>><>><<<<>>>>'], ['<<<<>>>>><<<<>>>>>>><<<<<<<'], ['<>>>>><<<<<>>>>><>><<><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<>>>>>>><><><><<<<<<<<<<<<<<<<<<<>>>><<<<<>>><><'], ['>><><>>>><>>><><<<<>>><><<<<>>>>><<<<<<>>>><><><><><>><><>><>><<<>><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>><<<<><<<<>>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><>><<<<>>>>>><<>>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><<<<<>>>'], ['><><>>>>><><><><><><<<<>>>><<<<<>>>><><><><><<<<<>>>>><<<<<<<<>>>><>><<<<<<<<<<<>>>>>>>>><>>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<><><><<>>>><><<<<>><><<<<>>>>><<<<<<>>>><<<><><><><>><><>><>><<<><>><<<>><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<>>>>>><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>><><><>><<'], ['><><><><<<<<>>>><<<<<<<<<<<<>>>><<<<<<><><><><><<<'], ['<><<<<<<<<>>>><<<<<>>>>>>>><<<<>>>>>>>>>>><<<<<>>>>><>><<><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<>>>>>>><><><><<<<<<<<<<<<<<<<<<<>>>><<<<<>>>><><><><><><'], ['><><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<><><><<<<<>>>><<<<<<<>><>><<<>>>>><<<<<<<<<><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><><<<<<<<>>>><<<<<<>>>>><><><><<<<<<<<<<<>>>><<<<<>>>><><><><<<<<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<><<<<>>>><<<<>>>>>>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><<<<>>>>>>>>>>><><'], ['>>>>>>>>>>>><<'], ['>>>><<<><>>>><><<<><<<<<<<><><><>><><><><><>>>>><<<<<<<<<<>>>>>>>>><'], ['>><<<<<<<<>>'], ['><><><><<<<<>>>><<<<<<><>><>><<<>>>>><<<<<<<<<><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<<>>>><><><><><><'], ['<<<<<<>>>><<<<<<<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<><><><><><><><><>>>>><<>>>>>>><<>>>>>>><<<<<>>>>><><>>'], ['><>>>>>>>>'], ['><>>>>>>>><<<><>><<<<>>>><<><<<<>>>><<<<<><<<<>>>>><<<<<<<<>>>>>>><<<<<>>>><<<>>>><<>>><>>>>>><><>>>>>><<<<<<<<<<<<>>>>>>>><><><><><><>><<<<<>>>>>'], ['<<<>>>><<<<<>>>><><><><>><<<<<<<<<<>>>>>>>>><>>>>><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>><<<<<<<<><<<>>>><<<<<<<>><>><<<<<>>>>>>><<>>>><<<<<>><<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><><<<<<<<>>>><<<<<>>>>>>>>>><>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<'], ['><><<><><<<<<>>>><<<<<<<>>>><<<<<>>>><><><><><><'], ['>><>>><<<<<<<<<<>>>>>>>>'], ['><><<<<>>><<<<<>>>><<<<<<<>>>><<<<<>>>>>>><<<<>>>>>>>>>><>>>>>>><>>>>><<<<<<<>>>>>>><<<<<<>>>>'], ['><><><><><><><><><><><>><><><<<>>>><<<<<>>>><><><><>><<<<<<<<<<>>>>>>>>><>>>>><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>><<<<<<<<><<<>>>><<<<<<<>><>><<<<<>>>>>>><<>>>><<<<<>><<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><><<<<<<<>>>><<<<<>>>>>>>>>>>>>>><<<<<<<<<<<>>>>>>><<<<<>>>>><<<<<<<>>>><<<<<<<<>>>><<<<>>>>>>><<<<>><<<<>>>>>>>><<<<>>>>>>><<<<>><<<<<><><><>><'], ['><><<><><><><>><><>><'], ['<<<>>>><<><><<><><<<<<>>>><<<<<<<<<<<<>>>><<<<<<>>>>><<<<<>>>><>>>><<<<<<>>>>><><><><<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<><>>>><><<<><<<<<<>>>><<<<<>>>><<<<>>>>>>><<<<<<<<<<<>>>>><><><><<<>>>>><><><>>><<<<<<<<<<>>><><<<<>>>>><<<<<<<>>>><<<<<>>>>>>>>>><<<<<'], ['<<<<<>>>>><<<><<<<>>>><<<<<<<>>>><<<<>>>>>>><<<<<<<<<>>>>>>>'], ['><><><><<<<<>>>><>>>>>><<<<<<<<<<<<<>>><>>><<<<<<<<<<<>>>><<<<<<>>>>><<<<<>>>><>>>><<<<<<>>>>><><><><'], ['<<<<<<<><<>><>><<<<<>>>>'], ['<<<<<<<><>><>><<<<<>>>>'], ['><><><><><><><><><><><>><><><<<>>>><<<<<>>>><><><><>><<<<<<<<<<>>>>>>>>><>>>>><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>><<<<<<<<><<<>>>><<<<<<<>><>><<<<<>>>>>>><<>>>><<<<<>><<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><><><>><<<<<>>>>>><>>>><><>><><<<<<<<>>>><<<<<>>>>>>>>>>>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<<><><><>><'], ['<<<>>>><><<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><>>>>>>><<<<<<<<<<<<>>><>>><<<<<'], ['>>>>>><<<<<<<<<<<>>><>>>><>><<<><<<<<<<<>>>><<<<<>>>>>>>><<<<>>>>>><<>><<<<<<<>>>>>>>>><>>>>'], ['><><><><<<><<>>>>><<<<<<<>>>>><<><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<<<>>>><<><<<>>>>>>>>><<<<<><><><><><><><><><><><>><><><<<>>>><<<<<>>>><><><><>><<<<<<<<<<>>>>>>>>><>>>>><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>><<<<<<<<><<<>>>><<<<<<<>><>><<<<<>>>>>>><<>>>><<<<<>><<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><><<<<<<<>>>><<<<<>>>>>>>>>>>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<<><><><>><<<<<<<<>>>>>>>>><<'], ['><<<<<>>>><<><><><><>><<<<<>>>>>>>>>><>><><><><<<<<>>>><<<<<<<<<<<>>>><<<<<<<>><>><<<<<>>>>>>><>>>'], ['>>>>><><><><><><><><<<<<<<<>>>>>>>>><<'], ['><>><<<<<<<<<<<>>>>>>>>>><>>>>'], ['><><>>>><>>><><<<<>>><><<<<>>>>><<<<<<>>>><><><><><>><><>><>><<<>><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>><<<><>><><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><<<<<'], ['><><><<><><><><>><><><><<<><<>>>>>><<<<<<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<><<<<>>>><<<<>>>>>>><<<<<<<>>>>>><<<<<<<>>>><<<<<>>>>>>>><<<<<>>>>><<><><><>>>>><<<><<<<<<<>>>>>>>>><'], ['<><<<<>>>'], ['<<<>>>><<<<>>>>>>><<<<<<><'], ['<<<<>>>><<<<>><>>>>><<<<<<<<<<<<>>>><<<<<>>>><<<'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><<<<<>>>><<<<<>>>>><><><><><><><><<<<<>>>>><<><<<<<>>>><<>><><><<<<<<<<>>>>>'], ['><><><><<<<<>>>><>>>>>><<<<<<<<<<<<<>>><>>><<<<<<<<<<<>>>><<<<<<>>>>><<<<<>>>><>>>><<<<><><<<><><><><><>><<<>>>>><<<<<<<<<<>>>>>><><><><><><><><>><<>>>>><<>><><><<><><<<<<>>>><<<<<<<<<<<<>>>><<<<<<>>>>><<<<<>>>><>>>><<<<<<>>><><><><><><<<>>>>><><><><'], ['><><><><><><<>>>>><>><<<<<>>>>>>>>><>>>>'], ['><><><><<<><<>>>>><<<<<<<>>>>><<><><>>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<'], ['<><<<>>>><<<<>>>>>>><<<<><>>>><><<<><><<<<<<<<'], ['><>>>>><>>>><<<<<<<<<>>>><<<<<<<>>>>><<<<<>>>>><<<<<'], ['><><><><<<<<>>>><<<<<<<>><>><<<>>>>><<<<<<<<<><><><><<<<<>>>><<<<<<<>>>><<<<<>><<<<<<<<><<<>>>><<<<<<<>><>><<<<<>>>>>>><<>>>><<<<<>><<<<<>><><><><><><>><><>>>>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><>>>><><>><><<<<<<<>>>><<<<<>>>>>>><>><<<<>>>>>>><><><><><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<<>>>><><><><><><'], ['<<<<<<>>>>><>>>>>>'], ['<>><<<><>>>><<<<<>>>>>><<>><<<<<<<<>>>><<<<<>>>>>>>><<<<>>>>>><<>>'], ['><>><<<<<<<<<<<<>>>>>>>>><>>>>>'], ['><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>>><>>>>'], ['><<<<<<<<>>><<<>>>><><><><><><><<<<<<>>>><<<<<<<>>>>><<<<<>>>>><>><><><><><><<<<<>>>><<<<<<<<>>><>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<><<<<<>>>>>>>><<<<>>>>>><<>>'], ['<><<<<>>>><<<<<<<>>>><<>>><><<<<<>'], ['><><><><<<<<>>>>><<<<<<<>>>>><<><><><'], ['><><<<<>>>>><<>>>>><<<<<<<>>>>>>><<<<<<>>>><><<><><><><>><><>><>>'], ['<>>>>><<<<<>>>>><>><<><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<>>>>>>><><><><<<<<<<<<<<<<<<<<<<>>>>><<<><<<<>>>><<<<<<<>>>><<<<>>>>>>><<<<<<<<<>>>>>>><<<<<>>>><<<<<>>>><><><><><><'], ['>>><>>><<<<<<<<<<<>>><>>>'], ['>>>>>>>>>>><<>>'], ['><<<<<<<<>>>><<<<<>>>>>>>>><<<<>>>>>>'], ['>>>>><<<<<<<<<<<<<>>>><>>>'], ['><><><><<<<<>>>><<<<<<<>>>><<<<<>>>><><><><><>>>>><<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<>>>><<<<<<><>><'], ['<>><>><><<'], ['<<<>>>><><<<<>>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<>>>>>>><<<<>><<<<<'], ['><>><<<>>>>><<<<<<<<<<>>>>>><<><><><><><><><>><<>>>>'], ['<>>>><>>>>>><<<<<<<>>>><<<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<<<<<<<>>>>>>>>><><><><><><><><<<>>><<<>>>><<>>>'], ['<><<<<>>>>>>><<<<<>>>>>'], ['<<><<<>>>><<<<<<<>><>><<<<<>>>><<<<>>>>>>>><><>>>>><<<<<<<<<<<>>><>>>><><<<<<>>>><<<<<<<>>>><><><><><><><><><><><><>><><><><><><>><<<<<>>>>><><><><<<<<<<<<<<<>>><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>>'], ['><><><><<<<<<>><><<<<<<<<>>><><><><><><<>>>>><>><<>>><<<>>>>><<<<<<<<<<>>>>>>>>><>>>>><><><'], ['<<<>><>><<<>>>>><<<<<<<<<>>>><<<<<<<>>>>><<<<<>>>><<<<<<>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<>>>>>>><>>>>>>><<<<>>>>>>>><><><><<<<<>>>>>><<<<><>><<<><>><<>>><<<<<>>>><>>>>>>>>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<'], ['><><><><<<<<><>>><<<<>>>><><><><'], ['><>><<><<<<>>>><>>>>><<<<<<<<<<>>><>>>>>>><><><><><><>><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><><><><<<>><>><<<>>>>><<<<<<<<<<>>>>>>>><>>><><><><<<<<>>>><<<<<<<>><>><<<>>>>><<<<<<<<<><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<<>>>><><><><><><>>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<'], ['><><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<><><><<<<<>>>><<<<<<<>><>><<<>>>>><<<<<<<<<><><><><<<<<>>>><<<<<<<>>>>><<<<<>>>>><><><><><<<<<<<>>>><<<<<<>>>>><><><><<<<<<<<<<<>>>><<<<<>>>><><><><<<<<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<><<<<>>>><<<<>>>>>>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>>>><<<<>>>>>>>>>>><><'], ['<<<<<>>>><<<<<<<>>>>><<<<<>><>>'], ['><>><<<>>>>><<<<<<><<<>><><><><><><>><<>>>>'], ['<<<>>>><<<<<>>>><><><><>><<><<<<<<<<>>>>>>>>><>>>>><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>>>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<><<<<'], ['<<<<<<><<>><>><<<<<<<<>>>><<<<>>>>>>><<<<<><><<<<>>>>'], ['><><><><><><><>><><>>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<><><><<<<<>>>><<<<<<<>><>><<<>>>>><<<<<<<<<><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<<>>>><><><><<><><'], ['><><><><<<<<>>>><<<<>>>>>>><<<<<<<><><<<<>>>><<<<<>>>><><><><><<<<<>>>><<<<<<<<>>>><>><<<<<<<<<<<>>>>>>>>><>>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>>>>><<<<>>>>>>><<<<>><<<<><><><'], ['>><<<<<<<<<<>>>><>>>>>'], ['><>><<<<<<<<<<<<><>>>>>>>><>>>>><><><><<<<<>>>><<<<<<<>><<<<<>>>><><><><><><'], ['><>>>>><<<<<>>>>><>><<><<<<<>>>><<<<<<<>>>><<<<<>>>>>><<<<<>>>><><><><><><>><>>>><><<><<<<<>>>><<<<<<<<<<<<>>>>>>>>'], ['>>>>><<<<<<<<<<>>><>>>><<<<<>>>><<<<<<<>>>><<<<<>>>>>>><<<<>>>>>>>>><>>>>>>'], ['><><><><<<<<>>>><<<<<<<>><>><<<>>>>><<<<<<<<<<>>>>>>>><>>>>>>><<<<>>>>>>>><><>><><><><><><><<<<<<<><<>><>><<<<<>>>><<<<<>>>><<<<<<<>>>>><<<<<>>>>><>><<><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<>>>>>>><><><><<<<<<<<<<<<<<<<<<<>>>><<<<<>>>><><><><><><'], ['>><<<<<<>>'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><>><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><>><><><><<<<<>>>>><<><<<<<>>>><<>><><><<<<<<<<>>>>>'], ['><><<<<>>>>><>>>>><<<<<<<><<<>>>><<<<>>><<<<<>><><><><><><>><><>>>>><>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><>><<<><>><<<><>><<<<>>>><<<<>>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<<<>>>><<<<>>>>>>><<<<>><<<<<<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>><><><><><><><><>>>>>>><><><><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<<<<<>>><><><><><><><><><<<<<<<>>>>'], ['>>><<<>>>><<<<<>>>><><><><>><<<<<<<<<<>>>>>>>>><>>>>><><<<<<<>>>><<<<<<<<>>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<>>>>>>>>>>>>><<<<<<<<<<<>>>>>>>>><<<<>>>>>>><<><<<<<<><<<'], ['><<<<<<<<>>>><<<<<>>>>>>>><<<<><<<<>>>>><<<<<<<>>>><<<<<>>>>>>>>>>>'], ['<>>><>>>>>>>>>>><><><><><><><><'], ['><><><><><><>><>><<<><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><><><>>>><>>><<<>>>>><<<<<<<<<<>>>>>>>>><>>>>>>><>>>><><>><'], ['>>>>><<><>><<><<<<>>>>>>>>><<<>>>><<<<<<<<<<>>><>><<<>>>><><><><><<<<<>>>><<<<<<<<>>>><<<<<>>>>><><><><<<<>>>>>>><<<<<>>>>><<<<<<<<<<<>>>>><>>><<>>>'], ['<<<>>>><<<<>>>>>>>>><><><><><><>><<<><<>>>>><<<<<<<>>>>><<><><><>>>>>>>>><'], ['><>><<<><>><<<<>>>><<><<<<>>>><<<<<<<>><><><><<<<<>>>><<<><>><<<<<<<<<<>>>>>>>><>>>>><<<>><><<<<>>>>><<<<<<<>>>><<<<<>><>>>><<<<<>>>><<<<<>>>>><><><><<>>>>>>'], ['><>><<<><>><<<<>>>><<>><<<<>>>><<<<<<<><>>>>><<<><<<<<>>>><<>>><>>>>>><><><><><><><><>><<<<<>>>><<<<>>>><<<<>>>>>>><<><><><><<<<<>>>><<<<<><><><><><><><><>>>>><<<<<<<<<<>>>>>>>>><<>><><<<<<<<<>><><><><<<<<<<<<<<>>>><<<<<>>>><<<>>'], ['<>>>>><<<<<>>>>><>><<><<<<<>>>><<<<<<<>>>><<<<<>>>>><><><><<<<<>>>>><<<><<<<>>>><<<<<<<>>>><<<<>>>>>>><<<<<<<<<>>>>>>><<<>>>>>>><><><><<<<<<<<<<<<<<<<<<<>>>><<<<<>>>><><><><><><'], ['><><><><>'], ['<<<<><>>>><<><>>>><<<>>>>'], ['<<<>>><<>>>>><<<<<>>>>><<>>>><<<>><>><<<<<<>>>>>>'], ['<><><><>'], ['<<<><>>><>>><>>><<><<<>'], ['<<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>><<<><>>'], ['<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<'], ['>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'], ['<>><<<>>>>><<<<<<<<<<>>>>>>>>>>>>><<<<>>>>>><<>>'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<<<<<<>>>>>'], ['<><><><><>><><><><><'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>><>>>'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>'], ['>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<<<>>>><<<<>>>>>>><<<<<<<>>>><<<<>>>>>>><<<<<<<<<<'], ['<>><<<>>>>><<<<<>>>>>><<>>'], ['<><<<<>>>><<<<<<<>>>><<>>>><>>>>>><<<<<<<>>>>>><<<<<>><>>>'], ['<>><<<>>>>><<<<<>>>>>><<>'], ['><>><<<>>>>><<<<<>>>>>><<>>'], ['><<>><<<>>>>><<<<<>>>>>><<>>'], ['><<>><<<>>>>><<<<<>>>>>><<>>>>><<<'], ['<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<<>>>>>>><<<<<<<<<<'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><<<<<>><>>>'], ['>><><<<<>>>><<<<<<<>>>><<>>><><>><<<>>>>><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['><>><<<><<>>>>'], ['<<<<<>>>><<<<<<<>>>><<<<<>>'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>'], ['<>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<>'], ['<<<>>>><<<<>>>>>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><<<<<>><>>>><<<<<>><<>>>'], ['<<<>>>><<<<>>>>>>>><<<<<<<'], ['<<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>'], ['<>><<<>>>>><<<<><<<<<<>>>>>>>>>>>>><<<<>>>>>><<>>'], ['<<<<<>>>><<<<<<>>>><<<<<>>'], ['<><><><><>><><><><><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<<<<<<>>>>>'], ['<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<'], ['><>><<<<>>>>>><><<<<>>>><<<<<<<>>>><<>>><><>><<<>>>>><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<><<<<>>>><<<<<<<>>>><<>>>>>><<<<<>><>>>'], ['<>><<<>>>>><<<<>>>>><<>>'], ['<<<<<>>>><<<<>><><<<<>>>><<<<<<<>>>><<>>><><>><<<>>>>><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>'], ['><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>'], ['<>><<<>>>>><<<<<>>>>>><<<>>'], ['<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<'], ['<<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>>'], ['<><<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>'], ['><>><<<><><>>>>'], ['<><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>'], ['<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<'], ['<>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<>'], ['<><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<>><>>>'], ['<><<<<>>>><<<<<<<>>>><<>>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>'], ['<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<'], ['><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>'], ['<>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<<<>'], ['<><<<<>>>><<<<<<<>>>><<>>><<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<>>>>>>><<<<<>>>>>'], ['>><><<<<>>>><<<<<<<>>>><<>>><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>>><<<<>>>>>><<>><><>><<<>>>>><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<><<<<>>>><<<<<<<<>>>><<>>>>>>><<<<<>><>>>'], ['<<<<<>>>><<<<<<<><>>><<<<<>>'], ['<>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><>>><<<<<>>>>>><<<>><<<<<>>>>>><<>'], ['<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><<<<<>><>>>><<<<<>><<>>>>>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<'], ['><<>><<<>>>>><<<<<>><><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>>>><<<'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>>><<<<<<<<<<<<>>>>>'], ['>>>><<<<<>><<<>>>>><<<<><<<<<<>>>>>>>>>>>>><<<<>>>>>><<>><'], ['><>><<<><<>><>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>'], ['<><<<<>>>><<<<<<<>>>><<>><><<<<>>>><<<<<<<>>>><<>>><<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<>>>>>>><<<<<>>>>>><>>>>>><<<<<<<<<<<<>>>>>'], ['<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>'], ['<>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>>'], ['<>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>>'], ['<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<>>>>>>><<<<<>><>>><<<<>>>>>><<>'], ['<><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>'], ['>><><<<<>>>><<<<<<<>>><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>><<>>><>><<<>>>>>>><<<<>>>>>><<>><><>><<<>>>>><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<<<>>>><<<<>>>><>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<'], ['<><<<<>>>><<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<<<<<<>>>>><<<<>>>><<>>><>>>>>><<<<<<<>>>><<<<<<>><>>>'], ['><><<><><><><><><><'], ['<>><<<>>>>><<<<<>>>>><><<>'], ['<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<>'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><><><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>><>><<<<>>>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>>>'], ['<><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>>><<<<<>><>>>'], ['<><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<><>>>>>>><<<<<>><>>>'], ['<><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>'], ['><><<<<>>>>><>>>>><<<<<<<>>>>>>><>><<<>>>>><<<<>>>>>><<>>><<<<<<>>>>'], ['<<<<>><><<<<>>>><<<<<<<>>>><<>>><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>>><<<<>>>>>><<>><><>><<<>>>>><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>><<<<>><><<<<>>>><<<<<<<>>>><<>>><><>><<<>>>>><<<<<>>><>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>'], ['<>><<<>>>>><><<<<>>>><<<<<<<>>>>>><<>'], ['<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<<<>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<'], ['<><<<<>>>><<<>>>><<<<>>>><>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<<<<<<<<>>>><<>><><<<<>>>><<<<<<<>>>><<>>><<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<>>>>>>><<<<<>>>>>><>>>>>><<<<<<<<<<<<>>>>>'], ['<><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>'], ['<>><<<>>>>><<<<<>>>>>>'], ['<>><<<>>>>><><<<<>>>><<<<<<<>>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<>'], ['<>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>><<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>>'], ['><>><<<>><>>><<<<<>>>>>><<>>'], ['<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<<<<<<>>>><<<<<<<>>>><<<<<>>>><>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<>'], ['<><<<<>>>><<<<<<<>>>><<>>><>'], ['<><<<<>><>><<<<<<<>>>><<>>><>>>>>>><<<<<<<<<<<<>>>>>'], ['<<<>>>><<<<<>>>>>>><<<<<<<'], ['<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<<<>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<'], ['<<<<<>>>><<<<<<<><>>><<<<>>'], ['<><><><><>><><><><><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<<<<<<>>>>>>><<<<>>>>'], ['><<>><<<>>>>><<<<<<>>>>>><<>>>>><<<'], ['<><><><><>><><><><><<><<<<>>>><<<<<<<>>>><<>>><>>>><<<<<<<<<<<>>>>>>><<<<>>'], ['<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<>>>>>>><<<<<>><>>><<<<>>>>>><<><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>>><<<<>>>>>><<>>'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<>>>>>'], ['<<<>>>><<<<<>>>><>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<'], ['>>>><<<<<<><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>'], ['<>><<<>>>>><<<<><<<<<<>>>>>>>>>>>><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>><<<<>>>>>><<>>'], ['>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<><>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>><<<'], ['><><<><>><<<<>>>>>><><<<<>>>><<<<<<<>>>><<>>><><>><<<>>>>><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>'], ['<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<><<<<>>>><<><<<<<>>>><<>>><>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<<<>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<'], ['<><<<<>>>><<<>>>><<<<>>>><>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<<<<<<<<>>>><<>><><<<<>>>><<<<<<<>>>><<>>><<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<<<<>>>>>'], ['<<><<<<>>>><<<<<<<>>>><<>>><>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>'], ['<<<>>>><<<<>>>><>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<<'], ['><><<<<>>>>><>>>>><<<<><<<<>>>>>>><<<<<<>>>>'], ['><>><<<><<>>>><><<<<>>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>'], ['><><<<<>>>>><>>>>><<<<<<<>>>>>>><>><<<>>>>><<<<>>>>>><<>>><<<<<<>>>><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>><<<<>>>>>><<>>'], ['><<>><<<>>>>><><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>><<<'], ['<>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>>><<<<<<<>>>><>>><<<<<>>>>>><<<>><<<<<>>>>>><<>'], ['><><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><<<>>>>><>>>>><<<<<<<<>>>>>>><<<<<<>>>>'], ['<><<<<>>>><<<<<<<>>>><<>><><<<<>>>><<<<<<<>>>><<>><<<>>>>><<<<<>>>>>><<><>>><<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<>>>>>>><<<<<>>>>>><>>>>>>><<<<<<<<<<<<>>>>>'], ['<><<<<<>>>><<<<<<<>>>><<>><><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>'], ['<>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>>'], ['<><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>'], ['<>><<><<>>'], ['><<>><<<>>>>><<<<<>><<>><<<>>>>><<<<<>>>>>><<>>>>>>><<>>>>><<<'], ['<<<>>>><<<<>>>>>>><<<<<<<>>>><<<<>>>>>>><<<<<<<<'], ['<><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<'], ['<><><><><>><><><><><<><<>><><<<<>>>><<<<<<<>>><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>><<>>><>><<<>>>>>>><<<<>>>>>><<>><><>><<<>>>>><<<<<>>>>>><<>>>>>>><<<<<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<>>>>>>><<<<<>><>>><<<<>>>>>><<><<<>>>><<>>><>>>><<<<<<<<<<<>>>>>>><<<<>>'], ['<<<>>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<<>>>>>>><<<<<<<<<<'], ['><<<<<>>>><<<<<<<><>>><<<<<>>'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>>><<<<<<<<><<<<>>>><<<<<<<><>><<<><<>><<<>>>><<<<<>>>>>>><<<<<<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<<<>>>>>'], ['<><<<<>>>><<<<><<<<>>><<>><<<>>>>><<<<<>><<>><<<>>>>><<<<<>>>>>><<>>>>>>><<>>>>><<<>>>'], ['<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<>>>>>'], ['><<<<<><><<<<>>>>><>>>>><<<<<<<>>>>>>><>><<<>>>>><<<<>>>>>><<>>><<<<<<>>>><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>><<<<>>>>>><<>>>>>><<<<<<<><>>><<<<<>>'], ['><><<><>><<<<>>>>>><><<<<>>>><<<<<<<>>>><<>>><><>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><><><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>><>><<<<>>>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>>>>>><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>'], ['<>><<<>>>>><<<<><<<<<<>>>>>>><><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>>>><<<<>>>>>><<>>'], ['><><<<<>>>>><>>>><<<<<>>>>'], ['<>><<<>>>>><><><<<<>>>>><>>>>><<<<><<<<>>>>>>><<<<<<>>>>>>>>>><<>>'], ['<>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>><<<>>>><<<<>>>>>>><<<<<<<>>>><<<<>>>>>>><<<<<<<<<<<<<>>>>>><<>'], ['<><<<<>>>><<<<<<<>>>><<>>>><>>>>>><<<<<<<>>>>>><<<<<>>>>'], ['<><<<<>>>><<<<<<<>>>><<>>><<<<>>>><<<<>>>>>>><<<><<<<>>><><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<><<<<>>>><<<<<<<>>>><<>>>><>>>>>><<<<<<<>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>'], ['<><<<<>>>><<<<<<<>>>>><<>><<<>>>>><<<<<>>>>>><<>>>>><<<<<>>><>'], ['<<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<><>><<<<>>>>'], ['<><><><><>><><><><><<><<<<>>>><<<<<<<>>>><<<>><<<>>>>><<<<>>>>>><<>>>>><>>>><<<<<<<<<<<>>>>>>><<<<>>'], ['><><<<<><>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><>>><<<<<>>>>>><<<>><<<<<>>>>>><<>>>>><>>>>><<<<><<<<>>>>>>><<<<<<>>>>'], ['<><<<<>><>><<<<<<<>>>><<>>><>>>>>>><<<<>>>>>'], ['<>><<<>>>>><><<<<<>>>><<<<<<<>>>>>><<>'], ['><><><><><<>><<<>>>>><<<<<<<<<<>>>>>>>>>>>>><<<<>>>>>><<>>><><><><'], ['<><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<><>>>>>><><<<<<>><>>>'], ['<><<<<>>>><<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<<<<<<>>>>><<<<>>>><<>>><>>>>>><<<<<<<>>>><<<>><>>>'], ['<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><><<<<>>>><<<<<<<>>>><<>>><<<<>>>><<<<>>>>>>><<<><<<<>>><><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<><<<<>>>><<<<<<<>>>><<>>>><>>>>>><<<<<<<>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>><<<>>>>><<<<>>>>>><<>><<<<<><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<><>>>>>>><<<<<>><>>>>>>>><<>>>>>><<<<<<<<'], ['><><<<<>>>>><>>>>><<<<<<<>>>>>>><>><<<>>>>><<<<>>>>>><<>>><<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<<<<<<>>>><<<<<<<>>>><<<<<>>>><>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<><<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<><<<<<>>>>'], ['<<><<<<>><>><<<<<<<>>>><<>>><>>>>>><<<<>>>>>'], ['<<<>>>><<<<>>>><>>>>>>><<<<<<<<<<<>>>>>>>>><<<<<<<<'], ['<<><<<<>>>><<<<<<<>>>><<>>>><>>>>>><<<<>>>>>'], ['<>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>><<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>>'], ['><><<<<>>>>><>>>>><<<><><<<<>>>>>>><<<<<<>>>>'], ['>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<><>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><>>>>>><<<'], ['<><<<<>>>><<<<<<<>>>><<<<<>>>><<<<>>>>>>><<<<<<<>>>><<<<>>>>>>><<<<<<<<<<>>><>'], ['><<>><<<>>>>><><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>><<<<>>>>>><<<><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<><>>>>>><><<<<<>><>>><'], ['<><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<><<<<<><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>><<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>'], ['><><<<<>>>>><>>>>><<<<<<<>>>>>>><>><<<>>>>><<<<>>>>>><<>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<<<><>>><<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<<<<<<>>>><<<<<<<>>>><<<<<>>>><>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<><<<<>>>><<<<<<<>>>><<>>><><><<<><<<<<><><<<<>>>>><>>>>><<<<<<<>>>>>>><>><<<>>>>><<<<>>>>>><<>>><<<<<<>>>><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>><<<<>>>>>><<>>>>>><<<<<<<><>>><<<<<>><>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<><<<<<>>>>'], ['<><<<<>>>><<><<<<<>>>>><<>>><>>>>>><<<<<<<>>>>>>>>><<<<>><>>>'], ['<><<<<<>>>><<<<<<<>>>><><>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>'], ['<<<<<>>>><<<<<<<<>><<<>>>>><><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<><<<<<><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>><>><<<>>>>><><<<<>>>><<<<<<<>>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<>>>>><<<<<>><>>><<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<<<>>>>>>>>>><<<<<>>'], ['<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<>>>>>>><<<<<>><>>><<<<>>>>>><<><>><<<<><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<>><>>><<<>>>>>>>>>>>>><<<<>>>>>><<>>'], ['<><<<<><<<<<>>>>>>>><<<<>><>>>'], ['<>><<<>>>>><<<<<<<<<<>>>>>>>>>>>>>><><><><><><><><><<<<<>>>>>><<>>'], ['><><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><<<>>>>><>>>>><<<<<<<<>>><>><<<><<>>>><><<<<>>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>>><<<<<<>>>>'], ['<><<<<>>>><<<<<<<>>>><<><<<<<<<<>>>>>'], ['<><><><><>><<><><><><<><<<<>>>><<<<<<<>>>><<>>><>>>>><<<<<<<<<<<>>>>>>><<<<>>'], ['<><<<<>>>><<<<<<<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<<<>>>>>'], ['<><<<<>><>><<<<<<<>>>><<>><><>>>>>>><<<<>>>>>'], ['<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<><<<<>>>><<<<<<<>>>><<>>><>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>>><<>>><>>>>>><<<<<<<>>>><>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<><<<<>>>><<><<<<<>>>><<>>><>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<<<>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<'], ['<<><<><<>>>><<<<<<<>>>><<>>><>>>>>><<<<>>>>>'], ['><>><<<><<>>>><>><<<<<<<>>>>>>>><<<<<>><>>>'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>><>><<<<<>><>>>'], ['>><><<<<>>>><<<<<<<>>><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>><<>>><>><<<>>>>>>><<<<>>>>>><<>><><>><<<>>>>><>><<<>>>>><><<<<<>>>><<<<<<<>>>>>><<><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<><<<<>>>><<<>>>><<<<>>>><>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<<<<<<<<>>>><<>><><<<<>>>><<<<<<<>>>><<>>><<<<>>>><<<<>>>>>>><<<><<<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<<<<>>>>>'], ['<><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><<<<<>><>>>><<<<<>><<>>>>>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<><<<<<<<>>>>>>><<<<<>><>>>'], ['>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<><>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>><<<><>><<<>>>>><<<<<>>>>>><<>>'], ['<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>>><<<<<<<>>><><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<><<<<>>>><<><<<<<>>>><<>>><>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<<<>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<'], ['<><<<<>>>><<><<<<<>>>>><<>>><>>>>>><<<<<<<>>>>><><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>>>>><<<<>><>>>'], ['<>><<<>>>>><<<<<<<<<<>>>>>>><>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<>>>>>>><<<<<>><>>><<<<>>>>>><<><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>>><<<<>>>>>><<>>>>>>>>><><><><><><><><><<<<<>>>>>><<>>'], ['<><<<<>>>><<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<<<<<<>>>>>><<<<>>>><<>>><>>>>>><<<<<<<>>>><<<>><>>>'], ['<>><<<>>><<>><<<>>>>><<<<<>><><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<><<>><>>>>>>><<>>>>><<<>>><<><<<<>>>><<<<<<<<>>>><<>>>>>>><<<<<>><>>><<<<>>>>>><<>'], ['<><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>>>>>>>>>><<<<>><>>>'], ['<><<<<>>>><<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<<<<<<>>>>>><<<<>>>><<>>><>>><>>>><<<>><>>>'], ['<<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<'], ['<><<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<><><><><><>><><><><><<><<<<>>>><<<<<<<>>>><<>>><>>>><<<<<<<<<<<>>>>>>><<<<>>>>>>'], ['<><<<<>>>><<<<<<<>>>><<>><><<<<>>>><<<<<><<>>>><<>>><<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<>>>>>>><<<<<>>>>>><>>>>>><<<<<<<<<<<<>>>>>'], ['<><<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>><<<<<>>>>>'], ['<<><<<<>>>><<<>>>><<<<>>>><>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<<<<<<<<>>>><<>><><<<<>>>><<<<<<<>>>><<>>><<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<<<<>>>>><<<<>>>><<<<<<<><>>><<<<>>'], ['<><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<>>>><<<<>>>>>>><<<><<<<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<><<<<>>>><<<<<<<>>>><<>>><>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>>><<>>><>>>>>><<<<<<<>>>><>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<><<<<>>>><<><<<<<>>>><<>>><>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<<<>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<>>>>>>><<<<<<<<<<'], ['<>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>>><<<<<<<>>>><>>><<<<<>>>>>><<<>><<<<<><>>>>><<>'], ['<><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<><>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<'], ['><><<<<>>>>><>>>>><<<<><<<<>>>>>>><<<<<<>>><><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>>'], ['<><><<<>>>>><<<<>>>>><<>>'], ['<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<'], ['<><<<<>>>><<><<<>>>><<>>><>>>>>><<<<<<<>><>>>>>><<<<<>><>>'], ['<<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><>>>>><<<<<<<><>><<<<>>>>'], ['><<<<<>>>><<<<<<<><<>><<<>>><<>><<<>>>>><<<<<>><><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<><<>><>>>>>>><<>>>>><<<>>><<><<<<>>>><<<<<<<<>>>><<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>><<<<<>>'], ['<><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>><>><<<><<>>>><><<<<>>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>'], ['>><><<<<>>>><<<<><<<>>>>><><<<<<>>>><<<<<<<>>>>>><<><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<<><<<<>><>><<<<<<<>>>><<>>><>>>>>><<<<>>>>><<<<<<<>>>><<<<<<>>'], ['<><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>>><<<<<<<>>><><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<><<<<>>>><<><<<<<>>>><<>>><>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<<<>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>'], ['<<<<>><><<<<>>>><<<<<<<>>>><<>>><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>>><<<<>>>>>><<>><><>>><<<>>>>><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>><<<<>><><<<<>>>><<<<<<<>>>><<>>><><>><<<>>>>><<<<<>>><>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>'], ['><<>><<<>>>>><><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<><>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>><<<><>><<<>>>>><<<<<>>>>>><<>><<'], ['<><<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>>><<<<<<<<><<<<>>>><<<<<<<><>><<<><<>><<<>>>><<<<<>>>>>>><<<<<<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<<<>>>>>>>>><<<<<<<>>>><><>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>'], ['<><>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<><>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>><<<><>><<<>>>>><<<<<>>>>>><<>><<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>><>>>'], ['<><<<<>>>><<<<<<<<<<<<<<>>>>>'], ['>><><<<<>>>><<<<><<<>>>>><><<<<<>>>><<<<<<<>>>>><><<><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<<><>>>><<<<<>>>>>>><<<<<<<'], ['>><><<<<>>>><<<<<<<>>><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>><<>>><>><<<>>>>>>><<<<>>>>>><<>><><>><<<>>>>><>><<<>>>>><><<<<<>>>><<<<<<<>>>>>><<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<<<>>>><<<<>>>><>>>>>>><<<>><<<>>>>><><<<<>>>><<<<<<<>>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<><<<<<<<<>>>>>>>>><<<<<<<'], ['>><><<<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['><>><<<><>><>>>'], ['<<<>>>>><<<<>><<<>>>><<<<<<<<>>>><<<<>>>>>>><<<<<<<<<<'], ['<>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<<<>'], ['>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<><>><<<>>>>><<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>><<<><>><<<>>>>><<<<<>>>>>><<>>'], ['><><<<<>>>>><>>>>><<<<<<<>>>>>>><>><<<>>>>><<<<>>>>>><<>>><<<<<<>>>><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>><>><<<><<>>>><><<<<>><>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>><<<<>>>>>><<>>'], ['<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<'], ['<>><<<>>>>><><<<<>>>><<<<<><>><<<>><>>><<<<<>>>>>><<>><<>>>>>><<>'], ['<><<<<>>><><<<<<<<>>>><<>>><>>>>>><<<<>>>>>'], ['>><><<<<>>>>>><<>><><>><<<>>>>><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['><><<<<>>>>><>>>>>><<<<><<<<>>>>>>><<<<<<>>>>'], ['<><<<<<>>>><<><<<>>>><<>>><>>>>>><<<<<<<>><>>>>>><<<<<>><>>'], ['<<<>>>>><<<<>>>>>>>><<<<<<<'], ['<>><<<>>>>><<>><><<<<>>>><<<<><<<>>>>><><<<<<>>>><<<<<<<>>>>><><<><<<<<>>>>>><<>>>>>>><<<<<<>>>><<<<<>>>><>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<<<<<>>>>>>><<<<<>>>>>><<<<<<>>>>>>'], ['<><<<<>><<>><<<>>>>><<<<<>>>>>><<>>>>><<<>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>>'], ['<<<>>>><<<<>>>>>>><<<<<<<>>>><<<<>>>>>>><<<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<><<<<<<<<'], ['><><<<<>>>>><>>>>><<<<<<<<>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>><<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>>>>>>>>><<<<<<>>>>'], ['>><><<<<>>>><<<<<<<>>><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>><<>>><>><<<>>>>>>><<<<>>>>>><<>><><>><<<>>>>><>><<<>>>>><><<<<<>>>><<<<<<<>>>>>><<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<>>>><>><<<>>>>><><<<<>>>><<<<<<<>>>>>><<>>>><<<<<>><>>><<<<>>>>>><<>>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<><<<<>><<>><<<>>>>><<<<<>>>>>><<>>>>><<<>>><<<<<<<>>><><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>>'], ['><><<<<>>>>><>>>>><<<<<<<<>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<><<<<>>>><<<<<<<>>>><<>>><><>><<<>>>>><<<<<<<<<<>>>>>>>>>>>>>><><><><><><><><><<<<<>>>>>><<>>>'], ['<><<<<>>>><<<<<<<>>><><<>>><>>>>>><<<<<<<>>>>>><>><<<<<>><>>>'], ['<><<<<>>>><<><<<>>>><<>>><>>>>>><<<<<<<>><>>>>>><<<<<<>><>>'], ['><><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><<<>>>>><>>>>><<<<<<<<>>><>><<<>><<>>>><><<<<>>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>>><<<<<<>>>>'], ['<><<<<>><>><<<<<<<><<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>><<>><><>>>>>>><<<<>>>>>'], ['<><><<<<>>>><<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<<<<<<>>>>><<<<>>>><<>>><>>>>>><<<<<<<>>>><><<>><>>>><<<>>>>><<<<>>>>><<>>'], ['>><><<<<>>>>>>>>><><<<<<>>>><<<<<<<>>>>>><<><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<<<<>>>>>><<>>'], ['<><<<<>>>><<<<<<<>>>><<<<<>>>><<<<>>>>><><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>><>><<<><<>>>><><<<<>>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>>><<<<<<<>>>><<<<>>>>>>><<<<<<<<<<>>><>'], ['><><<<<><>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><>>><<<<<>>>>>><<<>><<<<<>>>>>><<>>>>><>>>><><<<<><<<<>>>>>>><<<<<<>>>>'], ['<<><<<<>>>><<<<<<<>>>><<>>>><>>>>>>><<<<>>>>>'], ['><><<><>><<<<>>>>>><><<<<>>>>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><<<>>>>><>>>>><<<<<<<<>>>>>>><<<<<<>>>><>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>'], ['<>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><><<<<<<>>>>>>>><<>>>>>><<<<<<<<<<>'], ['><><<<<>>>>><>>>>><<<<><<<<>>>>>>><<<<<><>><<<><<<>>>><>>>>'], ['<><<<<>>>><<<>>>><<<<>>>><>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<<<<<<<<>>>><<>><><<<<>>>><<<<<<<>>>><<>>><<<<>>>><<<<>>>>>>><<<><<<<<>>>><<<<>>>>>>><<<<<<<><<<>>>>>><<<<<<<<<<>>>>>'], ['<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<><<<<>>>><<<<<<<>>>><<>>><>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>><>>>>><<<<<<<<<<<<>>>>>>><<>>><>>>>>><<<<<<<>>>><>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<><<<<>>>><<><<<<<>>>><<>>><>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<<<>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<'], ['><<>><<<>>>>><><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<><>><<<<>>>><<<<<>>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>><<<'], ['<><<<<>>>><<><<<<<>>>>><<>>>><>>>>>><<<<<<<>>>>>>>>><<<<>><>>>'], ['<><<<<>>>><<<<<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>'], ['<<<>>><><<<<>>>>><>>>>><<<<<<<>>>>>>><>>>>><<<<<<<><>><<<<>>>>'], ['<<><<<<>><>><<<<<<<>>>><<>>><>>>>>><<<<<<<><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<>>>><<<<>>>>>>><<<><<<<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<><<<<>>>><<<<<<<>>>><<>>><>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>>><<>>><>>>>>><<<<<<<>>>><>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<><<<<>>>><<><<<<<>>>><<>>><>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<<<>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<>>>>>>><<<<<<<<<<<<<<<>>>><<<<<<>>'], ['>><><<<<>>>><<<<<<<>>><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>><<>>><>><<<>>>>>>><<<<>>>>>><<>><><>><<<>>>>><>><<<>>>>><><<<<<>>>><<<<<<<>>>>>><<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>><<<<<>>>><<<<<<<><>>><<<<<>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['><><<<<>>>>><<<<>>>>>><<>>><<<<<<>>>>'], ['>><><<<<>>><><<<<>>>><<<<<<<>>>><<>><><<<<>>>><<<<<><<>>>><<>>><<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<>>>>>>><<<<<>>>>>><>>>>>><<<<<<<<<<<<>>>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<><<<<>>>><<<>>>><<<<>>>><>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<<<<<<<<>>>><<>><><<<<>>>><<<<<<<>>>>><<<<<><><<<<>>>>><>>>>><<<<<<<>>>>>>><>><<<>>>>><<<<>>>>>><<>>><<<<<<>>>><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>><<<<>>>>>><<>>>>>><<<<<<<><>>><<<<<>><<>>><<<<>>>><<<<>>>>>>><<<><<<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<<<<>>>>>'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>>>><><<<<>>><><<<<>>>><<<<<<<>>>><<>><><<<<>>>><<<<<><<>>>><<>>><<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<>>>>>>><<<<<>>>>>><>>>>>><<<<<<<<<<<<>>>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<><<>><<<>>>>><<<<<>><><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>>>><<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>>>>>>>>>><<<<>><>>>'], ['<><<<<>>>><<<<><<<<>>>><<<><<<<>>>><<>>><>>>>>><<<<<<<<<<<<><>>>><<<<>>>><<>>><>>>>>><<<<<<<>>>><<<<<<>>>>'], ['><><<<<>>>>><>>>>><<<<<<<<>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<><<<<>>>><<<<<<<>>>><<>>><><>><<<>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>><<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>>>>>>>>>>>>><><><><><><><><><<<<<>>>>>><<>>>'], ['<><<<<><<<<<>>>>>>>><<<<>>'], ['<><><><><>><<<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><>>>>><<<<<<<><>><<<<>>>>><><><><<><<<<>>>><<<<<<<>>>><<<>><<<>>>>><<<<>>>>>><<>>>>><>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<><>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><>>>>>><<<>>>>>><<<<>>'], ['><><<<<>>>>><>>>>><<<<<<<<>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<><<<<>>>><<<<<<<>>>><<>>><><>><<<>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>><<<>>>>><<<<<>>>>>><<>><>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>><<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>>>>>>>>>>>>><><><><><><><><><<<<<>>>>>><<>>>'], ['<><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<>><>><<>>><>>>>>><<<<<<><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>>><<<<<<<<><<<<>>>><<<<<<<><>><<<><<>><<<>>>><<<<<>>>>>>><<<<<<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<>>>>><<<<<>>>>>'], ['<><<<<>>>><<><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>><<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>>><<<<<>><>>>'], ['<><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>'], ['><><<<<>>>>><>>>>><<<<<<<>>>>>><<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<><>><<<>>>>><<<<>>>>>><<>>><<<<<<>>>>'], ['>><><<<<>>>><<<<<<<>>><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>><<>>><>><<<>>>>>>><<<<>>>>>><<>><><>><<<>>>>><>><<<>>>>><><>><<<>>>>><<<<<>>>>>><<>><<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<<><<<<>>>><<<>>>><<<<>>>><>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<<<<<<<<>>>><<>><><<<<>>>><<<<<<<>>>><<>>><<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<<<<>>><<>><<<>>>>><><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<<>><>>><<<<>>>>>><<<><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<><>>>>>><><<<<<>><>>><>>><<<<>>>><<<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>><<<<<<><>>><<<<>>'], ['><><<<<>>>>><>>><<<<><<<<>>>>>>><<<<<<>>>>'], ['<>><<<>>>>><><<<<>>>><<<<<<<><><><<<>>>>><<<<>>>>><<>>>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<>'], ['<><<<<>>>><<<<<<<>>>><<>>>><>>>>>><<<<<>><><<<<>>>><<<<<<<>>>><<>>><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>>><<<<>>>>>><<>><><>><<<>>>>><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>><<<<>><><<<<>>>><<<<<<<>>>><<>>><><>><<<>>>>><<<<<>>><>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<><<<<<<>>>>>><<<<<>>>>'], ['<>><<<>>>>><<><<<<>>><><<<<>>>><<<<<<<>>>><<>>><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>>>><<<<>>>>>><<>><><>><<<>>>>><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>>><<<<<<<<>>>><<>>>>>>><<<<<>><>>><<<<>>>>>>><<><>><<<<><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<>><>>><<<>>>>>>>>>>>>><<<<>>>>>><<>>'], ['<><<<<>>><>><<<<<<<>>>><<>>><>>>>>>><<<<<<<<<<<<>>>>>'], ['<>><<<>>>>><<>><><<<<>>>><<<<><<<>>>>><><<<<<>>>><<<<<<<>>>>><><<><<<<<>>>>>><<>>>>>>><<<<<<>>>><<<<<>>>><>>>>>>><<<<<<<<<<>>>>>>>>><>><<<><<>><>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>><<<<<<<<<<<>>>>>>><<<<<>>>>>><<<<<<>>>>>>'], ['<><<<<>>>><<><<<<<>>>>><<>>><>>>>>><<<><<<<>>>>>>>>><<<<>><>>>>'], ['<>><<<>>>>><><><<<<>>>>><>>>>><<<<><<<<>>>>>>><<<<<<>>><>>>>>>><<>>'], ['><>><<<><<>>>><><<<<>>>><>>>>>><<<<<><<<<<>><>>>'], ['<>><<<>>>>><<<<><<<<<<>>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><<<<<>><>>>>>>>>>><<<<>>>>>><<>>'], ['<><<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>>><<<<<<<<><<<<>>>><<<<<<<><>><<<><<>><<<>>>><<<<<>>>>>>><<<<<<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<<<>>>>>>>>><<<<<<<>>>><><>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<<>>>>>>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<>>>>><<<<<<<<<<<<>>>>>'], ['<<><<<<>>>><<<<<<<><>><<<>>>>><><<<<>>>><<<<<<<><><><<<>>>>><<<<>>>>><<>>>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<>>>><<>>>><>>>>>>><<<<>>>>>'], ['<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<<<<<<>>>><<<<<<<>>>>><<<<<>>>><>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<>'], ['<>><<<>>>>><><><<<<>>>>><>>>>><<<<><<<<>>>>>>><<<<<<>>>><>>>>>>><<>>'], ['<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<<<<<<>>>><<<<<<<>>>><<<<<>>>><>>>><<<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<>'], ['<><<<<>>>><<<<<<<>>>><<<>>><>>>>>><<<<<<<>>>>>><>><<<<<>><>>>'], ['><<>><<<>>>>><><>><<<><<>>>><><<<<>>>><<<<><<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>><<<'], ['<><<<<>><>><<<<<<<>>>><<>><><>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<><>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>><<<><>><<<>>>>><<<<<>>>>>><<>>>>>>>><<<<>>>>>'], ['><><<<<>>>>><>>>>><<<<<<<<>>><<<>>>><><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>><<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>>>>>>>>><<<<<<>>>>'], ['>>>><<<<<<><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<><>>>>>><><<<<<>><>>><>>>'], ['<<<>>>><<<<>>>><>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<<<'], ['><><<><<<<>>>><<<<<<<>>>><<>>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><<<>>>>><>>>>><<<<<<<<>>><>><<<>><<>>>><><<<<>>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>>><<<<<<>>>>'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>><<<<<>>>><<<<<<<<>><<<>>>>><><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<><<<<<><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>><>><<<>>>>><><<<<>>>><<<<<<<>>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<>>>>><<<<<>><>>><<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<<<>>>>>>>>>><<<<<>>'], ['>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<><>><<<>>>>><<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<><><<><>><<<<>>>>>><><<<<>>>>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><<<>>>>><>>>>><<<<<<<<>>>>>>><<<<<<>>>><>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>><<<><>><<<>>>>><<<<<>>>>>><<>>'], ['<<<<<>>>><><<<<>>>><<<<<<<<<<<<<<>>>>>><>>><<<<<>>'], ['<><<<<>>>><<<<<<<>>>><<>>><<<<>><>><<<<>>>>>>><<<><<<<>>><><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<><<<<>>>><<<<<<<>>>><<>>>><>>>>>><<<<<<<>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>'], ['>><><<<<>>>><<<<<<<>>><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>><<>>><>><<<>>>>>>><<<<>>>>>><<>><<><<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>><>><<<>>>>><>><<<>>>>><><<<<<>>>><<<<<<<>>>>>><<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>><<<<<>>>><<<<<<<><>>><<<<<>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<<<<>><><>><><<<<>>>><<<<<<<>>><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>><<<>>><>><<<>>>>>>><<<<>>>>>><<>><><>><<<>>>>><>><<<>>>><><<<<>>>><<<<><<<>>>>><><<<<<>>>><<<<<<<>>>>><><<><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>>><><<<<<>>>><<<<<<<>>>>>><<><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<<<>>>><<<<<<<>>>><<>>><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>>><<<<>>>>>><<>><><>>><<<>>>>><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>><<<<>><><<<<>>>><<<<<<<>>>><<>>><><>><<<>>>>><<<<<>>><>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>'], ['><><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><><>><<<>>>>><>>>>><<<<<<<<>>>>>>><<<<<<>>>>'], ['<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<<<<<<>>>><<<<<<<>>>><<<<<>>>><>>>><<<>>><>>>>>><<<>>>><<<<>>>><>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<>'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<<>>>>>>><<<<<>><>>>'], ['<<<>><><<<<>>>>><>>>>><<<><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<<<>>>>>>><>>>>><<<<<<<><>><<<<>>>>'], ['<><><<<<>>>>><>>>>><<<<<<<>>>>>>><>><<<>>>>><<<<>>>>>><<>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<<<><>>><<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<<<<<<>>>><<<<<<<>>>><<<<<>>>><>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<><<<<>>>><<<<<<<>>>><<>>><><><<<><<<<<><><<<<>>>>><>>>>><<<<<<<>>>>>>><>><<<>>>>><<<<>>>>>><<>>><<<<<<>>>><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>><<<<>>>>>><<>>>>>><<<<<<<><>>><<<<<>><>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<><<<<<>>>><<>>'], ['<<<>>>><<<<<>>>><>>>>><>><<<<<<<<<<>>>>>>>>><<<<<<<'], ['><><<<<>>>>><>>>>><<<<<<<>>>>>>><>><<<>>>>><<<<>>>>>><<>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>>'], ['>><><<<<<>>>><<<<<<<>>>><<>>><<<<<<<>>>><>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>><<<<<>>>>>><<<'], ['>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<><>><<<>>>>><<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<><><<><>><<<<>>>>>><><<<<>>>>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><<<>>>>><>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<<<<<<>><>>><<<<<<<<>>>>>>><<<<<<>>>><>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>><<<><>><<<>>>>><<<<<>>>>>><<>>'], ['<><<<<>>>><<><<<<<>>>><<<>>><>>>>>><<<<<<<>>>>>>>><<<<>><>>>'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>>><<<<<<<<><<<<>>>><<<<<<<><>><<<><<>><<<>>>><<<>>>><<<<<>><>>>>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<>>>>><<<<<>>>>>'], ['<<<>>>><<<<>>>><>>>>>>><<<<<<<<<<>>>'], ['<><<<<>>>><<<<>>>><<<>>><>>>>>><<<<<<<>>>>>><>><<<<<>><>>>'], ['<>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>>><<<<<<<>>>><>>>><<<<<>>>>>><<<>><<<<<><>>>>><<>'], ['<<<>>>>>><<<<>><<<>>>><<<<<<<<>>>><<<<>>>>>>><<<<<<<<<<'], ['<<<>>>>><<<<>><<<>>>><<<<<<<<<>>>><<<<>>>>>>><<<<<<<<<<'], ['<<<>>>><<<<>>>><>>>>>>><<<>><<<>>>>><><<<<>>>><<<<<<<>>>>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<><<<<<<<<>>>>>>>>><<<<<<<'], ['><<>><<<>>>>><><>><<<><<>>>><><<<<>>>><<<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>><<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>><<<'], ['<><<<<<<<<<>>>><<>>><>>>>>>><<<<<<<<<<<<>>>>>'], ['<><<<><>><>><<<<<<<>>>><<>><><>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<><>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>><<<><>><<<>>>>><<<<<>>>>>><<>>>>>>>><<<<>>>>>'], ['<<<>>>><<<<>>>>>>><<<<<<<>>>><<<<>>>>>>><<<<<<'], ['<<<>>>><<<<>>>>>>>><<<<<<<>>>><<<<>>>>>>><<<<<<<<'], ['<><<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<<<<<<<<<<>>>>>'], ['><<>><<<>>>>><><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<><>><<<<>>>><<<<<>>>>>>>><<<<<>><>>><<<<>><>>>><<>>>>><<<'], ['>><><<<<>>>><<<<><<<>>>>><><<<<<>>><>><<<>>>>><><><<<<>>>>><>>>>><<<<><<<<>>>>>>><<<<<<>>>><>>>>>>><<>>>>>>><><<><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['>><><<<<>>>>>>>>><><<<<<>>>><<<<<<<>>>>>><<><<<<<>>>>>><<>>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<><><><><>><><><><><<><><>><<<><>><>>><<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<<<<<<>>>>>>><<<<>>>>'], ['<<<<<>>>><><<<<>>>>><>>>>><<<<<<<>>>>>>><>><<<>>>>><<<<>>>>>><<>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<<<><>>><<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<<<<<<>>>><<<<<<<>>>><<<<<>>>><>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<><<<<>>>><<<<<<<>>>><<>>><><><<<><<<<<><><<<<>>>>><>>>>><<<<<<<>>>>>>><>><<<>>>>><<<<>>>>>><<>>><<<<<<>>>><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>><<<<>>>>>><<>>>>>><<<<<<<><>>><<<<<>><>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<><<<<<>>>>><<<<>><><<<<>>>><<<<<<<>>>><<>>><><>><<<>>>>><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>'], ['><><<<<>>>>><>>>>><<<<<<<<>>><<<>>>><><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>><<<>>>>>>><<<<<><<<>>>><<<<>>>>>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>><<<>><><<<<>>>><<<<<<<>>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>>>>>>>>><<<<<<>>>>'], ['<>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>>><<<<<<<>>>><>>>><<<<<>>>>>><<<><<<<><>>>>><<>'], ['<<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<><<<<>>>><<<<<<<>>>><<>>><><<<>>>><<<<<<>>'], ['>><><<<<>>>><<<<<<<>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<>>>>>>><<<<<>><>>><<<<>>>>>><<><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>>><<<<<>>>>>><<>>'], ['<<<>>>><<<<>><<<>>>><<<<>>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<'], ['<<<>>><><<<<><><<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>><<<<<>>>>>>>>><>>>>>>><>>>>><<<<<<<><>><<<<>>>>'], ['<<><<<<>>>><<<>>>><<<<>>>><>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<<<<<<<<>>>><<>><><<<<>>>><<<<<<<>>>><<>>><<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<<<<><<>><<<>>>>><<<<<>>>>>><<>>>>><<>><<<>>>>><><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<<>><>>><<<<>>>>>><<<><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<><>>>>>><><<<<<>><>>><>>><<<<>>>><<<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>><<<<<<><>>><<<<>>'], ['<><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<><>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<>>>><<<<>>>>>>><<<><<<<>>>><<<<<>>>>>>><<<<<<<<<<'], ['<<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<>><><<<<>>>><<<<<<<>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<<'], ['<><<<<>>>><<><<<<<>>>>><<>>><>>>>>><<<<<<<>>>>>>>>><<<<>><<>>>'], ['<<<<>>>>>><<<<>><<<>>>><<<<<<<<<<>>>>>>><<<<<<<<<<'], ['><<>><<<>>>>><><>><<<><<>>>><><<<<><><<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>>><<<<<<<<><<<<>>>><<<<<<<><>><<<><<>><<<>>>><<<<<>>>>>>><<<<<<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<<<>>>>>>>>><<<<<<<>>>><><>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<<>>>>>>>>><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<>>>>><<<<<<<<<<<<>>>>>>>><<<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>><<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>><<<'], ['<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>><<<<<>>>><<<<<<<<>><<<>>>>><><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<><<<<<><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>><><><<<>>>>><><<<<>>>><<<<<<<>>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<>>>>><<<<<>><>>><<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<<<>>>>>>>>>><<<<<>>'], ['<>><<<>>>>><><<<<<>>>><<<<<<<<>>>>>><<>'], ['><><<<<>>>>><>>>>><<<<<<<<>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<><<<<>>>><<<<<<<>>>><<>>><><>><<<>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>><>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>><<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>>>>>>>>>>>>><><><><><><><><><<<<<>>>>>><<>>>'], ['<>><<<>>>>><><<<<>>>><<<<<><>><<<>><>>><<<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<><>><<<>>>>><<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<><><<><>><<<<>>>>>><><<<<>>>>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><<<>>>>><>>>>><<<<<<<<>>>>>>><<<<<<>>>><>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>><<<><>><<<>>>>><<<<<>>>>>><<>><>>>>>><<>><<>>>>>><<>'], ['>><><<<<>>>><<<<<<<>>><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>><<>><<<>>>>><><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<><>><<<<>>>><<<<<>>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>><<<>>><<>>><>><<<>>>>>>><<<<>>>>>><<>><><>><<<>>>>><>><<<>>>>><><>><<<>>>>><<<<<>>>>>><<>><<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<<<<<>>>><<<<<<><>>>><<<<<>>'], ['><<>><<<>>>>><><>><<<><>><<<>>>>><<<<><<<<<<>>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><<<<<>><>>>>>>>>>><<<<>>>>>><<>><<>>>><><<<<>>>><<<<><<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>><<<'], ['><><<<<>>>>><>>>>><<<<<<<<>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<><<<<>>>><<<<<<<>>>><<>>><><>><<<>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><<<<<>><>>>><<<<<>><<>>><<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>><<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>>>>>>>>>>>>><><><><><><><><><<<<<>>>>>><<>>>'], ['<><<<<>>>><<<<<<<><><<<<>>>>><>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<<<>>>>>'], ['><><<><>><<<<>>>>>><><<<<>>>><<<<<<<>>>><<>>><><>><<<>>>>><<<<<>>>>>>><><<<<>>>>><<<<>>>>>><<>>><<<<<<>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>'], ['><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><<<<>>>>'], ['<><<<<>>>><<><<<<<<<>><>>>'], ['>><><<<<>>>><<<<<<<>>><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>><<>>><>><<<>>>>>>><<<<>>>>>><<>><><>><<<>>>>><>><<<>>>>><><<<<<>>>><<<<<<<>>>>>><<>><<<>>>>><<><<<<>>>><<<<<<<<>>>><<>>>><>><<<>>>>><><<<<>>>><<<<<<<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<<<>>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<<>>>>>>><<<<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>>><<<<<<<<<<<<>>>>><<<'], ['<<>><<<>>>>><<<<>>>>>>><<>><<<>>>>><<<<<<>>>>>><<>>>>><<<<>>>><<<<<><<<<>>>><<<<<<<>>>><<>>><><<<>>>><<<<<<>>'], ['><><<<<>>>>><>>>>><<<<<<<>>>>>><<<>><><<<<>>>>><>>>>><<<<<<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>>>>>><<<<<>><>>>>><<<<<<>>>>>>>><<>>>>>><>>>>><<<<>>>>>><<>>><<<<<<>>>>'], ['><><<<<>>>>><>>>>><<<><><<<<>>><>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<>>>>><<<<<<>>>>'], ['><<><><<<>>>>><<<<<>>>>>><<>>>>><<<'], ['><><<><<<<>>>><<<<<<<>>>><<>>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>><><<<<>>>>><<<<>>>>>><<>>><<<<<<>>>><<<>>>>>>>><<<<<>><>>>>>>>><<<<<<>>>>'], ['<><><><><>><><><><><<><<<<>>>><<<<<<<>>>><<>>><>>>><<<<<<<<<<<>>>>>>><<><<>>'], ['><<>><<<>>>>><><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>><<<<>>>>>><><>>>>><<<'], ['><<>><<<>>>>><><>><<<><<>>>><><<<><>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>><<<'], ['>><><<<<>>>><<<<<<<>>><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>><<>>><>><<<>>>>>>><<<<>>>>>><<>><<><<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>><>><<<>>>>><>><<<>>>>><><<<<<>>>><<<<<<<>>>>>><<>><<<>>>>><<><<<<>>>><<<<<<<<>>><>><<<>>><<>><<<>>>>><<<<<>><><<<<>>>><<><<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<><<>><>>>>>>><<>>>>><<<>>><<><<<<>>>><<<<<<<<>>>><<>>>>>>><<<<<>><>>><<<<>>>>>><<>><<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>><<<<<>>>><<<<<<<><>>><<<<<>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['<>><<<>>>>><<><<<<>>>><<<<<<>><><<<<>>>>><>>>>><<<><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<<<>>>>>>><>>>>><<<<<<<><>><<<<>>>><<<<<>>>><<>>>>>>><<<<<>><>>><<<<>>>>>><<>'], ['>><><<<<>>>><<<<><<<>>>>><><<<<<>>>><<<<<<<>>>>><><<><<<<<>>>>>><<>>>>>>><<<<<<<>>>>><>><<<>>>>><<<<><<<<<<>>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>><<<<<>><>>>>>>>>>><<<<>>>>>><<>><<>>>>>><<<'], ['<><<<<>>>><<<<<<<>>>><<>><><<<<>>>><<<<<<<>>>><<>>><<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<>>>>>>><<<<<>>>>>><>>>>>><<<<<<<<<<<<>>>'], ['<><<<<<>>>>><><<>'], ['<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<><>><<<>>>>><<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<><<<<>>>><<<<<<<<>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>>><<<><>><<<>>>><<<<>><><>><><<<<>>>><<<<<<<>>><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>><<<>>><>><<<>>>>>>><<<<>>>>>><<>><><>><<<>>>>><>><<<>>>><><<<<>>>><<<<><<<>>>>><><<<<<>>>><<<<<<<>>>>><><<><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>>><><<<<<>>>><<<<<<<>>>>>><<><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<<<>>>><<<<<<<>>>><<>>><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>>><<<<>>>>>><<>><><>>><<<>>>>><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>><<<<>><><<<<>>>><<<<<<<>>>><<>>><><>><<<>>>>><<<<<>>><>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>><<>>>>>><<<<<<<<<<<'], ['<<><<<<>>>><<<<<<<>>>><<>>><>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<><>>><<<>>>>><<<<<>>>>>><<<><<<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><><<<<>>>>>>><<<<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>><<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<>>>>>><<<<<<<<<<<<>>>>>>>'], ['<<><<<<>>>><<<<<<<><>><<<>>>>><><<<<>>>><<<<<<<><><><<<>>>>><<<<>>>>><<>>>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>><<<<<>>>>>>>>><<<<>>>>>'], ['><>><<<><<><<<<>>>><<<<<<<>>>><<>>><>>>>>>><<<<<<<<><<<<>>>><<<<<<<><>><<<><<>><<<>>>><<<<<>>>>>>><<<<<<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><<<<<>>>>>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>'], ['<>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>>><<<<<<<>>>><>>><<<<<>>>>>><<<>><<><><<<<>>>>><>>>><<<<<>>>><<<>>>>>><<>'], ['><><<><<<<>>>><<<<<<<>>>><<>>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>>><><<<<>>>>><>>>>><<<<<<<>>>>>>><>><<<>>>>><<<<>>>>>><<>>><<<<<<>>>><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>><>><<<><<>>>><><<<<>><>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<<<<>><>>><>>>>>>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>><<<<>>>>>><<>><<>>>>>><<>>><<<<<<>>>><<<>>>>>>>><<<<<>><>>>>>>>><<<<<<>>>>'], ['><<>><<<>>>>><><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<<>><><<<<>>>>><>>>>><<<<<<<>>>>>>><<<<<<>>>>>>>><<>>>>>><<<<<<<><<<<>>>><<<<<<<><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<><<<<<><<<<<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>><<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>><<<<<<<>>>><<>>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>>>><<>>><<><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>><><>><<<<>>>><<<<<>>>>>>>><<<<<>><>>><<<<>>>>>><<>>>>><<<'], ['<<><<<<>>>><<<<<<<>>>><<>><><<<<>>>><<<<<<<>>>><<>><<<>>>>><<<<<>>>>>><<><>>><<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<>>>>>>><<<<<>>>>>><>>>>>>><<<<<<<<<<<<>>>>>'], ['>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<><>><<<>>>>><<><<<<>>>><<<<<><<<>>>><<<>>>><<<<>><<<><>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<>><><<<<<>>>><<<<<<<>>>><<>>><>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<>>>>>>><<<<<><>>><<<<>>>>>><<>>>>>><<<><>><<<>>>>><<<<<>>>>>><<>>'], ['<><<<<>>>><<><<<<<>>>>><<>>><><<<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<>><>>>>>><<>><>>>>><><<<<<<<>>>>>>><<<<<>><>>>>>>><<<<>><>>>'], ['<>><<<<>>>><<<<<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<>>>>>'], ['<<<>>>><<<<>>>><>>>>>>><<<<<<<<<<<>>>>>>>>>><<<<<<<<'], ['<<<>>>><<<<>>><>>>><<<<<<<'], ['><><<<<>>>>><>>><<<<><><<<>>>>>>><<<<<<>>>>'], ['><><><><>><<<<>>>>><<<<>>>>><<>><><><><><><'], ['<><<<<>>>><<<>>>><<<<>>>><>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<<<<<<<<>>>><<>><><<<<>>>><<<<<<<>>>>><<<<<><><<<<>>>>><>>>>><<<<<<<>>>>>>><>><<<>>>>><<<<>>>>>><<>>><<<<<<>>>><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>><>><<<><<>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>>><<<<<>><>>>>><<<<>>>>>><<>>>>>><<<<<<<><>>><<<<<>><<>>><<<<>>>><><><<<<><>><<<>>>>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>><>>><<<<<>>>>>><<<>><<<<<>>>>>><<>>>>><>>>><><<<<><<<<>>>>>>><<<<<<>>>><<<>>>>>>><<<><<<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<<<<>>>>>'], ['><>><<<<>>>>>><><<<<>>>><<<<<<<<>>>><<>>><><>><<<>>>>><<<<<>>>>>><<>>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<'], ['><><<><><><><><>><><'], ['<<<>>>><<<<>><<<>>>><<<<>>>>>>>><<<<<<<>>><<<<<<<<><<<<><<<<<>>>>>>>><<<<>>>>>><<<>><><<<<>>>><<<<<<<>>>><<>>><>>>>>><<<<<<<>>>>>>><<<<<>>>>>><<<<>>>>>>><<<<<<<<<<<<'], ['<<<>>>>><<<<>><<<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<>>>><<<<>>>>>>><<<<<<<<><<<<>>>><<<<<<<>>>><<>>><>>>>>>><<<<<<<<<<<<>>>>><<<'], ['><<>><>><<<>>>>><<<<><<<<<<>>>>>>>>>>>>><<<<>>>>>><<>><<<>>>>><<<<<<>>>>>><<>>>>><<<'], ['><<><>>>>>>>>>>><<<<<<<'], ['<>><<<>>>>><<><<<<>>>><<<<<<<<>>><>><<<<>>>>>><<<>>>><<<<>><<<>>>><<<<>>>>>>><<<<<<<>>><<<<<<<<<<<<>>>><<<<<<<>>>><<<<<>>>><>>>><<<>>><>>>>>><<<>>>><<<<>>>><>>><<<<>><>>><<<<>>>>>><<>'], ['<><<<<>><<>><<<>>>>><<<<<>>>>>><<>>>>><<<>>><<<<<<<>>><><<>>><>>>>>><<<<<<<>><<>><<<>>>>><<<<>>>>>><<>><<<<>>>><<<<<<<>>>><<<<<<>>>>>>>><<><<<>><>>>'], ['><>><<<><<>>>><><<<<>>>><>>>>>><<<<<<><<<<<>><>>>'], ['<><<<<>>>><<<>>>><><<<<>>>><<<<<<<>>>><<>>><><><<<<>>>>><>>>>><<<><<<<>>>>>>><<<<<<>>>>>>>>>><<<<<<<<<<<<><><><><><>><><><><><<><<<<>>>><<<<<<<>>>><<>>><>>>><<<<<<<<<<<>>>>>>><<<<>>>>>><<<<>>>><>>>>>>><<<<<<<<<<>>>>>>>>><<<<<<<<<<<<<<>>>><<>><><<<<>>>><<<<<<<>>>><<>>><<<<>>>><<<<>>>>>>><<<><<<<>>>><<<<>>>>>>><<<<<<<<<<>>>>>><<<<<<<<<<>>>>>']]\n    results = [True, True, True, True, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, True, True, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]\n    for i, (inp, exp) in enumerate(zip(inputs, results)):\n        assertion(candidate(*inp), exp, 0)\n",
      "entry_point": "correct_bracketing",
      "complete_code": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n\n    cnt = 0\n    for x in brackets:\n        if x == \"<\": cnt += 1\n        if x == \">\": cnt -= 1\n        if cnt < 0: return False\n    return cnt == 0\n\n"
    },
    "execution_info": {
      "max_mutations_per_operator": 10,
      "total_operators_tested": 46,
      "operators_with_mutations": 11,
      "execution_timestamp": "2025-08-01T15:45:26.819487"
    }
  }
}