{
  "timestamp": "20250801_155250",
  "test_type": "mutation_testing",
  "metadata": {
    "task_id": "HumanEval/106",
    "timestamp": "20250801_155250",
    "tester_version": "1.0",
    "total_operators_tested": 14,
    "operators_with_errors": 0
  },
  "summary": {
    "original_passes": true,
    "total_mutations": 41,
    "killed_mutations": 37,
    "mutation_score": 0.9024390243902439,
    "survival_rate": 0.09756097560975607
  },
  "detailed_results": {
    "task_id": "HumanEval/106",
    "dataset_type": "plus",
    "original_passes": true,
    "total_mutations": 41,
    "killed_mutations": 37,
    "mutation_score": 0.9024390243902439,
    "mutation_results": {
      "NumberReplacer": {
        "total_mutations": 9,
        "killed_mutations": 8,
        "survival_rate": 0.1111111111111111,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 1:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 1:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmplx8x2u71.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmplx8x2u71.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmplx8x2u71.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:39.062434",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == -1:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == -1:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpxkvh4zoj.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpxkvh4zoj.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpxkvh4zoj.py\", line 55, in assertion\n    assert np.allclose(out, exp, rtol=1e-07, atol=atol)\n           ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/djaekim/dj-mutation-engine/.venv/lib/python3.13/site-packages/numpy/_core/numeric.py\", line 2365, in allclose\n    res = all(isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan))\n              ~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/djaekim/dj-mutation-engine/.venv/lib/python3.13/site-packages/numpy/_core/numeric.py\", line 2496, in isclose\n    result = (less_equal(abs(x - y), atol + rtol * abs(y))\n                             ~~^~~\nValueError: operands could not be broadcast together with shapes (2,) (0,) \n",
            "timestamp": "2025-08-01T15:52:39.485604",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 2:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 2:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpz9uhm7a8.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpz9uhm7a8.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpz9uhm7a8.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:39.848739",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 0:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 0:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpe00y41_3.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpe00y41_3.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpe00y41_3.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:40.172608",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 4,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [2]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [2]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpv5pib_pa.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpv5pib_pa.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpv5pib_pa.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:40.518307",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpu3f2n28u.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpu3f2n28u.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpu3f2n28u.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:40.873792",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 6,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 3:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 3:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmprigp8eeu.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmprigp8eeu.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmprigp8eeu.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:41.303052",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 7,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 1:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 1:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:52:41.604341",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 8,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpoiwxeayk.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpoiwxeayk.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpoiwxeayk.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:41.872946",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 9,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [0, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [0, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp_nq7xsm1.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmp_nq7xsm1.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp_nq7xsm1.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:42.100742",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 32,
        "mutations_tested": 10
      },
      "Add->Sub": {
        "total_mutations": 3,
        "killed_mutations": 3,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n - 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n - 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpw9l595eq.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpw9l595eq.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpw9l595eq.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:42.294550",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) - i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) - i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp3mkm9pjr.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmp3mkm9pjr.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp3mkm9pjr.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:42.519343",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] - (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] - (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpc7y9d9wp.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpc7y9d9wp.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpc7y9d9wp.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:42.724324",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 3,
        "mutations_tested": 3
      },
      "Sub->Add": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i + 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i + 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpjh5eaa6w.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpjh5eaa6w.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpjh5eaa6w.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:42.949435",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i + 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i + 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmphsmjyv2j.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmphsmjyv2j.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmphsmjyv2j.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:43.230038",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Mult->Div": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) / i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) / i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp84sktb9f.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmp84sktb9f.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp84sktb9f.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:43.478282",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] / (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] / (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpwk9pl4cs.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpwk9pl4cs.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpwk9pl4cs.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:43.756239",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Mod->FloorDiv": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i // 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i // 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp_mi0sod9.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmp_mi0sod9.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp_mi0sod9.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:44.153019",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Mult->Pow": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append((ans[-2] * (i - 1)) ** i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append((ans[-2] * (i - 1)) ** i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpyaeh9q_h.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpyaeh9q_h.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpyaeh9q_h.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:44.483930",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] ** (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] ** (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpejxlbobr.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpejxlbobr.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpejxlbobr.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:44.750053",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Eq->NotEq": {
        "total_mutations": 4,
        "killed_mutations": 4,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n != 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n != 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpql04fxgt.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpql04fxgt.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpql04fxgt.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:44.981747",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n != 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n != 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpg80p1kt7.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpg80p1kt7.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpg80p1kt7.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:45.226124",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n != 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n != 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpl0w2npxh.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpl0w2npxh.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpl0w2npxh.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:45.610333",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 != 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 != 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpn81oaddx.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpn81oaddx.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpn81oaddx.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:45.927026",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 4,
        "mutations_tested": 4
      },
      "Remove UnaryMinus": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpimatq2qn.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpimatq2qn.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmpimatq2qn.py\", line 29, in f\n    ans.append(ans[2] + (i - 1) + i)\n               ~~~^^^\nIndexError: list index out of range\n",
            "timestamp": "2025-08-01T15:52:46.268717",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp6wa4q3cs.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmp6wa4q3cs.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp6wa4q3cs.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:46.628940",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Remove ReturnValue": {
        "total_mutations": 4,
        "killed_mutations": 3,
        "survival_rate": 0.25,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:52:46.882419",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp7qemaoh5.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmp7qemaoh5.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp7qemaoh5.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:47.109169",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpdap2njqv.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpdap2njqv.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpdap2njqv.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:47.344773",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpfsrdqci8.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpfsrdqci8.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpfsrdqci8.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:47.576691",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 4,
        "mutations_tested": 4
      },
      "Zero->One": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 1:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 1:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp9wm78bib.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmp9wm78bib.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp9wm78bib.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:47.831950",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "One->Zero": {
        "total_mutations": 8,
        "killed_mutations": 8,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 0:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 0:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpikn6y7yd.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpikn6y7yd.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpikn6y7yd.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:48.064959",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp41xqg4rg.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmp41xqg4rg.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp41xqg4rg.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:48.277271",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [0, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [0, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpnx3kkru5.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpnx3kkru5.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpnx3kkru5.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:48.468536",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [0, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [0, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpn_c4k4r8.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpn_c4k4r8.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpn_c4k4r8.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:48.666737",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 4,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 0):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 0):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpf_0o8ywt.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpf_0o8ywt.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpf_0o8ywt.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:48.907768",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp3v_4dms7.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmp3v_4dms7.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp3v_4dms7.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:49.086770",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 6,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 0) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 0) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp9k1hcxrw.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmp9k1hcxrw.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp9k1hcxrw.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:49.367451",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 7,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 0) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 0) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpough2gub.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpough2gub.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpough2gub.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:49.627461",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 8,
        "mutations_tested": 8
      },
      "String->Empty": {
        "total_mutations": 1,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\"\"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\"\"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:52:49.802152",
            "status": "SURVIVED",
            "reason": "tests_passed"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "String->X": {
        "total_mutations": 1,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\"X\"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\"X\"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:52:50.054295",
            "status": "SURVIVED",
            "reason": "tests_passed"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "List->Empty": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return []\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return []\n    if n == 2:\n        return [1, 2]\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp5wi90_57.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmp5wi90_57.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp5wi90_57.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:50.292387",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return []\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return []\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpbinteunn.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpbinteunn.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpbinteunn.py\", line 57, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:50.501684",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
            "mutated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = []\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "mutated_complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    ans = []\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpuxk72bxu.py\", line 70, in <module>\n    check(f)\n    ~~~~~^^^\n  File \"/tmp/tmpuxk72bxu.py\", line 64, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmpuxk72bxu.py\", line 29, in f\n    ans.append(ans[-2] + (i - 1) + i)\n               ~~~^^^^\nIndexError: list index out of range\n",
            "timestamp": "2025-08-01T15:52:50.694194",
            "status": "BROKEN",
            "reason": "code_error"
          }
        ],
        "mutation_count_available": 3,
        "mutations_tested": 3
      }
    },
    "problem_info": {
      "prompt": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
      "canonical_solution": "\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n",
      "test_code": "\n\nimport numpy as np\n\ndef is_floats(x) -> bool:\n    # check if it is float; List[float]; Tuple[float]\n    if isinstance(x, float):\n        return True\n    if isinstance(x, (list, tuple)):\n        return all(isinstance(i, float) for i in x)\n    if isinstance(x, np.ndarray):\n        return x.dtype == np.float64 or x.dtype == np.float32\n    return False\n\n\ndef assertion(out, exp, atol):\n    exact_match = out == exp\n\n    if atol == 0 and is_floats(exp):\n        atol = 1e-6\n    if not exact_match and atol != 0:\n        assert np.allclose(out, exp, rtol=1e-07, atol=atol)\n    else:\n        assert exact_match\n\n\ndef check(candidate):\n    inputs = [[5], [7], [1], [3], [0], [2], [4], [6], [8], [10], [100], [15], [20], [12], [11], [9], [19], [99], [101], [98], [52], [13], [18], [21], [102], [103], [104], [105], [16], [85], [65], [84], [17], [14], [53], [64], [83], [63], [54], [81], [66], [97], [96], [106], [67], [95], [82], [94], [55], [22], [86], [70], [30], [29], [68], [38], [87], [31], [69], [37], [62], [88], [32], [93], [33], [71], [80], [79], [51], [61], [50], [92], [49], [23], [28], [24], [72], [35], [34], [39], [36], [41], [77], [25], [89], [40], [48], [42], [91], [78], [47], [45], [44], [76], [43], [26], [27], [60], [57], [90], [58], [73], [74], [75]]\n    results = [[1, 2, 6, 24, 15], [1, 2, 6, 24, 15, 720, 28], [1], [1, 2, 6], [], [1, 2], [1, 2, 6, 24], [1, 2, 6, 24, 15, 720], [1, 2, 6, 24, 15, 720, 28, 40320], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 4186, 12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000, 4371, 108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000, 4560, 991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000, 4753, 9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000, 4950, 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66], [1, 2, 6, 24, 15, 720, 28, 40320, 45], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 4186, 12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000, 4371, 108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000, 4560, 991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000, 4753, 9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000, 4950], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 4186, 12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000, 4371, 108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000, 4560, 991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000, 4753, 9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000, 4950, 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000, 5151], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 4186, 12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000, 4371, 108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000, 4560, 991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000, 4753, 9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 4186, 12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000, 4371, 108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000, 4560, 991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000, 4753, 9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000, 4950, 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000, 5151, 961446671503512660926865558697259548455355905059659464369444714048531715130254590603314961882364451384985595980362059157503710042865532928000000000000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 4186, 12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000, 4371, 108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000, 4560, 991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000, 4753, 9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000, 4950, 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000, 5151, 961446671503512660926865558697259548455355905059659464369444714048531715130254590603314961882364451384985595980362059157503710042865532928000000000000000000000000, 5356], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 4186, 12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000, 4371, 108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000, 4560, 991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000, 4753, 9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000, 4950, 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000, 5151, 961446671503512660926865558697259548455355905059659464369444714048531715130254590603314961882364451384985595980362059157503710042865532928000000000000000000000000, 5356, 10299016745145627623848583864765044283053772454999072182325491776887871732475287174542709871683888003235965704141638377695179741979175588724736000000000000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 4186, 12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000, 4371, 108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000, 4560, 991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000, 4753, 9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000, 4950, 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000, 5151, 961446671503512660926865558697259548455355905059659464369444714048531715130254590603314961882364451384985595980362059157503710042865532928000000000000000000000000, 5356, 10299016745145627623848583864765044283053772454999072182325491776887871732475287174542709871683888003235965704141638377695179741979175588724736000000000000000000000000, 5565], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 4186, 12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000, 4371, 108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000, 4560, 991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000, 4753], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 4186, 12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000, 4371, 108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000, 4560, 991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 4186, 12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000, 4371, 108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000, 4560, 991677934870949689209571401541893801158183648651267795444376054838492222809091499987689476037000748982075094738965754305639874560000000000000000000000, 4753, 9426890448883247745626185743057242473809693764078951663494238777294707070023223798882976159207729119823605850588608460429412647567360000000000000000000000, 4950, 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000, 5151, 961446671503512660926865558697259548455355905059659464369444714048531715130254590603314961882364451384985595980362059157503710042865532928000000000000000000000000, 5356, 10299016745145627623848583864765044283053772454999072182325491776887871732475287174542709871683888003235965704141638377695179741979175588724736000000000000000000000000, 5565, 114628056373470835453434738414834942870388487424139673389282723476762012382449946252660360871841673476016298287096435143747350528228224302506311680000000000000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 4186, 12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000, 4371, 108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000, 4560], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 4186, 12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000, 4371, 108736615665674308027365285256786601004186803580182872307497374434045199869417927630229109214583415458560865651202385340530688000000000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 4186, 12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000, 4371], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 4186, 12438414054641307255475324325873553077577991715875414356840239582938137710983519518443046123837041347353107486982656753664000000000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000, 4186], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850, 1885494701666050254987932260861146558230394535379329335672487982961844043495537923117729972224000000000000000000, 3003, 11324281178206297831457521158732046228731749579488251990048962825668835325234200766245086213177344000000000000000000, 3160, 71569457046263802294811533723186532165584657342365752577109445058227039255480148842668944867280814080000000000000000000, 3321, 475364333701284174842138206989404946643813294067993328617160934076743994734899148613007131808479167119360000000000000000000, 3486, 3314240134565353266999387579130131288000666286242049487118846032383059131291716864129885722968716753156177920000000000000000000, 3655, 24227095383672732381765523203441259715284870552429381750838764496720162249742450276789464634901319465571660595200000000000000000000, 3828, 185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000, 4005, 1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000], [1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000, 231, 1124000727777607680000, 276, 620448401733239439360000, 325, 403291461126605635584000000, 378, 304888344611713860501504000000, 435, 265252859812191058636308480000000, 496, 263130836933693530167218012160000000, 561, 295232799039604140847618609643520000000, 630, 371993326789901217467999448150835200000000, 703, 523022617466601111760007224100074291200000000, 780, 815915283247897734345611269596115894272000000000, 861, 1405006117752879898543142606244511569936384000000000, 946, 2658271574788448768043625811014615890319638528000000000, 1035, 5502622159812088949850305428800254892961651752960000000000, 1128, 12413915592536072670862289047373375038521486354677760000000000, 1225, 30414093201713378043612608166064768844377641568960512000000000000, 1326, 80658175170943878571660636856403766975289505440883277824000000000000, 1431, 230843697339241380472092742683027581083278564571807941132288000000000000, 1540, 710998587804863451854045647463724949736497978881168458687447040000000000000, 1653, 2350561331282878571829474910515074683828862318181142924420699914240000000000000, 1770, 8320987112741390144276341183223364380754172606361245952449277696409600000000000000, 1891, 31469973260387937525653122354950764088012280797258232192163168247821107200000000000000, 2016, 126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000, 2145, 544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000, 2278, 2480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000, 2415, 11978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000, 2556, 61234458376886086861524070385274672740778091784697328983823014963978384987221689274204160000000000000000, 2701, 330788544151938641225953028221253782145683251820934971170611926835411235700971565459250872320000000000000000, 2850]]\n    for i, (inp, exp) in enumerate(zip(inputs, results)):\n        assertion(candidate(*inp), exp, 0)\n",
      "entry_point": "f",
      "complete_code": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n\n\n    if n == 0: return []\n    if n == 1: return [1]\n    if n == 2: return [1, 2]\n\n    ans = [1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 1:\n            ans.append(ans[-2] + (i - 1) + i)\n        else:\n            ans.append(ans[-2] * (i - 1) * i)\n    return ans\n\n"
    },
    "execution_info": {
      "max_mutations_per_operator": 10,
      "total_operators_tested": 46,
      "operators_with_mutations": 14,
      "execution_timestamp": "2025-08-01T15:52:50.695713"
    }
  }
}