{
  "timestamp": "20250801_155343",
  "test_type": "mutation_testing",
  "metadata": {
    "task_id": "HumanEval/115",
    "timestamp": "20250801_155343",
    "tester_version": "1.0",
    "total_operators_tested": 7,
    "operators_with_errors": 0
  },
  "summary": {
    "original_passes": true,
    "total_mutations": 8,
    "killed_mutations": 6,
    "mutation_score": 0.75,
    "survival_rate": 0.25
  },
  "detailed_results": {
    "task_id": "HumanEval/115",
    "dataset_type": "plus",
    "original_passes": true,
    "total_mutations": 8,
    "killed_mutations": 6,
    "mutation_score": 0.75,
    "mutation_results": {
      "NumberReplacer": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans\n\n",
            "mutated_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    ans = 1\n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans",
            "mutated_complete_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\nimport math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    ans = 1\n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp0rwfi8oy.py\", line 114, in <module>\n    check(max_fill)\n    ~~~~~^^^^^^^^^^\n  File \"/tmp/tmp0rwfi8oy.py\", line 108, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp0rwfi8oy.py\", line 101, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:42.249944",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans\n\n",
            "mutated_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    ans = -1\n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans",
            "mutated_complete_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\nimport math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    ans = -1\n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpxyqvaks2.py\", line 114, in <module>\n    check(max_fill)\n    ~~~~~^^^^^^^^^^\n  File \"/tmp/tmpxyqvaks2.py\", line 108, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpxyqvaks2.py\", line 101, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:42.448277",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Div->Mult": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans\n\n",
            "mutated_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    ans = 0\n    for l in grid:\n        ans += math.ceil(sum(l) * capacity)\n    return ans",
            "mutated_complete_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\nimport math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    ans = 0\n    for l in grid:\n        ans += math.ceil(sum(l) * capacity)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp82d0lb59.py\", line 114, in <module>\n    check(max_fill)\n    ~~~~~^^^^^^^^^^\n  File \"/tmp/tmp82d0lb59.py\", line 108, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp82d0lb59.py\", line 101, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:42.645032",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "AddEq->SubEq": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans\n\n",
            "mutated_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    ans = 0\n    for l in grid:\n        ans -= math.ceil(sum(l) / capacity)\n    return ans",
            "mutated_complete_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\nimport math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    ans = 0\n    for l in grid:\n        ans -= math.ceil(sum(l) / capacity)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpm86yav4q.py\", line 114, in <module>\n    check(max_fill)\n    ~~~~~^^^^^^^^^^\n  File \"/tmp/tmpm86yav4q.py\", line 108, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpm86yav4q.py\", line 101, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:42.854172",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Remove ReturnValue": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans\n\n",
            "mutated_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    ans = 0\n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return",
            "mutated_complete_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\nimport math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    ans = 0\n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp_x5ywv4p.py\", line 114, in <module>\n    check(max_fill)\n    ~~~~~^^^^^^^^^^\n  File \"/tmp/tmp_x5ywv4p.py\", line 108, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp_x5ywv4p.py\", line 101, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:43.054318",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Zero->One": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans\n\n",
            "mutated_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    ans = 1\n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans",
            "mutated_complete_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\nimport math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    ans = 1\n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp00wn0lrn.py\", line 114, in <module>\n    check(max_fill)\n    ~~~~~^^^^^^^^^^\n  File \"/tmp/tmp00wn0lrn.py\", line 108, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp00wn0lrn.py\", line 101, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:43.307237",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "String->Empty": {
        "total_mutations": 1,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans\n\n",
            "mutated_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\"\"\"\n    ans = 0\n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans",
            "mutated_complete_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\nimport math\n\ndef max_fill(grid, capacity):\n    \"\"\"\"\"\"\n    ans = 0\n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:53:43.519661",
            "status": "SURVIVED",
            "reason": "tests_passed"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "String->X": {
        "total_mutations": 1,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans\n\n",
            "mutated_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"X\"\"\"\n    ans = 0\n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans",
            "mutated_complete_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\nimport math\n\ndef max_fill(grid, capacity):\n    \"\"\"X\"\"\"\n    ans = 0\n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:53:43.759242",
            "status": "SURVIVED",
            "reason": "tests_passed"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      }
    },
    "problem_info": {
      "prompt": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n",
      "canonical_solution": "\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans\n\n",
      "test_code": "\n\nimport numpy as np\n\ndef is_floats(x) -> bool:\n    # check if it is float; List[float]; Tuple[float]\n    if isinstance(x, float):\n        return True\n    if isinstance(x, (list, tuple)):\n        return all(isinstance(i, float) for i in x)\n    if isinstance(x, np.ndarray):\n        return x.dtype == np.float64 or x.dtype == np.float32\n    return False\n\n\ndef assertion(out, exp, atol):\n    exact_match = out == exp\n\n    if atol == 0 and is_floats(exp):\n        atol = 1e-6\n    if not exact_match and atol != 0:\n        assert np.allclose(out, exp, rtol=1e-07, atol=atol)\n    else:\n        assert exact_match\n\n\ndef check(candidate):\n    inputs = [[[[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1], [[[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2], [[[0, 0, 0], [0, 0, 0]], 5], [[[1, 1, 1, 1], [1, 1, 1, 1]], 2], [[[1, 1, 1, 1], [1, 1, 1, 1]], 9], [[[1, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [1, 0, 1, 1]], 2], [[[1, 1, 1], [1, 0, 1], [1, 1, 1], [1, 1, 1]], 3], [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], 1], [[[0, 1, 0, 1], [1, 0, 0, 0], [1, 1, 1, 1]], 2], [[[1, 0, 0], [0, 1, 0], [0, 0, 1]], 2], [[[1, 0, 0], [0, 1, 0], [0, 0, 1]], 1], [[[1, 1, 1], [1, 1, 1]], 2], [[[0, 0, 1, 0], [0, 0, 1, 0], [1, 1, 1, 1]], 2], [[[0, 0, 0, 0], [0, 0, 0, 0]], 1], [[[1, 0, 0, 1], [0, 1, 1, 0], [1, 0, 0, 1]], 3], [[[0, 0, 1, 0], [0, 0, 1, 0], [1, 1, 1, 1], [0, 0, 1, 0]], 2], [[[0, 1, 0, 1], [1, 0, 0, 0], [1, 1, 1, 1]], 3], [[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0]], 2], [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], 1], [[[0, 1, 0, 1], [1, 0, 0, 0]], 3], [[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0]], 3], [[[1, 1, 1], [1, 0, 1], [1, 1, 1], [1, 1, 1]], 4], [[[0, 0, 0, 0]], 1], [[[0, 1, 0], [0, 0, 1], [1, 0, 0]], 2], [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], 2], [[[0, 1, 0], [0, 0, 1], [1, 0, 0]], 4], [[[0, 1, 0], [0, 0, 1]], 4], [[[0, 1, 0], [0, 0, 1], [1, 0, 0]], 3], [[[0, 1, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0]], 3], [[[0, 0, 1, 0], [0, 1, 1, 0], [0, 1, 1, 0], [1, 1, 1, 1], [0, 1, 1, 0]], 2], [[[0, 0, 0, 0]], 3], [[[1, 1, 1]], 2], [[[1, 1, 1], [1, 0, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]], 4], [[[0, 0, 0, 0]], 4], [[[1, 0, 0], [0, 1, 0]], 1], [[[0, 0, 1, 0], [0, 0, 1, 0], [1, 1, 1, 1], [0, 0, 1, 0]], 1], [[[0, 0, 1, 0], [0, 0, 1, 0], [1, 1, 1, 1]], 4], [[[0, 0, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0]], 1], [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], 3], [[[0, 0, 0], [0, 0, 0]], 4], [[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0]], 4], [[[1, 1, 1], [1, 0, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]], 1], [[[0, 1, 0, 1], [1, 0, 0, 0]], 1], [[[0, 1, 0], [0, 0, 1], [1, 0, 0]], 1], [[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0]], 1], [[[0, 0, 1, 0], [0, 0, 1, 0], [1, 1, 1, 1]], 3], [[[1, 1, 1], [1, 0, 1], [1, 1, 1]], 1], [[[1, 1, 1], [1, 1, 1]], 1], [[[0, 0, 0]], 2], [[[0, 1, 0], [1, 0, 0]], 4], [[[0, 1, 0], [1, 0, 0], [0, 0, 1], [1, 0, 0], [0, 1, 0]], 2], [[[1, 1, 1]], 4], [[[0, 0, 1, 0], [0, 0, 1, 0], [1, 1, 1, 1], [0, 0, 1, 0]], 3], [[[0, 0, 0, 0]], 5], [[[1, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0]], 2], [[[0, 0, 1, 0], [1, 1, 1, 1]], 6], [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], 4], [[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0], [1, 0, 0]], 1], [[[0, 1, 0, 1], [1, 0, 0, 0], [1, 1, 1, 1]], 4], [[[0, 0, 0], [0, 0, 0]], 3], [[[1, 1, 1], [1, 1, 1]], 3], [[[0, 0, 1, 0], [0, 0, 1, 0], [1, 1, 1, 1], [0, 0, 1, 0], [0, 0, 1, 0]], 3], [[[1, 0, 0], [1, 1, 0], [0, 0, 1], [1, 0, 0]], 3], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]], 2], [[[0, 1, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0]], 4], [[[1, 1, 1], [1, 0, 1], [1, 1, 1], [1, 1, 1]], 1], [[[0, 0, 0, 0], [0, 0, 0, 0]], 2], [[[1, 0]], 6], [[[0, 0, 0, 0], [0, 0, 0, 0]], 6], [[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0]], 5], [[[0, 0, 0, 0], [0, 0, 0, 0]], 5], [[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0], [1, 0, 0], [1, 0, 0]], 3], [[[0, 0, 0]], 7], [[[0, 0, 0]], 3], [[[1, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [1, 0, 0, 1]], 2], [[[1, 0], [1, 0], [1, 0]], 6], [[[1, 0, 0], [1, 0, 0]], 4], [[[0, 0, 0, 0], [0, 0, 0, 0]], 3], [[[1, 0, 0, 1], [0, 0, 0, 0], [1, 0, 0, 1]], 2], [[[1, 1, 1, 1]], 7], [[[1, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [0, 1, 1, 1]], 2], [[[1, 0, 0, 0], [1, 0, 0, 0]], 1], [[[0, 1, 1], [0, 1, 1], [1, 0, 1], [1, 1, 1], [1, 1, 1], [0, 1, 1], [1, 1, 1]], 4], [[[1, 0, 0, 1], [0, 0, 0, 0], [1, 0, 0, 1]], 3], [[[0, 1, 0, 1], [1, 0, 0, 0]], 2], [[[1, 0, 0, 0]], 1], [[[0, 0, 0, 0]], 6], [[[1, 0, 0], [0, 1, 0], [1, 0, 0]], 3], [[[0, 0, 0]], 6], [[[1, 0, 0, 1], [0, 0, 0, 0], [1, 0, 0, 1]], 4], [[[1, 0, 1, 0], [0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 1, 0], [1, 1, 1, 1], [0, 1, 1, 0]], 2], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 3], [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], 4], [[[0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0]], 7], [[[1, 1, 1]], 7], [[[0], [0], [0]], 6], [[[1, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [1, 0, 1, 1], [1, 0, 1, 1]], 3], [[[1, 1, 1, 1]], 6], [[[0], [0], [0], [0]], 6], [[[1, 1, 1]], 1], [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], 3], [[[0, 0, 1, 0], [0, 1, 1, 0], [0, 1, 1, 0], [1, 1, 1, 1], [0, 1, 1, 0], [0, 1, 1, 0]], 2], [[[0, 0, 1, 0], [1, 1, 1, 1]], 2], [[[1, 0, 1, 0], [0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 1, 0], [1, 1, 1, 1], [0, 1, 1, 0]], 1], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 4], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1]], 2], [[[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 0, 0]], 1], [[[0, 0, 0], [0, 0, 1], [1, 1, 1]], 3], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1]], 4], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 3], [[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 1]], 2], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1]], 2], [[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 1], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1]], 3], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 2], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0]], 2], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 2], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 1], [[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 1], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1]], 3], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1]], 2], [[[1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1]], 3], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0]], 2], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1]], 1], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 4], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 3], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 1]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 4], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[1, 1, 1, 1], [0, 0, 1, 1]], 1], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 2], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 2], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1]], 1], [[[0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 0, 0, 0, 1]], 2], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 3], [[[0, 0, 1, 1], [1, 1, 0, 0]], 1], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 2], [[[0, 0, 0, 1], [1, 1, 1, 1]], 2], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 3], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 3], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1]], 3], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0]], 4], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 3], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 3], [[[0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 0, 0, 0, 1]], 4], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1], [0, 1, 1, 0]], 3], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 4], [[[0, 0, 0], [0, 0, 1], [1, 1, 1]], 2], [[[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 0, 0]], 3], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[1, 1, 1, 1], [1, 1, 1, 1]], 3], [[[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 0, 0]], 4], [[[0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1]], 3], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 1], [[[0, 0, 0, 1]], 1], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1], [0, 1, 1, 0]], 4], [[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 3], [[[0, 0, 1, 1], [0, 0, 1, 1]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 1], [[[0, 0, 1, 1]], 1], [[[0, 0, 1, 1], [0, 0, 1, 1]], 2], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 2], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 2], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 5], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 2], [[[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 0, 0], [0, 0, 1, 1]], 1], [[[0, 0, 0, 1], [1, 1, 1, 1]], 4], [[[0, 1, 1, 0], [1, 1, 1, 1]], 4], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 1], [[[1, 0, 0, 0], [0, 0, 0, 1]], 2], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 3], [[[0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[0, 0, 1, 1], [0, 0, 1, 1]], 3], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0], [0, 0, 1, 1]], 3], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 4], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 5], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1], [1, 0, 0, 0], [1, 1, 1, 1]], 2], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 2], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1]], 3], [[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 1], [[[1, 1, 1, 1, 1]], 3], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 3], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 4], [[[0, 0, 0, 1]], 2], [[[0, 0, 0, 1], [1, 1, 1, 1], [1, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[0, 0, 0, 0, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 4], [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 1], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 4], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 5], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 3], [[[0, 0, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0]], 3], [[[0, 0, 0, 1], [0, 0, 0, 1]], 2], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1]], 4], [[[1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 1], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1]], 2], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]], 3], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 6], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 3], [[[0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 0, 0, 0, 1]], 3], [[[0, 1, 1, 1], [1, 0, 1, 1]], 3], [[[0, 0, 1, 1], [1, 1, 0, 0], [0, 0, 1, 1]], 1], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1]], 4], [[[1, 0, 0, 0], [0, 0, 0, 1]], 3], [[[0, 0, 1, 1]], 2], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1]], 6], [[[0, 1, 1, 1], [1, 0, 1, 1]], 2], [[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 1]], 3], [[[1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 2], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1]], 3], [[[0, 0, 1, 1], [0, 0, 1, 1]], 5], [[[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 3], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 4], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 4], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 1], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1], [0, 1, 1, 0]], 1], [[[0, 0, 0], [0, 0, 1], [1, 1, 1], [1, 1, 1]], 2], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 2], [[[1, 1, 1, 1]], 1], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 5], [[[1, 0, 1, 1], [1, 1, 0, 1]], 2], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 2], [[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 2], [[[1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 4], [[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 4], [[[1, 1, 1, 1, 1]], 2], [[[0, 1, 1, 1], [1, 0, 1, 1]], 6], [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1], [0, 1, 1, 0]], 3], [[[0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 0, 0, 0, 1]], 7], [[[1, 1, 1, 1], [1, 1, 1, 1]], 4], [[[0, 1, 1, 1], [1, 0, 1, 1]], 7], [[[0, 0, 0, 0, 0]], 2], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1]], 7], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 5], [[[0, 0, 0, 1, 0], [1, 1, 1, 1, 1], [0, 0, 0, 1, 0], [1, 1, 1, 1, 1], [0, 0, 0, 1, 0]], 2], [[[1, 0, 1, 1], [1, 1, 0, 1]], 3], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 7], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 1, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 1, 1]], 3], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 2], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 5], [[[1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 3], [[[0, 0, 1, 1], [0, 0, 0, 0]], 5], [[[0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 4], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 1], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [1, 0, 0, 0]], 4], [[[0, 0, 1, 1, 1], [0, 0, 1, 1, 1]], 2], [[[0, 0, 1, 1], [0, 0, 0, 0]], 1], [[[1, 1, 1, 1, 1]], 7], [[[0, 0, 0, 1]], 3], [[[0, 1, 1, 1], [1, 0, 1, 1]], 5], [[[0, 1, 0, 1, 1], [0, 1, 0, 1, 1], [0, 1, 0, 1, 1], [0, 1, 0, 1, 1]], 4], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 1, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 1, 1]], 6], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[1, 1, 1, 1, 1]], 4], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0]], 1], [[[0, 0, 1, 1], [1, 1, 1, 1]], 1], [[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 3], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 3], [[[1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 2], [[[0, 1, 1, 1], [0, 0, 0, 1]], 5], [[[0, 0, 0, 1], [1, 1, 1, 1]], 3], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 7], [[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 5], [[[1, 0, 0, 0, 1], [1, 0, 0, 0, 1]], 3], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]], 1], [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 2], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 3], [[[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 6], [[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 2], [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 1], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1], [0, 1, 1, 0]], 5], [[[0, 0, 1, 1], [1, 1, 0, 0]], 2], [[[0, 1, 1, 1], [1, 0, 0, 1], [0, 0, 0, 1]], 4], [[[0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 1], [0, 0, 0, 0]], 7], [[[0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1]], 5], [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 2], [[[1, 0, 0, 0], [1, 1, 1, 1]], 3], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 5], [[[1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 6], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 1, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 1]], 3], [[[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 3], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [1, 0, 0, 0]], 5], [[[1, 0, 1, 1], [0, 0, 0, 0], [1, 0, 1, 1], [0, 0, 0, 0]], 6], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 5], [[[0, 0, 0, 1]], 5], [[[1, 1, 0, 1], [1, 1, 0, 1], [1, 1, 0, 1], [1, 1, 0, 1], [1, 1, 0, 1], [1, 1, 0, 1]], 3], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 6], [[[0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 1, 1]], 5], [[[0, 0, 1, 1, 1]], 2], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1], [0, 1, 1, 0]], 2], [[[0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 3], [[[1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1]], 3], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 4], [[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], 2], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 1], [0, 1, 1, 1]], 1], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 6], [[[0, 0, 0, 1], [0, 0, 0, 1]], 6], [[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 2], [[[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 0, 0]], 6], [[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], 2], [[[0, 0, 1, 1]], 5], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 1, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 3], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 2], [[[0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 3], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 6], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 4], [[[0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1]], 3], [[[1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1]], 3], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 5], [[[0, 1, 1, 1], [1, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[0, 0, 0, 1], [1, 1, 1, 1], [1, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 6], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 6], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 3], [[[0, 0, 0], [0, 0, 1], [0, 0, 0]], 3], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1]], 1], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0]], 4], [[[0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 1, 1]], 7], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 4], [[[0, 0, 0, 1], [0, 1, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 0]], 3], [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1]], 4], [[[0, 0, 1, 1, 1], [0, 0, 1, 1, 1]], 6], [[[1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1]], 4], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 1, 1, 1], [0, 0, 1, 1]], 3], [[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 2], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 1], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 5], [[[0, 1, 1, 0], [1, 1, 1, 1]], 7], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]], 4], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 1, 1]], 1], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 6], [[[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0]], 2], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1]], 3], [[[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]], 4], [[[0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 0, 0, 0, 1]], 1], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 2], [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 0]], 3], [[[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 0, 0], [0, 0, 1, 1], [0, 0, 1, 1]], 1], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 7], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0]], 4], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 2], [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[0, 0, 0, 1], [1, 1, 1, 1], [1, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 6], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 2], [[[0, 0, 1, 1]], 3], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 4], [[[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 2], [[[0, 0, 0, 0, 1], [0, 0, 0, 0, 1]], 2], [[[1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 3], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0], [0, 0, 1, 1]], 3], [[[0, 0, 0, 1], [0, 0, 0, 1]], 5], [[[1, 0, 1, 1], [1, 1, 0, 1]], 4], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1]], 3], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[0, 0, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0]], 7], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [1, 0, 0, 0]], 3], [[[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 0, 0], [0, 0, 1, 1], [0, 0, 1, 1]], 2], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [1, 1, 1, 1, 1]], 4], [[[0, 0, 0, 1]], 6], [[[0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1]], 3], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 7], [[[1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]], 1], [[[1, 1, 1, 1], [0, 0, 1, 1]], 6], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 1], [[[0, 1, 1, 1]], 6], [[[0, 0, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0], [0, 0, 0]], 3], [[[1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1]], 3], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [1, 0, 0, 0]], 7], [[[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 0, 0]], 7], [[[0, 0, 1, 1, 1]], 3], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 3], [[[1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 1]], 5], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 6], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1]], 6], [[[0, 0, 1, 1], [1, 1, 0, 0], [0, 0, 1, 1]], 7], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 4], [[[0, 1, 1, 0]], 4], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 1], [[[1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1]], 4], [[[0, 0, 0, 1, 0]], 2], [[[1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]], 6], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 5], [[[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 0, 0]], 5], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 7], [[[0, 0, 1, 1, 0], [0, 0, 1, 1, 0]], 5], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1], [1, 0, 0, 0]], 2], [[[1, 1, 1, 1], [1, 1, 1, 1]], 7], [[[0, 0, 1, 1]], 6], [[[0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 1, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 1]], 6], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 3], [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 2], [[[1, 0, 1, 1], [0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 0, 0, 0]], 2], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 3], [[[1, 0, 0, 0], [1, 1, 1, 1], [1, 0, 0, 0], [1, 1, 1, 1]], 3], [[[0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 0, 1, 0]], 4], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 5], [[[0, 1, 1], [0, 1, 1], [0, 1, 1], [0, 1, 1], [0, 1, 1], [0, 1, 1], [0, 1, 1], [0, 1, 1], [0, 1, 1]], 3], [[[0, 0, 0, 1, 1]], 3], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1]], 2], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 4], [[[0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[0, 0, 0, 1], [0, 1, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 0]], 7], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 1, 1], [0, 1, 1, 1], [0, 0, 1, 1]], 3], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], 6], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]], 4], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1]], 4], [[[0, 0, 0, 0]], 7], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 1], [[[1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1]], 1], [[[0, 0, 1, 1], [1, 1, 0, 0], [0, 0, 1, 1]], 2], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 3], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 3], [[[0, 0, 1, 1], [1, 1, 0, 0]], 7], [[[1, 0, 1, 1]], 3], [[[0, 0, 0, 1], [1, 1, 1, 1]], 5], [[[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [0, 0, 0, 0, 0]], 3], [[[0, 1, 1, 1], [1, 1, 0, 0], [0, 1, 1, 1], [0, 1, 1, 1], [1, 1, 0, 0]], 7], [[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], 3], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 2], [[[0, 0, 1, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 0, 1], [0, 0, 1, 1]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 7], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 2], [[[1, 1, 1]], 6], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 7], [[[0, 0, 1, 1], [1, 1, 0, 0], [0, 0, 1, 1]], 3], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1]], 2], [[[0, 1, 1, 1], [0, 1, 1, 1]], 2], [[[0, 0, 0], [0, 0, 1], [1, 1, 1], [1, 1, 1]], 3], [[[0, 1, 1, 1]], 3], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 6], [[[0, 0, 1, 1, 1], [0, 0, 1, 1, 1]], 7], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 1], [0, 1, 1, 1]], 5], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 7], [[[1, 1, 1, 1, 1], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [1, 1, 1, 1, 1]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 1]], 6], [[[0, 0, 0, 1], [0, 1, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]], 3], [[[1, 0, 0, 0], [1, 1, 1, 1], [1, 1, 1, 1], [0, 1, 1, 0]], 1], [[[1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1]], 1], [[[0, 1, 1], [0, 1, 1]], 1], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 6], [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 5], [[[0, 0, 0, 0, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 0, 0, 0, 1]], 1], [[[0, 1, 1, 1]], 5], [[[0, 0, 1, 1], [0, 0, 0, 1], [0, 0, 1, 1], [0, 0, 0, 0], [0, 0, 0, 1]], 6], [[[1, 0, 1, 1]], 2], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1]], 5], [[[1, 0, 1, 1], [1, 1, 0, 1]], 5], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1], [1, 1, 1, 1], [0, 1, 1, 0], [0, 1, 1, 0]], 5], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [1, 0, 0, 0]], 6], [[[0, 0, 1, 0]], 2], [[[0, 0, 1, 1], [1, 1, 0, 0], [0, 0, 1, 1], [0, 0, 1, 1]], 2], [[[1]], 1], [[[1]], 5], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1], [[[1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1]], 1], [[[1]], 10], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]], 1], [[[0, 0, 0], [1, 1, 1]], 1], [[[0]], 1], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1]], 3], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1]], 4], [[[1, 0, 0, 0], [0, 0, 0, 1]], 4], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1]], 1], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1]], 2], [[[1, 0, 0, 0], [0, 1, 1, 0]], 2], [[[0, 0, 0, 0, 0]], 1], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1]], 4], [[[0, 0, 0, 0, 0]], 4], [[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], 1], [[[1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1]], 2], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1]], 1], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1]], 1], [[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 4], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 1], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 1], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1]], 1], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 4], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1]], 1], [[[1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1]], 3], [[[1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1]], 1], [[[1, 1, 1, 1, 1]], 1], [[[1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1]], 2], [[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], 4], [[[1, 0, 0, 0], [1, 1, 1, 1]], 1], [[[1, 0, 0, 0], [1, 1, 1, 1], [1, 0, 0, 0]], 1], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1]], 1], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 2], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1]], 2], [[[0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1]], 1], [[[0, 0, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0]], 4], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1], [1, 0, 0, 0]], 1], [[[0, 0, 1, 1], [1, 1, 0, 0]], 3], [[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 1], [1, 1, 1]], 2], [[[0, 0, 0, 1]], 4], [[[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]], 2], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1]], 4], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 0, 1]], 4], [[[0, 0, 0], [0, 0, 1], [1, 1, 1]], 4], [[[1, 1, 0, 0]], 2], [[[1, 0, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1]], 2], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 4], [[[1, 1, 1, 1]], 2], [[[0, 0, 0, 0, 0]], 3], [[[0, 0, 0], [0, 0, 1], [1, 1, 1], [0, 0, 1], [0, 0, 1]], 3], [[[1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0]], 1], [[[1, 0, 0, 0], [0, 0, 0, 1]], 1], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 2], [[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 1], [1, 0, 0]], 2], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 2], [[[0, 0, 0], [1, 1, 1], [0, 0, 0]], 3], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1]], 1], [[[0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 4], [[[0, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 0, 1]], 4], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1]], 4], [[[0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1]], 2], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 3], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1]], 3], [[[1, 1, 0, 0]], 4], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1]], 2], [[[1, 0, 0, 0], [1, 1, 1, 1]], 4], [[[1, 0, 0], [1, 0, 0], [1, 0, 0]], 1], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 3], [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], 4], [[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 1], [1, 1, 1]], 1], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 4], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1]], 3], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1]], 3], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 4], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1]], 1], [[[0, 0, 0, 0, 0, 0]], 1], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 2], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[1, 1, 1, 0], [1, 1, 1, 0]], 2], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 3], [[[0, 0, 1, 0], [0, 0, 1, 0], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 4], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1]], 4], [[[1, 0, 0, 0], [0, 1, 1, 0]], 3], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1]], 2], [[[1, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 0, 1, 1]], 1], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 0, 1]], 3], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 2], [[[1, 1, 0], [1, 1, 0]], 2], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1]], 2], [[[1, 1, 0, 0]], 1], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1], [1, 0, 0, 0]], 4], [[[1, 0, 0, 0]], 2], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 0, 0, 0]], 1], [[[0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1]], 1], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1]], 2], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 5], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 1], [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], 1], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 0, 1], [1, 0, 1, 1], [0, 1, 1, 1]], 4], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 3], [[[0, 0, 1], [0, 0, 1]], 3], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1]], 5], [[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 1]], 1], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1]], 4], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1]], 2], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1]], 3], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 4], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 1], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1]], 3], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 0, 1]], 1], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1], [1, 0, 1, 1]], 1], [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 0, 1]], 2], [[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], 4], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], 4], [[[1, 1, 0]], 2], [[[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 1], [1, 1, 1]], 3], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 1], [[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], 3], [[[0, 0, 0], [0, 0, 1], [1, 1, 1], [0, 0, 1]], 4], [[[1, 0, 0, 0], [0, 1, 1, 0], [0, 1, 1, 0]], 3], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 3], [[[1, 0, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1]], 3], [[[1, 0, 0, 0, 0, 0, 0]], 1], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1]], 4], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 2], [[[1, 0, 0, 0], [1, 1, 1, 1], [1, 0, 0, 0], [1, 1, 1, 1]], 1], [[[1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1], [1, 0, 1, 1]], 2], [[[1, 1, 0, 0, 0]], 4], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0]], 2], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 2], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 5], [[[1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1]], 4], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 5], [[[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 0, 0], [0, 0, 1, 1], [1, 1, 0, 0]], 1], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1]], 4], [[[1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 2], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1]], 5], [[[1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0]], 1], [[[1, 1, 0, 0]], 5], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 2], [[[0, 0, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0], [0, 0, 1]], 4], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 2], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 5], [[[1, 0, 0], [0, 0, 1], [1, 1, 1]], 2], [[[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 3], [[[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 0, 0], [0, 0, 1, 1], [1, 1, 0, 0]], 2], [[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], 4], [[[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]], 3], [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], 5], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1]], 3], [[[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 0, 0], [0, 0, 1, 1]], 2], [[[1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1], [1, 0, 1, 1]], 3], [[[0, 0, 1], [0, 0, 1]], 5], [[[1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0]], 1], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], 2], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 2], [[[0, 0, 0], [0, 0, 1], [0, 0, 0], [0, 0, 1]], 4], [[[0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 0, 1]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 6], [[[0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1], [0, 1, 1, 1]], 4], [[[0, 0, 1, 0], [0, 0, 1, 0]], 3], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 3], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1]], 6], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1]], 1], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 6], [[[1, 1, 0, 0], [1, 1, 0, 0]], 1], [[[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 0, 0], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 2], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1]], 3], [[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], 4], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 5], [[[0, 1, 1, 0], [1, 1, 1, 1], [0, 1, 1, 0]], 4], [[[1, 0, 0, 0], [0, 1, 1, 0]], 4], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 4], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[1, 0, 0, 0, 0, 0, 0, 0]], 1], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], 2], [[[0, 0, 0], [0, 0, 1], [1, 1, 1], [1, 1, 1]], 4], [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[0, 0, 0], [1, 1, 1]], 4], [[[0, 0, 0, 1], [0, 1, 1, 1]], 2], [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], 4], [[[0, 0, 0, 0, 0, 0]], 3], [[[1, 1, 1, 0], [1, 1, 1, 0], [1, 1, 1, 0]], 1], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], 3], [[[0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0]], 4], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 2], [[[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 2], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1]], 1], [[[1, 0, 1, 1], [1, 0, 1, 1]], 2], [[[1, 0, 0, 0], [0, 1, 1, 0], [1, 1, 1, 1]], 6], [[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], 5], [[[1, 0, 0], [1, 1, 1]], 2], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1]], 6], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 1], [1, 1, 0, 0], [0, 0, 0, 1]], 2], [[[0, 0, 0], [1, 1, 1]], 3], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1]], 5], [[[0, 0, 0], [1, 1, 1], [0, 0, 0], [0, 0, 0]], 3], [[[1, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1]], 2], [[[0, 0, 0, 0, 0]], 5], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], 3], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1], [1, 0, 0, 0]], 3], [[[0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1]], 2], [[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], 2], [[[1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[1, 1, 0], [1, 1, 0], [1, 1, 0], [1, 1, 0]], 1], [[[0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 6], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 3], [[[0, 0, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 1], [0, 0, 1, 1]], 5], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 5], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], 3], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 6], [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 1], [0, 0, 0, 1]], 2], [[[1, 0, 0], [1, 1, 1], [1, 1, 1], [1, 0, 0]], 3], [[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], 6], [[[0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0]], 5], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 0, 0, 0]], 3], [[[1, 1, 0, 0, 0], [1, 1, 0, 0, 0]], 3], [[[0, 0, 1, 1], [1, 1, 0, 0]], 6], [[[1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1], [1, 0, 0, 0]], 3], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 4], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1]], 2], [[[1, 0, 0, 0], [0, 1, 1, 0], [0, 1, 1, 0]], 2], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 6], [[[0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1]], 2], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1]], 3], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 6], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1]], 6], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1]], 3], [[[1, 1, 0], [1, 1, 0], [1, 1, 0], [1, 1, 0], [1, 1, 0]], 1], [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], 5], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1]], 2], [[[0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1]], 5], [[[1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1]], 3], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 0, 1]], 1], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 1], [[[0, 1, 1, 1], [0, 0, 1, 1], [1, 1, 0, 0], [0, 1, 1, 1], [1, 1, 0, 0]], 2], [[[0, 0], [0, 0], [0, 0], [0, 0]], 4], [[[0, 0, 0], [0, 0, 1], [0, 0, 1]], 4], [[[0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1]], 1], [[[0, 0, 0], [0, 0, 1], [0, 0, 1]], 1], [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 6], [[[0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1]], 6], [[[1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1]], 3], [[[1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1]], 2], [[[1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1], [1, 0, 0, 0]], 5], [[[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 1], [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 5], [[[1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0]], 1], [[[1, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 0, 1, 1]], 1], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], 5], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 1], [[[0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 1], [[[0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1]], 8], [[[0, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1]], 1], [[[1, 1, 0], [1, 1, 0], [1, 1, 0]], 2], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1]], 2], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 3], [[[1, 0, 0, 0], [1, 1, 1, 1], [1, 0, 0, 0], [1, 1, 1, 1], [1, 0, 0, 0]], 1], [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], 5], [[[0, 0, 1, 0, 0]], 3], [[[1, 0, 0, 0], [0, 0, 0, 1]], 8], [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 6], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1], [0, 1, 1, 1]], 3], [[[0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1]], 6], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1], [1, 0, 1, 1]], 3], [[[0, 0, 1, 1], [0, 0, 1, 1]], 4], [[[1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1]], 6], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], 1], [[[1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 0, 1]], 5], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1]], 8], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 4], [[[1, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1]], 3], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 5], [[[0, 0, 1], [1, 1, 1], [0, 0, 0]], 3], [[[1, 1, 0, 0], [1, 1, 0, 0]], 4], [[[0, 1, 1, 0], [1, 1, 1, 1]], 5], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 4], [[[0, 1, 1, 1], [1, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 3], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1]], 3], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1]], 5], [[[0, 0, 0, 0, 0]], 6], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0]], 1], [[[1, 1], [1, 1], [1, 1], [1, 1], [1, 1]], 4], [[[0, 0, 0, 1], [0, 0, 1, 1], [0, 0, 0, 1]], 2], [[[1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1], [1, 0, 1, 1]], 1], [[[1, 0, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1]], 8], [[[0, 0, 0, 0, 0]], 8], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], 4], [[[1, 0, 0, 0], [1, 1, 1, 1]], 2], [[[0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]], 6], [[[1, 0, 0], [1, 0, 0], [1, 0, 0]], 2], [[[0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1]], 2], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [1, 1, 0, 1], [1, 0, 1, 1], [0, 1, 1, 1]], 5], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 3], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[0, 0, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0]], 1], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 6], [[[1, 0], [1, 0], [1, 0], [1, 0], [1, 0], [1, 0]], 1], [[[0, 0, 0, 1], [0, 1, 1, 1]], 1], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1]], 1], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 6], [[[0, 0, 0, 1], [0, 1, 0, 1], [0, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1], [0, 1, 0, 1]], 3], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 8], [[[0, 1, 1, 0], [1, 1, 1, 1], [0, 1, 1, 0], [0, 1, 1, 0]], 3], [[[0, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1], [0, 1, 1, 1]], 8], [[[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 0, 0]], 2], [[[1, 0, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0]], 1], [[[0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1]], 2], [[[0, 0, 1, 0, 0]], 2], [[[0, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 1]], 5], [[[0, 0, 0, 0, 0]], 9], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1]], 6], [[[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]], 2], [[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 1], [[[0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1], [1, 0, 1, 1], [1, 0, 1, 1]], 1], [[[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]], 4], [[[0, 0, 0, 0], [0, 0, 0, 0]], 9], [[[1, 0, 1, 1], [1, 1, 0, 1], [1, 0, 1, 1]], 6], [[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], 3], [[[0, 0, 0, 0, 1], [0, 0, 0, 0, 1], [0, 0, 0, 0, 1]], 2]]\n    results = [6, 5, 0, 4, 2, 5, 4, 0, 4, 3, 3, 4, 4, 0, 3, 5, 4, 4, 0, 2, 4, 4, 0, 3, 0, 3, 2, 3, 4, 6, 0, 2, 6, 0, 2, 7, 3, 1, 0, 0, 4, 17, 3, 3, 4, 4, 8, 6, 0, 2, 5, 1, 5, 0, 3, 2, 0, 5, 3, 0, 2, 6, 4, 6, 4, 11, 0, 1, 0, 4, 0, 6, 0, 0, 4, 3, 2, 0, 2, 1, 5, 2, 7, 2, 2, 1, 0, 3, 0, 2, 7, 0, 0, 5, 1, 0, 4, 1, 0, 3, 0, 7, 3, 14, 0, 4, 6, 2, 3, 4, 5, 3, 16, 3, 5, 3, 6, 8, 20, 4, 4, 6, 6, 4, 3, 2, 6, 8, 3, 5, 5, 5, 6, 6, 5, 6, 3, 5, 6, 9, 4, 4, 4, 5, 7, 3, 5, 2, 3, 6, 2, 2, 6, 7, 7, 5, 3, 3, 5, 4, 3, 5, 8, 1, 5, 6, 4, 7, 2, 2, 6, 8, 3, 6, 4, 8, 2, 2, 10, 2, 7, 2, 2, 5, 6, 4, 7, 6, 4, 24, 2, 8, 7, 1, 8, 5, 3, 5, 3, 5, 2, 2, 3, 5, 6, 4, 3, 12, 4, 5, 7, 2, 6, 2, 2, 1, 1, 4, 4, 3, 4, 2, 6, 7, 7, 11, 13, 5, 2, 4, 3, 4, 10, 8, 2, 3, 3, 2, 3, 5, 5, 2, 2, 0, 3, 5, 9, 2, 1, 7, 5, 5, 3, 1, 4, 7, 10, 4, 4, 2, 1, 1, 2, 4, 7, 4, 2, 4, 6, 8, 9, 7, 3, 2, 3, 3, 5, 2, 8, 7, 5, 2, 6, 8, 5, 2, 3, 3, 5, 3, 3, 3, 1, 8, 4, 4, 2, 6, 1, 6, 5, 3, 2, 7, 7, 6, 6, 0, 8, 5, 2, 10, 3, 0, 1, 9, 10, 8, 9, 6, 2, 7, 7, 7, 4, 6, 6, 4, 1, 9, 3, 12, 2, 3, 7, 5, 3, 6, 2, 7, 7, 12, 4, 4, 4, 2, 2, 10, 4, 6, 4, 4, 13, 0, 7, 10, 4, 4, 7, 4, 7, 7, 1, 2, 4, 2, 2, 3, 2, 2, 3, 7, 4, 2, 5, 5, 4, 1, 4, 5, 10, 2, 12, 1, 2, 8, 4, 3, 1, 2, 5, 3, 7, 3, 3, 8, 1, 8, 8, 1, 3, 6, 3, 9, 6, 2, 5, 2, 1, 5, 8, 6, 4, 8, 3, 6, 6, 7, 9, 1, 5, 4, 2, 5, 5, 0, 3, 4, 0, 10, 12, 3, 0, 5, 2, 1, 2, 2, 5, 0, 8, 10, 5, 10, 1, 7, 3, 8, 4, 3, 1, 3, 2, 4, 7, 10, 3, 5, 8, 11, 18, 4, 3, 3, 12, 1, 4, 2, 3, 2, 6, 4, 1, 4, 1, 1, 0, 8, 1, 9, 3, 0, 4, 4, 2, 7, 8, 2, 0, 3, 0, 0, 6, 9, 12, 4, 0, 0, 12, 0, 6, 7, 3, 9, 5, 8, 0, 5, 6, 14, 0, 9, 10, 2, 8, 2, 7, 1, 6, 4, 4, 2, 1, 6, 0, 2, 0, 4, 2, 2, 5, 0, 6, 4, 1, 13, 11, 4, 4, 3, 6, 5, 5, 1, 10, 2, 3, 0, 0, 9, 0, 5, 8, 7, 15, 0, 0, 6, 4, 0, 4, 8, 2, 10, 28, 5, 6, 2, 8, 2, 5, 1, 4, 8, 9, 0, 13, 0, 6, 7, 2, 8, 6, 5, 4, 6, 5, 0, 11, 8, 9, 18, 8, 8, 0, 0, 1, 5, 0, 0, 3, 3, 7, 3, 1, 8, 8, 10, 10, 1, 4, 0, 0, 3, 4, 10, 8, 4, 5, 2, 1, 7, 3, 0, 0, 4, 3, 5, 0, 4, 0, 8, 4, 5, 2, 4, 0, 5, 2, 7, 3, 10, 5, 2, 0, 5, 12, 0, 4, 6, 7, 0, 0, 3, 2, 0, 6, 1, 0, 3, 7, 1, 3, 0, 0, 9, 0, 6, 6, 6, 15, 4, 3, 0, 3, 4, 9, 5, 1, 5, 1, 8, 0, 0, 6, 9, 0, 4, 8, 9, 7, 7, 5, 0, 0, 0, 4, 4, 0, 6, 7, 2, 2, 4, 0, 9, 3, 0, 12, 8, 0, 9, 3, 6, 10, 0, 7, 4, 4, 4, 0, 7, 0, 2, 18, 2, 0, 4, 6, 6, 4, 4, 0, 3, 25, 0, 16, 11, 3, 12, 3, 8, 7, 11, 0, 1, 2, 3, 5, 10, 6, 2, 3, 0, 5, 4, 5, 8, 7, 2, 2, 2, 0, 5, 4, 9, 0, 5, 5, 3, 15, 3, 0, 0, 3, 4, 3, 10, 6, 5, 10, 4, 0, 6, 4, 9, 0, 7, 6, 5, 7, 3, 3, 9, 1, 3, 0, 3, 9, 0, 21, 8, 0, 3, 0, 3]\n    for i, (inp, exp) in enumerate(zip(inputs, results)):\n        assertion(candidate(*inp), exp, 0)\n",
      "entry_point": "max_fill",
      "complete_code": "import math\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n\n    ans = 0    \n    for l in grid:\n        ans += math.ceil(sum(l) / capacity)\n    return ans\n\n"
    },
    "execution_info": {
      "max_mutations_per_operator": 10,
      "total_operators_tested": 46,
      "operators_with_mutations": 7,
      "execution_timestamp": "2025-08-01T15:53:43.760403"
    }
  }
}