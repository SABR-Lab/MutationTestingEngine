{
  "timestamp": "20250801_155326",
  "test_type": "mutation_testing",
  "metadata": {
    "task_id": "HumanEval/111",
    "timestamp": "20250801_155326",
    "tester_version": "1.0",
    "total_operators_tested": 8,
    "operators_with_errors": 1
  },
  "summary": {
    "original_passes": true,
    "total_mutations": 15,
    "killed_mutations": 13,
    "mutation_score": 0.8666666666666667,
    "survival_rate": 0.1333333333333333
  },
  "detailed_results": {
    "task_id": "HumanEval/111",
    "dataset_type": "plus",
    "original_passes": true,
    "total_mutations": 15,
    "killed_mutations": 13,
    "mutation_score": 0.8666666666666667,
    "mutation_results": {
      "NumberReplacer": {
        "total_mutations": 4,
        "killed_mutations": 4,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
            "mutated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 1\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "mutated_complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 1\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpf3bvcqvh.py\", line 78, in <module>\n    check(histogram)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpf3bvcqvh.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpf3bvcqvh.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:22.506859",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
            "mutated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = -1\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "mutated_complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = -1\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpz7_y6oeq.py\", line 78, in <module>\n    check(histogram)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpz7_y6oeq.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpz7_y6oeq.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:22.709916",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
            "mutated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 2\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "mutated_complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 2\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp3yc2v10r.py\", line 78, in <module>\n    check(histogram)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp3yc2v10r.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp3yc2v10r.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:22.912637",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
            "mutated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 0\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "mutated_complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 0\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpbt8nhz33.py\", line 78, in <module>\n    check(histogram)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpbt8nhz33.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpbt8nhz33.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:23.119892",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 4,
        "mutations_tested": 4
      },
      "AddEq->SubEq": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
            "mutated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] -= 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "mutated_complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] -= 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpppfc4ds9.py\", line 78, in <module>\n    check(histogram)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpppfc4ds9.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpppfc4ds9.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:23.334009",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Eq->NotEq": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
            "mutated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test != '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "mutated_complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test != '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpz0vduxfc.py\", line 78, in <module>\n    check(histogram)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpz0vduxfc.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpz0vduxfc.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:23.575116",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
            "mutated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c != mx:\n            ans[ch] = c\n    return ans",
            "mutated_complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c != mx:\n            ans[ch] = c\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp3m27s_iw.py\", line 78, in <module>\n    check(histogram)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp3m27s_iw.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp3m27s_iw.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:23.787460",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "NotEq->Eq": {
        "error": "division by zero"
      },
      "Remove ReturnValue": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
            "mutated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "mutated_complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpw_fm4v1b.py\", line 78, in <module>\n    check(histogram)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpw_fm4v1b.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpw_fm4v1b.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:24.307010",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
            "mutated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return",
            "mutated_complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpsw8oofja.py\", line 78, in <module>\n    check(histogram)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpsw8oofja.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpsw8oofja.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:24.568282",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Zero->One": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
            "mutated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 1\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "mutated_complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 1\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpomtcyyrd.py\", line 78, in <module>\n    check(histogram)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpomtcyyrd.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpomtcyyrd.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:24.833204",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "One->Zero": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
            "mutated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 0\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "mutated_complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 0\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp7xjj1qze.py\", line 78, in <module>\n    check(histogram)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp7xjj1qze.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp7xjj1qze.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:25.050506",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "String->Empty": {
        "total_mutations": 1,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
            "mutated_code": "def histogram(test):\n    \"\"\"\"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "mutated_complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\ndef histogram(test):\n    \"\"\"\"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:53:25.269754",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
            "mutated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(''):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "mutated_complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(''):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmps4zy01kw.py\", line 78, in <module>\n    check(histogram)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmps4zy01kw.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmps4zy01kw.py\", line 31, in histogram\n    for word in test.split(''):\n                ~~~~~~~~~~^^^^\nValueError: empty separator\n",
            "timestamp": "2025-08-01T15:53:25.530573",
            "status": "BROKEN",
            "reason": "code_error"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "String->X": {
        "total_mutations": 3,
        "killed_mutations": 2,
        "survival_rate": 0.3333333333333333,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
            "mutated_code": "def histogram(test):\n    \"\"\"X\"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "mutated_complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\ndef histogram(test):\n    \"\"\"X\"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:53:25.770603",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
            "mutated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == 'X':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "mutated_complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == 'X':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp9_c9bqpa.py\", line 78, in <module>\n    check(histogram)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp9_c9bqpa.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmp9_c9bqpa.py\", line 36, in histogram\n    mx = max(list(count.values()))\nValueError: max() iterable argument is empty\n",
            "timestamp": "2025-08-01T15:53:26.003205",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
            "mutated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split('X'):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "mutated_complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split('X'):\n        if word != '':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpxl_951ln.py\", line 78, in <module>\n    check(histogram)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpxl_951ln.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpxl_951ln.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:26.165351",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
            "mutated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != 'X':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "mutated_complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if test == '':\n        return {}\n    count, ans = (dict(), dict())\n    for word in test.split(' '):\n        if word != 'X':\n            if word not in count:\n                count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpnbj7w1yf.py\", line 78, in <module>\n    check(histogram)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpnbj7w1yf.py\", line 72, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpnbj7w1yf.py\", line 65, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:53:26.320601",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 4,
        "mutations_tested": 4
      }
    },
    "problem_info": {
      "prompt": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
      "canonical_solution": "\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n",
      "test_code": "\n\nimport numpy as np\n\ndef is_floats(x) -> bool:\n    # check if it is float; List[float]; Tuple[float]\n    if isinstance(x, float):\n        return True\n    if isinstance(x, (list, tuple)):\n        return all(isinstance(i, float) for i in x)\n    if isinstance(x, np.ndarray):\n        return x.dtype == np.float64 or x.dtype == np.float32\n    return False\n\n\ndef assertion(out, exp, atol):\n    exact_match = out == exp\n\n    if atol == 0 and is_floats(exp):\n        atol = 1e-6\n    if not exact_match and atol != 0:\n        assert np.allclose(out, exp, rtol=1e-07, atol=atol)\n    else:\n        assert exact_match\n\n\ndef check(candidate):\n    inputs = [['a b b a'], ['a b c a b'], ['a b c d g'], ['r t g'], ['b b b b a'], [''], ['a'], ['x y z x y z x'], ['c a r s'], ['h e l l o'], ['a b b b b b'], ['p u z z l e'], ['a a a a a a a b b b b b b b'], ['c c c c b b b a a a'], ['p p p r r r'], ['a b c d e f g'], ['h i j j k l m m m n o o o o p'], ['a b b  b b b'], ['h i j j k l m m m p'], ['a a a a a a a b b b b b b'], ['a b h i j j k l m m m n o o o o p'], ['h i j j k l m m m n o o o o  p'], ['a b b  b b  b'], ['h i j j  k l m m m n o o o o  p'], ['a b c  d e f g'], ['p  l  e'], ['h i j j   k l  m m m n o o o o  p'], ['p u z l e'], [' p p p r r r'], [' p p p  r r r'], ['a a a a a a a b b  b b b b'], ['p l  e'], ['h i j j   k l  m  o o  p'], [' p r'], ['a b b b b b  b'], [' p '], ['a b c  d  e f g'], ['a b b b b'], ['h i j m m m p'], ['h i j j   k l  m  p'], ['h  i j j   k l  m  o o  '], ['h i j j    k l  m   p'], ['a a a a a a a b b  b'], ['a b b  b b   b'], [' p  '], ['  p p r r r'], ['h  i j j   k l  m  o  '], ['h i j j k l m m m n  o o o o  p'], ['h  i j j k l  m  o  '], ['h i j j   k l  m  o p'], ['x y z x y  z x'], [' p h  i j j k l  m  o  '], ['h  i j j   k l  m  o   '], ['a b c  e f g'], ['c c c c b b b a  a a'], ['p u z z  l e'], ['h i j j k l m m m n o  o o o  p'], ['a b c d e  p  f g'], ['a b h i j j m m m n o o o o p'], ['x y z x y  z x '], ['h i j j k l m m m n o o p'], ['a b  b b b b'], ['h   i j j   k l  m  o   '], ['p  l h i j j k l m m m p e'], ['a b b  b b b  b'], ['h e'], ['h i j j k l m m m n o  o o   p'], ['p  l h i j j k l m  e'], [' p p p r r r p '], ['  p p  r r r'], ['a b c h  i j j k l  m  o  d e  p  f g'], ['p u z z  e'], ['p  u z z  e'], ['p u z z  l  e'], ['  p  '], ['  s'], ['h i j j k  h i j j   k l  m  o o  p p p p r r r m m n o o o o  p'], ['h  i j m m m p'], ['p  l h i j j k  l m  e'], ['  p p r h i j j k l m m m n  o o o o  p r'], [' p'], [' a b b  b b   b'], [' a b b  b b    b'], [' a  b b  b b   b'], ['h  i j  p p r r r j   k l  m'], ['c c c c b b a a'], [' p p p r  r r'], [' r'], ['a b b  b'], ['h  i  j m m m'], ['h  i j j k l   m  o  '], ['h i j j k  h i j j   k l  m  o o  p p p p r r r m m n  o o o o  p'], ['a a a a a a a b b b  b'], ['  p p p  r r r '], ['p  l  h i j j k l m  e'], ['p  p p r h i j j  p p p r r r p k l m m m n  o o o o  p r  u z z  e'], ['a  b c d e f g'], ['  p'], ['   p  '], ['a a p h  i j j k l  m  o   a a a a a b b b b b b'], ['a  a a a a a a b b  b b b b'], ['  p   p '], ['p   l  e'], ['h  i p p r h  i j j   k l  m  o o   r r j   k l  m'], ['c a a a a b b d d d d f f f g h i'], ['p p q q q r r r s s s t t t u u u v v w w x x y y z z'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x x x y y y y y z z z z z'], ['l m m m m m m m m n n n n n n n n n n n n n n o o p p q q r r s'], ['     a a a a b b d d d d f f f g h i  '], ['x y z x y z x y z x y z x y z x y z x y z x y z x'], ['    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y z'], ['a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g'], ['x y a a a b b d d d d f f f g h i i i i i j j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w'], ['    x      a b c d e f   a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['h'], ['l'], ['x y a a a b b d d d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w'], ['d'], ['u'], ['b'], ['    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z'], ['p'], ['z'], ['x y a a a b b d d d d f f f g h i i i i i j j j j k k k k l l l l m n o p q r r r s s      a a a a b b d d d d f f f g h i  s s s s s t t t t t t t t u v w'], ['g'], ['x y a a a b b d d d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t   t t t t t u v w'], ['s'], ['x y a a a b b d d d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t   t t t t t u v  w'], ['c'], ['x y a a a b b d d d d f f f g h i i i i i j j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t t  t t u v w'], ['n'], ['v'], ['x y z x y z  x y z x y z x y z x y z x y z x y z x'], ['f'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x x x y     a a a a b b d d d d f f f g h i   y y y y z z z z z'], ['i'], ['    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v  w x y z'], ['    a b   k k l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z'], ['    x      a b c d e f   a g  g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['t'], ['    a b   k k l l t t t t t t u v w x y z'], ['o'], ['x y a a a b b d d d d f f f g h i i i i i  j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w'], ['m'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z'], ['x y z x y z  x y z x y z x y z x y z x y z x y z  x'], ['     a b   k k l l t t t t t t u v w x y z'], ['w'], ['x y a a a b b d d d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t   t t t t     x      a b c d e f   a g  g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t v w'], ['x'], ['r'], ['j'], ['    a b        c d e f   a g g h h h i j a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g m n o p q r r r s s s s s s s t t t t t t t t u v w x y z'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v s x x x x y     a a a a b b d d d d f f f g h i   y y y y z z z z z'], ['    a b        c d e f   a g g h  h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y z'], ['e'], ['x y a a a b b d d d d f f f g h i i i i i  j j j  j k k k k  l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w'], ['l     a a a a b b d d d d f f f g h i  '], ['x y z x y z  x y z x y z x y z z x y z x y z x'], ['    x      a b c d e f   a g   g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['x y a a  a b b d d d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t   t t t t     x      a b c d e f   a g  g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t v w'], ['  l  a b   k k l l t t t t t t u v w x y z'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['x y z x y z x y z x y z x y  z x y z x y z x  y z x'], ['     a b        c d e f   a g g h  h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y z   x      a b c d e f   a g   g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['x y z x y z  x y x y z x'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q  r r s s s s s s s t t t t t'], ['    x      a b c d e f   a g   g h h h h i j j j k k k k l l l l m n o p q r r r  s s s s s s s t t t t t'], ['l m m m m m m m m n n n n n n n n n n n n n  p p q q r r s'], ['     a b    s s s s s t t t t t t t t u v w x y z'], ['x y a a a b b d d d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t   t t t t   x      a b c d e f   a g  g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t v w'], ['x y z x y z x y z l     a a a a b b d d d d f f f g h i  x y z x y z x y z x y z x y z x'], ['k'], ['    x      a b c d e f   a g g h h h h i    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['l     a a a a b b d  d d d f f f g h i  '], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x  z z'], ['l     a a a a b b d  d d d f f f g h i'], ['x y a a a o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z s s s s s s s t t t t t t t t u v w'], ['y'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t   a a a a b b d d d d f f f g h i  '], ['x y z x y z  x y z x y z x y z x y z  x'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l  l l l m n o p q r r r s s s s s s s t t t t t   a a a a b b d d d d f f f g h i  '], ['l a b b d  d d d f f f g h i'], ['x y z x y z  x y z x y z x y z x y z e y z  x'], ['    x      a b c d e f   a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t  t'], ['x y z x y z  x y z o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x x x y y y y y z z z z z y z e y z  x'], ['x x y y z z'], ['     a a a a b b d d d d f f f g  h i  '], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y s s t t t t t'], ['     a a a a b b x y z x y z x y z l     a a a a b b d d d d f f f g h i  x y z x y z x y z x y z x y z x'], ['x y z x  z x y z x y z x'], ['l     a a a a  b b d d d d f f f g h i  '], ['x y a a a b b d d d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t   t t t t   x      a b c d e f  x y a a a b b d d d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t   t t t t     x      a b c d e f   a g  g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t v w a g  g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t v w'], ['    a b   k k l l l l m n o p q r r r  s s s s s s s t t t t  t t t t u v w x y z'], ['x y a a a b b d d  d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s  s s s t t t   t t t t t u v w'], ['p p q q q r r r s s s t t t  u u u v v w w x x y y z z'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v z'], ['x y z x y z  x y z x y z x y z z x y z x  y z x'], ['x y a a a b b d d d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t   t t t t   x      a b c d e f   a g  g h    a b   k k l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t v w'], ['x y a a a b b d d d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t   t t t t     x  j    a b c d e f   a g  g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t v w'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x x x y     a a a a b b d d d d f f f g h i  p y y y y z z z z z'], ['    a b   k k l l l l m n o p q r r r  s s s s s s s t t t t t  t t t u v w x y z'], ['x y z x y z  x y z  x y z x y z z x y z x  y z x'], ['    x      a b c d e f   a g   g h h h h  i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['    a b       a b    s s s s s t t t t t t t t u v w x y z k k  l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z'], ['x y z x y z  x y z x y z x  y z z x y z x y z x'], ['x y a a a b b d d  d d f f f g l m n o p q r r r s s s s  s s s t t t   t t t t t    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z v w'], ['x y z x y z  x y z  x y z x y z z x y z    x      a b c d e f   a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t  t x  y z x'], ['    x      a b c d e f   a g   g h l     a a a a  b b d d d d f f f g h i  h h h i j j j k k k k l l l l m n o p q r r r  s s s s s s s t t t t t'], ['x y a a a b b d d d d f f f g h i i i i  i j j j j k k k k l l l l m t t t u v w'], ['c a a a a i'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v    a b       a b    s s s s s t t t t t t t t u v w x y z k k  l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q  r r s s s s s s s t t t t t'], ['    x      a b c d e f    a g   g h h h h  i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['c a a a  a i'], ['x y z x y z  x y z x y z x  y z x'], ['x y z x y z x y z x y z x y z x  z x y z x y z x z x y z x y z x y z x'], ['l    a b   k k l l t t t t t t u v w x y z'], ['     a b   k k l l t t t t t t u v w    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l  l l l m n o p q r r r s s s s s s s t t t t t   a a a a b b d d d d f f f g h i  x y z'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t  t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['     a b    k k l l t t t t t t u v w x y z'], ['x y z x y z x y     a b   k k l l t t t t t t u v w x y z z x y z x y z x y z x y z x y z x'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v    a b       a b    s s s s s t t t t t t t t u v w x y z k k  l l l l m n o  p q r r r  s s s s s s s t t x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q  r r s s s s s s s t t t t t'], ['x y z x y z  x y z  x y z x y z z x y z    x      a b c d e f   a g g h h h h i j j j k k k k l l m n o p q r r r s s s s s s s t t t  t x  y z x'], ['l     a a a  a b b  f f g h i  '], ['x y z x y z  x y z x y z x y z x y z e y z  '], ['c a a a  a i    a b        c d e f   a g g h  h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y z'], ['x y z x y z x y z x y z z x y z x y z x y z x'], ['l     f f f g h i  '], ['x y z x y z  x y z x y z x y z z x y z x  y z  x'], ['o o o o o o p p p p p p q q q q q q r r r r r    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v    a b       a b    s s s s s t t t t t t t t u v w x y z k k  l l l l m n o  p q r r r  s s s s s s s t t x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q  r r s s s s s s s t t t t t r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x x x y y y y y z z z z z'], ['x y a a a o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z s s s s s t t t t t t t t u v w'], ['     a b   k k l l t t t t l     a a a a  b   b d d d d f f f g h i  t t u v w x y z'], ['x y z x y z x y     a b   k k l l t  t t t t t u v w x y z z x y z x y z x y z x y z x y z x'], ['x y z x y z   x y z o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x x x y y y y y z z z z z y z e y z  x'], ['    o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z a a a a b b d d d d f f f g  h i  '], ['x y a a a b b d d d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t    t t t t t u v  w'], ['x y a a a b b d d d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t   t t t t     x  j    a b c d e f   a g  g h h h  j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t v w'], ['x y z x y z  x y z  x y z x y z z x    a b        c d e f   a g g h h h i j a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g m n o p q r r r s s s s s s s t t t t t t t t u v w x y z y z    x      a b c d e f   a g g h h h h i j j j k k k k l l m n o p q r r r s s s s s s s t t t  t x  y z x'], ['x y a a a b b d d d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t   t t t t     x  j    a b c d e f   a g  g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t v  w'], ['l      a a a  a b b  f f g h i  '], ['c a a a a b b d f g h i'], ['    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r  s s s s s s s t t t t     a b   k k l l t t t t l     a a a a  b   b d d d d f f f g h i  t t u v w x y z t  t t t u v w x y z'], ['l     a a a  a b b  f f g  i  '], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s    x      a b c d e f   a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t  t s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q  r r s s s s s s s t t t t t'], ['    a b   k k l l  l l m n o p q r r r  s s s s s s s t t t t  t t t t u v w x y z'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t   a a     x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t   a a a a b b d d d d f f f g h i  a a b b d d d d f f f g h i  '], ['l     a a a  a b b d  d d d f f f g h i  '], ['x y z x y z  x y z  x y z x y z z x y z    x      a b c d e f   a g g h h h h  i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t  t x  y z x'], ['    x      a b c d e f  o o o o o o p p p p p p  q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v    a b       a b    s s s s s t t t t t t t t u v w x y z k k  l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q  r r s s s s s s s t t t t t'], ['l     a a a  a b b  f f g  i '], ['x y z x y z  x y z  x y z x y z z x    a b        c d e f   a g g h h x y a a a b b d d d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t   t t t t t u v w h h i j j j k k k k l l m n o p q r r r s s s s s s s t t t  t x  y z x'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v    a b        a b    s s s s s t t t t t t t t u v w x y z k k  l l l l m n o  p q r r r  s s s s s s s t t x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q  r r s s s s s s s t t t t t'], ['      a b   k k l l t t t t t t u v w x y z'], ['x y a a a b b d d d d f f f g h i i i i i  j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t t t t t u v w'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v    a b       a b    s s s s s t t t t t t t t u v w x y z k k  l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q  r r s s s s  s s s t t t t t'], ['    a b   k k l l l l m n o p q r r r  s s s s s s s  t t t t t t t t u v w x y z'], ['l      a a a  a b b d  d d d f f f g h i  '], ['    x      a b c d e f   a g g h h h h  i    a b        s s t t t t t t t t u v w x y z j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['x y a a a b b d d d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s     a a a a b b x y z x y z x y z l     a a a a b b d d d d f f f g h i  x y z x y z x y z x y z x y z x s s s s s s t t t   t t t t t u v  w'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t  t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t    a b   k k l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z t t t'], ['x y a a a b b d d d d f f f g h i i i i i  j j j  j k s s s s t t t t t t t t u v w'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v    a b        a b    s s s s s t t t t t t t t u v w x y z k k  l l l l m n o  p q r r r  s s s  s s s s s t t t t t'], ['x y a a a b b d d d d f f f g h  i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t   t t t t t u v w'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t  t t t t u u u u u u v v v v v v w w w w w w x x x x  y  y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t    a b   k k l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z t t t'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s    x      a b c d e f   a g g h h h h i j j j k k k k l l l l     a a a  a b b  f f g  i  l m n o p q r r r s s s s s s s t t t  t s s s t t t t t t u u u u u u v v v l l l m n o p q  r r s s s s s s s t t t t t'], ['x y z x y z x  y z l     a a a a b b d d d d f f f g h i  x y z x y z x y z x y z x y z x'], ['x y a a a b b d d d d  f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t   t t t t t u v  w'], ['x y z x y z  x  y z  x y z x y z z x y z x  y z x'], ['    x      a b c d e f   a g g h h h h i    a b        c  d e f   a g g h h h i j j j k k k l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['l a b b d  d d d f f    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s  s s t t t t t   a a     x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t   a a a a b b d d d d f f f g h i  a a b b d d d d f f f g h i   f g h i'], ['x y z x y z  x y z x y z x y z x y z x y z x y z u x'], ['l     a a a  a b b      a b   k k l l t t t t t t u v w x y z f f g h i  '], ['t    a b   k k l l  l l m n o p q r r r  s s s s s s s t t t t  t t t t u v w x y z'], ['x y a a a b b d d d d f f f g      a a a a b b x y z x y z x y z l     a a a a b b d d d d f f f g h i  x y z x y z x y z x y z x y z x i i i i  i j j j j k k k k l l l l m t t t u v w'], ['x y z x y z   x y z o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x x x y y y y y    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v    a b        a b    s s s s s t t t t t t t t u v w x y z k k  l l l l m n o  p q r r r  s s s  s s s s s t t t t t z z z z z y z e y z  x'], ['    a b   k k l l l l m n o p q r r r  s s s s s s s t t t t t  t t t u v  z'], ['x y z x y z x y     a b   k k l l t t t t t t u v w x y z z x y z x y z x y z x y z x y z     a b   k k l l t t t t t t u v w x y z'], ['    x t t t t t'], ['x y z x y z  x y z x y z  x  y z x'], ['x y z x y z  x y z x y z x y z z x y  z x  y z x'], ['x y z x y z  x y z  x y z x y z z x    a b        c d e f   a g g h h h i j a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y  z a b c d e f g m n o p q r r r s s s s s s s t t t t t t t t u v w x y z y z    x      a b c d e f   a g g h h h h i j j j k k k k l l m n o p q r r r s s s s s s s t t t  t x  y z x'], ['    o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s  t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z a a a a b    x t t t t t b d d d d f f f g  h i  '], ['l     f f f g h  i  '], ['x y z x y    x      a b c d e f    a g   g h h h h  i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t z  x y z x y z x y z z x y  z x  y z x'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v    a b        a b    s s s s s  t t t t t t t t u v w x y z k k  l l l l m n o  p q r r r  s s s  s s s s s t t t t t'], ['    x      a b c d e f  o o o o o o p p p p p p  q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v    a b       a b    s s s s s t t t t t t t t u v w x y z k k  l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z v  v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q  r r s s s s s s s t t t t t'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w  z'], ['l     a a a  a b b      a b   k k l l t  t t t t t u v w x y z f f g h i  '], ['   h x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v    a b       a b    s s s s s t t t t t t t t u v w x y z k k  l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q  r r s s s s  s s s t t t t t'], ['x y z x'], ['o o u u u v v v v v v w w w w w w x x x  z z'], ['x y z x y z x y z x y z x y z x  z x y z x y z x z x y z x y z x'], ['    a b        c d e f   a g g h h h i j a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q s t u v w x y z a b c d e f g m n o p q r r r s s s s s s s t t t t t t t t u v w x y z'], ['x y z x y z   x y z o o o o o o p p p p p p q q q q q q r r r r r r s s s s s  s t t t t t t u u u u u u v v v v v v w w w w w w x x x x x x y y y y y z z z z z y z e y z  x'], ['x z x'], ['x y z x y z  x y z x y z z e y z  x'], ['x y z x y z   x y z o o o o o o p p p p p p q q q q q q r r r r r r s s s s s  s t v v v v v w w w w w w x x x x x x y y y y y z z z z z y z e y z  x'], ['s    a b   k k l l  l l m n o p q r r r  s s s s s s s t t t t  t t t t u v w x y z'], ['x y y z x y z  x y z x y z x  y z z x y z x y z x'], ['x y z x y z  x y z  x y z x y z z x y z    x      a b c d e f   a g g h h h h i j j j k k  k k l l l t x  y z x'], ['l      a a a  a   f f g h i  '], ['x y z x y z x y z x y z x y  z x y z     a a a a b b x y z x y z x y z l     a a a a b b d d d d f f f g h i  x y z x y z x y z x y z x y z x x y z x  y z x'], ['x y z x y z   x y z o o o o o o p p p p p p q q q q q q r r r r r r s s s s s  s t v v v v v w w w w w w x x x x x x y y y y y z z z z z y  z e y z  x'], ['     a a a a c a a a  a i    a b        c d e f   a g g h  h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y z  h i  '], ['p p q q q r r r s s s  y y z z'], ['x y z x y z  x y z x y z   x  y z x'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v    a b       a b    s s s s s t t t t t t t t u v w x y z k k  l l l l m n o  p q r r r  s s s s s s s t t x x  y y z z z z z a g g h h h h i j j j k k k k l l  n o p q  r r s s s s s s s t t t t t'], ['c a    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t  t t t t u u u u u u v v v v v v w w w w w w x x x x  y  y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t    a b   k k l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z t t t a a a b b d f g h i'], ['x y z x  x y z x  y z x'], ['     a b   k k l l t t t t l     a a a a  b   x y z x y z  x y z x y z x y z x y z e y z   u v w x y z'], [' x y z x y z x  y z l     a a a a b b d d d d f f f g h i  x y z x y z x y z x y z x y z x   x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v    a b        a b    s s s s s t t t t t t t t u v w x y z k k  l l l l m n o  p q r r r  s s s s s s s t t x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q  r r s s s s s s s t t t t t'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v    a b        a b    s s s s  s  t t t t t t t t u v w x y z k k  l s t t t t t'], ['     a b   k k l l t t t t l     a a a a  b   x y z x y z   u v w x y z'], ['     a b   k k l l t t t t l     a a a a  b   x y z x y z  x y z x y z x y z x y  y z'], ['x y z x y z x y z x y z x y z x y z x y z x'], ['x y z x y z  x y z  x y z x y z z x y z    x      a b c d e f   a g g h h h h i j j j k k k k l l m n o p q r r r  s s s s s s s t t t  t x  y z x'], ['x y  z x y z  x y z x y z x y z z x y z x  y z  x'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t  t t t t u u u u u u v v v v v v w w w w w w x x x x  y  y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t    a b   k k l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z t t '], ['l     a a a  a b b      a b   k k l l t  t t t t t u v w     a b   k k l l t t t t l     a a a a  b   x y z x y z  x y z x y z x y z x y z e y z   u v w x y z x y z f f g h i  '], ['x y z x y z  x y z  x y z x y z z x y z    x      a b c d e f   a g g h h h h i j j j k k k k l l m n o p q r r r s t x  y z x'], ['x l     a a a a  b b d d d d f f f g h i  y z x y z  x y x y z x'], ['c a    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t  t t t t u u u u u u v v v v v v w w w w w w x x x x  y  y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t    a b   k k l l l l m n o p q r r r  s s s s s s s t t t t t t t    a b   k k l l t t t t t t u v w x y z t u v w x y z t t t a a a b b d f g h i'], ['x y a a a o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z s s s s  u v w'], ['    a b   k    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v    a b        a b    s s s s  s  t t t t t t t t u v w x y z k k  l s t t t t t k l l t t t t t t u v w x y z'], ['x y z x y z   x y z o o o o o o p p p p p p q q q q q q r r r r r r s s s s s  s y z  x'], ['o o u u u v v v v v v w w w w w'], ['p p  s t t t u u u v v w w x x y y z z'], ['x y z x y z  x y z  x y z x y z z x    a b        c d e f   a g g h h h i j a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r  s t u v w x y z a b c d e f g m n o p q r r r s s s s s s s t t t t t t t t u v w x y z y z    x      a b c d e f   a g g h h h h i j j j k k k k l l m n o p q r r r s s s s s s s t t t  t x  y z x'], ['x y z x y z     a b   k k l l  l l m n o p q r r r  s s s s s s s t t t t  t t t t u v w x y z y z x y z x y z x y z x y z x y z u x'], ['    x      a b c d e f  o t u u u u u u v    a b        a b    s s s s  s  t t t t t t t t u v w x y z k k  l s t t t t t'], ['x y z x y z x y     a b   k k l l t  t t t t t u v w x y z z x y z x y z x y z x  y z x y z x'], ['l  f f f g h  i  '], ['    a b   k k l l l l m n o p q r r r  s s s s s    x      a b c d e f   a g g h h h h  i    a b        s s t t t t t t t t u v w x y z j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v  z'], ['c a a a a b b d d d d f f  f g h i'], ['x y a a a b b d d d d f f f g      a a a a b b x y z x y z x y z l     a a a a b b d d d d f f f g h i  x y z x y z x y z x y z x y z x i i i i  i j j j j k k k k l l l l m t t t u v w   a a a  a b b      a b   k k l l t  t t t t t u v w x y z f f g h i  '], ['l     a a a  a b b  f f g x y a a a b b d d d d f f f g h i i i i i j j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w i  '], ['x y z x y  z  x y z x y z   x  y z x'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l  m n o p q  r r s s s s s s s t t t t t'], ['    a b   k k l l l l m n o p q r r r  s s s s s s s   v w x y z'], ['    a b        c d e f   a g g h h h i j a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g m n o    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v    a b        a b    s s s s  s  t t t t t t t t u v w x y z k k  l s t t t t t p q r r r s s s s s s s t t t t t t t t u v w x y z'], ['    o o o  v w w w w w w x x   h i  '], ['     x t t t t t'], ['    a b   k k l l  l l m n o   t t t t u v w x y z'], ['o o o o o o p p p  r r r s s s s s s t t t t t t u u u u u u v v v v v z'], ['    x      a b c d e f   a g g h h h h i    a b        c  d e f   a g g h h h i j j j k k k l l l l m n o p q r r r  s s s s s t t t t t'], ['    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v  w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q  r r s s s s s s s t t t t t'], ['x y z x y z  x y z  x y z x y z z x    a b        c d e f   a g g h h h i j a b c d e f g h i j k l m n o p  q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y  z a b c d e f g m n o p q r r r s s s s s s s t t t t t t t t u v w x y z y z    x      a b c d e f   a g g h h h h i j j j k k k k l l m n o p q r r r s s s s s s s t t t  t x  y z x'], ['l     a a a  a b b  f f g  '], ['x  x'], ['l     a a a  a b b      a b   k k l l t t t t t t u v w x y z f f g h i '], ['x y a a a b b d d d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r u v w'], ['    a b        c d e f   a g g h h h i j j j k k k l l l l m n o     a b    k k l l t t t t t t u v w x y z p q r r r s s s s s s s t t t t t t t t u v w x y z'], ['    x      a b c d e f    a g g h h h h i    a b        c  d e f   a g g h h h i j j j k k k l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['    x    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v  w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q  r r s s s s s s s t t t t t      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s  s t t  t t t t u u u u u u v v v v v v w w w w w w x x x x  y  y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t    a b   k k l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z t t '], ['x y z x y  z  x y z x y z   x  y z '], ['x y a a a b b d d d d f f f g h i i i i i j j j  j k k k k l l l l m n o p q r r r s s s s s s s t t t   t t t t   x      a b c d e f   a  g  g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t v w'], ['c a  a a a b b d f g h i'], ['    x t t t t'], ['p p  s t t t u u u v    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t v w w x x y y z z'], ['l     a a a  a  '], ['     a b   k k l l t t t z'], ['p p  s t t t u u u v    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u q r r r s s s s s s s t t t t  t v w w x x y y z z'], ['    a b     a b    s s s s s t t t t t t t t u v w x y z       a b    s s s s s t t t t t t t t u v w x y z k k  l l l l m n o p q r r r  s s s s s s s t t t t t t t t u v w x y z'], ['x y z x y z x x y z x y z x y z x y z  x'], ['l    p p q q q r r r s s s t t t u u u v v w w x x y y z z a a a a  b b d d d d f f f g h i  '], ['t    a b   k k l l  l l m n o p q r r r   s s s s s s s t t t t  t t t t u v w x y z'], ['    x      a b c d e f   a g g h h h h i    a b        c  d e f   a g g h h h i j j j k k      a b   k k l l t t t t t t u v w    x      a b c d e f  o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x  y y z z z z z a g g h h h h i j j j k k k k l  l l l m n o p q r r r s s s s s s s t t t t t   a a a a b b d d d d f f f g h i  x y z o p q r r r  s s s s s t t t t t'], ['x y z x  z x y z x  y  x'], ['x y z x y z  x y z  x y z x y z z x y z    x      a b c d e f   a g  g h h h h  i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t  t x  y z x'], ['x y z x y z  x y z x y z x y  z z x y z x  y z  x'], ['a a b b c c d d'], ['x x x x x'], ['a b c d a b c d a b c d'], [' a'], ['\u00e4 \u00e5 \u00f6'], ['    x      a b c d e f   a g g  t t'], ['    x      a b  c d e f   a g g  t t'], ['l m m m m m m m m n n n n n n n n n n n n n n o o p p q  q r r s'], ['    x      a  b  c d e f   a g g  t t'], ['c a a a a b b d d d d f f f  g h i'], ['    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y '], ['      g h i  '], ['o o o o o o p p p p p  p q  q q q q q r r r r r r s s s s s  y y y z z z z z'], ['x y a a a b b d d d d f f f g h i i i i i j j j j k k k k l l l l m n p q r r r s s s s s s s t t t t t t t t u v w'], ['c       g h i  '], ['  o t x      a b c d e f   a g g  t t'], ['     a a a a b b d d d d f f f g h    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y   '], ['    x b     a  b  c d e f   a g g  t t'], ['l m  m m m m m m m n n n n n n n n n n n n n n o o p p q q r r s'], ['o o o o o o p p p p p p q q q q  q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x x x y y y y y z z z z z'], ['    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t  t t t u v w x y z'], ['x y a a a b b d d d d f f f g h i i i i i j j j j k k k k l l l l m n p q r r r s s s s s s s t t t t t    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t  t t t u v w x y z t t t u v w'], ['    x      a b c  d e f   a g  g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['q'], ['  o t x  t    a b c d e f   a g g  t t'], ['     a a a a b b d d d d f f f g h i  e'], ['o o o o o o p p p p p  p q  q q q q q r r r r r r s s s    x      a b c d e f   a g g  t t s s  y y y z z z z z'], ['       a a a a b b d d d d f f f g h i    x      a b c d e f   a g g  t t'], ['l m m m m m m m m n n n n n n n n n n n n  n n o o p p q q r r s'], ['c a a a a b b d d d d  f f f g h i'], ['    a b        c d e f   a g g  h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t  t t t u v w x y z'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u z z z z z'], ['a b c d e f z b c d e f g'], ['l m m m m m m m m n n n n n n n n n n n n m n n o o p p q q r r s'], ['    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s t t t t t t t t u v w x y '], ['    x b     a  b  c d e f   a t t'], ['    x      a  b  c d e  f   a g g  t t'], ['    x      a  b  c d e f e  a g g  t t'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s  s t t t t t t u u z z z z z'], ['    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p  v w x y '], ['o o o o       a a a a b b d d d d f f f g h i    x      a b c d e f   a g g  t t o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u z z z z z'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s  s t t t t t t u  u z z z z z'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u v v v v v v w w w w w w x x x x x x y y y y y z z'], ['  o o o o       a a a a b b d d d d f f f g h i    x      a b c d e f   a g g  t t o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u z z z z z d e f   a t t'], ['    a b        c d e f   a g g h h h i  j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y z'], ['o o o o o o p p p p p p q q q q q q r r r r r s s s s s  s t t t t t t u u z z z z z'], ['    x      a b  c d e f   a g g  t'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s  s t t  t t t u  u z z z z z'], ['  o  t x      a  b c d e f   a g g  t t'], ['    x      a b  c d e f   a g g t'], ['a b c d e f g    x b     a  b  c d e f   a t t h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g'], ['l m m m m  p p q q r r s'], ['    a b        c d e f   a g g h h s s s t t t t t t t t u v w x y z'], ['x y a a a b b d d d d f f f g h i i i i i j j j j k k k k l l l l m n p q r r r s s s s s s s t z t t t u v w'], ['    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s t t t t t t t t u  v w x y '], ['    x      a b   c d e f   a g g t'], ['    a b        c d e f   a g g  h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t      a a a a b b d d d d f f f g h    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y   t  t t t u v w x y z'], ['x y a a a b b d d d d f f f g h i i i i i j j j  j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t  t t t u v w x y z t t t u v w'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t  u u z z z z z'], ['l m m m m m m m m n n  n n n n n n n n n n n n o o p p q q r r s'], ['l m  m m  m m m m m n n n n n n n n n n n n n n o o p p q q r r s'], ['  g    g h i  '], ['o o o o       a a a a b b d d d d f f f g h i    x      a b c d e f   a g g  t t o o p p p p p p q q q q q  q r r r r r r s s s s s s t t t t t t u u z z z z z'], ['o o o o  b     a a a a b b d d d d f f f g h i    x      a b c d e f   a g g  t t o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u z z z z z'], ['p p q q q r r r s s s t t t u u u v v  g    g h i   w w x x y y z z'], ['  o o o o       a a a a b b d d d d f f  f g h i    x      a b c d e f   a g g  t t o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u z z z z z d e f   a t t'], ['    a b        c d e  f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t  t t t u v w x y z'], ['    x      a b c d e f   a g g    t'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u  v v v v v v w w w w w w x x x x x x y y y y y z z'], ['  o o o o        a a a a b b d d d d f f  f g h i    x      a b c d e f   a g g  t t o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u z z z z z d e f   a t t'], ['d      g h i  '], ['o o o o  b     a a a a b b d d d d f f f g h i    x      a b c d e f   a g g  t t o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u z z z z'], ['o o o o o o p  x x x x y y y y y z z'], ['p p q q r r r s s s t t t u u u v v w w x x y y z z'], ['o o o o o o p p p p p p q q q q q q r r r  z z'], ['a    x      a b c d e f   a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['p p q q r r r s s  s t t t u u u v v w w x x y y z z'], ['l m m m m m m m m n n n n n n n n n n n n n n o o p p q o o o o o o p p p p p p q q q q q q r r r r r s s s s s  s t t t t t t u u z z z z z q r r s'], ['p p q q r r r s s s t t t u x x y y z z'], ['x y a a a b b d d d d f f f g h i i i i i j j j j k k k k l l l l m n p q r r r s s s s s s s t t t t t    a b        c d e f   a g g h h h i j j j k k k l l l l m n o     a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y p q r r r s s s s s s s t t t t t  t t t u v w x y z t t t u v w'], ['    x b     a  b  c d e f    a g g  t t'], ['l m m m m m m m m n n n n n n n n n n n n n n o o p p q o o o o o p p p p p p q q q q q q r r r r r s s s s s  s t t t t t t u u z z z z z q r r s'], ['  o o o o        a a a a b b d d d d f f  f g h i    x      a b c d e f   a z s s t t t t t t u u z z z z z d e f   a t t'], ['    a b        c d e f   a g g h h h i j j j   o o o o       a a a a b b d d d d f f  f     a a a a b b d d d d f f f g h i  w x y z'], ['    x      a  b  c d e f  t'], ['    x      a  b  c d e f   a  g g  t t'], ['    x      a  b c d  e f   a g g  t t'], ['  o o o o       a a a a b b d d d d f f f g h i    x      a b c d e f   a g g  t t o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u z z z z z d e f   a t  t'], ['    x       a  b  c d e  f   a  t t'], ['l m m m m m m m m n n n n n n n n n n n n  n n  o o o o        a a a a b b d d d d f f  f g h i    x      a b c d e f   a z s s t t t t t t u u z z z z z d e f   a t t r r s'], ['d      g h i d '], ['    x      a b  c d e  f   a g g  t t'], ['o o o o       a a a a b b d d d d f f f g h i    x      a b c d e f   a g g  t t o o p p p p p p q q q q q q r r r r r r s s s s s s t t  t t t t u u z z z z z'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u  z z z z z'], ['o o o o o o p p  s s s s  y y y z z z z z'], ['    c d e f   a g g t'], ['    a b        c d e f   a g g  h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t      a a a a b b d d d d f f f g h    a b        c d j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y   t  t t t u v w x y z'], ['    x b     a       a a a a b b d d d d f f f g h    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y   b  c d e f   a g g  t t'], ['o o o o o o p p p p p p q q q q q q r r r    a b  s s s s s s t t t t      a a a a b b d d d d f f f g h    a b        c d j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y   t  t t t u v w x y z r r r s s s s s s t t t t t t u u u  z z z z z'], ['l m m m  o t x  t    a b c d e f   a g g  t t m m m m m n n n n n n n n n n n n n n o o p p q o o o o o p p p p p p q q q q q q r r r r r s s s s s  s t t t t t t u u z z z z z q r r s'], ['    x      a g g    t'], ['    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r  r r s s s t t t t t t t t u v w x y '], ['p p q q q r r r s s s t t t u u u v v w  w x x y y z z'], ['c a  a a a b b d d d d  f f f g h i'], ['o o o o       a a a a b b d d d d f f f g h i    x      a b c d e f   a g g  t t o o p p  p p p p q q q q q  q r r r r r r s s s s s s t t t t t t u u z z z z z'], ['    a b        c d e f   a g g h h h s t t t t t t t t u v w x y '], ['o o o o o o p p p p p p q q q q q  q r r r r r r s s s s s s t t t t t t u u u u u u  v v v v v v w w w w w w x x x x x x y y y y y z z'], ['      a  b  c d e  f   a g g  t t'], ['     c a  a a a b b d d d d  f f f g h i g h i  '], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s  s t t t t t t u u u  z z z z z'], ['    x       a b c d e f   a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['l m m m m  p  p q q r r s'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u  v v v v x x x x y y y y y z z'], ['     b c d  e f   a g g  t t'], ['       a  b c d e f   a g g  t t'], ['    a b        f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s t t t t t t t t u v w x y '], ['o o o o o o p p p p p p q q q q q  q r r r r r r s s s s s s t t t  z z'], ['    x    a b        c d e f   a g g h h h i j j j   o o o o       a a a a b b d d d d f f  f     a a a a b b d d d d f f f g h i  w x y z      a b c d e f   a g g  t t'], ['d       g h i d '], ['    x      a g g t'], ['x y a a a b b d d d d f f f g h i i i  i i j j j  j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t  t t t u v w x y z t t t u v w'], ['     a a a a b b f f g h i  e'], ['    a b        c d e f   a g g  h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t  v    a a a a b b d d d d f f f g h    a b        c d j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y   t  t t t u v w x y z'], ['    x  o o o o        a a a a b b d d d d f f  f g h i    x      a b c d e f   a z s s t t t t t t u u z z z z z d e f   a t t      a b c d e f   a g g  t t'], ['   g h i  '], ['   f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y z'], ['a    x      a b c d e f   a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s t t t t t'], ['    x        a  b  c d e  f   a  t t'], ['     a a a a  e'], ['x y a a a b b d d  j j j j k k k k l l l l m n p q r r r s s s s s s s t t t t t t t t v w'], [' p p q q r r r s s  s t t t u u u v v w w x x y y z z    a a a a b b d d d d f f f g h i  '], ['     a a a a b b d d d d f f f g h o o o o o o p p p p p p q q q q q q r r r    a b  s s s s s s t t t t      a a a a b b d d d d f f f g h    a b        c d j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y   t  t t t u v w x y z r r r s s s s s s t t t t t t u u u  z z z z z  '], ['    x      a g g    x      a b c  d e f   a g  g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['o o o o o o p p p p p p q r r  z z'], ['    x      a b  c d e f g  a g g  t t'], ['     b c d  e f   a g g  g t t'], ['p p q q r r r s s  s t t t u u u v v w     a a a a b b f f g h i  e w x x y y z z'], ['a    x       a b c d e f   a g g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['x y a a a b b d d  j j j j k k k k l l l l m n p q r r r s s s s s s s t t t t t t t t v     a a a a b b d d d d f f f g h o o o o o o p p p p p p q q q q q q r r r    a b  s s s s s s t t t t      a a a a b b d d d d f f f g h    a b        c d j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y   t  t t t u v w x y z r r r s s s s s s t t t t t t u u u  z z z z z   w'], ['c a a a a b b    x b     a       a a a a b b d d d d f f f g h    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y   b  c d e f   a g g  t t d d d d f f f g h i'], ['    a b        c d e f   a g g  h h h i j j j k k k l   a b        c d j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y   t  t t t u v w x y z'], ['o o o o o o p p p p p p q q q q q q r r r r r s s s s s  s t t t t t t  u u z z z z z'], ['    a b        f   a g g h h    x      a g g t h i j j j k k k l l l l m n o p q r r r s s s t t t t t t t t u v w x y '], ['    a b        f   a g g h h    x      a g g t h i j j    x      a  b  c d e f   a g g  t t j k k k l l l l m n o p q r r r s s s t t t t t t t t u v w x y '], ['c a a  a a b b d d d d f f f  g h i'], ['       a a a a b b d d   t t'], [' p p q q r r r s s  s t t t u u u v v w w x x y y z z     a a a a b b d d d d f f f g h i  '], ['     a a a a b b d  d d d f f f g h i  e'], ['       a     c a  a a a b b d d d d  f f f g h i g h i   f   a g g  t t'], ['a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v d e f g'], ['o o o o o o p  x x     a a a a  e x x y y y y y z z'], ['       a a a a b b d d d d f f a g g  t t'], ['  o o o o       a a a a b b d d d d f f f g h i    x      a b c d e f   a g g  t t o o p p p p p p q q q q q q r r r r r r s s  s s s s t t t t t t u u z z z z z d e f   a t  t'], ['    x     x      a g g t     a b  c d e f   a g g t'], ['d       g h i  '], ['     a  a a a  e'], ['l m m m  o t x  t    a b c d e f   a g g  t t m m m m m n n n n n n n n n n n n n n o o p p q o o o o o p p p p p p q q q q q q r r r r r s s s s s   s t t t t t t u u z z z z z q r r s'], ['o o o o       a a a a b b d d d d f f f g h    x      a g g    t r r r s s s s s s t t t t t t u u z z z z z'], ['x y a a a b b d d  j j j j k k k k l l l l m n p q r r r s s s s s s s t t t t t t t t v w       a  b c d e f   a g g  t t'], ['o o o o       a a a a b b d d d d f f f g h i    x      a b c d e f   a g g  t t o o p p p p p p q q q q q q r r z z'], ['  g    g h i      x     x      a b  c d e f   a g g  t t  c d e f   a g g  t t'], ['  o o o o        a a a a b b d d d d f f  f g h i    x      a b c d e f    a g g  t t o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u z z z z z d e f   a t t'], ['o o o o o o p p p p    x      a  b  c d e f  t p p q q q q q q r r r r r r s s s s s  s t t t t t p p q q r r r s s  s t t t u u u v v w w x x y y z z    a a a a b b d d d d f f f g h i   t u u u  z z z z z'], ['a b c d e f g    x b     a  b  c d e f   a t t h i j k l m n o p q r s t  u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g'], [' p p q   a a a  d d d f f f g h i  '], ['c a a a a b b    x b     a       a a a a b b d d d d f f f g h    a b    r s s s s s s s t t t t t t t t u v w x y   b  c d e f   a g g  t t d d d d f f f g h i'], ['  o o o o       a a a a b b d d d d f f f g h i    x      a b c d e f   a g g  t t o o p p p p p p q q q q q q r r r r r r s s  s s s s t t t t t z z z d e  f   a t  t'], ['    x   o o o o o o p p p p p p q q q q q q r r r r r r s s s s s  s t t  t t t u  u z z z z z   a  b  c d e f e  a g g y t t'], ['    a b        c d t t t u v w x y '], ['   a b        c d e f   a g g h h h s t t t t t t t t u v w x y '], ['  o o o o         a a a a b b d d d d f f  f g h i    x      a b c d e f   a z s s t t t t t t u u z z z z z d e f   a t t'], ['    n   a  b c d e f   a g g  t t'], ['     a a a  a b b f f g h i  e'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s  s t t t t t t u u z     a a a a b b d d d d f f f g h    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y    z z z z'], ['o o o o o o p p p p p p q q q q q q r    x b     a  b  c d e f   a t t r r r r r s s s s s  s t t t t t t u u u  z z z z z'], ['d      g h  i  '], ['d    x      a b c d e f   a g g  t t      g h  i  '], ['o o o o o o p p p p    x      a  b  c d e f  t p p q q q q q q r r r r r r s s s s s  s t t t t t p p q q  r r r s s  s t t t u u u v v w w x x y y z z    a a a a b b d d d d f f f g h i   t u u u  z z z z z'], ['o o o o o o p p p p p p q q q q q q r r r r r s s s s s  s t t t t t t  u u z z z z'], ['p p q q q  r r r s s s t t t u u u v v  g    g h i   w w x x y y z z'], ['o o o o       a a a a b b d d d d f f f g h i    x      a b c d e f  a a g g  t t o o p p p p p p q q q q q q r r z z'], ['o o o o o o p  x x     a a a a  e x x y  y y y y z z'], ['  o o o o         a a a a b b d d d d f f  f g h i l m m m  o t x  t    a b c d e f   a g g  t t m m m m m n n n n n n n n n n n n n n o o p p q o o o o o p p p p p p q q q q q q r r r r r s s s s s   s t t t t t t u u z z z z z q r r s   x      a b c d e f   a z s s t t t t t t u u z z z z z d e f   a t t'], ['o o o o       a a a a b b d d d d f f f g h i    x      a b c    x b     a       a a a a b b d d d d f f f g h    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y   b  c d e f   a g g  t t d e f   a g g  t t o o p p p p p p q q q q q q r r z z'], ['    a b        c d e f   a g g  h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t      a b        c d t t t u v w x y  v w x y z'], ['   o o o o o o p p p p p p q q q q q q r r r r r s s s s s  s t t t t t t  u u z z z z x      a b   c d e f   a g g t'], ['    x b     a       a a a a b b d d d d f f  t t t t t t t u v w x y   b  c d e f   a g g  t t'], ['    x      a b c j d e f   a g  g h h h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['    x      f   a g g    t'], ['l m m m m  p  p q q r s'], ['p p q q q r r r s s s t t t u u u v v  g    g h i    a b        f   a g g h h    x      a g g t h i j j j k k k l l l l m n o p q r r r s s s t t t t t t t t u v w x y    w w x x y y z z'], ['  o o o o        a a a a b b d d d d f f  f g  h i    x      a b c d e f   z z d e f   a t t'], ['x y a a a b b d d d d f f f g h i i i i i j j j j k k k k l l l l m n p q r r o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u  v v v v x x x x y y y y y z z z t t t u v w'], ['    x b     a  b  c d e f    a  g g  t t'], ['    x       x b     a  b  c d e f   a t t   a  b  c d e  f   a g g  t t'], ['p p q q q r r r s s s t t t u u u v v  g    g h i    w w x x y y z z'], ['l m m m      a a a a b b d d d d f f f g h o o o o o o p p p p p p q q q q q q r r r    a b  s s s s s s t t t t      a a a a b b d d d d f f f g h    a b        c d j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y   t  t t t u v w x y z r r r s s s s s s t t t t t t u u u  z z z z z  m  p  p q q r s'], ['    n   a  b c d e f   a g g l'], ['    x      a b c j d e f   a g  g h  h h i j j j k k k k l l l l m n o p q r r r s s s s s s s t t t t t'], ['l m m m m  p  p q q r s    x      a b  c d e f   a g g  t'], ['    x     a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v d e f g a b c d e f   a g g  t t'], ['  a b  c d e f   a g g t'], ['l m m m  o t x  t    a b c d e f   a g g  t t m m m m m n n n n n n n n n n n n n n o o p p q o o o o o p p p p p p q q q q q q r r r r r s s s s s  s t t t t t t u u    a b        f   a g g h h    x      a g g t h i j j j k k k l l l l m n o p q r r r s s s t t t t t t t t u v w x y  z z z z z q r r s'], ['d        g h i d '], ['l m n n n o o p p q o o o o o o p p p p q q q r r r r r s s s s s  s t t t t t t u u z z z z z q r r s'], ['    x b     a  b  c d e f    a  g  t t'], ['    a b        c d e f   a g g h h h i  j j j k k  k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y z'], ['    x b     a       a a a a b b d d d d f f f g h    a b        c  d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y   b  c d e f   a g g  t t'], ['    a b        c d e f   a g g  h h h i j j j k k k l   a b        c d j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v  w x y   t  t t t u v w x y z'], ['    x      a b   c d e f     o o o o o o p p p p p p q q q q q q r r r r r s s s s s  s t t t t t t  u u z z z z x      a b   c d e f   a g g t a g g t'], ['    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s o o o o       a a a a b b d d d d f f f g h i    x      a b c d e f  a a g g  t t o o p p p p p p q q q q q q r r z z s s t t t t t  t t t u v w x y z'], ['p  p q q r r r s s s t t t u u u v v w w x x y y z z'], ['     a a a a b b d d d d f f f g h    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v '], ['    x      a b  c d e f g  a g g   t'], ['l m m m m m m m m n n n n n n n n n  n n n  n n o o p p q q r r s'], ['d      g   '], ['d       g h i  d '], ['x y a a a b  b d d  j j j j k k k k l l l l m n p q r r r s s s s s s s t t t t t t t t v w'], ['      g h i  t'], ['p p q q r r r s s s t t t u x x y y  z z'], ['    a b        c d e  f   a g g h h h i j j j k k k l l l l m n  o p q r r r s s s s s s s t t t t t  t t t u v w x y z'], ['    n   a  b c d e f   a g g   t t'], ['o o o o       a a a a b b d d d d f f f g h i    x      a b c d e f   a g g  t t o o p p p p p p q q q q q q r r r r r r s s     x b     a       a a a a b b d d d d f f f g h    a b        c  d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y   b  c d e f   a g g  t t t t t t t u u z z z z z'], ['  x y z x y z x y z x y z x y z x y z x y z x y z x  x      a b  c d e f   a g g t'], ['     a a a a b b    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s t t t t t t t t u v w x y  f f g h i  e'], ['    x   o o o o o o p p p p p p q q q q q q r r r r r r s s s s s  s t t  t t t u  u z z z z z   a  b  c d e f e  a g g y t '], ['  o o o o        a a a a b b d d d d f f  f g  h i    x      a b c d e f   a z s s t t t t t t u u z z z z z d e f   a t t'], ['a b c d e f z b c d e  f g'], ['    a b        c d e  f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s t t t t t t t t u  v w x y '], ['  o o o o        a a a a b b d d d d f f  d e f    a g g  t t o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u z z z z z d e f   a t t'], ['    a b         c d e f   a g g h h h i j j j k k k l l l l m n o p  v w x y '], ['o o o o       a a a a b b d d d d f f f g h i    x      a b c d e f   a g g  t t o o p p p p p p q q q q q q r r z  z'], ['l m m m  o t x  t    a b c d e f   a g g  t t m m m m m n n n n n n n n n n n n n n o o p p q o o o o o p p p p p p q q q q q q r r r r r s s s s s  s t t t t t t u u   w x y  z z z z z q r r s'], ['    x      a g g    x      a b c  d e f   a g  g h h h h i j j j k k k k l s s s s  t t'], ['   o o o o o o p p p p p p q q q q q q r r r r r s s s s s  s t t t t t t  u u z z z z x      a b   c d e f   a g  g t'], ['x y a a a b b d d  j j j j k k k k l l l l m q r r r s s s s s s s t t t t t t t t v w       a  b c d e f   a g g  t t'], ['    a b         c d e  f   a g g h h h i j j j k k k l l l l m n  o p q r r r s  t u v w x y z'], ['     b  c d  e f   a g g  g t t'], ['    a b        c d e f   a g g h h h i  j j j k k k l l l l m n o p q r r r  s s s s s s  y z'], [' p p q q r r r s s  s t t t u u u v v w w x x y y z z     a a a a b b d d d d f f f g h i    a b        f   a g g h h    x      a g g t h i j j    x      a  b  c d e f   a g g  t t j k k k l l l l m n o p q r r r s s s t t t t t t t t u v w x y   '], ['      a      a b         c d e f   a g g h h h i j j j k k k l l l l m n o p  v w x y b  c d e  f   a g g  t t'], ['     a a a a b b d d d d f f f g h o o o o o o p p p p p p q q q q q q r r r r r s s s s s  s t t t t t t u u z z z z z   a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v '], ['    x b     a  b  c d e f    a   g g  t t'], ['      g h i   '], ['  a  b c d e f   a g g  t t'], ['a b c d e f g    x b   i j k l m n o p q r s t  u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g'], ['  o o o o       a a a a b b d d d d f f  f g h i    x      a b c d e f   a g g  t t o o p p p p p    x      a g g    x      a b c  d e f   a g  g h h h h i j j j k k k k l s s s s  t t a t t'], ['l m m m m m m m m n n n n n n n n n n n n n n o o p p q p p p q q q q q q r r r r r s s s s s  s t t t t t t u u z z z z z q r r s'], [' d   x       x b     a  b  c d e f    a t t   a  b  c d e  f   a g g  t t'], ['o o o o o o p p p p p p q q q q q q r r r r r s s s s s  s t t t t t t  u u z z z z x y a a a b b d d d d f f f g h i i i i i j j j j k k k k l l l l m n p q r r r s s s s s s s t t t t t    a b        c d e f   a g g h h  j k k k l l l l m n o p q r r r s s s s s s s t t t t t  t t t u v w x y z t t t u v w'], ['c a a a a b b    x b      a       a a a a b b d d d d f f f g h    a b    r s s s s s s s t t t t t t t t u v w x y   b  c d e f   a g g  t t d d d d f f f g h i'], ['l m m m m  p m p q q r s'], ['    x       a  b     t t t t t u  v w x y    a g g    t'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s o o o o o o p p p p p p q q q q q q r r r  z z s t t t t t t u  u z z z z z'], ['d      g h i d l'], ['    a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t    a b        c d e f   a g g  h h h i j j j k k k l   a b        c d j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y   t  t t t u v w x y z t t t t t u v w x y z'], ['    x      a b   c d e f   a g g  t'], ['    a b        c d e  f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s t t t t t t t t u  v w x y h'], ['   g     a a a a b b d d d d f f f g h i  e h i  '], ['      x   a   a  b  c d e f  t'], ['    t'], ['o o o o o o  p p p p p p q q q q q q r r r r r r s s s s s  s t t t t t t u u  u  z z z z z'], ['   o t x      a  b c d e f  t t'], ['a b c d e f g    x b  d       g h i  d  c d e f   a t t h i j k l m n o p q r s t  u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g'], ['l m m m  o t x  t    a b c d e f   a g g  t t m m m m m n n n n n n n n n n n n n n o o p p q o o o o o p p p p p p q q q q q q r r r r r s s s s s   s t t t t t t u u z z z z z q r  s'], ['  o o o o       a a a a b b d d d d f f  f g h i    x      a b c d e f   a g g  t t o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u z z z z z d e f   a t t     a a a'], ['s    a b         c d e f   a g g h h h i j j j k k k l l l l m n o p  v w x y '], ['  o o o o        a a a a b b d d d d f f  d e f    a g g  t t  o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u z z z z z d e f   a t t'], ['l m m m m  p  p q o o o o o o p p p p p p q q q q q  q r r r r r r s s s s s s t t t  z z r s'], ['x y a a a b  b d d  j j j j k k k k l    x b     a  b  c d e f    a g g  t t l l l m n p q r r r s s s s s s s t t t t t t t t v w'], ['l m m m m m m m m n o q q r r s'], ['    x     x  g    a g g t     a b  c d e f   a g g t'], ['  o o o o   d     a a a a b b d d d d f f  f g h i    x      a b c d e f   a g g  t t o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u z z z z z d e f   a t t'], ['     x      a b  c d e  f   a g g  t t'], ['  x y z x y z x y z x y z x y z x y z x y z x y z x  x      a b  c d e f   a  g g t'], ['o o o o o o p p p p p p q q q q q q r    x b     a  b  c d e f   a t t u  z z z z z'], ['   e c d e f   a g g t    a b        c d e f   a g g  h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t      a a a a b b d d d d f f f g h    a b        c d j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y   t  t t t u v w x y z'], ['    x      e c d e f   a g g t    a b        c d e f   a g g  h h h i j j j k k k l l l l m n o p q r r r s s s s s s s t t t t      a a a a b b d d d d f f f g h    a b        c d j j j k k k l l l l m n o p q r r r s s s s s s s t t t t t t t t u v w x y   t  t t t u v w x y z   a b c d e f   a g g    t'], ['  o t x  t    a  b c d e f   a g g  t t'], ['a b c d e  f g h i j k l m n o p q r s t u v w x y z a b c d e f g    x      a b  c d e f   a g g  t h i j k l m n o p q r s t u v w x y z a b c d e f g'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s  s t t t t t  t u u u  z z z z z'], ['o o o o o o p p p p p p q q q q q  q r s s s s t t t  z z'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s o o o o o o p p p p p p q q q q q q r r r  z z s t t t z z z z'], ['o o o o o o p p p p p p q q q q q q r r r r r r s s s s s s t t t t t t u u u u u u  v v v v v v w w w w w w x x x x x x y y y y  z z'], ['    a b        c d e f   a g g  h h h i j j j k k k l l l l m n o p q  r r r s s s s s s s t t t t t  t t t u v w x y z'], ['d       g h i  d'], ['      g h'], ['    x      a b  c d e f     a b        c d e f   a g g h h h i j j j k k k l l l l m n o p q r r r s s s t t t t t t t t u  v w x y g  a g g   t'], ['x y a a a b  b d d  j j j j k k k k l    x b     a  b  c d e f    a g g o o o o o o p p p p p  p q  q q q q q r r r r r r s s s    x      a b c d e f   a g g  t t s s  y y y z z z z z t t l l l m n p q r r r s s s s s s s t t t t t t t t v w'], [' p p q q r  r r s s  s t t t u u u v v w w x x y y z z    a a a a b b d d d d f f f g h i  ']]\n    results = [{'a': 2, 'b': 2}, {'a': 2, 'b': 2}, {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, {'r': 1, 't': 1, 'g': 1}, {'b': 4}, {}, {'a': 1}, {'x': 3}, {'c': 1, 'a': 1, 'r': 1, 's': 1}, {'l': 2}, {'b': 5}, {'z': 2}, {'a': 7, 'b': 7}, {'c': 4}, {'p': 3, 'r': 3}, {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1}, {'o': 4}, {'b': 5}, {'m': 3}, {'a': 7}, {'o': 4}, {'o': 4}, {'b': 5}, {'o': 4}, {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1}, {'p': 1, 'l': 1, 'e': 1}, {'o': 4}, {'p': 1, 'u': 1, 'z': 1, 'l': 1, 'e': 1}, {'p': 3, 'r': 3}, {'p': 3, 'r': 3}, {'a': 7}, {'p': 1, 'l': 1, 'e': 1}, {'j': 2, 'o': 2}, {'p': 1, 'r': 1}, {'b': 6}, {'p': 1}, {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1}, {'b': 4}, {'m': 3}, {'j': 2}, {'j': 2, 'o': 2}, {'j': 2}, {'a': 7}, {'b': 5}, {'p': 1}, {'r': 3}, {'j': 2}, {'o': 4}, {'j': 2}, {'j': 2}, {'x': 3}, {'j': 2}, {'j': 2}, {'a': 1, 'b': 1, 'c': 1, 'e': 1, 'f': 1, 'g': 1}, {'c': 4}, {'z': 2}, {'o': 4}, {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'p': 1, 'f': 1, 'g': 1}, {'o': 4}, {'x': 3}, {'m': 3}, {'b': 5}, {'j': 2}, {'m': 3}, {'b': 6}, {'h': 1, 'e': 1}, {'m': 3, 'o': 3}, {'l': 2, 'j': 2}, {'p': 4}, {'r': 3}, {'j': 2}, {'z': 2}, {'z': 2}, {'z': 2}, {'p': 1}, {'s': 1}, {'o': 6}, {'m': 3}, {'l': 2, 'j': 2}, {'o': 4}, {'p': 1}, {'b': 5}, {'b': 5}, {'b': 5}, {'r': 3}, {'c': 4}, {'p': 3, 'r': 3}, {'r': 1}, {'b': 3}, {'m': 3}, {'j': 2}, {'o': 6}, {'a': 7}, {'p': 3, 'r': 3}, {'l': 2, 'j': 2}, {'p': 8}, {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1}, {'p': 1}, {'p': 1}, {'a': 7}, {'a': 7}, {'p': 2}, {'p': 1, 'l': 1, 'e': 1}, {'r': 3, 'j': 3}, {'a': 4, 'd': 4}, {'q': 3, 'r': 3, 's': 3, 't': 3, 'u': 3}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6, 'u': 6, 'v': 6, 'w': 6, 'x': 6}, {'n': 14}, {'a': 4, 'd': 4}, {'x': 9}, {'t': 8}, {'a': 3, 'b': 3, 'c': 3, 'd': 3, 'e': 3, 'f': 3, 'g': 3}, {'t': 8}, {'s': 7}, {'h': 1}, {'l': 1}, {'t': 8}, {'d': 1}, {'u': 1}, {'b': 1}, {'t': 8}, {'p': 1}, {'z': 1}, {'d': 8, 't': 8}, {'g': 1}, {'t': 8}, {'s': 1}, {'t': 8}, {'c': 1}, {'t': 8}, {'n': 1}, {'v': 1}, {'x': 9}, {'f': 1}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6, 'u': 6, 'v': 6, 'w': 6, 'x': 6}, {'i': 1}, {'t': 8}, {'t': 8}, {'s': 7}, {'t': 1}, {'t': 6}, {'o': 1}, {'t': 8}, {'m': 1}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6, 'u': 6, 'v': 6, 'w': 6}, {'x': 9}, {'t': 6}, {'w': 1}, {'s': 14}, {'x': 1}, {'r': 1}, {'j': 1}, {'t': 10}, {'s': 7}, {'t': 8}, {'e': 1}, {'t': 8}, {'a': 4, 'd': 4}, {'x': 8, 'z': 8}, {'s': 7}, {'s': 14}, {'t': 6}, {'s': 13}, {'x': 9}, {'s': 14}, {'x': 5}, {'s': 13}, {'s': 7}, {'n': 13}, {'t': 8}, {'s': 14}, {'x': 9}, {'k': 1}, {'s': 14}, {'a': 4, 'd': 4}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6, 'u': 6, 'v': 6, 'w': 6}, {'a': 4, 'd': 4}, {'t': 14}, {'y': 1}, {'s': 13}, {'x': 7}, {'s': 13}, {'d': 4}, {'x': 7, 'y': 7, 'z': 7}, {'s': 7}, {'x': 10, 'y': 10, 'z': 10}, {'x': 2, 'y': 2, 'z': 2}, {'a': 4, 'd': 4}, {'t': 11}, {'x': 9}, {'x': 5}, {'a': 4, 'd': 4}, {'s': 28}, {'t': 8}, {'t': 8}, {'q': 3, 'r': 3, 's': 3, 't': 3, 'u': 3}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6, 'u': 6}, {'x': 8, 'z': 8}, {'s': 21}, {'s': 14}, {'p': 7}, {'t': 8}, {'x': 8, 'z': 8}, {'s': 7}, {'t': 16}, {'x': 8, 'z': 8}, {'t': 16}, {'x': 9}, {'s': 7}, {'i': 5}, {'a': 4}, {'t': 27}, {'s': 7}, {'a': 4}, {'x': 6}, {'x': 13}, {'t': 6}, {'t': 17}, {'s': 13}, {'t': 6}, {'x': 10}, {'s': 25}, {'x': 9}, {'a': 4}, {'y': 7, 'z': 7}, {'t': 8}, {'x': 8, 'z': 8}, {'f': 3}, {'x': 8, 'z': 8}, {'s': 31}, {'t': 14}, {'t': 6}, {'x': 10}, {'x': 10, 'y': 10, 'z': 10}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6, 'u': 6, 'v': 6, 'w': 6}, {'t': 8}, {'s': 14}, {'s': 16}, {'s': 14}, {'a': 4}, {'a': 4}, {'t': 14}, {'a': 4}, {'s': 20}, {'t': 8}, {'s': 26}, {'a': 4, 'd': 4}, {'x': 9}, {'t': 27}, {'a': 4}, {'s': 14}, {'s': 25}, {'t': 6}, {'s': 7, 't': 7}, {'t': 27}, {'t': 8}, {'a': 4, 'd': 4}, {'t': 13}, {'a': 11}, {'s': 20}, {'t': 8}, {'s': 19, 't': 19}, {'t': 8}, {'s': 20}, {'s': 20}, {'x': 9}, {'t': 8}, {'x': 8, 'z': 8}, {'s': 14}, {'s': 26}, {'x': 9}, {'t': 6}, {'t': 9}, {'a': 11}, {'s': 25, 't': 25}, {'t': 8}, {'t': 12}, {'t': 5}, {'x': 6}, {'x': 8, 'z': 8}, {'s': 16}, {'t': 8}, {'f': 3}, {'x': 9}, {'s': 19, 't': 19}, {'t': 27}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6, 'u': 6, 'v': 6}, {'t': 6}, {'t': 27}, {'x': 2}, {'v': 6, 'w': 6}, {'x': 12}, {'t': 10}, {'x': 10, 'y': 10, 'z': 10}, {'x': 2}, {'z': 6}, {'x': 10, 'y': 10, 'z': 10}, {'s': 8, 't': 8}, {'x': 8, 'y': 8, 'z': 8}, {'x': 9}, {'a': 4}, {'x': 18}, {'x': 10, 'y': 10, 'z': 10}, {'a': 10}, {'q': 3, 'r': 3, 's': 3}, {'x': 6}, {'s': 25}, {'s': 20}, {'x': 5}, {'y': 8, 'z': 8}, {'s': 25}, {'t': 19}, {'a': 5}, {'y': 7}, {'x': 8}, {'x': 9}, {'x': 8, 'z': 8}, {'s': 20}, {'a': 10, 't': 10}, {'x': 9}, {'x': 5}, {'t': 25}, {'s': 10}, {'t': 25}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6}, {'v': 6}, {'t': 3, 'u': 3}, {'s': 16}, {'x': 9, 'y': 9, 'z': 9}, {'t': 14}, {'x': 10}, {'f': 3}, {'t': 16}, {'a': 4, 'd': 4}, {'a': 16}, {'t': 8}, {'x': 6}, {'s': 13}, {'s': 7}, {'t': 29}, {'w': 6}, {'t': 5}, {'l': 4, 't': 4}, {'o': 6, 's': 6, 't': 6, 'u': 6}, {'h': 7}, {'s': 13}, {'s': 16}, {'a': 4}, {'x': 2}, {'t': 6}, {'i': 5}, {'t': 14}, {'s': 14}, {'s': 33}, {'x': 5, 'y': 5, 'z': 5}, {'s': 14}, {'a': 4}, {'t': 4}, {'s': 14, 't': 14}, {'a': 4}, {'t': 3}, {'s': 14, 't': 14}, {'t': 24}, {'x': 8}, {'a': 4, 'd': 4}, {'t': 9}, {'t': 22}, {'x': 5}, {'x': 9}, {'x': 8, 'z': 8}, {'a': 2, 'b': 2, 'c': 2, 'd': 2}, {'x': 5}, {'a': 3, 'b': 3, 'c': 3, 'd': 3}, {'a': 1}, {'\u00e4': 1, '\u00e5': 1, '\u00f6': 1}, {'a': 2, 'g': 2, 't': 2}, {'a': 2, 'g': 2, 't': 2}, {'n': 14}, {'a': 2, 'g': 2, 't': 2}, {'a': 4, 'd': 4}, {'t': 8}, {'g': 1, 'h': 1, 'i': 1}, {'o': 6, 'p': 6, 'q': 6, 'r': 6}, {'t': 8}, {'c': 1, 'g': 1, 'h': 1, 'i': 1}, {'t': 3}, {'t': 8}, {'b': 2, 'a': 2, 'g': 2, 't': 2}, {'n': 14}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6, 'u': 6, 'v': 6, 'w': 6, 'x': 6}, {'t': 8}, {'t': 16}, {'s': 7}, {'q': 1}, {'t': 4}, {'a': 4, 'd': 4}, {'o': 6, 'p': 6, 'q': 6, 'r': 6}, {'a': 6}, {'n': 14}, {'a': 4, 'd': 4}, {'t': 8}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6}, {'b': 2, 'c': 2, 'd': 2, 'e': 2, 'f': 2}, {'n': 14}, {'t': 8}, {'b': 2, 'a': 2, 't': 2}, {'a': 2, 'g': 2, 't': 2}, {'a': 2, 'e': 2, 'g': 2, 't': 2}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6}, {'l': 4}, {'t': 8}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6, 'u': 6, 'v': 6, 'w': 6, 'x': 6}, {'t': 10}, {'t': 8}, {'o': 6, 'p': 6, 'q': 6, 's': 6, 't': 6}, {'a': 2, 'g': 2}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6}, {'t': 3}, {'a': 2, 'g': 2}, {'a': 5, 'b': 5}, {'m': 4}, {'t': 8}, {'s': 7}, {'t': 8}, {'a': 2, 'g': 2}, {'t': 16}, {'t': 11}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6}, {'n': 14}, {'n': 14}, {'g': 2}, {'t': 8}, {'t': 8}, {'q': 3, 'r': 3, 's': 3, 't': 3, 'u': 3}, {'t': 10}, {'t': 8}, {'a': 2, 'g': 2}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6, 'u': 6, 'v': 6, 'w': 6, 'x': 6}, {'t': 10}, {'d': 1, 'g': 1, 'h': 1, 'i': 1}, {'t': 8}, {'o': 6}, {'r': 3, 's': 3, 't': 3, 'u': 3}, {'o': 6, 'p': 6, 'q': 6}, {'s': 7}, {'r': 3, 's': 3, 't': 3, 'u': 3}, {'n': 14}, {'r': 3, 's': 3, 't': 3}, {'t': 24}, {'b': 2, 'a': 2, 'g': 2, 't': 2}, {'n': 14}, {'t': 8}, {'a': 10}, {'x': 1, 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 't': 1}, {'a': 2, 'g': 2, 't': 2}, {'a': 2, 'g': 2, 't': 2}, {'t': 10}, {'a': 2, 't': 2}, {'n': 14}, {'d': 2}, {'a': 2, 'g': 2, 't': 2}, {'t': 8}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6}, {'o': 6}, {'g': 2}, {'t': 16}, {'t': 10}, {'t': 22}, {'n': 14}, {'g': 2}, {'t': 8}, {'q': 3, 'r': 3, 's': 3, 't': 3, 'u': 3}, {'a': 4, 'd': 4}, {'t': 8}, {'t': 8}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6, 'u': 6, 'v': 6, 'w': 6, 'x': 6}, {'a': 2, 'g': 2, 't': 2}, {'a': 4, 'd': 4}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6}, {'s': 7}, {'m': 4}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6, 'u': 6}, {'g': 2, 't': 2}, {'a': 2, 'g': 2, 't': 2}, {'t': 8}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6}, {'a': 12}, {'d': 2}, {'g': 2}, {'t': 11}, {'a': 4}, {'t': 16}, {'t': 10}, {'g': 1, 'h': 1, 'i': 1}, {'t': 8}, {'t': 5}, {'a': 2, 't': 2}, {'a': 4}, {'t': 8}, {'a': 4, 'd': 4}, {'t': 22}, {'s': 7}, {'o': 6, 'p': 6}, {'g': 3}, {'g': 3}, {'a': 4}, {'s': 7}, {'t': 30}, {'a': 12}, {'t': 12}, {'o': 6, 'p': 6, 'q': 6, 's': 6, 't': 6}, {'t': 9}, {'t': 11}, {'a': 4, 'd': 4}, {'a': 4}, {'a': 4, 'd': 4}, {'a': 4, 'd': 4}, {'a': 6}, {'d': 3, 'e': 3, 'f': 3, 'g': 3}, {'o': 6}, {'a': 5}, {'t': 10}, {'g': 4}, {'d': 1, 'g': 1, 'h': 1, 'i': 1}, {'a': 4}, {'n': 14}, {'t': 7}, {'t': 10}, {'o': 6, 'a': 6, 'p': 6, 'q': 6}, {'g': 6}, {'t': 10}, {'t': 10}, {'a': 5, 'b': 5}, {'a': 3, 'd': 3, 'f': 3}, {'a': 11}, {'t': 9}, {'t': 7}, {'t': 3}, {'t': 8}, {'t': 8}, {'a': 2, 'g': 2, 't': 2}, {'a': 4}, {'t': 14}, {'t': 8}, {'d': 1, 'g': 1, 'h': 1, 'i': 1}, {'g': 3}, {'t': 10}, {'o': 6, 'p': 6, 'q': 6, 's': 6, 't': 6}, {'q': 3, 'r': 3, 's': 3, 't': 3, 'u': 3}, {'a': 7}, {'o': 6}, {'t': 18}, {'a': 14}, {'s': 7, 't': 7}, {'t': 7}, {'t': 9}, {'s': 7}, {'g': 2}, {'m': 4}, {'t': 12}, {'a': 6, 'd': 6}, {'t': 9}, {'b': 2, 'a': 2, 'g': 2, 't': 2}, {'a': 4, 't': 4}, {'q': 3, 'r': 3, 's': 3, 't': 3, 'u': 3}, {'t': 22}, {'a': 2, 'g': 2}, {'s': 7}, {'m': 4}, {'g': 5}, {'a': 2, 'g': 2}, {'t': 19}, {'d': 2}, {'o': 8}, {'b': 2, 'a': 2, 't': 2}, {'t': 8}, {'t': 10}, {'t': 12}, {'t': 8}, {'t': 10}, {'r': 3, 's': 3, 't': 3, 'u': 3}, {'t': 8}, {'g': 3}, {'n': 14}, {'d': 1, 'g': 1}, {'d': 2}, {'t': 8}, {'g': 1, 'h': 1, 'i': 1, 't': 1}, {'r': 3, 's': 3, 't': 3}, {'t': 8}, {'a': 2, 'g': 2, 't': 2}, {'t': 17}, {'x': 10}, {'t': 8}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6}, {'t': 8}, {'b': 2, 'c': 2, 'd': 2, 'e': 2, 'f': 2}, {'t': 8}, {'t': 10}, {'l': 4}, {'o': 6, 'a': 6, 'p': 6, 'q': 6}, {'n': 14}, {'g': 4, 'h': 4, 'k': 4, 's': 4}, {'t': 7}, {'t': 10}, {'l': 4}, {'g': 3}, {'s': 6}, {'t': 14}, {'a': 4, 'g': 4, 'l': 4}, {'t': 14}, {'b': 2, 'a': 2, 'g': 2, 't': 2}, {'g': 1, 'h': 1, 'i': 1}, {'a': 2, 'g': 2, 't': 2}, {'b': 4}, {'a': 10}, {'n': 14}, {'a': 4, 't': 4}, {'t': 22}, {'a': 11}, {'m': 5}, {'t': 6}, {'o': 12, 'p': 12, 'q': 12}, {'d': 2}, {'t': 20}, {'a': 2, 'g': 2}, {'t': 8}, {'a': 4, 'd': 4}, {'a': 2}, {'t': 1}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6}, {'t': 3}, {'d': 6}, {'n': 14}, {'a': 10, 't': 10}, {'l': 4}, {'t': 10}, {'p': 8}, {'t': 10}, {'m': 8}, {'g': 5}, {'t': 10}, {'a': 2, 'g': 2, 't': 2}, {'x': 10}, {'o': 6, 'p': 6, 'q': 6}, {'t': 17}, {'t': 18}, {'t': 4}, {'a': 5, 'g': 5}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6}, {'o': 6, 'p': 6, 'q': 6}, {'o': 12, 'p': 12, 'q': 12}, {'o': 6, 'p': 6, 'q': 6, 'r': 6, 's': 6, 't': 6, 'u': 6, 'v': 6, 'w': 6, 'x': 6}, {'t': 8}, {'d': 2}, {'g': 1, 'h': 1}, {'t': 9}, {'s': 12, 't': 12}, {'a': 4, 'd': 4}]\n    for i, (inp, exp) in enumerate(zip(inputs, results)):\n        assertion(candidate(*inp), exp, 0)\n",
      "entry_point": "histogram",
      "complete_code": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\n\n    if test == \"\": return {}    \n    count, ans = dict(), dict()\n    for word in test.split(\" \"):\n        if word != \"\":\n            if word not in count: count[word] = 0\n            count[word] += 1\n    mx = max(list(count.values()))\n    for ch, c in count.items():\n        if c == mx:\n            ans[ch] = c\n    return ans\n\n"
    },
    "execution_info": {
      "max_mutations_per_operator": 10,
      "total_operators_tested": 46,
      "operators_with_mutations": 8,
      "execution_timestamp": "2025-08-01T15:53:26.322080"
    }
  }
}