{
  "timestamp": "20250801_154535",
  "test_type": "mutation_testing",
  "metadata": {
    "task_id": "HumanEval/57",
    "timestamp": "20250801_154535",
    "tester_version": "1.0",
    "total_operators_tested": 12,
    "operators_with_errors": 1
  },
  "summary": {
    "original_passes": true,
    "total_mutations": 26,
    "killed_mutations": 24,
    "mutation_score": 0.9230769230769231,
    "survival_rate": 0.07692307692307687
  },
  "detailed_results": {
    "task_id": "HumanEval/57",
    "dataset_type": "plus",
    "original_passes": true,
    "total_mutations": 26,
    "killed_mutations": 24,
    "mutation_score": 0.9230769230769231,
    "mutation_results": {
      "NumberReplacer": {
        "total_mutations": 8,
        "killed_mutations": 8,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (2, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (2, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp4rc0_pe6.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp4rc0_pe6.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp4rc0_pe6.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:28.785039",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (0, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (0, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpdlei_et8.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpdlei_et8.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpdlei_et8.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:29.018487",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, 2)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, 2)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmph6t8a10l.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmph6t8a10l.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmph6t8a10l.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:29.249135",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, 0)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, 0)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpo549eucm.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpo549eucm.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpo549eucm.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:29.480141",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 4,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 2):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 2):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpynfe8fio.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpynfe8fio.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpynfe8fio.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:29.738695",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 0):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 0):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp3odajtfz.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp3odajtfz.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmp3odajtfz.py\", line 23, in monotonic\n    if l[i] > l[i + 1]:\n              ~^^^^^^^\nIndexError: list index out of range\n",
            "timestamp": "2025-08-01T15:45:30.011046",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 6,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 2]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 2]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpqnydi889.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpqnydi889.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmpqnydi889.py\", line 23, in monotonic\n    if l[i] > l[i + 2]:\n              ~^^^^^^^\nIndexError: list index out of range\n",
            "timestamp": "2025-08-01T15:45:30.310820",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 7,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 0]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 0]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmptaii7d0r.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmptaii7d0r.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmptaii7d0r.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:30.569579",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 8,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = 1\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = 1\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp9k84hzk_.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp9k84hzk_.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp9k84hzk_.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:30.811724",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 9,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = -1\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = -1\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpun1ctbte.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpun1ctbte.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpun1ctbte.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:31.065605",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 14,
        "mutations_tested": 10
      },
      "Add->Sub": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i - 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i - 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpb767eu4j.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpb767eu4j.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpb767eu4j.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:31.285488",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i - 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i - 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmptyjta98z.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmptyjta98z.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmptyjta98z.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:31.502764",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Sub->Add": {
        "error": "division by zero"
      },
      "Lt->Gt": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] > l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] > l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpdxcoaprf.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpdxcoaprf.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpdxcoaprf.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:32.016144",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Gt->Lt": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpvplgfkkp.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpvplgfkkp.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpvplgfkkp.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:32.288100",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Or->And": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc and dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc and dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp9dy81zm7.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp9dy81zm7.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp9dy81zm7.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:32.530983",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Remove ReturnValue": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpqqubajmq.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpqqubajmq.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpqqubajmq.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:32.821563",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "True->False": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (False, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (False, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpg4jfj23k.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpg4jfj23k.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpg4jfj23k.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:33.063140",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, False)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, False)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpghguw_42.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpghguw_42.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpghguw_42.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:33.322285",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "False->True": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = True\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = True\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp74ka1c1z.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp74ka1c1z.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp74ka1c1z.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:33.564434",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = True\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = True\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpbp5hzv93.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpbp5hzv93.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpbp5hzv93.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:33.782087",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Zero->One": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = 1\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = 1\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpxr07zcf4.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpxr07zcf4.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpxr07zcf4.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:34.037262",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = 1\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = 1\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmplhkpuiyn.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmplhkpuiyn.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmplhkpuiyn.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:34.289150",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "One->Zero": {
        "total_mutations": 4,
        "killed_mutations": 4,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (0, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (0, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpmhog5g29.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpmhog5g29.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpmhog5g29.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:34.577708",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, 0)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, 0)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpwh894674.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpwh894674.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpwh894674.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:34.819944",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 0):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 0):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmph671c7zs.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmph671c7zs.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmph671c7zs.py\", line 23, in monotonic\n    if l[i] > l[i + 1]:\n              ~^^^^^^^\nIndexError: list index out of range\n",
            "timestamp": "2025-08-01T15:45:35.078584",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 3,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 0]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 0]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpfl8my4le.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpfl8my4le.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpfl8my4le.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:35.316202",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 4,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 0]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 0]:\n            dec = False\n    return inc or dec",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpe3ca0d6f.py\", line 65, in <module>\n    check(monotonic)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpe3ca0d6f.py\", line 59, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpe3ca0d6f.py\", line 52, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:45:35.538191",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 5,
        "mutations_tested": 5
      },
      "String->Empty": {
        "total_mutations": 1,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"\"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"\"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:45:35.773247",
            "status": "SURVIVED",
            "reason": "tests_passed"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "String->X": {
        "total_mutations": 1,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
            "mutated_code": "def monotonic(l: list):\n    \"\"\"X\"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "mutated_complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\ndef monotonic(l: list):\n    \"\"\"X\"\"\"\n    inc, dec = (True, True)\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            inc = False\n        if l[i] < l[i + 1]:\n            dec = False\n    return inc or dec",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:45:35.981796",
            "status": "SURVIVED",
            "reason": "tests_passed"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      }
    },
    "problem_info": {
      "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
      "canonical_solution": "\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n",
      "test_code": "\n\nimport numpy as np\n\ndef is_floats(x) -> bool:\n    # check if it is float; List[float]; Tuple[float]\n    if isinstance(x, float):\n        return True\n    if isinstance(x, (list, tuple)):\n        return all(isinstance(i, float) for i in x)\n    if isinstance(x, np.ndarray):\n        return x.dtype == np.float64 or x.dtype == np.float32\n    return False\n\n\ndef assertion(out, exp, atol):\n    exact_match = out == exp\n\n    if atol == 0 and is_floats(exp):\n        atol = 1e-6\n    if not exact_match and atol != 0:\n        assert np.allclose(out, exp, rtol=1e-07, atol=atol)\n    else:\n        assert exact_match\n\n\ndef check(candidate):\n    inputs = [[[1, 2, 4, 10]], [[1, 2, 4, 20]], [[1, 20, 4, 10]], [[4, 1, 0, -10]], [[4, 1, 1, 0]], [[1, 2, 3, 2, 5, 60]], [[1, 2, 3, 4, 5, 60]], [[9, 9, 9, 9]], [[10, 9, 8, 7, 6]], [[1, 1, 1, 1, 1]], [[-5, -7, -9, -11]], [[1, 1, 2, 3, 3, 3, 4, 5]], [[5, 4, 3, 3, 3, 2, 1, 1]], [[1, 1, 1, 2, 1, 1, 1]], [[1, 1, 1, 1]], [[1, 2, 2, 3]], [[3, 2, 2, 1]], [[1, 3, 2, 4]], [[3, 4, 4]], [[2]], [[5, 1, 1, -7, 1, 5]], [[2, 1, 2]], [[1, 1]], [[1, 1, 1]], [[5, 1, -7, -9, 1, 5, 5]], [[5, 1, -7, -9, 1, 5]], [[10, 9, 8, 6]], [[-5, -7, -9, -9, -11]], [[-7, -9, 1, 5]], [[10, 9, 8, 7, 7]], [[5, 4, 3, 3, 3, 2, 1]], [[5, 1, -9, 1, 5]], [[10, -11, 9, 8, 7, 6, 6]], [[10, 1, 1]], [[5, 1, -10, -7, -9, 1, 2, 5]], [[1]], [[-7, -9, 1, 3, -9, 5]], [[1, 1, 1, 2, 1, 1, 1, 1]], [[7, 1, 1, 1]], [[-7, -9, -11]], [[5, 4, 3, 3, 2, 1]], [[10, 9, 8, 7, 7, 7, 7]], [[5, 1, -10, -9, 1, 2, 5]], [[3, 2, 7, 4, 2]], [[-7, -9, 1]], [[5, 1, -10, 7, -9, 1, 2, 5]], [[3, 2, 6, 7, 2, 6]], [[1, 1, 5, 1, 1, 1]], [[-5, -7, -11, -11]], [[3, 6, 2, 6, 7, 2]], [[5, 4, 3, 3, 3, 2, 4]], [[10, 9, 8, 7, 7, 7, 7, 7]], [[3, 2, 6, 1, 7, 2]], [[1, 1, 1, 1, 2, 1, 1]], [[1, 2, 2, 7]], [[3, -7, -11, -7, -11, -11]], [[1, 1, 1, 2, 2, 1, 1]], [[-5, -9, -11, -11]], [[5, 5, 1, 1, -7, -7]], [[-7, -10, -11]], [[4, 5, 3, 3, 3, 4]], [[1, 0, 1]], [[1, 1, 1, 1, 2, 1, 1, 1]], [[1, 1, 1, 2, 1, 1]], [[2, 5, 4, 3, 3, 3, 2, 1, 1]], [[2, 2]], [[-7, -9, 1, -9, 5]], [[4, 5, 3, 3, 3, 4, 3]], [[5, 3, 3, 3, 3]], [[9, -7, 1]], [[1, 1, 4, 1]], [[1, 1, 1, 2, 1, 3, 1]], [[1, 8]], [[3, 1, 3, 2, 3]], [[5, 4, 6, 3, 2, 2, 1]], [[5, 4, 3, 3, 7, 2, 1]], [[]], [[2, 1, 2, 2, 7, 7]], [[2, 1, 2, 2]], [[5, 4, 3, 1, 1, 3]], [[1, 1, -7, 1, 1, 2, 1, 1, 1]], [[1, 0, 1, 1, 1]], [[5, 1, -7, -9, 1, 6]], [[5, 4, 6, 3, 2, 2, 5, 5]], [[-11, 2, 7, 4, 2]], [[5, 1, -10, 7, -9, 1, 2, 5, 1]], [[10, 10, 8, 0, 7, 7]], [[65.42404804168314, -27.467401242304092, 1.1695217804835494, -88.22454119231631, -43.03246997899461, 6.289214420714728, 62.246881897996445, -27.613728995144186, -89.64771597158368, 91.94959500461121]], [[-11, -7, -9, -11]], [[-5, -9, -11]], [[-11, -7, -9, -11, -11]], [[5, 1, 1, 0, 1, 5]], [[-11, 0, 10, 1, 1, 10]], [[10, 9, 8, 7, 11, 6]], [[9, -7, 1, 9]], [[9, -7, 1, 9, 9, -7]], [[2, -7, -11, -11]], [[11, -7, 1, 1]], [[10, 9, 8, 7, 8, 7, 7, 7]], [[1, 2, 1, -7, 2, 1, 2, 1, 1, 1]], [[1, 1, 1, 1, 1, 1]], [[1, 2, 3, 4, 5, 4, 3, 2, 1]], [[5, 4, 3, 2, 1, 2, 3, 4, 5]], [[1, 3, 5, 4, 4, 6]], [[2, 2, 2, 1, 1, 1]], [[10, 2, 5, 3, 2, 6, 9, 7, 5, 4]], [[2, 2, 1, 1, 1, 1, 4, 4, 4]], [[5, 4, 3, 2, 1, 1, 1, 2, 3, 4, 5]], [[1, 1, 3, 3, 2, 2, 4, 4]], [[-2, -1, 0, 1, 2, 1, 0, -1, -2]], [[1, 3, 4, 5, 4, 3, 2, 1]], [[5, 4, 3, 10, 2, 1, 1, 1, 2, 3, 4, 5, 2]], [[2, 2, 2, 1, -2, 1]], [[1, 1, 3, 3, 2, 2, 4, 5, 4]], [[1, 1, 3, 3, 2, 2, 4, 4, 4]], [[2, 2, 1, 1, 1, 1, 4, 4, 6]], [[2, 2, 1, 1, 2, 1, 1, 4, 4, 4]], [[2, 2, 2, -2, 1]], [[5, 2, 4, 3, 1, 2, 3, 4, 3, 5]], [[2, 2, 1, 1, 2, 1, 1, 4, 4, 4, 1]], [[1, 3, 4, 6, 4, 3, 2, 1, 2]], [[5, 4, 3, 10, 2, 1, 1, 1, 2, 3, 4, 5, 2, 4, 1]], [[5, 4, 10, 2, 1, 1, 1, 2, 3, 4, 5, 2]], [[1, 1, 3, 5, 4, 4, 6]], [[2, 2, 1, 1, 2, 0, 1, 4, 4, 4]], [[1, 3, 4, 6, 4, 3, 2, 1, 2, 1]], [[1, 1, 3, 5, 4, 5, 6, 5]], [[1, 3, 5, 4, 4, 6, 4]], [[2, 2, 2, -2, 1, 1]], [[2, 2, 1, 1, 1, 1, 4, 4, 6, 1]], [[2, 2, 2, -2, 1, 0, 1]], [[10, 3, 5, 3, 2, 6, 9, 7, 5, 4]], [[2, 2, 1, 1, 1, 1, 4, 4, 6, 7]], [[2, 2, 2, 1, -2, 1, 3, 2]], [[1, 3, 4, 5, 4, 3, 2, 1, -1, 5]], [[2, 2, 2, -2, 1, 0, 3, 1]], [[5, 4, 10, 2, 1, 1, 1, 2, 3, 4, 2]], [[5, 4, 3, 2, 1, 1, 1, 2, 3, 4, 5, 3]], [[2, 2, 1, 1, 1, 1, 4, 4, 0, 6, 7, 7]], [[1, 2, 3, 3, 2, 2, 4, 4]], [[False, True, False, False, True, True, True]], [[1, 1, 3, 3, 2, 4, 5, 4, 5]], [[2, 2, 1, 1, 2, 1, 1, 4, 4, 6, 7]], [[2, 2, 6, 1, 1, 2, 1, 1, 4, 4, 4]], [[10, 3, 5, 3, 2, 9, 7, 5, 4]], [[1, 1, 3, 5, 4, 5, 0, 5]], [[2, 2, 2, -2, 0, 0, 3, 1]], [[2, 2, 1, 2, 2, 1, 4, 4, 4, 1]], [[2, 2, 2, 1, 1, 1, 1]], [[5, 4, 10, 2, 1, 1, 3, 1, 2, 3, 4, 5, 2]], [[5, 4, 10, 2, 1, 2, 3, 4, 1, 2, 3, 4, 5, 2]], [[2, 2, 6, 1, 2, 2, 1, 1, 7, 4, 4, 4, 2]], [[10, 3, 5, 3, 2, 6, 9, -1, 5, 4]], [[5, 2, 4, 3, 1, 2, 3, 4, 3, 5, 4]], [[5, 4, 10, 10, 2, 1, 1, 1, 2, 3, 4, 1]], [[2, 2, 1, 0, 1]], [[2, 2, 1, -1, 10, 2]], [[2, 2, 1, 1, 2, 1, 3, 1, 4, 4, 5]], [[5, 2, 4, 3, 1, 2, 3, 4, 3, 5, 3]], [[5, 2, 4, 3, 1, 3, 5, 5, 3, 5, 4]], [[5, 4, 3, 2, 1, 1, 10, 1, 2, 3, -1, 5]], [[5, 4, 3, 10, 2, 1, 1, 1, 2, 3, 4, 5, 2, 4, 1, 3]], [[1, 3, 4, 5, 4, 3, 2, 1, -1, -1, 5]], [[2, 2, 2, -1, -2, 1, 1]], [[2, 9, 9, 4, 0, 0, 3, 1]], [[False, True, False, False, True, True, True, True]], [[1, 3, 4, 3, 4, 6, 4]], [[1, 4, 3, 5, 4, 5, 6, 5]], [[5, 4, 3, 10, 2, 1, 1, 2, 3, 4, 5, 2]], [[False, True, False, True, True, True, True]], [[2, 2, 2, -2, 0, 0, 3, 1, 2]], [[5, 4, 3, 2, 1, 3, 1, 1, 2, 3, 4, 5]], [[5, 4, 3, 2, -2, 1, 1, 1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1, 1, 10, 1, 2, 3, -1, 5, 5]], [[1, 3, 5, 6, 4, 4, 6, 4]], [[2, 2, 1, 2, 1, 1, 10, 4, 4, 1]], [[1, 1, 3, 5, 4, -2, 0, 5]], [[2, 2, 1, 1, 2, 1, 3, 3, 1, 4, 4, 5]], [[2, 2, 1, -2, 1, 3, 2]], [[2, 2, 1, 1, 1, 4, 4, 6, 4]], [[-2, 2, 9, 1, 1, 9]], [[1, 3, 4, 5, 3, 2, 1, 5]], [[1, 3, 4, 5, 7, 3, 2, 1, -1, 5]], [[5, 4, 3, 10, 2, 1, 1, 1, 2, 3, 11, 4, 5, 2, 4, 1, 3]], [[2, 2, 1, 1, 1, 1, 4, 6, 7]], [[2, 2, 1, 1, 2, 1, 3, 1, 4, 4, 5, 3]], [[2, 2, 1, -2, 1]], [[5, 2, 4, 4, 3, 1, 3, 5, 5, 3, 5, 4]], [[5, 4, 3, 2, -2, 1, 4, 1, 1, 2, 3, 4, 5]], [[1, 2, 4, 5, 4, 3, 2, 1, -1, 5, 1]], [[2, 2, 2, 1, 1, 2, 1, 1, 1]], [[1, 1, 3, 3, 2, 4, 4]], [[2, 2, 2, 2, -2, 1]], [[5, 4, 3, 10, 2, 1, -2, 2, 3, 4, 5, 2]], [[1, 1, 2, 5, 5, 5, 0, 5]], [[2, 2, 1, 1, 1, 1, 4, 4, 0, 7]], [[2, 2, 2, -2, 0, 3, 1, 2]], [[1, 3, 4, 5, 4, 3, 2, 1, 1]], [[2, 2, -2, 1, 1, 2, 0]], [[1, 3, 4, 5, 4, 0, 3, 2]], [[5, 3, 2, 1, 1, 10, 1, 2, 3, -1, 5, 5]], [[2, 1, 1, 1, 4, 6]], [[5, 4, 3, 10, 2, -2, 1, 1, 1, 2, 3, 4, 5]], [[2, 5, 2, 2, 1, 2, 1]], [[2, 2, 1, 1, 1, 4, 6, 7]], [[1, 3, 1, 4, 5, 3, 2, 1, 5]], [[9, 9, 4, 0, 0, 3, 1, 9]], [[4, 2, 1, 1, 1, 1, 4, 4, 6, 1]], [[2, 2, 1, 1, 1, 1, 4, 4, 6, 5, 2]], [[5, 4, 3, 10, 2, 1, 1, 3, 4, 5, 2]], [[2, -2, 5, 2, 2, 1, 2, 1]], [[False, True, False, True, True, True, True, True]], [[2, 2, 1, 1, 1, 4, 5, 4, 6, 4]], [[False, True, False, True, True, True]], [[2, 2, 2, 1, -2, 1, 2]], [[5, 4, 3, 10, 2, 1, 1, 1, 2, 3, 4, 5, 2, 5]], [[False, True, True, False, True, True, True, True, False]], [[6, 5, 2, 2, 1, 2, 1, 2]], [[2, 9, 9, 5, 0, 0, 3, 1]], [[2, 1, 3, 5, -1, 4, 6, -2, 0, 5]], [[1, 1, 3, 5, 4, 7, 0, 5, 4]], [[5, 4, 3, 2, 1, 2, 4, 5]], [[1, 1, 3, 2, 2, 4, 5, 4, 5]], [[2, 2, 1, 1, 1, -2, 4, 4, 6]], [[1, 1, 3, 5, 4, 4, 6, 1]], [[2, 2, 1, 6, 1, 2, 1, 1, 4, 4, 4, 1]], [[2, 2, 4, 5, 4, 3, 2, 1, -1, 1, 5, 4]], [[False, True, True, False, True, True, False, True, False, False]], [[1, 1, 3, 3, 2, 5, 4, 5, 1]], [[2, 2, 1, -2, 1, 3, 2, -2]], [[2, 9, 9, 4, 0, 0, 3, 11, 9]], [[2, 1, -1, 10, 2, 10]], [[1, 2, 4, 5, 4, 3, 2, 1]], [[5, 4, 3, 10, 2, 1, 1, 2, 3, 4, 5, 2, 5]], [[2, 2, 1, 1, 1, 1, 4, 4, 11]], [[1, 1, 3, 3, 2, 4, 5, 4, 5, 5]], [[1, 3, 4, 5, -2, 3, 2, 1, -1, -1, 5]], [[1, 3, 4, 5, 4, 3, 2, 1, 6, 5, 2, 2]], [[False, False, False, True, True, True, True]], [[5, 4, 3, 2, -2, 1, 9, 1, 1, 2, 3, 4, 5]], [[2, 2, 1, 1, 1, 4, 4, 11]], [[5, 4, 10, 2, 1, 1, 2, 3, 3, 4, 2]], [[1, 3, 4, 5, 4, 3, 2, 1, 0, -1, 5]], [[5, 4, 3, 10, 2, 0, 1, 2, 3, 4, 5, 2]], [[5, 4, 10, 2, 1, 2, 3, 4, 1, 0, 2, 3, 4, 5, 2]], [[2, 2, -2, 0, 3, 1, 2, 0, 1]], [[2, 2, 1, -2, 3, 2, -2, -2]], [[2, 2, -2, 0, 3, 1, 2]], [[9, 9, 4, 0, 0, 3, 1]], [[5, 4, 3, 10, 2, 1, 1, 2, 3, 4, 5, 2, 5, 2]], [[5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 1]], [[1, 3, 4, 5, 3, 2, 1, 5, 2]], [[1, 1, 3, 5, 4, 7, 0, 5, 4, 4]], [[False, False, True, True, True, True, True, True, True]], [[5, 4, 3, 10, 2, 1, 1, 1, 2, 3, 4, 5, 2, 4, 5]], [[2, 1, 1, 1, 4, 6, 1]], [[5, 4, 10, 2, 1, 1, 1, 2, 3, 4, 5, 2, 1]], [[2, 2, 1, 1, 1, 4, 5, 4, 6, 4, 2]], [[1, 1, 3, 2, 4, 4]], [[5, 4, 3, 11, 2, 3, -2, 4, 4, 5]], [[1, 3, 4, 5, 0, 4, 3, 2, 1, 6, 5, 2, 2]], [[4, 4, 3, 10, 2, 1, 1, 1, 2, 3, 4, 5, -2, 2, 4, 5]], [[9, 9, 4, 0, 0, 3, 1, 9, 1]], [[1, 1, 3, 3, 11, 2, 2, 3, 4, 4]], [[4, 3, 10, 2, 1, -2, 2, 3, 4, 5, 2, 10]], [[1, 1, 3, 3, 11, 2, 2, 3, 4, 4, 2]], [[2, 2, 1, 2, 2, 1, 4, 4, 4, 5]], [[10, 2, 5, 3, 2, 6, 9, 7, 7, 4]], [[5, 2, 4, 3, 3, 5, 5, 3, 5, 4]], [[1, 2, 4, 3, 1, 2, 3, 3, 5]], [[1, 2, 9, 9, 5, 0, 0, 3]], [[2, 2, 1, 1, 1, -2, 7, 4, 6]], [[1, 3, 4, 5, 2, 2, 1, 5]], [[1, 3, 4, 5, 0, 4, 3, 2, 1, 1, 6, 5, 2, 2]], [[2, 2, 2, -2, -1, 1]], [[5, 2, 4, 4, 3, 1, 3, 5, 5, 3, 5, 4, 4, 5]], [[1, 3, 5, 4, 4, 5, 4, 3, 2, 1]], [[5, 4, 3, 10, 2, 1, 1, 3, 4, 5, 2, 4]], [[5, 4, 3, 10, 2, 1, 1, 2, 3, 4, 2, 2]], [[2, 2, 1, 1, 1, 4, 5, 4, 4]], [[5, 4, 3, 10, 3, 2, 1, 1, 1, 2, 3, 11, 4, 5, 2, 4, 1, 3]], [[5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 2, 11, 5, 2]], [[5, 2, 4, 3, 5, 5, 3, 5, 4]], [[2, 9, 4, 0, 0, 3, 1]], [[2, 2, 1, -2, 1, 2]], [[2, 2, 1, 1, 1, 1, 1, 4, 4, 6, 7]], [[5, 3, 3, 0, 2, 1, 1, 10, 1, 2, 3, -1, 5, 5]], [[-2, 5, 2, 2, 1, 2, 1]], [[-2, -1, 0, 1, 1, 0, -1, -2]], [[False, False, True, True, True, True, True, True, True, False, True]], [[9, 9, 4, 0, 0, 3, 1, 9, 1, 0]], [[2, 1, -2, 1, 3, 2]], [[1, 3, 5, 4, 4, 6, 5]], [[False, True, True, False, True, True, True, True, False, True]], [[2, 2, 2, -1, -2, 1, 1, 1]], [[2, 2, 2, 1, -2, 1, 3, 2, 2]], [[1, 1, 3, 5, 5, 4, 7, 5, 4, 6, 4]], [[1, 3, 4, 5, 4, 5, 2, 1]], [[5, 4, 3, 10, 9, 3, 2, 1, 1, 1, 2, 3, 12, 4, 5, 2, 4, 1, 3, 2]], [[2, 1, 1, 1, 4, 6, 1, 1]], [[5, 4, 3, 5, -2, 2, 1, 1, 2, 3, 4, 5, 2, 2]], [[2, -1, 2, 2, -1, -2, 1, 2]], [[5, 4, 3, 10, 2, 0, 1, 3, 3, 4, 5, 2]], [[1, 1, 3, 3, 2, 2, 11, 4, 4, 4]], [[10, 9, 1, 1, 9]], [[9, 9, 4, 9, 0, 3, 1, 9, 1]], [[2, 2, 2, -2, 1, 2]], [[1, 3, -2, 4, 5, 7, 3, 2, 1, 5, -1, 5]], [[1, 3, 4, 3, 4, 4, 3]], [[10, 3, 4, 3, 2, 6, 9, 7, 5, 4, 3]], [[5, 1, 3, 10, 2, 1, 1, 1, 2, 3, 4, 2, 5]], [[1, 1, 5, 5, 5]], [[2, 2, 1, 1, 1, 1, 4, 3, 4, 0, 6, 7]], [[1, 3, 4, 5, 4, 3, 2]], [[2, -2, 5, 2, 2, 1, 4, 2, 1, 5]], [[1, 3, 4, 6, 4, 3, 2, 1, -1, 5]], [[2, 1, 1, 1, 4, 1]], [[5, 4, 10, 2, 1, 1, 1, 2, 3, 4, 2, 1]], [[False, True, False, False, False, True, True, True, True, True]], [[5, 4, 10, 2, 1, 1, 3, 1, 2, 3, 4, 6, 2]], [[5, 2, 0, 4, 4, 3, 1, 3, 5, 5, 3, 5, 4, 4, 5]], [[1, 1, 5, 4, 5, 0, 5]], [[5, 4, 3, 10, 2, -2, 1, 1, 6, 1, 2, 3, 4, 5]], [[5, 4, 3, 2, -2, 6, 0, 1, 2, 3, 4, 5]], [[5, 4, 3, 10, 2, 0, 1, 2, 3, 4, 5, 0]], [[5, 1, 1, 1, -2, 7, 4, 6]], [[1, 1, 3, 3, 2, 4, 5, 4, 5, 1]], [[5, 4, 10, 2, 1, 1, 3, 1, 2, 2, 4, 5, 2]], [[2, 2, 1, 2, 1, 1, 4, 4, 6, 7]], [[2, 2, 1, -2, -2, 1]], [[-1, -1, 0, 1, 1, 0, -1, -2]], [[2, 5, 9, 9, 4, 0, 0, 3, 1, 2, 9]], [[5, 4, 3, 2, -2, 1, 4, 1, 1, 2, 3, 4, 5, 2]], [[5, 4, 10, 2, 1, 1, 3, 1, 2, 3, 4, -2, 6, 2, 2, 2]], [[1, 3, 5, 4, 4, 5]], [[5, 4, 3, 10, 2, 1, 1, 2, 3, 4, 5, 2, 5, 1]], [[2, 2, 1, 1, 1, 1, 4, 4, 0, 7, 4]], [[2, 2, 1, 1, 2, 1, 1, 4, 4, 4, 4]], [[2, 2, 1, 2, 2, 1, 4, 4, 1, 1]], [[2, 1, 1, 1, 4, 6, 6, 6]], [[-1, -1, 0, 1, 1, 0, -1]], [[5, 4, 10, 5, 2, 1, 1, 1, 2, 3, 4, 2, 1]], [[5, 4, 10, 2, 1, 1, 1, 2, 2, 4, 5, 2, 4]], [[2, 2, -2, 1, 7, 2, 1, 1, 1]], [[5, 4, 3, 10, 2, 1, 1, 1, 2, 3, 4, 5, 2, 2]], [[2, 2, 1, 1, 2, 0, 1, 4, 4, 4, 1]], [[2, 2, 1, 1, 2, 3, 3, 1, 4, 4, 5, 3, 3]], [[5, 4, 3, 2, 1, 3, 1, 1, 3, 4, 5]], [[5, 4, 10, 2, 1, 9, 2, 3, 4, 1, 0, 2, 3, -2, 4, 5, 2, 1]], [[4, 3, 10, 0, 1, 3, 3, 4, 5, 2, 4]], [[5, 4, 10, 2, 1, 1, 3, 1, 2, 0, 3, 4, 6, 2]], [[1, 1, 3, 3, 2, 4, 5, 4, 5, 1, 3]], [[4, 2, 1, -2, 1, 2]], [[1, 3, 4, 5, 4, 3, 2, 2, 1, -1, 5]], [[5, 3, 2, -2, 1, 1, 1, 2, 3, 4, 5, 1]], [[2, 1, 1, 1, 4, 6, 6, 6, 6]], [[2, -1, 2, 2, -2, 1, 2, 1]], [[2, 6, 1, 2, 2, 1, 1, 7, 4, 4, 4, 2]], [[False, True, True, False, True, True, True, True, False, True, False]], [[5, 2, 3, 1, 2, 3, -1, 4, 3, 5, 3]], [[5, 4, 10, 5, 2, 1, 1, 1, 2, 3, 4, 2, 1, 4]], [[5, 4, 10, 2, 1, 1, 1, 3, 1, 2, 2, 4, 5, 2]], [[2, 1, 2, 2, 1, 4, 4, 4, 5]], [[1, 1, 3, 2, 5, 4, 5, 1]], [[5, 5, 10, 2, 1, 1, 11, 2, 2, 4, 5, 2, 4]], [[2, -1, -1, 2, 2, -1, -2, 1, 2]], [[1, 3, 5, 4, 4, 5, 4, 3, 2, 5, 1]], [[1, 3, 1, 4, 5, 3, 2, 1, 5, 5]], [[5, 3, 3, 0, 2, 1, 1, 10, 1, 2, 3, 5, 5]], [[False, False, True, True, True, False, True, True, True, True]], [[1, 3, 4, 5, 4, 3, 2, 1, 3]], [[2, 2, -2, 1, 7, 2, -2, 1, 1]], [[5, 4, 10, 2, 1, 1, 3, 1, 2, 2, 4, 5, 2, 1]], [[5, 4, 3, 10, 2, 1, -2, 2, 3, 4, 5, 2, 4]], [[2, 2, 1, 1, 1, 1, 4, 4, 6, 1, 4]], [[5, 4, 3, 10, 3, 1, 1, 1, 2, 3, 4, 5, 2, 4, 5]], [[5, 4, 3, 10, 2, 1, 1, 1, 2, 3, 10, 5, 2, 4, 1, 3]], [[5, 4, 3, 10, 2, 1, 1, 1, 2, 3, 3, 4, 2, 4, 1, 3]], [[7, 4, 0, 0, 3, 1, 9, 1, 1, 9]], [[2, 2, 4, 5, 3, 2, 1, -1, 1, 5, 4, 1]], [[2, 2, 1, 1, 2, 12, 1, 1, 4, 4, 4, 4, 2, 1]], [[2, -1, 2, 2, -2, 1, 0, 1]], [[2, 5, 3, 2, 6, 9, 7, 7, 4]], [[1, 3, 4, 5, 4, 3, 2, 1, 10, -1, 5]], [[False, False, False, True, True, True, True, True, True, True, False, True, True]], [[2, 1, 1, 1, 4, 6, 9, 1, 1, 1]], [[3, 1, 4, 5, 3, 2, 1, 5, 5, 1]], [[1, 1, 3, 5, 4, 4, 6, 12, 1, 2]], [[False, True, False, True, True, True, True, False]], [[0, 3, 4, 5, 0, 4, 3, 2, 1, 6, 5, 2, 2, 4]], [[5, 4, 10, 2, 5, 9, 2, 3, 4, 1, 0, 2, 3, -2, 4, 5, 2, 1]], [[2, 2, 1, 1, 1, 4, 4, 6, 7]], [[2, 2, 1, 1, 1, 4, 5, 4, 4, 5]], [[2, 2, 1, 2, 1, 1, 4, 4, 6, 7, 6]], [[1, 3, 4, 5, 4, 3, 2, 2, 1, -1, 5, 3]], [[1, 3, 4, 5, 4, 2, 1, 5, 5]], [[5, 4, 10, 2, 1, 1, 3, 1, 2, 4, -2, 6, 2, 2, 2]], [[5, 4, 3, 10, 2, 1, 1, 1, 2, 3, 11, 4, 5, 2, 4, 1, 3, 4]], [[False, True, False, True, True, False, True, True, False]], [[2, 2, 1, 1, 1, 1, 4, 4, 6, 7, 1]], [[2, -2, 0, 3, 1, 6, 2]], [[2, 3, -1, 2, 2, -2, 1, 0, 1]], [[False, True, True, False, True, True, True, False, True]], [[5, 4, 10, 2, 1, 1, 3, 1, 2, 4, -2, 6, 2, 2, 2, 2]], [[5, 4, 10, 5, 3, 2, 1, 1, 1, 2, 3, 4, 2, 1, 4]], [[5, 2, 4, 3, 1, 0, 3, 4, 3, 5, 3]], [[5, 4, 3, 2, -2, 1, 4, 1, 1, 2, 3, 4, 12, 5]], [[2, 2, 1, 3, 1, 1, 4, 3, 4, 0, 6, 7]], [[2, 1, 1, 1, 4, 4, 11]], [[4, 4, 3, 10, 2, 1, 1, 1, 5, 2, 9, 4, 5, -2, 2, 4, 5]], [[False, True, True, False, True, True, True, False, True, True, True]], [[2, 2, 12, 1, 2, 2, 1, 1, 7, 4, 4, 4, 2]], [[2, 2, 2, -1, -2, 2, 1, 1]], [[1, 1, 3, 3, 2, 2, 11, 4, 4, 4, 4]], [[True, False, True, False, False, True, True, True]], [[10, 5, 4, 3, 10, 2, 1, 1, 2, 3, 4, 5, 2]], [[5, 2, 3, 1, 2, 3, -1, 4, 3, 5, 3, 5]], [[1, 2, 3, 3, 2, 2, 4, 4, 1]], [[1, 1, 0, 1, 1, 1]], [[5, 6, 2, 1, 2, 3, 4, 1, 2, 3, 4, 5, 2]], [[1, 1, 3, 2, 2, 11, 4, 4]], [[5, 2, 4, 3, 5, 1, 2, 3, 4, 3, 5, 4]], [[5, 1, 3, 5, 4, 4, 6, 1]], [[1, 5, 0, 4, 6, 10, 2, 1, 1, 1, 2, 3, 4, 2]], [[5, 4, 4, 3, 10, 2, 1, 1, 3, 4, 5, 2]], [[2, 2, 1, -2, 3, 2, -2, -2, -2, 3, -2]], [[4, 3, 11, 2, 3, -2, 4, 5, 0, 5]], [[1, 12, 1, 3, 3, 2, 5, 5, 4, 5, 1]], [[3, 2, -2, 0, 3, 1, 2, 0, 1, 7]], [[1, 2, 3, 3, 2, 2, 3, 4, 4]], [[2, 2, 2, 1, -2, 0]], [[1, 2, 4, 5, 3, 3, 2, 1, -1, 5, 4]], [[5, 4, 10, 2, 1, 1, 1, 1, 2, 2, 4, 5, 2, 1]], [[2, 2, 1, 1, 1, 1, 4, 7, 7]], [[-2, 5, 2, 2, 1, 2, 1, 5]], [[2, 2, 1, 1, 4, 5, 4, 6, 4]], [[-2, -1, 0, 1, 1, -1, -1, -2]], [[2, 2, -2, 1, 7, 2, 1, 1, 1, 1]], [[2, 2, 2, 1, -2, 1, 1]], [[2, 2, 1, 1, 1, 1, 4, 4, 1]], [[5, 4, 3, 10, 2, 1, 1, 1, 2, 3, 11, 4, 5, 2, 4, 1, 3, 1]], [[1, 1, 3, 3, 2, 5, -2, 5, 1]], [[2, 2, 12, 1, 2, 2, 1, 1, 7, 7, 4, 4, 2, 4, 2]], [[1, 3, 5, 4, 4, 3, 5]], [[2, 1, 1, 10, 2, 10]], [[6, 4, 10, 2, 1, 1, 1, 2, 3, 4, 5, 2]], [[False, True, True, False, True, True, True, False, True, False]], [[2, 5, 2, 2, 1, 2]], [[-2, 5, 2, 2, 1, 1]], [[3, 1, 1, 1, 4, 6, 6]], [[1, 3, 4, 5, 3, 2, 1, -1, -1, 5]], [[-2, 5, 2, 2, 1, 2, 1, 2]], [[1, 3, 4, 5, 0, 4, 3, 2, 4, 1, 6, 3, 5, 2, 2]], [[2, 2, 1, 1, 1, 1, 4, 4, 6, 5, 2, 6, 2]], [[5, 4, 3, 10, 2, 1, 1, 1, 3, 2, 3, 3, 4, 2, 4, 1, 3, 4]], [[2, -1, 2, 2, -2, 1, 1, 1]], [[1, 1, 5, 5, 4]], [[1, 2, 10, 9, 9, 5, 0, 0, 3]], [[1, 3, 4, 6, 9, 3, 2, 1, 2, 1]], [[0, 3, 4, 5, 0, 7, 3, 2, 1, 6, 5, 2, 2, 4]], [[1, -1, 1, 0, 1, 1, 1]], [[1, 3, 1, 4, 5, 3, 2, 2, 1, 5, 3]], [[5, 2, 4, 3, 1, 2, 4, 3, 5, 4]], [[2, 2, 1, 6, 2, 1, 1, 4, 4, 4, 1]], [[2, 2, 1, 1, 2, 1, 4, 4, 9, 4]], [[2, 2, 1, 1, 1, 1, 4, 1, 4, 6, 1]], [[2, 2, -2, 1, 1, 2]], [[2, 2, 1, 1, 4, 6, 6, 6]], [[5, 4, 3, 2, 4, 1, 3, 1, 1, 3, 4, 5]], [[2, -1, -1, 3, 2, 2, -1, -2, 1, 2, -2]], [[2, 2, 6, 3, 1, 1, 1, 4, 4, 0, 7, 4, 3]], [[3, 2, 5, 4, 5, 1, 1]], [[2, 2, 1, 1, 1, 1, 4, 4, 6, 1, 4, 4]], [[9, 4, 0, 8, 3, 1, 9]], [[2, 1, 2, 9, 1, 4, 4, 4, 5]], [[5, 4, 3, 10, 1, 1, 2, 3, 4, 5, 2, 5, 2]], [[2, 1, 2, 2, -2, 1, 2]], [[2, 2, 1, -2, 3, 2, -2, -2, 3, -2, 1]], [[1, 1, 3, 3, 4, 2, 11, 4, -1, 5, 4, 5]], [[2, 2, 2, -2, 1, 0, 3, 1, 1]], [[2, -2, 5, 2, 2, 2, 1]], [[5, 4, -1, 3, 11, 2, 3, -2, 4, 4, 5]], [[1, 1, 3, 8, 4, 4, 6]], [[10, 2, 5, 3, 2, 6, 9, 7, 7, 4, 10]], [[5, 4, 3, 2, 4, 1, 3, 1, 1, 11, 5]], [[2, 2, 2, -2, 0, 0, 3, 1, 0]], [[2, 2, 2, -2, 0, 0, 1, 1]], [[2, 2, 2, -2, 0, 0, 1, 1, 2]], [[5, 4, 3, 2, -2, 1, 4, 1, 1, 2, 2, 3, 4, 5, 2]], [[2, 2, 1, 2, 1, 1, 4, 4, 4, 4]], [[2, 2, 1, 1, 1, 1, 4, 4, 7, 6, 7]], [[5, 4, 10, 2, 1, 1, 1, 2, 3, 4, 5, 2, 4]], [[4, 2, -2, 4, 2, 2, 2, 1]], [[2, 2, 6, 3, 1, 1, 1, 4, 4, 0, 7, 4, 3, 1]], [[5, 2, 4, 4, 3, 1, 3, 5, 5, 3, 5, 4, 4, 3]], [[2, 0, 2, 9, 1, 4, 3, 4, 5]], [[4, 2, -2, 4, 2, 2, 8, 2, 1, -2]], [[5, 2, 2, -1, 1, 2]], [[2, 2, 1, -2, 0]], [[2, 2, 6, 1, 8, 2, 2, 1, 1, 7, 4, 4, 4, 2, 2]], [[1, 3, 5, 3, 2, 1, -1, -1, 5]], [[2, 6, 1, 8, 2, 2, 1, 1, 6, 4, 4, 4, 2, 2]], [[1, 3, 3, 4, 5, 4, 3, 2, 1, 6, 2, 2]], [[2, 9, 9, 4, 4, 0, -2, 0, 3, 1]], [[2, 2, 1, 3, 1, 1, 1, 4, 4, 4]], [[1, 3, 5, 4, 4, 5, 4, 4, 2, 1]], [[10, 3, 5, 3, 2, 9, 5, 4]], [[5, 5, 10, 2, 1, 1, 11, 2, 2, 4, 5, 2, 4, 5]], [[1, 2, 3, -2, 4, 5, 7, 3, 2, 1, 5, -1, 5]], [[False, True, False, True, True, True, False]], [[5, 4, 2, 2, 1, 1, 1, 2, 3, 4, 5]], [[5, 2, 4, 3, 1, 2, 4, 4, 3, 5, 4]], [[5, 2, -2, 6, 0, 1, 2, 3, 4, 5]], [[5, 3, 11, 2, 3, -2, 4, 4, 5]], [[2, 0, 2, 1, 10, 2]], [[2, 9, 9, 4, 4, 0, -2, 0, 3, 1, 9]], [[5, 2, 4, 4, 5, 3, 5, 4, 4]], [[1, 1, 3, 2, 5, 4, 5, 1, 1, 5]], [[9, 5, 4, 10, 10, 2, 1, 1, 1, 2, 3, 4, 1]], [[2, 2, 1, 1, 2, 4, 4, 6, 4, 1]], [[5, 2, 4, 3, 5, 1, 2, 3, 4, 3, 5]], [[1, 1, 5, 4, 4, 11, 6, 1]], [[1, 1, 3, 5, 5, 0, 5]], [[2, 2, 1, 1, 2, 1, 3, 1, 4, 4, 5, 1]], [[2, 2, 1, 12, 1, 4, 5, 4, 6, 4]], [[2, 2, 0, 2, 1, 1, 4, 4, 4, 5, 2]], [[0, -1, 1, 0, 1, 1, 1]], [[5, 4, 10, 2, 1, 1, 2, 3, 3, 4, 2, 2]], [[1, 3, 5, 4, 0, 3, 2]], [[False, False, True, True, True, False, True, True, True, True, True]], [[-2, 5, 4, 3, 2, 1, 1, 10, 1, 2, 10, 8, 3, -1, 5, 5]], [[5, 4, 3, 2, 1, 2, 1, 0, 2, 3, 4, 5]], [[2, 1, 6, 2, 1, 1, 4, 4, 4, 1]], [[1, 3, 3, 4, 5, 4, 3, 3, 2, 1, -1, 2, 5]], [[5, 4, 3, 10, 2, 1, 1, 3, 4, 5, 2, 4, 4]], [[-1, 2, 2, -2, 0, 0, 1, 1, 2, 1]], [[False, False, True, False, True, False, True, True]], [[7, 2, 1, 1, 1, 1, 4, 4, 6, 5, 2]], [[1, 1, 3, 2, 5, 4, 0, 5, 1]], [[2, 2, -1, 0, 0, 1, 1, 2, 1]], [[1, 1, 3, 3, 11, 2, 2, 3, 4]], [[0, 2, 2, -2, 1, 7, 2, 1, 1, 1, 1]], [[11, 2, 2, 2, 1, -2, 1]], [[5, 4, 3, 11, 2, 3, -2, 4, 5, 3]], [[1, 1, 3, 2, 2, 4, 5, 4, 5, 1, 3]], [[2, -2, 2, 2, 1, 2, 1, 2]], [[1, 3, 5, 3, 2, 1, -1, -1, 5, 2]], [[2, 2, 2, -2, 0, 0, 3, 2, 2]], [[1, 3, 4, 5, 4, 2]], [[10, 3, 5, 3, 2, 9, 7, 4, 5, 4]], [[5, 4, 3, 3, 2, 1, 1, 3, 1, 2, 3, 4, 5, 2, 4, 1, 3]], [[5, 4, 3, 10, 2, 1, 1, 2, 3, 4, 5, 1]], [[5, 4, 10, 2, 1, 2, 4, 1, 0, 2, 3, 4, 5, 2]], [[2, 9, 9, 5, 0, 0, 3, 10, 1, 9]], [[2, -1, 2, 2, -2, 1, 2]], [[2, 1, 1, 12, 1, 4, 5, 4, 6, 4]], [[2, 2, 2, 1, 1, -2, 7, 4, 6]], [[3, 2, -2, 5, 4, 5, 4, 3, 2, 1, -1, 1, 5, 4]], [[1, 11, 1, 3, 3, 2, 2, 4, 4]], [[1, 3, 4, 6, 4, 3, 2, 1, 2, 4, 1]], [[1, 1, 3, 8, 4]], [[9, 2, 1, 2, 1, 1, 4, 4, 4, 4, 4]], [[5, 4, 10, 2, 1, 3, 1, 2, 2, 4, 5, 2]], [[5, 4, 10, 2, 1, 10, 1, 3, 1, 0, 2, 5, -2, 6, 2, 2, 2]], [[1, 12, 2, 3, -2, 4, 5, 7, 3, 2, 1, 5, -1, 5]], [[1, 3, 4, 5, 4, 5, 2, 1, 4]], [[2, 2, 6, 1, 8, 2, 2, 1, 1, 7, 4, 4, 4, 2, 2, 1]], [[False, True, True, False, True, True, True, False, True, True, True, False]], [[1, 3, 4, 5, 3, 12, 1, 5, 2, 1]], [[2, 1, 1, 1, 1, 4, 4, 6, 7, 2]], [[6, 5, 2, 2, 1, 2, 1, 2, 2]], [[5, 4, -1, 3, 11, 2, 3, -2, 4, 4, 4, 5]], [[2, 2, 1, 2, 1, 1, 4, 4, 4, 4, 4]], [[2, 1, 0, 1, 0]], [[1, 12, 1, 3, 3, 2, 5, 5, 4, 5]], [[2, 2, 1, -1, 10, 2, 2]], [[1, 1, 3, 3, 2, 5, -2, 5]], [[1, 1, 3, 2, 4, 5, 4, 5]], [[1, 1, 3, 5, 4, 7, 0, 5, 4, 4, 4, 7]], [[2, 2, 1, 1, 2, -2, 0, 0, 1]], [[4, 3, 10, 2, 1, 1, 3, 4, 5, 2]], [[4, 4, 3, 10, 2, 1, 9, 1, 5, 2, 9, 4, 5, 3, 11, 2, 4, 5]], [[2, 3, 1, -2, 5, 1]], [[2, 1, 1, 1, 4, 6, 6, 7]], [[2, 2, 1, 1, 2, 2, 1, 3, 1, 4, 4, 5, 1]], [[2, 2, 9, 1, 1, 1, 4, 5, 4, 6, 4, 2]], [[2, 2, 1, 1, 2, -2, 4, 0, 1, 2]], [[1, 3, 5, 4, 4]], [[2, 2, 6, 1, 2, 2, 1, 1, 7, 4, 9, 2]], [[4, 3, 10, 2, 1, -2, 2, 3, 4, 5, 2, 10, 5]], [[1, 1, 3, 5, 4, 5, 6, 5, 5]], [[1, 0, 3, 4, 5, 2, 5, 5]], [[False, True, False, True, True, True, True, True, True, True, False, True, True]], [[1, 3, 4, 4, 3, 4, 6, 4, 6, 6]], [[2, -2, 5, 2, 2, 2, 1, 3, 4, 2, 1, 5]], [[2, 2, 1, 1, 7, 1, -2, 9, 4, 6]], [[5, 4, 3, 10, 2, 8, 2, 3, 4, 5, 2, 4, 1]], [[False, True, False, True, True, True, True, True, True, True, False, True, False, True, True]], [[2, -1, 2, -2, 1, 2]], [[4, 3, 10, 2, 1, -2, 2, 3, 4, 5, 2, 10, 5, 3]], [[2, 2, 6, -1, 1, 2, 1, 1, 4, 4, 4]], [[0]], [[1, 2, 3, 3]], [[3, 3, 2, 1]], [[1, 10, 7, 9, 8]], [[10, 9, 10, 9]], [[5]], [[1, 2, 2, 2, 3]], [[5, 5, 5, 5]], [[2, 2, 1, 0, 1, 1, 4, 4, 4]], [[1, 2, 3, -2, 4, 5, 4, 3, 2, 1]], [[5, 4, 2, 1, 2, 3, 4, 5, 5, 3]], [[2, 2, 1, 1, 1, 4, 4, 4, 4]], [[2, 2, 1, 1, 1, 4, 4, 5, 4]], [[5, 4, 5, 2, 1, 1, 1, 2, 3, 4, 5]], [[2, 2, 1, 1, 1, 4, 4, 5]], [[-2, -1, 0, 1, 2, 2, 0, -1, -2]], [[4, 2, 1, 2, 3, 4, 5, 5, 3]], [[2, 2, 1, 1, 1, 1, 4, 4, 4, 4]], [[5, 4, 3, 3, 1, 2, 3, 4, 5]], [[2, 2, 1, 1, 1, 1, 4, -2, 4, 4]], [[1, 2, 3, 4, 5, 4, 3, 2, 1, 4]], [[1, 2, 3, 4, 4, 4, 3, 2, 1, 4]], [[2, 2, 1, 1, 0, 1, 4, 5, 5]], [[3, 1, 2, 1, 1, 0, 1, 4, 5, 5]], [[2, 2, 1, 1, 1, 4, 4, 5, 4, 1]], [[1, 2, 3, 4, 4, 4, 3, 2, 1, 4, 4]], [[1, 2, 1, 1, 1, 4, 4, -1, 4, 4]], [[1, 2, 3, 4, 5, 4, 3, 2, 1, 4, 4]], [[2, 2, 1, 1, 1, -1, 4, -2, 4]], [[2, 2, 2, 1, 1, 0, 1, 4, 5, 5]], [[1, 2, 3, 4, 5, 4, 3, 2, 1, 4, 4, 1]], [[2, 2, 0, 1, 1, 4, 4, 5]], [[5, 4, 3, -1, 1, 1, 1, 2, 3, 5]], [[2, 2, 1, 0, 2, 1, 4, 4, 4]], [[1, 2, 3, 4, 5, 3, 4, 2, 1]], [[5, 4, 1, 3, 2, 1, 1, 1, 2, 3, 4, 5, 3]], [[-2, -1, 1, 2, 1, 0, -1, 2]], [[-2, -1, 0, 1, 2, 1, 0, -1, -2, 1]], [[5, 3, 3, 1, 2, 4, 5]], [[-2, 2, -1, 1, 2, 1, 0, -1, 0, 2]], [[-2, -1, 0, 1, 2, 2, 0, -1, -2, -1, -2]], [[1, 1, 3, 1, 1, 1]], [[1, 2, 3, 4, 4, 4, 3, -1, 2, 1, 4]], [[2, -2, 1, 1, 1, 4, 0, 4, 4, 4]], [[1, 3, -2, 4, 5, 4, 3, 3, 1]], [[1, 2, 3, 4, 5, 4, 3, 2, 4]], [[1, 3, 3, 2, 2, 4, 4]], [[2, 2, 1, 1, 1, 4, 4, 5, 1]], [[4, 2, 1, 1, 1, 4, 4, 4, 4]], [[2, 2, 2, 1, 1, 1, 2]], [[2, 2, 1, 0, 1, 4, 4, 5, 1]], [[2, 2, 1, 1, 1, -1, 4, 5, 5]], [[1, 3, -2, 4, 5, 4, 4, 3, 3, 1]], [[5, 4, 1, 4, 1, 1, 1, 2, 3, 4, 5, 3, 1]], [[2, 2, 1, 1, 1, 4, 4, 5, 4, 1, 4]], [[2, 2, 2, 1, 1, 0, 1, 2]], [[2, 2, 1, 1, 1, 0, 4, 4, 4]], [[2, 2, 1, 1, 0, 1, 5, 5, 5]], [[1, 2, 3, -2, 4, 0, 4, 3, 2, 1]], [[1, 0, 2, 3, -2, 4, 5, 0, 4, 3, 2, 2, 1]], [[2, 1, 1, 1, 1, 4, 4, 4, 4, 1]], [[1, 2, 3, 4, 10, 4, 3, 2, 2, 1, 4]], [[1, 5, 3, 4, 5, 4, 3, 2, 1, 4, 4, 1]], [[1, 2, 3, -2, 4, 5, 4, 2, 1, 3]], [[2, 1, 1, 1, 0, 4, 4, 4]], [[2, 1, 1, 1, 1, 4, 4, 5, 1]], [[2, 2, -1, 1, 1, 2, 1, 4, 4, 5, 4, 1, 4, 4]], [[2, 2, 1, 1, 0, 1, 4, 5, 5, 2, 5]], [[1, 2, 3, -2, 4, 5, 4, 3, 2, 4, 2]], [[3, 2, 2, 1, 1, 1, 4, 4, 4]], [[1, 2, 3, 4, 4, 4, 10, 2, 1, 4]], [[-2, -1, 0, 1, 2, 2, 0, -2]], [[1, 2, 3, 4, 5, 3, 4, 0, 2, 1, 3]], [[1, 1, 1, 1, 1, 1, 1]], [[2, 2, 1, 1, 1, 4, 4, 1]], [[-2, -1, -1, 0, 1, 2, 1, 0, -1, -2, 1]], [[2, 2, 1, 1, 0, 4, 5, 5]], [[1, 2, 5, 3, 4, 4, 4, 3, -1, 2, 1, 6, 4]], [[2, 2, 1, 1, 1, 9, 4, 5, 4]], [[5, 4, 6, 2, 1, 2, 3, 4, 5, 5, 3]], [[2, 1, 1, 1, 1, 1, 4, 4, 4, 4]], [[1, 2, 1, 1, 0, 1, 5]], [[5, 5, 3, 2, 1, 1, 1, 2, 3, 4, -2, 3, 1]], [[5, 2, 4, 1, 4, 1, 1, 5, 1, 1, 2, 3, 4, 5, 3, 1]], [[1, 3, -2, 4, 5, 4, 3, 3, 2, 1]], [[2, 2, 3, 0, 1, 1, 4, 4, 5]], [[2, 2, -2, 2, 1, 1, 1]], [[1, 2, 1, 0, 0, 1, 5]], [[1, 2, 3, 4, 5, 4, 3, 2, 1, 3]], [[1, 1, 1, 1, 0, 1]], [[2, 2, 1, 1, 2, 1, 4, 4, 4]], [[1, 2, 3, 4, 5, 3, 4, 2, 1, 3]], [[5, 5, 3, 2, 1, 1, 2, 3, 4, -2, 3, 1]], [[2, 2, 1, 1, 2, 1, 4, 4, 4, 4]], [[2, 2, 1, 1, 2, 1, 4, 4, 5, 4, 1, 4, 4]], [[2, 2, 1, 1, 4, 4, 4]], [[1, 2, 3, 3, 5, 4, 3, 2, 4]], [[1, 1, 1, 10, 1]], [[2, 2, 1, 1, 0, 4, 6, 5]], [[-2, -1, 1, 2, 1, 1, 0, -1, 2, -2]], [[2, 2, 1, 1, -1, 1, 5, 5, 5]], [[2, 2, 1, 1, -1, 1, 5, 6, 5]], [[1, 1, 0, 1]], [[2, 2, 1, 1, 2, 1, 4, 4, 4, 4, 2]], [[1, 3, 3, 1, 2, 2, 4, 4]], [[2, 2, 1, 1, -1, 1, 5, 6]], [[1, 2, 2, 1, 1, 1, 4, 4, 5, 1]], [[2, 2, 2, 1, 1, 1, 4, -2, 4, 4]], [[2, 2, 0, -2, 1, 1, 4, 4, 5]], [[3, 2, 2, 1, 1, 4, 4, 4]], [[3, 2, 2, 1, 1, 1, 4, 3, 4, 4]], [[1, 0, 2, 3, -2, 4, 5, 0, 4, 3, 4, 2, 1, 2]], [[-2, -1, 1, 2, 1, 0, -1, 2, 2]], [[1, 2, 1, 1, 3, 0, 1, 5]], [[2, 3, 4, 5, 6, 3, 2, 1, 9]], [[5, 4, 1, 4, 1, 1, 0, 1, 2, 3, 4, 5, 3, 1]], [[10, 2, 5, 3, 2, 6, 9, 7, 5, 4, 4, 3]], [[3, 2, 1, 1, 1, 4, 4, 1]], [[1, 1, 0, 1, 0]], [[2, 2, -1, 1, 1, 1, 4, 4, 5, 4, 1, 4, 4]], [[2, 2, 1, 1, 0, 4, 5, 5, 2, 5]], [[2, 2, 1, 1, 1, 4, 4, 4, 4, 4]], [[-2, -1, 0, 1, 2, 1, 3, 0, -1, -2, 1, 0]], [[2, 2, 1, 2, 1, 3, 4, 1]], [[2, 7, 3, 4, 5, 6, 3, 2, 1, 9]], [[-2, -1, 0, 0, 2, 2, 0, -1, -2]], [[5, 4, 1, 4, 1, 0, 1, 2, 3, 4, 5, 3, 1]], [[3, 2, 0, 2, 1, 1, 4, 4, 4]], [[3, 2, 2, 1, 1, 4, 4, 4, 4]], [[5, 4, 6, 4, 2, 1, 2, 3, 4, 4, 5, 3]], [[0, 1, 2, 3, 4, 5, 3, 4, 0, 2, 1, 3, 1, 5]], [[2, 2, 1, 1, -1, 4, 5, 5, 1]], [[1, 2, 3, 4, 10, 4, 3, 2, 2, 1, 4, 1]], [[1, 2, 3, 4, 3, 3, 4, 3, -1, 2, 1, 4]], [[2, 2, 2, 1, 1, 0, 7, 5, 5]], [[1, 7, 2, 2, 1, 1, 1, 4, 4, 1, 1]], [[2, 2, 0, 5, 1, 1, 4, 4, 5]], [[2, 1, 1, 2, 1, 4, 4, 4, 4, 1, 1]], [[2, 1, 1, 0, 4, 6, 5]], [[2, 2, 7, 2, 1, 1, 1, 4, -2, 4, 4]], [[3, 0, 2, 1, 1, 4, 4, 4]], [[1, 2, 3, 4, 5, 3, 4, 2, 6, 1]], [[1, 1, 1, 1, 9, 1]], [[2, 1, 1, 1, 4, 4, 5]], [[-2, -1, 1, 2, 2, 1, 0, -1, 2, 2, 1]], [[5, 2, 4, 1, 4, 1, 1, 5, 1, 2, 3, 4, 5, 3, 1]], [[2, 2, 3, 0, 1, 1, 1, 4, 5]], [[2, 2, 1, 1, 1, 4, 4, 5, 5, 1, 4]], [[2, 1, 1, 1, 4, 4, 5, 0]], [[2, 1, 1, 1, 1, 10, 1, 4, 4, 4, 4]], [[1, 5, 3, 5, 4, 4, 6]], [[5, 1, 1, 10, 1]], [[1, 2, 3, 5, 4, 3, 2, 1, 4]], [[-2, -1, 0, 1, 2, 1, 0, -1]], [[5, 5, 3, 1, 1, 3, 4, -2, 3, 1]], [[-2, -2, 0, 1, 2, 1, 0, -1, -2]], [[1, 0, 2, 3, -2, 4, 5, 0, 4, 3, 4, 2, 1, 2, -2]], [[1, 2, 1, -1, 0, 1, 5]], [[-2, -1, 0, 0, 2, 2, 5, 0, 1, -2]], [[-2, -2, 0, 0, 2, 2, 5, 0, 1, -3, -2]], [[2, 1, 1, 4, 4, 5]], [[2, 2, 1, 1, 1, 10, 4, 5, 4, 4]], [[2, 1, 1, 0, 1, 1, 4, 4, 4]], [[5, 5, 3, 2, 1, 1, 1, 2, 3, 4, -2, 3, 1, -2]], [[1, 2, 3, 4, 10, 4, 3, 2, 1, 3]], [[2, 2, 1, 0, 1, 4, 4, 1]], [[2, 7, 2, 1, 1, 1, 4, -2, 4]], [[-1, 1, 2, 3, 4, 5, 3, 4, 0, 2, 1, 3, 1, 5]], [[1, 3, 4, 5, 3, 4, 2, 1, 3]], [[2, 2, 1, 1, 1, 4, 4, 5, 4, 1, 4, 2]], [[2, 2, 2, 1, 1, 0, 1, 0, 2]], [[4, 1, 1, 1, 0, 4, 5, 5]], [[1, 2, 3, 3, 5, 2, 3, 2, 4]], [[1, 2, 3, 4, 4, 3, 2, 1, 3, 3]], [[1, 0, 2, 3, -2, 4, 5, 0, 4, 3, 4, 1, 2, -2]], [[2, 7, 3, 4, 5, 6, 3, 2, 0, 1, 9]], [[1, 2, 1, 1, 3, 0, 1]], [[2, 2, 1, 1, -1, 1, 5, 5, 5, 5]], [[1, 2, 3, -2, 4, 5, 4, 3, 2, 4, 2, 2, 2]], [[4, 1, 1, 1, 0, 10, 4, 5, 5]], [[1, 7, 2, 2, 2, 1, 1, 1, 4, 4, 1, 1]], [[1, 3, 4, 4, 4, 2, 1, 4]], [[5, 5, 4, 3, 2, 1, 2, 3, 4, 5, 3]], [[1, 2, 7, 5, 3, 4, 4, 4, 3, -1, 2, 1, 6, 4]], [[2, 2, 1, 1, 2, 1, 4, 4, 4, 2]], [[2, 2, 1, 1, 1, 2, 1, 4, 4, 5, 4, 1, 4, 4]], [[4, 2, 1, 1, 1, 4, 4, 1]], [[4, 1, 1, 1, 0, 4, 5, 5, 5]], [[2, 1, 1, 1, 1, 1, 4, 1, 4, 4, 4]], [[2, 2, -1, 2, 1, 1, 1, 4, 4, 5, 4, 1, 4, 4]], [[-3, 2, 1, 1, 1, 0, 4, 0, 5, 4]], [[2, 3, 4, 5, 6, 3, 2, 1, 9, 3]], [[1, 9, 2, 3, 4, 4, 4, 3, 2, 1, 4]], [[4, 1, 1, 1, 0, 4, 5, 5, 1]], [[3, 1, 1, 0, 1, 1, 4, 4, 4]], [[5, 4, 3, 2, 1, 1, 1, 2, 3, 4, 5, 2]], [[2, 2, 0, 2, 1, 1, 1, 4, 4, 5, 4, 4, 4]], [[1, 2, 3, 4, 5, 3, 4, 2, 1, -1, 3]], [[2, 2, 0, 2, 1, 1, 4, 4, 5, 4, 4, 4]], [[2, 2, 0, 1, 1, 4, 5, 5, 2]], [[1, 2, 3, 4, 1, 4, 3, 2, 1, 4, 3]], [[5, 5, 3, 2, 1, 1, 2, 3, 4, -2, 3, 1, 3]], [[1, 1, 1, 1, 1, 1, 1, 1]], [[1, 2, 3, 4, 3, 3, 4, 3, -1, 2, 1, 4, 4]], [[2, 2, 2, 1, -1, 1, 0, 1, 2]], [[2, 2, 1, 1, 1, 4, 4, 4, 4, 1]], [[4, 2, 1, 2, 3, 4, 5, 5, 3, 4, 2, 4]], [[1, 2, 3, 4, 4, 3, 1, 3]], [[2, 2, 1, 1, -1, 4, 1, 5, 5, 1]], [[2, 0, -2, 1, 1, 4, 4, 5]], [[2, 2, 1, 1, -1, 1, 5, 5, 5, -1]], [[1, 1, 0, 1, 1, 0, 1]], [[10, 2, 5, 3, 2, 2, 6, 9, 7, 5, 4, 4, 3]], [[1, 3, 1, 2, 2, 4, 4]], [[4, 1, 1, 1, 4, 5, 5]], [[2, 2, 1, 1, 1, 0, 4, 4, 4, 4]], [[2, 1, 1, 1, 1, 4, 4, 4, 1]], [[2, 2, 1, 2, 1, 4, 4, 4]], [[2, 1, 1, 1, 1, 4, 4, 4, 4]], [[2, 0, -2, 1, 1, 4, 4, 5, 0]], [[-2, -1, 0, 1, 2, 1, 0, -1, 1]], [[2, 1, 0, 2, 1, 4, 4, 4, 4]], [[2, 1, 1, 1, 1, 4, 4, 4, 4, 1, 2]], [[1, 2, 5, 3, 4, 4, 4, 3, -1, 2, 1, 6, 4, 5]], [[5, 4, 1, 4, 2, 1, 1, 1, 2, 3, 4, 5, 3, 1]], [[5, 1, 10, 10, 1]], [[4, 2, 1, 1, 1, 4, 5, 1]], [[1, 2, 1, 4, 1, 3, 0, 1, 5, 1]], [[2, 2, -3, 1, -3, 1, 4, 4, 4, 4, 1]], [[-2, -2, 0, 1, 2, 1, 0, -1, -2, 0]], [[1, 2, 1, 1, 0, 1, 5, 1]], [[-2, -1, 0, 0, 2, 2, 0, -1, -2, 2]], [[1, 2, 3, 4, 5, 3, 1, 3]], [[10, 9, 2, 3, 4, 4, 4, 3, 2, 1, 4]], [[10, 9, 2, 5, 3, 2, 6, 9, 7, 5, 4]], [[2, 4, 2, 1, 1, -1, 0, 5, 5, 5, 5]], [[2, 1, 1, 1, 4, 4, 5, 1]], [[2, 2, 2, 1, 1, 1, 4, -2, 4, 4, 2]], [[2, 2, 1, 1, 1, 4, 4, 4]], [[1, 2, 3, 3, 5, 2, 3, 2, 4, 3]], [[5, 5, 3, -3, 2, 1, 1, 1, 2, 3, 4, -2, 3, 1, -2, -2]], [[2, 2, 1, 0, 1, 4, 1]], [[1, 2, 3, 0, 5, 4, 3, 2, 4]], [[2, 1, 9, 0, 1, 4, 1]], [[-2, -1, 0, 1, 2, 1, 0, -1, 1, 2]], [[2, 2, 0, 1, 4, 4, 5, 1]], [[1, 2, 7, 3, 4, 10, 4, 3, 3, 2, 1, 4]], [[2, 2, 1, 0, 2, 1, 4, 4, 4, 4]], [[6, 2, 2, 1, 10, 1, 4, 4, 5, 5, 1, 4]], [[10, 9, 2, 3, 4, 4, -3, 4, 1, 3, 6, 2, 1, 4]], [[5, 4, 5, 2, 1, 1, 1, 2, 3, 4, 5, 1, 1]], [[2, 2, 1, 1, 1, 0]], [[2, 1, 1, 1, 1, 1, 4, 4, 4]], [[5, -1, 4, 3, 2, 1, 1, 1, 2, 3, 4, 5, 3]], [[1, 10, 1, 1, 3, 0, 1, 5]], [[4, 1, 1, 1, 0, 4, 5, 5, 5, 1]], [[-2, -1, 0, 0, 2, 2, 5, 0, 2, -2]], [[1, 2, 3, 4, 5, 4, 3, 2, 1, 3, 3]], [[3, 1, 2, 2, 4, 4, 2, 2]], [[1, 2, 3, 3, 5, 2, 2, 3, 2, 4]], [[1, 1, 0, 1, 5]], [[-2, 2, -1, 2, 1, 0, -1, 0, 2]], [[1, 2, 2, 3, 5, 3, 4, 2, 1, 1, 3]], [[1, 2, 3, 4, 9, 4, 3, 2, 4]], [[4, 2, 1, 1, 1, 4, 4, 1, 10, 4]], [[1, 5, 3, 4, 5, 4, 6, 2, 1, 4, 4, 1]], [[2, 1, -1, 1, 5, 5, 5, -1]], [[2, 1, 0, 2, 1, 4, 4, 5, 4, 4]], [[2, 1, 1, 1, 10, 1, 4, 4, 4, 4]], [[4, 2, 1, 1, 1, 1]], [[-2, -1, 0, 1, 2, 1, 3, 0, -2, 1, 0]], [[1, 2, 3, 3, 5, 2, 3, 2, 4, 3, 4, 3, 3]], [[0, 1, 3, 3, 2, 2, 4, 4]], [[-2, 0, 0, 0, 2, 2, 0, -1, -2]], [[5, 4, 5, 2, 1, 1, 1, 2, -2, 3, 4, 5, 1, 1]], [[5, 1, 1, 10, 5, 10, 1]], [[1, 2, 2, 1, 1, 1, 4, 4, 5, 4, 1, 4, 4]], [[2, 2, 3, 0, 1, 1, 4, 4]], [[1, 2, 1, 1, 1, 4, 4, -1, 4, 2, -1]], [[4, 2, 1, 1, 1, 4, 3, 4, 1, 10, 4]], [[1, 2, 1, 4, 1, 2, 3, 0, 1, 5, 1]], [[1, 1, 0, 1, 5, 1, 1]], [[1, 2, 3, 4, 5, 3, 2, 1, 3, 3]], [[2, 2, 1, 1, -1, 1, 5, 5, 5, -1, 2]], [[1, 3, 0, 4, 3, 4, 3, 3, 2, 1, 5, 4]], [[3, 1, 2, 2, 0, 4, 4, 2, -1, 1]], [[2, 2, 1, 2, 1, 3, 4, 4]], [[1, 2, -2, 3, 3, 5, 2, 3, 2, 4, 3]], [[2, 2, 1, 1, 1, 1, 4, -2, 4, -3, 4, 2]], [[5, 5, 3, 2, 1, 1, 1, 1, 2, 3, 4, -2, 3, 1]], [[5, 1, 1, 0, 4, 5, 4, 5]], [[4, 5, 3, 2, 1, 1, 2, 3, 4, -2, 3, 1, 3]], [[2, 0, -2, 1, 1, 4, 4, 5, 4]], [[2, 2, 2, 1, 1, 0, 1, 2, 0]], [[2, 3, 4, 5, 6, 3, 1, 9, 3]], [[1, 2, 1, 1, 0, 1, 4, 5]], [[1, 1, 1, 2, 1, 9, 1]], [[1, 1, 1, 10, 1, 10]], [[5, 3, 2, 1, 1, 2, 3, 4, -2, 3, 1, 3]], [[0, 1, 2, 3, 4, 5, 3, 4, 2, 6, 1]], [[4, 1, 1, 1, 0, 10, 3, 5, 5]], [[-2, -1, 0, 1, 2, 2, 0, -1, -2, -1, -2, -1]], [[2, 1, 1, 0, 0, 4, 4, 4]], [[5, 1, 2, 3, 4, 10, 4, 3, 2, 1, 3]], [[1, 2, 3, 4, 5, 4, 3, 2, 3]], [[3, 2, 0, 2, 1, 1, 4, 4]], [[1, 7, 2, 2, 2, 1, 1, 1, 4, 4, 1, 1, 2, 2]], [[5, 2, 4, 1, 4, -3, 1, 1, 5, 1, 2, 3, 4, 5, 3, 1]], [[5, 1, 10, 1, 10, 2, 1]], [[5, 4, 3, 2, 1, 1, 1, 2, 3, 4, 5, 3, 1, 1]], [[2, 2, 7, 2, 1, 1, 1, 4, -2, 4]], [[1, 1, 7, 1, 0, 1]], [[-2, -1, 0, 1, 2, 1, 0, -2, 1, -1]], [[-2, -1, 1, 2, 1, 0, -1, 2, 1]], [[5, 5, 3, 2, 1, 1, 10, 1, 1, 2, 3, 4, -2, 3, 1]], [[2, 2, 1, 6, 2, 1, 4, 3, 4, 6]], [[2, 1, 3, 6, 1, 1, 1, 4, 1, 4, 4, 4]], [[1, 2, 7, 5, 3, 4, 4, 4, 3, -1, 2, 1, 6, 4, 1]], [[5, 5, 3, 2, 1, 1, 2, 3, -2, 3, 1, 3, 2]], [[1, 2, 3, 4, 5, 3, 1]], [[2, 2, 1, 0, 2, 1, -2, 4, 4, 4, 4]], [[-3, 2, 2, 1, 1, 1, 4, 4, 5]], [[2, 1, 1, 1, 4, 5, 1, 1]], [[1, 2, 3, 4, 5, 1, 4, 3, 2, 1, 3, 3]], [[2, 2, 1, -1, 1, 0, 4, 5, 5, 2, 5]], [[3, 3, 2, 0, 2, 1, 1, 4, 4, 4]], [[10, 9, 2, -3, 3, 2, 6, 9, 7, 5, 4, 10]], [[10, 9, 2, 5, 2, 6, 9, 7, 5, 4]], [[2, 3, 1, 1, 1, 1, 1, 4, 4, 4, 4, 1]], [[1, 2, 3, 2, 10, 4, 3, 2, 2, 1, 4, 1]], [[1, 1, 1, 9, 1]], [[2, 2, 1, 1, 1, 2]], [[5, 1, 1, 0, 4, 5, 4, 5, 4]], [[1, 0, 2, 3, -2, 4, 5, 0, 4, 3, 4, 1, 2, -2, 2]], [[1, 2, 3, 4, 4, 4, 4, 3, 2, 1, 4]], [[3, 2, 2, 1, 1, 1, 4, 4, 4, 2]], [[-2, -1, 0, 1, 2, 1, 0, -1, -2, 2]], [[2, 1, 0, 2, 1, 4, 4, 3, 4, 4]], [[1, 0, 2, 3, -2, 4, 5, 0, 4, 3, 4, 1, 10, -2]], [[1, 10, 1, 1, 3, 1, 5]], [[5, 4, 5, 2, 1, 1, 1, 2, 3, 4, 1, 1, 1]], [[4, 2, 1, 2, 3, 4, 5, 5, 5, 3, 4, 2, 4]], [[1, 2, 3, 4, 10, 4, 3, 2, 2, 1, 4, 1, 4]], [[2, 2, -1, 1, 1, 1, 4, 4, 5, 4, 1, 4, 4, 2]], [[3, 1, 2, 1, 1, 4, 4, 4]], [[1, 2, 3, 4, 4, 2, 1, 3, 3]], [[5, 4, 5, 2, 1, 1, 1, 2, 3, 4, 5, 1, 1, 5]], [[2, 7, 3, 4, 5, 6, 3, 2, 0, 6, 1, 1, 9]], [[4, 2, 1, 1, 1, 3, 5, 1]], [[2, 0, 2, 2, 1, 1, 1, 4, -2, 4, 4]], [[2, 3, 4, 5, 6, 3, 2, 3, 1, 9, 3, 1]], [[-3, 1, 2, 3, 4, 2, 10, 4, 3, 2, 2, 1, 4, 1, 4]], [[2, 1, 2, 4, 5]], [[4, 1, 1, 0, 4, 5, 5]], [[-2, -1, -1, 1, 2, 0, -2]], [[-2, 0, 0, 2, 2, 0, -1, -2]], [[1, 1, 1, 10, 1, 10, 1]], [[4, 2, 2, 1, 1, 3, 5, 1]], [[1, 10, 1, 1, 1, 1]], [[2, 2, 2, 1, 0, 2, 1, 3, 4, 4, 4, 4]], [[2, 7, 3, 3, 5, 6, 3, 2, 0, 1, 9]], [[5, 4, 3, 2, 1, 1, 2, 3, 4]], [[-2, -1, 2, 1, 0, -1]], [[0, 1, 2, 3, 4, 5, 3, 4, 0, 2, 1, 1, 5]], [[2, 2, 1, 1, 5, 0, 4, 5, 5]], [[2, 2, 1, 4, 1, -1, 1, 5, 5, 5, 5]], [[2, 1, 1, 1, 0, 4, 0, 5, 4, 2, 1]], [[2, 2, 1, 1, 0, 2]], [[1, 2, 3, 4, 4, 4, 11, 2, 1, 4]], [[2, 2, 1, 0, 2, 1, 9, 4, 4]], [[5, 3, 2, 1, 1, 2, 3, 4, -2, -1, 1, 3]], [[1, 2, 7, 5, 3, 4, 4, 4, 3, -1, 5, 2, 1, 6, 4]], [[2, 2, 1, 0, 1, 9, 4, 5, 1]], [[2, 4, 2, 1, 1, 1, 4, 4, 4, 4, 4]], [[3, 1, 2, 2, 0, 4, 10, 2, -1, 1]], [[2, 2, 1, 1, 2, 1, 4, 4]], [[1, 1, 1, 0, 1, 5]], [[1, 1, 3, 4, 5, 3, 4, 2, 1, 3, 1]]]\n    results = [True, True, False, True, True, False, True, True, True, True, True, True, True, False, True, True, True, False, True, True, False, False, True, True, False, False, True, True, False, True, True, False, False, True, False, True, False, False, True, True, True, True, False, False, False, False, False, False, True, False, False, True, False, False, True, False, False, True, True, True, False, False, False, False, False, True, False, False, True, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, True, False, False, False, True, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, True, True, False, False, True, True, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]\n    for i, (inp, exp) in enumerate(zip(inputs, results)):\n        assertion(candidate(*inp), exp, 0)\n",
      "entry_point": "monotonic",
      "complete_code": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    inc, dec = True, True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]: inc = False\n        if l[i] < l[i + 1]: dec = False\n    return inc or dec\n\n"
    },
    "execution_info": {
      "max_mutations_per_operator": 10,
      "total_operators_tested": 46,
      "operators_with_mutations": 12,
      "execution_timestamp": "2025-08-01T15:45:35.983413"
    }
  }
}