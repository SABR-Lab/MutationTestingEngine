{
  "timestamp": "20250801_153950",
  "test_type": "mutation_testing",
  "metadata": {
    "task_id": "HumanEval/37",
    "timestamp": "20250801_153950",
    "tester_version": "1.0",
    "total_operators_tested": 9,
    "operators_with_errors": 0
  },
  "summary": {
    "original_passes": true,
    "total_mutations": 16,
    "killed_mutations": 14,
    "mutation_score": 0.875,
    "survival_rate": 0.125
  },
  "detailed_results": {
    "task_id": "HumanEval/37",
    "dataset_type": "plus",
    "original_passes": true,
    "total_mutations": 16,
    "killed_mutations": 14,
    "mutation_score": 0.875,
    "mutation_results": {
      "NumberReplacer": {
        "total_mutations": 6,
        "killed_mutations": 6,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 3 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 3 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp83d8uio6.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp83d8uio6.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmp83d8uio6.py\", line 23, in sort_even\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n            ~~~~^^^^^^^^\nIndexError: list index out of range\n",
            "timestamp": "2025-08-01T15:39:45.011677",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 1 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 1 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpx1qcr2_7.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpx1qcr2_7.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpx1qcr2_7.py\", line 48, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:39:45.242307",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 1]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 1]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp7_ipxgga.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp7_ipxgga.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmp7_ipxgga.py\", line 23, in sort_even\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n            ~~~~^^^^^^^^\nIndexError: list index out of range\n",
            "timestamp": "2025-08-01T15:39:45.457000",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 3,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == -1]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == -1]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpi933gh_y.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpi933gh_y.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmpi933gh_y.py\", line 23, in sort_even\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n            ~~~~^^^^^^^^\nIndexError: list index out of range\n",
            "timestamp": "2025-08-01T15:39:45.674792",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 4,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 3 == 0 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 3 == 0 else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp_rcz2inb.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp_rcz2inb.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp_rcz2inb.py\", line 48, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:39:45.892343",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 1 == 0 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 1 == 0 else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp9ou_tqpz.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp9ou_tqpz.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp9ou_tqpz.py\", line 48, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:39:46.140673",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 6,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 1 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 1 else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpaiobte5h.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpaiobte5h.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpaiobte5h.py\", line 48, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:39:46.380439",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 7,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == -1 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == -1 else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpwctjesa3.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpwctjesa3.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpwctjesa3.py\", line 48, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:39:46.643411",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 8,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 3] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 3] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpohmgr0l7.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpohmgr0l7.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpohmgr0l7.py\", line 48, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:39:46.962453",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 9,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 1] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 1] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp1pxhijdm.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp1pxhijdm.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmp1pxhijdm.py\", line 23, in sort_even\n    return [even[i // 1] if i % 2 == 0 else l[i] for i in range(len(l))]\n            ~~~~^^^^^^^^\nIndexError: list index out of range\n",
            "timestamp": "2025-08-01T15:39:47.259098",
            "status": "BROKEN",
            "reason": "code_error"
          }
        ],
        "mutation_count_available": 10,
        "mutations_tested": 10
      },
      "FloorDiv->Mod": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i % 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i % 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpnxbqohfq.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpnxbqohfq.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpnxbqohfq.py\", line 48, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:39:47.660545",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Mod->FloorDiv": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i // 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i // 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpq5rovn4w.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpq5rovn4w.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpq5rovn4w.py\", line 48, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:39:47.991502",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i // 2 == 0 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i // 2 == 0 else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpw3vdrnn_.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpw3vdrnn_.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpw3vdrnn_.py\", line 48, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:39:48.298686",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Eq->NotEq": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 != 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 != 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpxvyji1zb.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpxvyji1zb.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmpxvyji1zb.py\", line 23, in sort_even\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n            ~~~~^^^^^^^^\nIndexError: list index out of range\n",
            "timestamp": "2025-08-01T15:39:48.659460",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 != 0 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 != 0 else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpam4l4906.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpam4l4906.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpam4l4906.py\", line 48, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:39:48.987672",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Remove ReturnValue": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmptszef_m5.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmptszef_m5.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmptszef_m5.py\", line 48, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:39:49.276612",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Zero->One": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 1]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 1]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp3l_ptd0h.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp3l_ptd0h.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmp3l_ptd0h.py\", line 23, in sort_even\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n            ~~~~^^^^^^^^\nIndexError: list index out of range\n",
            "timestamp": "2025-08-01T15:39:49.486853",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 1 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 1 else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp2_nxh2yf.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp2_nxh2yf.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp2_nxh2yf.py\", line 48, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:39:49.688535",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "String->Empty": {
        "total_mutations": 1,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"\"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"\"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:39:49.907158",
            "status": "SURVIVED",
            "reason": "tests_passed"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "String->X": {
        "total_mutations": 1,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"X\"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"X\"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:39:50.142025",
            "status": "SURVIVED",
            "reason": "tests_passed"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Ternary Condition": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if True else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if True else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpacn1blpu.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpacn1blpu.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpacn1blpu.py\", line 48, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:39:50.368563",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
            "mutated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if False else l[i] for i in range(len(l))]",
            "mutated_complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if False else l[i] for i in range(len(l))]",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpgsa2zzb_.py\", line 61, in <module>\n    check(sort_even)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpgsa2zzb_.py\", line 55, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpgsa2zzb_.py\", line 48, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:39:50.602745",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      }
    },
    "problem_info": {
      "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
      "canonical_solution": "\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n",
      "test_code": "\n\nimport numpy as np\n\ndef is_floats(x) -> bool:\n    # check if it is float; List[float]; Tuple[float]\n    if isinstance(x, float):\n        return True\n    if isinstance(x, (list, tuple)):\n        return all(isinstance(i, float) for i in x)\n    if isinstance(x, np.ndarray):\n        return x.dtype == np.float64 or x.dtype == np.float32\n    return False\n\n\ndef assertion(out, exp, atol):\n    exact_match = out == exp\n\n    if atol == 0 and is_floats(exp):\n        atol = 1e-6\n    if not exact_match and atol != 0:\n        assert np.allclose(out, exp, rtol=1e-07, atol=atol)\n    else:\n        assert exact_match\n\n\ndef check(candidate):\n    inputs = [[[1, 2, 3]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]], [[5, 8, -12, 4, 23, 2, 3, 11, 12, -10]], [[2, 6, 4, 8, 10]], [[1, 0, 3, 6, 5]], [[3, 3, 2, 2, 1, 1]], [[11, 7, 6, 9, 14, -1]], [[]], [[3]], [[5, 9, 3, 8, -1, 12, -14, 7]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]], [[8, 7, 6, 5, 4, 3, 2, 1]], [[0, 0, 0, -1, -1, -1, 2, 2, 2]], [[1, 0, 3, 4, 6, 5]], [[4, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]], [[3, 3, 2, 2, 1, 11, 1]], [[29.192135197854643, 33.66238184288656, 29.291147603502964]], [[3, 2, 5, 2, 2, 1, 1]], [[3, 3, 2, 2, 1, 11, 1, 3]], [[3, 4, 10, 2, 2, 1]], [[1, 3, 4, 6, 5, 4]], [[3, 3, 2, 2, 1, 1, 3]], [[3, 3, 2, 2, 2, 11, 1, 3]], [[4, 1, 3, 4, 5, 6, 3, 7, 8, 9, 10, 11, 12]], [[1, 1, 3, 6, 5]], [[1, 0, 3, 4, 6, -1, 10, 0]], [[4, 1, 3, 4, 5, 6, 3, 7, 8, 5, 9, 10, 11, 12]], [[3, 4, 10, -14, 2, 4, 2, 1]], [[3, 2, 5, 2, 14, 1, 1]], [[-1, 1, 3, 6, 5]], [[3, 3, 2, 0, 2, 1, 1]], [[-1, 1, 3, 5]], [[3, 3, 2, 8, 2, 2, 11, 1, 3, 0, 11]], [[1, 3, 4, 5, 6, 7, 10, 8, 9, 10, 11, 12]], [[0, 3, 4, 6, -1, 10, 0]], [[0, 4, 4, 6, -1, 10, 0, 10]], [[2, 1, 0, 3, 4, 6, 5]], [[3, 2, 5, 14, 1, 1]], [[3, 1, 3, 2, 2, 1]], [[1, 3, 2, 2, 1, 1]], [[4, 3, 2, 5, 2, 2, 1, 1]], [[3, 3, 2, 2, 1, 11, 1, 3, 2]], [[3, 14, 2, 5, 14, 1, 1]], [[3, 3, 2, 2, 1, 11, 1, 3, 2, 3]], [[1, 0, 3, 6]], [[3, 3, 2, 2, 1, -1, 1, 3, 2]], [[4, 0, 3, 4, 5, 6, 7, 8, 5, 9, 10, 11, 12]], [[2, 3, 4, 10, -14, 2, 4, 2, 1]], [[3, 3, 2, 2, 0, 11, 1, 3, 1]], [[3, 3, 2, 2, 1, 11, 1, 11]], [[1, 0, 3, 5]], [[1, 4, 0, 3]], [[0, 0, 0, -1, -1, -1, 2, 2, 2, 2]], [[3, 2, 5, 2, 2, 1, 1, 3, 1]], [[3, 1, 3, 2, 2, 1, 3]], [[0, 4, 4, 6, 0, 10, 0, 10, 10]], [[1, 4, 0, -1, 3, 3]], [[3, -14, 10, -14, 2, 4, 2, 1]], [[3, 4, 10, -14, 2, 4, 2, 1, -14]], [[3, 3, 2, 8, 2, 2, 11, 0, 1, 3, 0, 11]], [[2, 5]], [[2, 6, 4, 8, 11]], [[1, 0, 14, 3]], [[3, 2, 4, 2, 14, 0, 1]], [[4, 1, 3, 4, 5, 6, 2, 7, 8, 5, 9, 10, 11]], [[3, 2, 2, 1, 1]], [[4, 3, 2, 5, 2, 2, 1, 1, 1]], [[0, 3, 4, 6, -1, 10, 0, 0]], [[1, 0, 3, 4, 6, -1, -14, 0]], [[4, 1, 3, 4, 5, 6, 3, 7, 8, 9, -1, 11, 12, 12]], [[3, 2, 2, 1, 1, 1]], [[2, 3, 4, 10, -14, 2, 4, 2, 1, 10]], [[8, 7, 6, 5, 4, 3, 2, 1, 2]], [[1, 0, 3, 6, 5, 0, 1]], [[4, 1, 3, 4, 4, 5, 5, 6, 3, 7, 8, 9, -1, 11, 12, 12, 1]], [[2, 1, 0, 3, 4, 4, 6, 5]], [[0, 3, 4, 6, -1, 10, 0, 0, 10]], [[3, 4, 2, 2, 1, 2]], [[1, 1, 3, 5]], [[33.66238184288656, 29.291147603502964]], [[4, 1, 1, 3, 4, 5, 6, 3, 7, 8, 5, 9, 10, 11, 10]], [[1, 0, 3, 4, 6, -1, -14, 0, 0]], [[4, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1]], [[3, 2, 10, -14, 2, 4, 2, 1, 10]], [[3, 3, 2, 5, 0, 2, 1, 1]], [[3, 3, 2, 2, 1, 14, 1, 3, 2, 2, 3]], [[3, 3, 2, 0, 2, 1, 11, 1, 4, 3, 2]], [[1, 3, 4, 5, 6, 3, 7, 8, 9, -1, 11, 12]], [[3, 3, 2, 2, 1, 11, 1, 3, 11]], [[33.66238184288656, 29.291147603502964, 29.291147603502964]], [[0, 5, 5]], [[0, 3, 4, 6, -1, 10, 0, 5]], [[0, 0, 0, -1, -1, 2, 2, 0]], [[2, 3, 4, -14, 2, 4, 2, 1, 10]], [[0, 0, 0, -1, -1, -1, 2, 2, 2, -1]], [[3, 0, 3, -14, -14, 2, 4, 2, 0]], [[3, 3, 2, 2, 1, 11, 1, 3, 2, 0]], [[2, 4, 10, -14, -14, 2, 4, 2, 1]], [[40.82822270856693, 33.66238184288656, 29.291147603502964, 29.291147603502964]], [[3, 3, 2, 5, 0, 2, 1, 1, 1]], [[1, 1, 2, 3, 5]], [[3, 1, 2, 2, -14, 1]], [[1, 3, 4, 5, 6, 3, 7, 8, 14, 9, -1, 11, 12]], [[5, -2, -12, 4, 23, 2, 3, 11, 12, -10]], [[5, 3, -5, 2, -3, 3, -9, 0, 123, 1, -10]], [[1, 2, 3, 4, 5, 6, 7, 8]], [[1, 1, 1, 1, 2, 2, 2, 2]], [[5, 0, 5, 0, 5, 0, 5, 0]], [[1, 1, 1, 1, 1, 1, 1, 1]], [[2, 2, 2, 2]], [[3, 3, 3, 3, 3]], [[3, 1, 4, 1, 5, 9, 2, 6, 5, 3]], [[-5, -7, 2, 10, 0, 9, 5, -3, 2, 8, 3, 7]], [[-5, -7, 2, 10, 0, 9, 5, -3, 2, 8, 3, 7, 2]], [[3, 3, 3, 3, 3, 3]], [[3, 3, 3, 3]], [[5, 3, -5, 2, -3, 3, -9, 0, 123, 1, -10, 123]], [[2, 2, 8, 2]], [[1, 2, 3, 4, 5, 6, 7, 10]], [[3, -3, 3, 3, 3, 3, 3]], [[1, 1, 2, 3, 4, 5, 6, 7, 10]], [[5, 0, 5, 0, 5, -12, 0, 5, 0]], [[1, 2, 3, 4, 6, 7, 8, 2]], [[5, -2, -12, 4, 4, 23, 2, 3, 11, 12, -10]], [[3, 2, 3, 3, 3, 3]], [[1, 2, 3, 4, 6, 7, 7, 8, 2]], [[-7, 2, 3, 4, 5, 6, 7, 10, 2]], [[-7, 2, 3, 4, 5, 6, 7, 10, 5, 10]], [[3, 1, 1, 1, 1, 2, 2, 2, 2]], [[6, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 6]], [[3, -3, 1, 1, 1, 2, 2, 2, 2, 3]], [[2, 2, 2, 123]], [[-7, 2, 3, 4, 5, 7, 7, 10, 2, 4]], [[6, 3, 6, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 6]], [[5, -2, -12, 11, 4, 4, 23, 2, 4, 3, 11, 12, -10]], [[3, 2, 3, 3, 3, -5, 3]], [[6, 3, 6, 1, 4, 1, 5, 9, 2, 6, 5, 3, 6]], [[5, -2, -12, 4, 23, 2, 3, 11, 12, -10, 3]], [[3, -5, 2, -3, 3, -9, 0, 123, 1, -10, 10, 122]], [[1, 2, 3, 4, 6, 7, 2, 2]], [[1, 2, 8, 2]], [[1, 2, 3, 4, 5, 6, 7, 8, 2]], [[5, -2, -12, 4, 23, 2, 3, 3, 11, 12, -10, 3]], [[5, 3, -5, 2, -3, 3, -9, 0, 6, 123, 1, -10, 123]], [[1, 1, 1, 1, 1, 1, 1, -10, 1]], [[5, 0, 6, 0, 5, -12, 0, 5, 0]], [[11, -7, 2, 10, 0, 9, 5, -3, 2, 8, 3, 7]], [[5, -2, -12, 4, 23, 2, 3, -13, 11, 12, -10, 3, 2, 4]], [[11, -7, 2, 10, 0, 9, 5, -3, 2, 8, 2, 3, 7]], [[1, 1, 1, 1, 2, 2, 2, 2, 1]], [[3, -3, 1, 1, 1, 2, 2, 2, 2, 3, 1]], [[1, 1, 1, 1, 2, 0, 2, 2, 2]], [[5, 0, 6, 0, 5, -12, 0, -5, 3]], [[-7, 2, 3, 4, 3, 5, 7, 7, 10, 2, 4, 4]], [[3, -3, 1, 1, 1, 2, 2, 2, 2, 3, 2]], [[1, 2, 3, 4, 5, 6, 7]], [[3, -3, 1, 1, 1, 2, 2, 2, 2, 1, 3, 11]], [[12, 3, 10, 3]], [[6, 3, 5, 1, 4, 1, 5, 9, 2, 6, 5, 3, 6]], [[5, 3, -5, 2, -3, -9, 0, 123, 1, -10, 123]], [[1, 1, 1, 1, 1, 1, 1, 1, 1]], [[3, 2, 3, 3, 4, 3, -5, 3]], [[2, 2, 3, 4, 6, 7, 7, 8, 2, 2]], [[6, 1, 2, 3, 4, 5, 6, 7, 8, 2]], [[1, 2, 4, 3, 4, 5, 6, 7, 10]], [[3, 1, 4, 1, 9, 2, 6, 5, 3]], [[5, -2, -12, 4, 4, 123, 23, 2, 3, 11, 12, -10]], [[5, -2, -12, 4, 4, 23, 3, 11, 12, -10, 4]], [[5, -2, -12, 4, 4, 123, 23, 2, 3, 11, 12]], [[1, 1, 3, 4, 6, 7, 8, 2]], [[4, -2, -12, 4, 23, 2, 3, 11, 12, -10]], [[-5, -7, 2, 2, 0, 9, 5, -3, 2, 8, 3, 7, 2, 2]], [[5, 3, -5, 12, -3, 3, -9, 0, 123, -10]], [[-3, 1, 1, 1, 2, 2, 1, 2, 2, 3, 1, 1]], [[-5, -7, 2, 10, 11, 0, 9, 5, 2, 8, 3, 7]], [[-7, 2, 3, 4, 6, 7, 10, 5, 10]], [[3, 3, 3, 3, 6, 3]], [[-7, 2, 3, 4, 6, 7, 10, 5, 10, 10, -7]], [[2, 2, 3, 4, 6, 7, 7, 8, 2, 2, 7]], [[5, 3, 6, -5, 2, -3, 3, -9, 0, 123, 1, -10]], [[2, 2, 2, 123, 2]], [[3, 3, 3, 2, 6, 3]], [[1, 1, 1, 1, 2, 0, 2, 2, 2, 1]], [[1, 2, 8, 2, 2]], [[3, -5, 12, -3, 3, -9, 0, 123, -10]], [[3, 2, 3, 3, 4, 4, 3, -5, 3]], [[3, 2, 2, 6, 123, 2]], [[-5, -7, 2, 10, 0, 9, 5, -3, 2, 8, 3, 7, 2, 8]], [[3, -3, 1, 1, 1, 2, 2, 2, 3, 2]], [[5, 3, -5, 2, -3, -2, 3, -9, 0, 123, 1, -10, -9]], [[5, 3, -5, -4, 2, -3, 3, -9, 0, 123, 1, -10, 123]], [[11, -7, 2, 10, 2, 9, 5, -3, 2, 8, 3, 7]], [[-5, -7, 2, 10, 0, 9, 5, -3, 2, 8, 3, 7, 2, 8, 3]], [[5, -2, -12, 23, 2, 3, 11, 12, -10, 3]], [[2, 2, 2, 123, 2, 123]], [[1, 3, 4, 7, 2, 2]], [[2, 2, 3, 4, 6, 7, 7, 8, 2, 8, 2]], [[12, 3, 10, 3, 12, 10]], [[2, 3, 4, 5, 7, 7, 10, 2, 4]], [[3, -3, 1, 1, 1, 2, 2, 2, 3, 3, 2]], [[-3, 2, 2, 3, 4, 6, 7, 8, 2, 1]], [[-5, -7, 123, 2, 10, 0, 9, 5, -3, 2, 8, 3, 7, 2, 8]], [[2, 2, 2, 123, 2, 122]], [[5, 3, -5, 2, -3, -2, -9, 0, 123, 1, -10, -9]], [[5, 3, -5, 2, -3, -2, 3, -9, 0, 1, -10, -9]], [[5, 3, -5, 2, -3, -3, 3, -9, 123, 1, -10]], [[6, 1, 2, 3, 4, 5, 6, 7, 6, 8, 2]], [[1, 2, 3, 4, 6, 7, 7, 8, 2, 2, 7]], [[-5, 4, 2, 2, 0, 9, 5, -3, 2, 8, 3, 7, 2, 2, 8]], [[5, 3, -5, 2, -3, -9, 0, 123, 1, -10, 123, 5]], [[6, 3, 6, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 6, 2]], [[9, -7, 2, 3, 4, 6, 7, 10, 5, 10]], [[123, 2, 3, 4, 5, 6, 7, 8]], [[4, -2, -12, 4, 23, 2, 3, 11, 12, -10, 4, -12]], [[1, 2, 3, -4, 6, 7, 8, 2]], [[2, 2, 123, 2, 122]], [[1, 1, 1, 2, 2, 2, 2]], [[-7, 2, 3, 4, 5, 7, 7, 10, 4, 2]], [[1, 1, 1, 1, 2, 0, 2, 2, 1, 1]], [[-5, -7, 123, 2, -3, 0, 9, 5, -3, 2, 8, 3, 7, 2, 8]], [[1, 1, -4, 0, 2, 2, 2, 2, -5, 2]], [[1, 1, 3, 4, 5, -3, 7, 10]], [[3, 2, 3, 3, 3, 3, 3, 3]], [[-7, 2, 3, 4, 5, 6, 7, 10, 2, 4]], [[-3, 2, 2, 2, 4, 6, 7, 8, 2, -7, 1]], [[-5, -7, -2, 10, 11, 0, 9, 5, 2, 8, 3, 7]], [[-5, -7, 2, 10, 9, -3, 2, 8, 3, 7, 2, 8, 2]], [[3, 3, 3, 3, 4, 3, 3]], [[5, -2, -12, 4, 23, 2, 3, -13, 11, 12, -10, 3, 2, 4, -10]], [[2, 8, 2, 2, 2]], [[1, 1, 5, 3, 4, 5, -3, 7, 10]], [[5, 0, 5, 0, 5, -12, 0, 5]], [[3, -3, 1, 1, 1, 2, 2, 2, 2, 12, 1, 3, 11]], [[3, -3, 4, 3, 3, 3, 3, 3]], [[-7, 2, 3, 4, 4, 6, 7, 10, 5, 10]], [[6, 3, 3, 3, 3, 3]], [[1, 2, 3, -4, 6, 7, 8, 2, 2, 8]], [[-3, 2, 2, 3, 4, 6, 7, 123, 8, 2]], [[4, -2, -12, 4, 23, 2, 3, 11, 12, -10, 4, -12, 23]], [[2, 2, 122, 2, 123, 2, 123]], [[2, 2, 2, 123, 2, 11, 123]], [[2, 2, 2, 2, 2]], [[-5, -7, 2, 10, 11, 0, 9, 5, 2, 8, 11, 7]], [[3, -3, 1, 1, 1, 2, 2, 2, 3, 3, 2, 2]], [[-5, -7, 2, -5, 2, 9, 5, -3, 2, 8, 7, 3, 7, 2, 2]], [[1, 2, 3, 4, 5, 6, 7, 7]], [[-5, -7, 2, 0, 9, 5, -3, 2, 8, 3, 7, 2, 2]], [[5, -13, 3, -5, 2, -10, -3, -2, 3, -8, 0, 1, -10, -9]], [[-7, 2, 3, 4, 6, 7, 10, 5, 10, 7]], [[-7, 2, 3, 4, 5, 6, -2, 7, 10, 2, 4]], [[-5, -7, 2, -5, 2, 9, -4, -3, 2, 8, 7, 3, 7, 2, 2]], [[6, 1, 2, 3, 4, 6, 7, 6, 8, 2]], [[3, -5, 12, -3, 3, 0, 123, -10, 123]], [[5, 3, -5, -4, 2, -3, 3, -10, 0, 123, 1, -10, 123]], [[1, 2, 3, -12, 5, 6, 7, 10]], [[5, 3, -5, 2, -3, 3, -9, 0, 123, 1, -10, 2, -3]], [[6, 3, 4, 3, 3, 4]], [[2, 2, 8, 2, 2]], [[2, 2, 3, 4, 6, 7, 7, 8, 2, 2, 7, 6]], [[6, 5, 3, 6, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]], [[-5, -7, 2, -5, 2, 9, 5, -3, 2, 8, 7, 3, 7, 2]], [[1, 0, 3, 4, 5, -3, 7, 10]], [[-7, 2, 3, 4, 6, 7, 10, 5, 4, 7]], [[2, 2, 3, 2, 2]], [[6, 3, 4, 3, 3, 3, 4, 3]], [[2, 3, 4, 6, 7, 10, 5, 10, 7, 2]], [[5, 3, -4, 2, -3, 3, -9, 0, 123, 1, -10, 2, -3, -10]], [[5, 2, -13, 3, -5, 2, -10, -3, -2, 3, -8, 0, 1, -10, -9]], [[-5, -7, 2, -5, 2, 9, 5, -4, -12, 2, 8, 7, 3, 7, 2, 2]], [[1, 4, 1, 9, 2, 6, 5, 3]], [[4, 2, 2, 0, 9, 5, -3, 2, 8, 3, 7, 2, 2, 8, 2]], [[4, 2, 2, 0, 9, 5, -3, 2, 8, 3, 7, 2, 2, 8, 2, 2]], [[-3, 1, 1, 1, -5, 2, 1, 2, 2, 3, 1, 1]], [[4, -2, -12, -9, 23, 2, 3, 11, 12, -10, 4, -12]], [[3, 1, 4, 1, 6, 9, 2, 6, 5, 3]], [[-7, 2, 3, 4, 5, 6, 7, -5, 10, 2]], [[2, 3, 4, 4, 6, 7, 10, 5, 10]], [[3, 10, 3]], [[3, 1, 4, 1, 5, 9, 9, 2, 6, 5, 3]], [[1, 1, 1, 1, 1, 2, 0, 2, 2, 2]], [[-5, -7, 2, -5, 2, 9, 5, -3, 2, 8, 7, 3, 7, 12, 2]], [[2, 2, 3, 4, 7, 7, 8, 2, 8, 2]], [[-5, -7, 2, 10, 0, 5, -3, 2, 8, 3, 7, 0]], [[-5, -7, 123, 2, 0, 9, 5, -3, 2, 8, 3, 7, 2, 8]], [[5, 0, 6, 0, 5, -12, 0, -5, 3, -5]], [[-5, -7, 11, -5, 2, 9, 5, -3, 2, 8, 7, 3, 7, 3, 3, 2]], [[0, 3, -5, 2, -3, -3, 3, -9, 123, 1, -10]], [[6, 3, 3, 4, 3, 3, 3]], [[1, 1, 1, 1, 2, 0, 2, 2, 2, 1, 2, 2]], [[-5, 4, 2, 2, 0, 9, 5, -3, 2, 8, 3, 7, 2, 2, 8, 2]], [[5, 3, -5, -3, -9, 0, 123, 1, -10, 123, 123]], [[1, 2, 3, 4, 4, 6, 7, 8, 2, 4, 3]], [[1, 1, 1, 1, 1, -5, 1, 1, -10, 1]], [[1, 3, 4, 6, 7, 8, 2]], [[5, 3, -4, 2, 3, -9, 0, 123, 1, -10, 2, -3, -10]], [[5, -13, 3, -5, 2, -10, -3, -2, 3, -8, 0, -10, -9, 2]], [[5, 3, -5, 0, 2, -3, -10, 0, 123, 1, 0, -10, 123, 5]], [[5, -2, -12, 23, 2, 3, 11, 12, 3]], [[1, 3, 4, 7, 2, 2, 4]], [[5, -11, 4, 6, -5, 2, -3, 3, -9, 0, 123, 1, -10]], [[1, 2, 3, -4, 6, 7, 2, 2, 8]], [[1, 1, 1, 1, 1, -2, 2, 0, 2, 2]], [[4, -2, -12, -9, 23, 2, 3, 11, 12, -10, 4, -12, 4]], [[2, 2, 3, 4, 6, 7, 7, 8, 2, 2, 7, 6, 6]], [[1, 2, 4, 6, 7, 7, 8, 2, 2, 7]], [[6, 3, -3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 6, 2]], [[-5, 4, 2, 2, 0, 9, 5, -3, 2, 8, 3, 7, 4, 2, 2, 8, 2]], [[-5, -7, 2, -5, 2, 9, 5, -3, 2, 8, 7, 3, 7, 12, 2, 11, 9]], [[3, -3, 3, 3, 3, 3, 3, 3]], [[3, 3, 3, 2, 6, 3, 3]], [[2, 3, 4, 6, 7, 10, 5, 10, 7, 2, 6]], [[2, 2, 3, 4, 6, 7, 8, 2, 2, 7]], [[5, 2, -13, 3, -5, 2, -10, -3, -2, 3, -8, 0, -5, 1, -10, -9]], [[-5, 2, 3, -12, 5, 6, 7, 10]], [[-7, 2, 3, 4, 6, 7, 10, 10, 7]], [[1, 2, 3, -4, 6, 7, 8, 2, 8]], [[5, 3, 7, 0, 2, -3, -10, 0, 123, 1, 0, -10, 123, 5]], [[2, 3, -4, 7, 7, 8, 2, 2, 8]], [[-7, 2, 3, 5, 6, 7, 2, 4, 6]], [[5, -2, -12, 4, 4, 12, 23, 3, 11, 12, -10, 4]], [[2, 2, 3, 4, 6, 7, 7, 3, 8, 2, 2, 7, 6]], [[1, 1, 2, 3, -11, 5, 6, 7, 10]], [[-7, 2, 3, 4, 6, 7, 5, 10]], [[5, 2, -13, 3, -5, 2, -10, -3, -2, 3, -8, 0, -5, 1, -10, -9, 3]], [[-12, -5, -7, 2, -5, 9, -4, -3, 2, 8, 7, 3, 7, 2, 2]], [[5, 3, -5, -4, 2, -3, 3, -9, 0, 23, 1, -10, 123, 5]], [[1, 1, 1, 1, -2, 2, 0, 2, 2]], [[5, 3, 7, 0, 2, -3, -10, 0, 123, 1, 0, -10, 123]], [[5, -13, 3, -5, 2, -10, -3, -2, 3, -8, 0, 1, -10, -9, -8]], [[5, -2, -12, 4, 4, 123, 23, 1, 3, 11, 12]], [[2, -3, 3, 3, 3, 3]], [[-5, -7, 2, -5, 2, 9, -4, -3, 2, 8, 7, 3, 7, 2, 2, 2]], [[2, 2, 3, 4, 6, 7, 7, 8, 2, 2, 7, 8, 6]], [[5, 2, 3, -5, 0, 2, -3, -10, 0, 123, 1, 0, -10, 123, 5]], [[5, 3, 6, -5, 2, -3, 3, -9, 0, 123, 1, -10, 3, 123]], [[1, 2, 8, 8]], [[-7, 2, 3, 4, 6, 10, 5, 10, 7]], [[1, 1, 1, 1, 1, -5, 1, 1, 1, 1]], [[1, 3, 4, 6, 7, 8, -4, 2]], [[1, 1, 1, -4, 2, 2, 2, 2]], [[-7, 2, 3, 4, 5, 6, 7, 10, 5, 10, -7]], [[3, 1, 4, 1, 6, 9, 2, 6, 5, 3, 6]], [[5, -2, -12, 4, 4, 123, 23, 2, 3, 11, 12, 4]], [[1, 2, 4, 3, 4, 5, 6, 7, 10, 4]], [[6, 1, 1, 2, 3, 4, 5, 6, 8]], [[1, 8, 10]], [[6, 1, 2, 3, 4, 5, 6, 7, 8, 2, 2, 3]], [[1, 2, 3, -4, 6, 8, 2, 8]], [[3, 3, 2, 6, 3, 3]], [[5, 0, 5, 0, 4, 0, 5, 0]], [[3, -3, 1, 1, 1, 2, 2, 2, 2, 3, 2, -3]], [[122, -2, -12, 4, 23, 2, 3, 3, 11, 12, -10, 3]], [[-8, 3, -2, 3, 3]], [[-5, -7, 2, 10, 11, 0, 9, 5, 8, 11, 7]], [[11, -7, 2, 10, 2, 9, 5, -3, 2, 8, 3, 7, 10]], [[2, 1, 1, 2, 3, 4, 5, 6, 7, 10, 2]], [[1, 1, 3, 4, 5, -3, 7, 10, 1]], [[-13, 2, 3, 4, 5, 6, 7]], [[1, 2, 8, 2, 3, 8]], [[5, 3, -5, 2, -3, -2, 0, 123, 1, -10, -9]], [[1, -12, 1, 2, 3, -11, 5, 6, 7, 10]], [[11, -7, 2, 10, 0, 9, 5, -3, 2, 2, 3, 7]], [[-3, 2, 2, 4, 6, 7, 123, 8, 2]], [[-7, 2, 2, 10, 11, 0, 9, 5, 2, 8, 11, 7]], [[-7, 2, 3, 4, 5, 7, 10, 5, 4, 7]], [[1, 2, 3, -12, 5, 6, 7]], [[2, 2, 3, 4, 6, 7, 8, -5, 2, 2, 7]], [[-7, 2, 3, 4, 5, 6, 7, 10, 2, 4, 4]], [[5, -2, -12, 11, 4, 4, 23, 2, 4, 3, 12, -10]], [[3, -3, 1, 1, 1, 2, 2, 2, 2, 3, 2, -3, 1]], [[3, -3, 1, 1, 1, 2, 2, 2, 3, 3, 2, 3]], [[-3, 1, 1, 1, 2, 2, 1, 2, 2, 3, 1, 1, 1]], [[2, 1, 1, 2, 3, 4, 5, 6, 7, 10, 2, 1]], [[1, 4, 1, 9, 2, 6, 5]], [[-7, 2, 3, 4, 7, 10, 5, 10, 10, -7]], [[-3, 2, 10, 2, 2, 4, 6, 7, 4, 2, -7, 1]], [[5, 3, 7, 0, 2, -3, -10, 0, 123, 1, 0, -10, 123, -3]], [[5, -5, 2, -3, -3, 3, -9, 123, 1, -10]], [[1, -4, 6, 7, 2, 2, 8]], [[4, -2, -12, 4, 23, 2, 3, 11, 12, -10, 4, -12, -12]], [[-3, 2, 2, 3, 4, 6, 7, 122, 123, 8, 2]], [[1, -4, 6, 7, 2, 2, 8, -4]], [[4, -2, -12, 4, -5, 23, 2, 3, 11, 12, -10]], [[5, -5, 2, -3, -2, 1, -9, 1, -9]], [[5, 3, -5, 2, -3, -9, 0, 123, 1, -10, 123, 5, 1]], [[4, 2, 2, 0, 9, 5, 2, 8, 3, 7, 2, 2, 8, 2]], [[3, 4, 3, 3]], [[1, 2, 4, 3, 4, 5, 6, 7, 10, 4, 4]], [[1, 1, 1, 1, 1, 2, 1, 1, 1]], [[5, 0, 5, 0, 5, -12, 0, 5, -12]], [[1, 1, 2, 2, 2, 2]], [[5, 3, 11, 2, -3, -3, 3, -9, 123, 1, -10]], [[2, 2, 3, 2, 2, 3]], [[5, -2, -12, 4, 4, 23, 3, 11, 12, -10, 4, 4, 3]], [[-7, 2, 3, 4, 5, 6, 7, 5, 10, 2]], [[2, 3, 3, 3, -5, 3]], [[1, 1, 1, 1, 1, 1, -2, 2, 0, 2, 2, 0]], [[5, 3, -5, 2, -3, -2, -9, 0, 123, 1, -10, -9, -10]], [[5, -2, -12, 23, 2, 3, 11, 12, 3, 2]], [[6, 3, 3, 6, 4]], [[2, 3, 4, 6, 7, 10, 5, 10, 7, 2, 6, 7, 7]], [[2, 3, 3, 4, 6, 7, 7, 8, 2, 2]], [[1, 3, 4, -8, 7, 2, 2]], [[-12, -5, -7, 2, -5, 9, -4, -3, 2, 8, 7, 3, 7, 2]], [[2, 2, 2, 123, -7, 2, 11, 123]], [[5, 2, -13, 3, -5, 2, -10, -3, -2, 3, 2, -8, 0, -10, -9]], [[1, 8, 10, 8]], [[5, 3, -5, -4, 2, -3, 3, 0, 123, 1, -10, -2, 123]], [[122, 5, 3, -5, 2, -3, -9, 0, 123, 1, -10, 123]], [[6, 3, 3, -3, 3, 4, 3]], [[-5, -7, 2, -5, 2, 9, 5, -3, 2, 8, 7, 4, 7, 12, 2, 9]], [[2, 3, 4, 5, 7, -4, 9, 2, 5, 4]], [[3, 3, 3, 3, 4, 4, 3]], [[1, 1, 1, 1, 1, 1, 1]], [[5, 3, -5, 5, -3, -2, 3, -9, 0, 1, -10, -9]], [[4, -2, -12, 4, 23, 2, 3, 11, 12, 4, -12]], [[1, 1, 1, 2, 0, 2, 2, 1, 1]], [[6, 3, 3, 4, 3, 3, 4, 3]], [[6, 3, 3, -3, 3, 4, -2, 3]], [[-7, 2, 3, 4, 5, 6, 7, 10, 5, 10, -7, 7]], [[2, 2, 3, 123, 6, 7, 8, 2, 2, 7]], [[5, -2, -12, 4, 2, 23, 2, 3, -13, 11, 12, -10, 3, 2, 4, -10, 3]], [[-3, 1, 1, 1, -2, 2, 2, 1, 2, 2, 3, 1, 1]], [[-5, -7, 2, -5, 2, 9, 5, -3, 2, 4, 8, 7, 3, 7, 12, 2]], [[5, -2, -12, -3, 2, 3, 11, 12, 3, 5, 12]], [[1, 1, 1, 2, 10, 2, 2, 1, 1]], [[-3, 2, 2, 3, 4, 6, 7, 122, 123, 8, 2, 8]], [[5, 3, 7, 0, 2, -3, -10, 0, 123, 1, 0, -10, 1, -3, 1]], [[1, 3, 4, 6, 7, 8, -9, -4, 2]], [[-5, -7, 2, -13, 0, 2, 9, -4, -3, 2, 8, 7, 3, 7, 2, 2]], [[1, -4, 6, 5, 7, 2, 2, 8, 6]], [[5, 2, -13, 3, -5, 2, -10, -3, -2, 3, -8, 0, -5, -10, -9, 3]], [[-3, 2, 2, 3, 4, 6, 7, 122, 123, 8, 8, 2]], [[3, -3, 1, 1, 2, 2, 2, 2, 1, 3, 11, 2]], [[1, 1, 1, -9, 1, 1, 2, 0, 2, 2, 2]], [[3, -3, 1, 1, 1, 2, 2, 3, 3, 2, 2]], [[2, 3, -4, 8, 7, 7, 8, 2, 2, 8]], [[6, 3, 3, -3, 4, -2, 3]], [[5, -13, 3, -5, 2, -3, -2, 3, -8, 0, 1, -10, -9]], [[5, -5, 2, -3, -9, 0, 123, 1, -10, 2, -3]], [[3, 3, 3, 3, 4, 7, 3, 2]], [[5, 3, -5, 2, -3, -2, 3, -9, 0, 123, 1, -10, -9, -10, 123]], [[2, 2, 2]], [[11, -7, 2, 10, 2, 9, 5, -3, 10, 8, 3, 7]], [[1, -11, 3, -11, 5, 6, 7, 10, 3]], [[3, -3, 1, 1, 1, 2, 2, 3, 2, 3, 2, -3, 3]], [[-7, 3, 4, -11, 7, 10, 10, 7]], [[5, 123, 3, 7, 0, 2, -3, -10, 0, 123, 1, 0, -10, 123]], [[3, -7, 2, 10, 11, 0, 9, 5, 2, 8, 11, 7]], [[-7, 2, 3, 4, 5, 6, 7, 10, 5, 10, 6, -7]], [[6, 3, 23, 3, 3, 3, 3]], [[3, 3, 3]], [[2, 2, 3, 2, 2, 2]], [[2, 1, 1, 2, 2, 4, 5, 6, 7, 10, 2, 1]], [[1, 3, 4, 6, 7, 8, 2, 6]], [[1, 2, 4, 3, 4, 5, 6, 12, 10, 4]], [[11, -7, 2, 10, 0, 5, -3, 2, 8, 3, 7]], [[6, 3, 23, 3, -12, 3, 3, 3]], [[-5, -7, -6, 2, 10, 0, 9, 5, -3, 2, 8, 3, 7, 2, 8, 2]], [[1, 1, 1, 1, 2, 0, 2, 2, 1, 1, 1, 2]], [[2, 4, 6, 7, 7, 8, 2, 2, 4]], [[6, 3, 3, 6, 4, 3]], [[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 2]], [[1, 1, 1, 1, 1, 1, -10, 1]], [[-13, 3, 4, 5, 6, 7]], [[-7, 2, 3, 4, 5, 7, 10, 5, 10, -7, 7]], [[-3, 1, 1, 1, 2, 2, 3, 2, 3, 2, -3, 3]], [[11, -7, -5, 2, 10, 2, 9, 5, -3, 2, 8, 3, 7]], [[5, 3, 6, -5, 2, -3, 3, -9, 0, 123, 1, -10, 123]], [[5, 3, 6, -5, 2, -3, -9, 0, 123, 1, -10, 3, 123, 123, -9]], [[5, 2, -13, 3, -5, 2, -10, -3, -2, 3, -8, 0, -5, 1, -10, -9, 3, -2]], [[2, 2, 123, 2, 122, -11]], [[4, -2, -12, 4, -5, 23, 122, 3, 11, 12, -10]], [[5, -13, 3, -5, 2, -3, -2, 3, -8, 0, 1, -10, -9, -10]], [[5, 3, -5, -4, 2, -3, 3, -9, 0, 123, 1, 123, 3]], [[2, 2, 3, 123, 6, 7, 8, 2, 2, 7, 2]], [[1, 2, 3, 4, 5, 6, 7, 8, 5]], [[-7, 2, 3, 4, 6, 7, 10, 10, 7, 4]], [[1, 1, 1, 1, 1, 2, -11, 23, 1, 1]], [[11, -3, 1, 1, 1, 2, 2, 2, 3, 3, 2, 3]], [[3, -3, 1, 1, 1, 2, 2, 2, 2, 1, 3, 2, 2]], [[-5, -7, -6, 2, 10, 0, 9, 5, -3, 2, 8, 7, 2, 8, 2]], [[4, -2, -12, -9, 23, 2, 3, 11, 13, -10, 4, -13, -12, 4]], [[3, 1, 4, 1, 5, 9, 2, 1, 6, 5, 3, 3, 6]], [[5, -13, 4, 3, -4, 2, -10, -3, -2, 3, -8, 0, 1, -10, -9, -8]], [[-5, -7, -2, 10, 11, 0, 8, 9, 5, 2, 8, 4, 7]], [[-3, 2, 2, 4, 6, 7, 123, 7, 8, 2]], [[-5, -7, 2, -5, 2, 9, -4, -3, 2, 8, 7, 3, 7, 3, -7, 2, -4]], [[11, -7, 2, 10, 0, 5, -3, 2, 8, 3, 7, 5]], [[-7, 2, 3, 4, 6, 7, 10, 5, 7, 4]], [[2, 8, 10, 8]], [[122, -3, 4, 3, 3, 3, -4, 3, 3]], [[122, -3, 4, 3, 3, -4, 3, 3]], [[5, 3, 6, -11, -5, 2, -3, -9, 0, 123, 1, -10, 3, 123, -9]], [[6, 3, 24, 3, 3, 3]], [[-7, 2, 3, 4, 6, 7, 10, 5, 10, 7, 7]], [[6, 1, 2, 4, 3, 4, 5, 6, 7, 10, 4, 4]], [[1, 2, 3, -12, 5, 6, 3, 7, 10]], [[1, -12, 1, 2, 3, -11, 5, 6, 7, 10, 5]], [[2, 2, 3, 4, 7, 13, 123, 8, 2]], [[2, 1, 2, 6, 1, 2, 3, 4, 5, 6, 7, 2, 1, 4, 2]], [[4, -2, -12, -9, 23, 2, 3, 11, 13, -10, 13, 4, -13, -12, 4]], [[2, 3, 2, 2, 2]], [[5, 0, 5, 0, 5, -12, 0, -5, 3, -5, 1]], [[5, 3, -5, -4, 2, -3, 3, -9, 0, 23, 1, -10, 123, 5, -10]], [[-5, -7, 2, -5, 2, 9, 5, -3, 2, 8, 7, 3, 7, 12, 2, 11, 9, 8]], [[3, -3, 1, 1, 1, 2, 2, 2, 2, 3, 3, 2, 3, 3]], [[4, 2, 2, 0, 9, 5, -3, 2, 8, 3, 7, 2, 2, 8, 2, 2, 2]], [[5, 0, 6, 0, 5, -12, -5, 3, -5, -5]], [[3, 10, 3, 3]], [[2, 3, -8, 3, 3, -5, 3]], [[2, 3, -4, 8, 7, 8, 2, 2, 8]], [[1, 3, 4, 7, 2]], [[-5, -7, 2, 10, 9, -3, 2, 8, -6, 7, 2, 8, 2]], [[1, 2, 3, 0, 4, 5, 7, 8, 2, 2]], [[-7, 2, 3, 5, 7, 10, 5, 10, -7, 7, 2]], [[3, -3, 1, 1, 1, 2, 2, 2, -2, 2, 3, 2, -3, 1]], [[-3, 1, 1, 1, 2, 2, 1, 2, 2, -2, 1, 1, 1, 1]], [[1, 3, 4, 6, 7, 8, -9, -4, -4, 2]], [[-7, -6, 2, 10, 0, 9, 8, 5, -3, 2, 8, 3, 7, 2, 8, 11, 2, 7]], [[3, -3, 4, 3, -13, 3, 3, 4]], [[2, 2]], [[5, 2, -13, 3, -5, 2, -10, -3, -2, 3, -8, 0, -7, -5, 1, -10, -9, 3]], [[1, 2, 4, 6, 7, 7, 8, 2]], [[2, 3, 3, 123, 6, 7, 2, 2, 7, 2]], [[1, 1, 1, 1, 2, 0, 2, 2, 2, 1, 1, 2, 2]], [[5, 2, -13, 3, -5, 2, -10, -3, -2, -2, 3, 2, -8, 0, -10, -9, -10, 3]], [[2, 3, 4, 5, 6, 7, 10, 5, 10]], [[1, 2, 3, 4, 6, 7, 7, 8, 10, 2]], [[3, -3, 1, 1, 1, 2, 2, 3, 2, 3, 2, -3, 3, 2, 3]], [[1, 3, -8, -7, 7, 2, 2]], [[1, 1, 1, 1, 1, 0, 2, 2, 2]], [[-13, 3, 4, 5, 6, 7, 6]], [[2, 8, 2, 2, 3, 2]], [[-5, 8, -5, 2, 9, 5, -3, 2, 8, 7, 3, 7, 2]], [[1, -12, 1, 2, 3, -11, 5, 5, 6, 7, 10, 5, 1]], [[4, -2, -12, -9, 23, 3, 11, 13, -10, 13, 4, 122, -12, 4]], [[-7, 2, -8, 3, 5, 7, 10, 5, 10, -7, 7, 2]], [[1, 2, 1, 1, 2, 2, 2, 2]], [[-7, 3, 4, -11, 10, 10, 7]], [[3, 1, -3, 1, 1, 1, 2, 2, 2, 2, 3, 3, 2, 3, 3, 1]], [[2, 8, 2, 2, 4, 2]], [[3, 2, -3, 1, 1, 1, 2, 2, 2, 2, 3, 2]], [[5, -5, 2, -3, -2, 1, -7, 1, -9]], [[5, 0, 5, 0, 5, -1, 5, 0]], [[1, 3, 4, -8, 2, 2, -8]], [[5, 5, 0, 5, -1, 5, 0]], [[3, 2, -3, 1, 1, 6, 1, 2, 2, 2, 3, 2]], [[4, -2, -12, 4, -5, 23, 2, 3, -4, 11, 12, -10]], [[2, 3, 4, 5, 7, 7, 10, 2, 7]], [[1, 1, 1, 2, 2, 2, 2, 1]], [[3, 2, 3, 3, 3, 3, 3]], [[-3, 2, 2, 3, 4, 7, 7, 123, 2, 3]], [[5, -2, -10, 4, 4, 12, 23, 3, 11, 12, -10, 4, 4]], [[-6, 5, -13, 3, -5, 2, -10, -3, -2, 3, -8, 0, 1, -10, -9, -8]], [[-7, 3, 4, 3, 5, 7, 7, 10, 2, 4, 4, 3]], [[-4, -5, 4, 2, 2, 0, 9, 5, -3, 2, 8, 3, 7, 2, 2, 8]], [[1, 1, 1, 1, 0, 2, 10]], [[2, 3, 3, 123, 6, 6, 7, 2, 2, 7, 2]], [[6, 3, 5, 1, 1, 5, 9, 2, 6, 4, 5, 3, 6]], [[5, 3, -5, 2, -3, -2, 3, -9, 0, 123, 1, -10]], [[1, 2, 3, 4, 6, 7, 7, 8, 2, 2]], [[11, -7, 2, 10, 2, 9, 5, -3, 2, 8, 3, 7, 10, -7]], [[1, 12, 3, 4, 6, 7, 7, 8, 10, 2, 2]], [[-10, 3, 7, 0, 2, -3, -10, -9, 0, 123, 1, 0, -10, 123]], [[2, 1, 1, 2, 2, 4, 5, 6, 7, 10, -8, 1]], [[1, 3, 4, 6, 8, 2]], [[-7, 2, 3, 4, 7, 10, 5, 10, 10, -7, 10]], [[1, 1, 1, 0, 2, -12, 10]], [[6, 3, 6, 1, 4, 1, 10, 9, 2, 6, 2, 5, 3, 6]], [[2, 2, 2, 123, 2, 123, 2]], [[11, 1, 2, 10, 0, 5, -3, 2, 8, 3, 7]], [[-5, -7, 2, 10, 0, 5, 123, -3, 2, 8, 3, 7, 0]], [[1, 1, 1, 1, 2, 0, 2, 2, 2, 1, 1, 2, 2, 2]], [[-13, 3, 4, 5, -14, 6, 6, 7, 3]], [[5, 2, -13, 3, -5, 2, -10, -2, 3, 2, -8, 0, -10, -9]], [[1, 2, 3, 4, 6, 7, 8, 10, 2]], [[-3, 1, 1, 1, 2, 2, 1, 2, 2, 13, 1, 1, 1]], [[122, 4, 3, 2, -4, -11, 3, 3]], [[1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 1]], [[-14, 3, 4, 3, 3]], [[1, 2, -4, 6, 2, 8]], [[8, -5, -7, -2, 10, 11, 0, 8, 9, 5, 2, 8, 4, 7, 0]], [[2, 3, 2, 2, 8, 2, 2]], [[1, 3, -4, 6, 7, 8, 2, 7]], [[6, 3, 3, -3, 4, -2, 3, 3]], [[-3, 2, 2, 3, 4, 6, 7, 122, 123, 8, 8, 2, 7, 4, 8]], [[1, 2, 1, 8, 2]], [[1, 2, 8]], [[-5, -7, -6, 2, 10, 0, 9, 5, -3, 2, 11, 7, 2, 8, 2]], [[1, 2, 3, 4, 5, 6, 7, 7, 1]], [[5, -14, 3, 6, -5, -6, -3, 3, -9, 0, 123, 1, -10, 123]], [[1, 1, 1, 1, 1, -5, -10, 1, 1, 1]], [[5, -2, -12, 4, 4, 123, 23, 3, 11, 12, 4, 4]], [[1, -10, 1, 2, 2, 2, 2, 1]], [[2, 2, 3, 4, 6, 7, 7, 8, 2, 2, 7, 6, 2]], [[2, 2, 0, 9, 5, 2, 8, 3, 7, 2, 2, 8, 2]], [[2, 4, 6, 0, 7, 10, 5, 10, 7, 2, 8, 10]], [[6, 3, 3, 6, 4, 3, 3]], [[2, 2, 3, 4, 11, 6, 7, 7, 8, 2, 2, 7, 6]], [[5, 3, 6, -5, 2, -3, 3, 0, 123, 1, -10, 5]], [[1, 1, 3, 4, 6, 7, 8, -9, -4, -4, 6, 2]], [[-3, 1, 1, 1, -5, 2, 1, 2, 2, 3, 1, 2]], [[12, 8, 10, 3]], [[3, -3, 1, 1, 1, -10, 2, 3, 3, 2, 2]], [[2, 2, 2, 8, 2, 2]], [[1, 9, 1, 1, 2, 1, 1, -5, 1, 1, 1, 1]], [[3, 3, 6, 4]], [[-14, 3, 4, 2, 3, 3, 3]], [[122, -5, 4, 3, 3, 3, 3, -4, 3, 3]], [[5, -2, -12, 23, 2, 3, 11, 12, -10, 3, 3]], [[1, 1, 10, 1, 4, 0, 2, -12, 10, 4]], [[3, 11, 2, -3, -3, 3, -9, 123, 1, -10]], [[5, 6, 5, 4]], [[1]], [[5, 5, 5, 5, 5, 5]], [[1, 3, 5, 7, 9]], [[2, 4, 6, 8]], [[2, 2, 2, 1, 1, 1]], [[1, 1, 1, 1, 0, 1, 1, 1, 1]], [[2, 2, 2, 3, 2]], [[1, 2, 3, 5, 6, 7, 8]], [[5, 3, -5, -3, 3, -9, 0, 123, -2, -10]], [[5, 3, -5, 3, -9, 0, 123, -2, -10]], [[5, 0, 5, 5, 0, 5, 0]], [[1, 2, 3, 4, 6, 7, 8]], [[2, 2, -5, 2, 2]], [[2, 1, 1, 1, 1, 1, 1, 1, 1]], [[5, -2, -12, 4, 23, 2, 3, 11, 12, -9]], [[5, 0, 5, 5, 0, 5, 0, 5]], [[5, 0, 5, 5, 0, 5, 0, 5, 0]], [[5, 3, 10, -5, 2, -3, 3, -9, 0, 123, 1, -10, 10]], [[3, 1, 4, 1, 5, 9, 6, 5, 4]], [[5, 3, 10, -5, 2, -3, 3, -9, 0, 123, 1, 10]], [[1, 1, 1, 2, 1, 0, 1, 1, 1, 1]], [[5, 3, -5, -3, 3, -2, -9, 0, 123, -2, -10]], [[5, 0, 5, 5, 0, 5, 0, 5, 0, -2, 5]], [[5, 3, -5, -3, 3, -2, -9, 0, 123, -2]], [[1, 6, 23, 1, 1, 7, 1, 1]], [[1, 6, 23, 1, 1, 7, 1, 2, 1]], [[5, 3, -5, 2, -2, 3, -9, 0, 123, 1, -10, 1]], [[1, 2, 3, 2, 3, 6, 7, 8, 2]], [[5, 0, 5, 0, 5, 0, 5, 0, -2, 5]], [[5, 0, 5, -1, 5, 0, 5, 0]], [[1, 2, 4, 5, 5, 6, 7, 8]], [[1, 1, 1, 1, 2, 2, 2, 2, 2]], [[5, 3, 10, -5, 2, -3, 3, -9, 0, 123, 1, -10, 10, -5]], [[1, 2, 2, 3, 2]], [[1, 1, 1, 2, -12, 0, 1, 1, 1, 1]], [[1, 1, 1, 1, 0, 0, 1, 1, 1, 1]], [[5, 3, -5, 23, -3, 3, -9, 0, 123, 1, -10]], [[5, 3, 10, -5, 2, -3, 3, -9, 0, 123, 1, -10, 10, -5, 0]], [[1, 2, 4, 5, 5, 6, 8]], [[1, 1, 1, 2, 1, 0, 0, -12, 1, 1, 1, 1]], [[5, 10, -6, 2, -3, 3, -9, 0, 1, -10, 10]], [[5, 10, -6, 2, -3, 3, -9, 0, 1, -10, 10, 2]], [[-5, -7, 2, 10, 0, 9, 5, -5, 2, 8, 3, 7, 9]], [[5, 3, 4, 3, 3]], [[1, 2, 2, 3, 2, 1]], [[3, 1, 4, 1, 5, 9, 2, 6, 5]], [[5, 0, 5, 5, 0, 5, 0, 5, 5, 0]], [[5, 0, 5, -1, 5, 0, 5, 0, 0]], [[1, 2, 3, 2, 3, 6, 2, 7, 8, 2]], [[6, 5, 0, 5, 5, 0, 5, -1, 5, 5, 0, 5]], [[-2, 2, 4, 5, 5, 6, 7, 8, -2]], [[5, 0, 5, 5, 0, 6, 5, -1, 5, 5, 0, 5]], [[3, 1, 4, 1, 5, 9, 6, 4, 4]], [[5, -3, 3, -5, 2, -3, 3, -9, 0, 123, 1, -10, 10, -5]], [[5, -3, 3, -5, 2, -3, 3, -9, 0, 123, 1, -10, 10, -5, 1]], [[5, 0, 5, 5, 0, 5, 0, 5, 5, 0, 5, 5]], [[5, 4, 4, 5, 0, 5, 0, 5]], [[-10, 2, 2, 2, 2]], [[5, 0, 5, 5, 0, 5, 0, 5, 5, 0, 5]], [[5, 0, 5, 5, 0, 5, 0, 5, 5, 0, 5, 0]], [[5, 3, -5, 2, -3, 3, -9, 0, 123, 1, -10, 3]], [[3, 4, 3]], [[-2, -5, -7, 2, 10, 0, 9, 5, -3, 2, 8, 3, 7]], [[0, 3, -5, 2, -3, 3, -9, 0, 123, 1, -10, -5]], [[1, 2, 4, 5, 5, 4, 6, 8]], [[2, 3, 2, 9, 3, 6, 7, 8, 2]], [[2, 3, 2, 9, 3, 6, 7, 8, 9, 2, 2, 3]], [[5, -6, 2, -3, 3, -9, 0, 1, -10, 10, 2]], [[1, 1, 1, 2, -12, 0, 1, 1, 1, -5]], [[5, -6, 2, -7, -3, 3, -9, 0, 1, -10, 10, 2, 1]], [[1, 2, 2, 2, 2]], [[-5, -7, 2, 10, 0, 9, 5, -3, 2, 8, 3, 7, 2, -3]], [[5, 0, 5, 5, 0, 5, 4, 0, 0, 5, 0, 5]], [[5, 0, 5, 5, 5, 0, 5, 0]], [[2, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1]], [[2, 2, -5, 6, 2, 2]], [[1, 2, 4, 5, 2, 6, 7, 8]], [[5, 0, 5, -1, 5, 0, 9, 0, 0]], [[1, 2, 1, 1, 1, 0, 0, -10, 1, 1, 1, 1, 1]], [[1, 2, 2, -11, 2, 1]], [[1, 1, 23, 1, 0, 8, 1, 1, 1]], [[5, 10, -6, 2, 2, -3, 3, -9, 0, 1, -10, 10, 3, 2]], [[2, 3, 2, 9, 6, 7, 8, 2]], [[1, 2, 123, 5, 5, 4, 6, 8]], [[2, 3, 1, 2, 9, 6, 7, 6, 8, 2, 9]], [[1, 2, 2, 3, 2, 6]], [[5, 3, -5, 23, -3, 3, -9, 0, 123, -1, -10]], [[1, 1, 1, 1, 0, 1, 1, 1]], [[2, 1, 1, 1, 2, 1, 0, -3, 1, 1, 1]], [[1, 1, 23, 1, 0, 8, 1, 1, 1, 1]], [[5, 0, 5, 0, 5, 0, 8, 0]], [[1, 2, 4, 5, 5, 6, 8, 1]], [[1, 1, 1, 1, 0, 0, 2, 1, 1, 1, 1, 1]], [[1, 1, 1, 0, 0, 12, 1, 1, 1, 1, 1]], [[1, 1, 2, 3, 2, 6]], [[5, 3, 10, -5, 2, -3, -9, 0, 123, 1, -10, 10]], [[1, 2, 5, 5, 4, 6, 8]], [[2, 11, -5, 6, 2, 2, 2]], [[1, 1, 1, 2, 1, 0, 0, -12, 1, 1, 1]], [[1, 2, 2, -11, 2, 0]], [[5, -2, -12, 4, 23, 2, 3, 11, 12, -9, 3, 3]], [[1, 2, 123, 5, 5, 4, 6, 8, 123, 5]], [[5, 3, 10, -5, 2, -3, 3, -9, -6, 123, 1, 10]], [[6, 3, -5, -3, 3, -2, -9, 0, 123, -2]], [[-5, -7, 2, 10, 0, 9, 5, -3, 2, 8, 10, 3, 7, 2, -3]], [[5, 4, 4, 5, 0, 5, 0, 5, 0]], [[5, 3, -5, 23, -3, 3, -9, 0, 123, 1, 3, -10]], [[-2, -5, -7, 2, 10, 0, 9, 5, -3, 2, 8, 3, 7, -5]], [[5, 0, 5, 0, 5, 0, 5, 0, 5, 0]], [[5, 0, 5, 5, 0, 6, 5, -1, 4, 5, 5, 0, 5]], [[5, 10, -6, 2, -3, 3, 0, -9, 0, 1, -10, 10, 2]], [[5, 0, 5, 5, 0, 5, 0, 5, 0, -2, 5, 0]], [[5, 3, -5, 23, -3, 3, 4, -9, 0, 123, 1, -10]], [[5, 4, 4, 5, 0, 8, 0, 5]], [[5, -2, -12, 4, 23, 2, 3, 11, 12, -10, 5, 2]], [[1, 1, 2, 1, 1, 2, 2, 2, 2, 2]], [[5, -6, 2, -3, 3, -9, 0, 1, -9, -10, 10, 2]], [[2, 3, 2, 9, 3, 6, 7, 8, 9, 2, 2, 3, 3]], [[3, 1, 4, 1, 5, 9, 6, 5, 4, 4]], [[5, -2, -1, -12, 4, 23, 2, 3, 11, 12, -10]], [[2, 11, -5, -6, 2, 6, 2, 2, 2]], [[2, 3, 7, 2, 9, 3, 6, 7, 8, 2]], [[2, 1, 2, 3, 2]], [[2, 2, -11, 2, 1]], [[5, 3, 2, -3, 3, -9, 0, 123, 1, -10, 3]], [[5, 0, 5, -1, 6, 0, 9, 0]], [[1, 5, 3, -5, 23, -3, 3, -9, 0, 123, -1, -10]], [[2, 1, 3, 2]], [[5, 4, 4, 5, 0, -11, 0, 5]], [[5, -3, 3, -5, 2, -3, 3, -9, 0, 123, 1, -10, 10, -5, 3]], [[5, -2, -12, 4, 23, 2, 3, 11, 12, -10, 4]], [[1, 1, 1, 2, -12, 0, 1, 1, 1, -5, -5]], [[5, 0, 5, 5, 0, 9, 0, 0]], [[5, 3, -5, 2, -2, 3, -9, 1, 0, 123, 1, -10, 12]], [[-7, 2, 10, 0, 9, 5, -5, 2, 8, 3, 7, 9]], [[1, 1, 1, 1, 0, 1, 1, 0, 1, 1]], [[5, 4, 4, 5, 0, 8, 8, 0, 5]], [[5, 3, -5, 2, -3, 3, -9, 0, 123, 1, -10, 3, 3]], [[1, 2, 4, 5, 5, 5, 6, 8, 1, 6]], [[1, 1, 1, 2, 1, 0, -12, 1, 1, 1]], [[5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5]], [[5, 0, 5, -1, 5, 9, 5, 0, 0]], [[5, 5, 4, 4, 0, 5, 0, 5]], [[1, 2, 3, 2, 3, 7, 8, 2]], [[5, 4, 4, 5, 0, 8, 5, 8, 0, 5]], [[5, 3, -5, 2, -3, -9, 0, 123, 1, -10, 3]], [[4, 1, 4, 1, 3, 5, 9, 2, 6, 5, 3]], [[5, 3, -5, 2, -3, 3, -9, 0, 123, 1, -10, 3, -4, 3]], [[1, 1, 1, 2, -12, 0, 1, 1, -5]], [[5, 0, 5, 5, 0, 5, 5, 5, 0, 5]], [[1, 1, 1, 1, 0, 1, 0, 1, 1]], [[5, -4, 3, -5, -3, 3, -12, -2, -9, 0, 123, -2]], [[5, 5, 4, 4, 0, 0, 5]], [[-5, 2, 2, -11, 2, 1, -5]], [[1, 1, 1, 1, 0, 0, 2, 1, 1, 1, 0, 1]], [[1, 1, 1, 0, 0, 12, 0, 1, 1, 1, 1, 1]], [[5, 3, 10, -5, 2, -3, 3, -9, -10, 0, 123, 1, -10, 10, -5]], [[1, 5, 3, -5, 23, -3, 3, -9, 0, 123, -1, -10, -1]], [[2, 3, 7, 2, 9, 3, 6, -12, 8, 3, 3]], [[1, 6, 24, 1, 1, 7, 1, 1]], [[5, 0, 5, 5, 0, 5, 0, 5, 0, -2, 5, -3, 0]], [[5, 3, 24, 2, -3, 3, -9, 0, 123, 1, -10, 3, 3]], [[5, -2, 1, -12, 4, 23, 2, 3, 11, 12, -9, 3, 3]], [[5, 0, 5, 5, 0, 6, 5, -1, 5, 5, 0]], [[5, 3, 10, -8, -5, 2, -3, -9, 0, 123, 1, -10, 10]], [[5, 4, 4, 5, 0, 8, 8, 0, 5, 4]], [[5, 3, -5, 2, 5, -3, 3, -11, -9, 0, 123, 0, -10, 3, 3]], [[5, 3, -5, 2, -2, 3, -9, 1, 0, 123, 1, 9, -10, 12]], [[5, 3, -5, 2, -3, 3, 0, 123, 1, -10, 3]], [[2, 3, 7, 2, 9, 3, 6, 7, -3, 2, 3, 2]], [[-5, 2, -11, 2, 1, -5]], [[2, 2, 1, 23, 2, 2]], [[5, 3, 4, 3]], [[5, -3, 3, -5, 2, -3, 3, -9, 123, 1, -10, 10, -5, 3]], [[5, -6, 2, -3, 3, 0, -9, 0, 1, -10, 10, 2]], [[2, 3, 2, 9, 3, 6, 7, 8, -10, 2, 2, 3]], [[5, 3, 2, 5, -3, 3, -11, 0, 123, 0, -10, 3, 3, 3]], [[2, 3, 1, 2, 9, 6, 7, 6, 8, 2, 9, 6]], [[5, 4, 4, 5, 4, 0, 8, 8, 0, 5, 4]], [[-5, -7, 2, 10, 9, 5, -3, 2, 8, 3, 7, 2]], [[1, 1, 23, 1, 0, 3, 1, 1, 1, 1, 1]], [[1, 2, 2, 3, 3, 2, 1, 2]], [[5, 3, -5, -3, 3, -2, -9, 0, 6, -2, -10]], [[5, 5, 4, 4, 0, 5, 0, 5, 0]], [[1, 6, 24, 1, 1, 7, 1, 1, 7]], [[5, 3, -5, 2, -2, 3, -9, 2, 0, 123, 1, 9, -10, 12]], [[1, 1, 1, 2, -12, 0, 1, 1, 1, -4, 1]], [[1, 1, -10, 2, 1, 0, 0, -12, 1, 1, 1, 1]], [[5, -6, 2, -3, 3, -9, 0, 1, -9, -10, 2]], [[5, 0, 0, 5, 0, 5, 0, 5, 0, 0]], [[5, 3, -5, -3, 3, 4, -9, 0, 123, 1, -10]], [[5, 0, 5, 5, 0, 5, 5]], [[1, 2, 3, 2, 3, 6, 2, 7, 8, 2, 2]], [[0, 5, 0, 5, 0, 5, 0, -2, 5]], [[5, -2, -12, 4, 23, 3, 11, 10, 12, -10]], [[2, 2, -5, 5, 2, 2, 3]], [[1, 2, 3, -5, 6, 7, 8]], [[-7, 2, 10, 0, 9, 5, 12, 2, 8, 3, 7, 9]], [[5, 3, -5, 23, -3, 3, -9, 0, 123, 1, 3, -10, 5]], [[5, 4, 4, -7, 0, 5, 0, 5]], [[6, 1, 2, 1, 4, -11, 4, 5, 5, 6, 7, 8]], [[5, 3, 10, -5, 2, -12, -3, 3, -9, 1, 123, 1, -10, 10, -5]], [[6, 3, -5, -3, -2, -9, 0, 123, -2]], [[11, -5, -7, 2, 10, 0, 9, 5, -5, 2, 8, 3, 7, 9]], [[5, 3, -5, 2, -2, 4, 3, -9, 2, 0, 1, 9, -10, 12]], [[1, 1, 23, 2, 2]], [[1, 2, 3, 2, 12, 6, -8, 8, 2]], [[-5, 2, 2, -7, -11, 2, 1, -5]], [[5, 3, 2, 3]], [[1, 2, 2, 2]], [[5, 4, 0, 4, 5, 0, 8, 0, 5]], [[5, 0, 5, -1, 5, 9, 5, 0, -1]], [[6, 3, -5, -3, -2, 3, 0, 123, -2]], [[1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1]], [[3, 7, 7, 2, 9, 3, 6, 7, 8, 2]], [[0, 3, -5, 2, -3, 3, -8, 0, 123, 1, -10, -5]], [[1, 1, 1, 1, 0, 0, 1, 1, 0, 1]], [[5, 4, 0, 4, 4, 5, 0, 8, 8, 0, 5]], [[5, 0, 5, 5, 0, 5, 0, 5, 5, 0, 0]], [[1, 1, 23, 1, 0, 8, 7, 1, 1]], [[5, 0, 4, 4, 0, 5, 0, 5]], [[5, 0, 5, -11, 0, 6, 5, -1, 5, 5, 0, 5]], [[0, 5, 0, 5, 0, 5, 0, 0]], [[5, 4, 4, 5, 0, 3, 8, 8, 0, 5, 4]], [[1, -13, 1, 2, 1, 0, -12, 1, 1, 1, 1]], [[1, 2, 4, 5, 5, 6, 8, 2]], [[5, 0, 5, 5, 0, 5, 0, 5, 5, 0, 5, 0, 5, 5]], [[-5, -7, 2, 10, 0, 9, 5, -3, 2, 8, 10, 3, 7, 2, -3, -5]], [[5, 0, 5, -1, 5, 5, 0]], [[3, 1, 4, 1, 5, 9, 6, 5, 4, 4, 4]], [[5, 4, 4, 0, 5, 0, 5, 0]], [[5, 0, 4, 5, 5, 0, 5]], [[5, 10, -6, 2, 3, -9, 0, 1, -10, 10, 2]], [[1, 1, -7, 2, 3, 2, 6]], [[2, 4, 5, 5, 6, 8, 2]], [[2, 1, 1, 23, 1, 0, 8, 7, 1, 1]], [[3, -5, -3, 3, -2, -9, 0, 123, -2]], [[1, 1, 1, 2, -12, 0, 1, 9, 1, -5, -5]], [[1, 1, 1, 2, -12, 0, 1, 1, 1, 1, 1]], [[1, 6, 24, 1, 1, 7, 1, 7]], [[1, 1, 2, 1, 0, 1, 0, 1, 1]], [[1, 1, 1, 0, 0, 12, 1, 1, 1, 1, 1, 0]], [[5, -2, -12, 4, 23, 6, 3, 11, 12, -10, 4]], [[1, 2, 3, 2, -6, -1, 6, -1, 7, 8, 2]], [[1, 1, -10, 1, 1, 0, 0, -12, 1, 1, 1, 1]], [[5, 0, 5, 5, 0, 5, 4, 0, 0, 5, 0, 5, 4]], [[1, 6, 1, 1, 7, 1, 7, 1]], [[2, 2, -5, 2, 1, 2]], [[5, 4, 0, -10, 4, 5, 0, 8, 8, 0, 5]], [[5, -3, 4, -5, 2, -3, 3, -9, 0, 123, 1, -10, 10, -5, 1]], [[1, 1, 1, 0, 1, 1, 1]], [[1, 2, 123, 5, 5, 4, 6, 8, 12, 123, 5]], [[4, 1, 2, 4, 5, 5, 6, 0]], [[5, 5, 5, -4, 5, 0, 5, 0]], [[5, 3, 10, -5, 2, -3, -9, -10, 0, 123, 1, -10, 10, -5]], [[5, 3, -5, -3, 3, -2, -9, 0, 6, -6, -2, -10, -5]], [[5, 3, 10, -5, 2, -3, 3, -9, 0, 123, 1, -10, 1, 10, -5, 0]], [[5, 4, 0, 4, 4, 5, 0, -13, 8, 0, 5]], [[-11, 5, 0, 5, 5, 0, 6, 0, 5, 5, 0, 4, 0]], [[6, 5, 0, 5, 5, 0, -1, 5, 5, 0, 5]], [[1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1]], [[5, 0, 5, -1, 5, 0, 5, 0, 0, 0]], [[1, 5, 3, -5, 23, -3, 3, -9, 0, 23, 123, -1, -10, 5]], [[5, 3, -5, 11, -3, 2, 3, -9, 0, 123, 1, -10, 3, 3, 123]], [[0, 5, -1, 5, 5, 0]], [[0, 5, 0, 5, 0, 5, 0, 5, 0, 5]], [[5, 3, -5, 2, -2, 3, -9, 1, 0, 123, 1, -10, 12, 12]], [[5, 0, 5, 5, 0, 6, 5, 5, 5, 0]], [[5, -2, -12, 2, 4, 23, 2, 3, 11, 12, -9, 3, 3]], [[5, -2, -11, 4, 23, 6, 3, 11, 12, -10, 4]], [[0, -7, 5, -1, 5, 5, 0]], [[5, 122, 3, -9, -5, 2, -3, 3, -9, 0, 123, 1, -10, 3, 3]], [[5, 3, -5, 2, 3, -10, 0, 123, 1, -10]], [[5, 0, 5, 0, 5, 0, 5, 5, 0, 0, 5]], [[5, 10, 2, 3, -9, 0, 1, -10, 10, 2]], [[5, 0, 5, -1, 5, 0, 5, 0, 0, 0, 5]], [[5, 3, -10, -5, 2, -2, 3, -9, 1, 0, 123, 1, -10, 12, 12, -5]], [[1, 1, 23, 1, 0, 8, 1, 1]], [[5, 122, 5, 0, 5, 5, 0, 5, 5, 0, 0, 5]], [[5, 0, 4, 5, 0, 5, 0, 5, 0, 0]], [[-11, 5, 0, 5, 5, 0, 6, 0, 5, 5, 10, 4, 0]], [[2, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[2, 3, 2, 9, 3, 6, 7, 8, -10, 2, 2, 3, 3]], [[3, -5, 23, -3, 3, -9, 0, 123, 1, -10, 1]], [[1, 2, 3, 2, 3, 6, 2, 7, 8, 2, 2, 1]], [[2, 3, 1, 2, 9, 6, 7, 6, 8, 2, 9, 6, 2]], [[5, 3, -5, -3, 3, -2, -9, 0, 123, -2, 3]], [[5, 3, 10, -5, 2, -12, -3, 3, -9, 1, 123, -10, 10, -5]], [[2, 2, 2, 23, 2, 2]], [[-2, 2, 4, 5, 5, 6, 7, -12, 8, -2]], [[5, 0, 4, 0, 5, 0, 5, 0, 5, 0, 5, 0]], [[5, 0, 5, 5, 5, 5, 0, 5, 5, 0]], [[5, 10, -6, 2, -3, 3, -9, 0, 1, -10, 10, 10]], [[-4, 5, 3, -5, -3, 3, 4, -10, -9, 0, 123, 1, -10]], [[5, 4, 0, 4, 4, 5, 0, -13, 9, 0, 5]], [[5, 3, 2, 5, -3, 3, -11, 0, 123, 0, -10, 3, 3, 5]], [[2, 1, 3]], [[5, 0, 5, 5, 0, 5, -1, 5, 5, 0]], [[0, 5, 0, 5, 0, -3, 12, 5, 0, -2, 5]], [[2, 2, 1, 23, 2]], [[5, 122, 5, 0, 5, 5, 0, 5, 5, 0, 0, 5, 5]], [[2, 2, 1, 23, 2, 1]], [[2, 123, 5, -3, 5, 4, 6, 8]], [[3, 0, 0, 4, 1, 5, 9, 2, 6, 5, 3, 3]], [[3, 1, 4, -6, 1, 5, 9, 10, 5, 4, 4]], [[5, 3, 10, -8, -5, 2, -9, 0, 123, 1, -10, 10]], [[5, 3, 10, -5, 2, -3, 3, -9, 0, 123, 1, -10, 10, -5, 5]], [[5, 0, 5, -11, 0, 6, -1, 5, 5, 0, 5]], [[5, 3, -5, 2, -3, 3, 0, 123, -9, 1, -10, 3, 1]], [[6, 5, 3, 0, 5, 5, 0, -1, 5, 5, 0, 5]], [[5, 3, 2, 5, -3, 3, -11, 0, 123, 0, -10, 3, 3, -9, 3]], [[5, 3, -5, -2, 3, -9, 1, 0, 123, 1, 9, -10, 12, 123]], [[5, 3, -10, -5, 2, 3, -9, 1, 0, 123, 1, -10, 12, -4]], [[2, 11, -5, 6, 2, 2, 2, 11, 2]], [[5, 1, 1, 1, 2, 1, 0, -3, 1, 1, 1]], [[3, -5, -3, -2, 3, 0, 123, -2]], [[1, 2, 1, 1, 1, 0, 0, -10, 1, 1, 1, 1]], [[2, 2, 2, 23, 0, 2]], [[4, 5, 0, 5, -11, 0, 5, 1]], [[1, 2, 122, 3, -5, 6, 7, 8]], [[2, 1, 7, 3]], [[1, 2, 3, 2, 1, 1]], [[1, 2, 2, -11, 2, 0, 2]], [[5, 0, 4, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0]], [[5, 0, 5, 0, 5, 0, 5, 0, 0, 0]], [[2, 3, 2, 1, 3, 6, 7, 9, -10, 2, 5, 2, 3]], [[3, 1, 4, 1, 5, 9, 6, 5, 4, 4, 4, 1]], [[1, 2, 2, 3, 2, 1, 3]], [[6, 5, 3, 0, 5, 5, 0, -1, 5, 5, -1, 5]], [[5, 3, 10, -5, 2, -12, -3, 3, -9, 1, 123, -1, 1, -10, 10, -5]], [[10, -6, 2, 3, -9, 0, 1, -10, 10, 2, 2]], [[1, 2, 4, 2, -6, -1, -4, 6, -6, 3, -1, 7, 8, 2]], [[3, 1, 4, -6, 1, 5, 9, 10, 6, 4, 4]], [[5, 3, 10, -5, 2, -3, -9, -10, 0, 123, 1, -10, 10, -5, -3]], [[5, 0, 4, 5, 5, 6, 0, 7]], [[2, 2, -10, 2, 1]], [[2, 2, 1, 1, 1, 1, 1, 1, 1, 1]], [[5, -2, -12, 4, -6, 2, 3, 11, 12, -10, 4]], [[5, 0, 5, 5, 0, 5, 0, 5, 6, 5, 0, 5, 0, 0, 0]], [[2, 1, 23]], [[0, -1, 5, 5, 0, 5, 0]], [[-2, -11, 4, 23, 6, 3, 11, 12, -10, 4]], [[2, 2, 9, 3, 6, 23, 8, 2]], [[1, 1, -7, 2, 3, 6]], [[1, 2, 1, 3, 2, -1, 6, -1, 7, 8, 2]], [[2, 2, -1, 2, 3, 2, 2, 2]], [[5, 3, 10, -5, 2, -3, 2, 12, 3, -9, 0, 123, 1, 10, 5]], [[1, 1, -10, 2, 1, 0, -12, 1, 1, 1, 1]], [[5, 4, 4, 0, 5, 5]], [[5, -2, -1, -12, 4, 23, 2, 12, 3, 11, 12, -10, 11]], [[5, 3, 2, 5, -3, 3, -11, 0, 123, 0, -10, 3, 3, 3, -9, 3]], [[1, 1, 1, 1, 1, 2, 2, 2, 3, 2, 2]], [[3, -5, 2, -3, 3, 0, -11, 1, -10, 3]], [[5, 3, 2, 5, -3, 3, -11, 0, 123, 0, -10, 3, 3, -9, 3, 3]], [[2, 3, 7, 2, 2, 9, 3, 6, 7, -3, 2, 3, 2]], [[-2, 1, 1, 1, 2, 2, 2, 2, 2]], [[5, 3, 4, -6, 3]], [[2, 1, 4, 3]], [[5, 0, 5, 1, 5, 0, 5, 0, 5, 5, 0, 5]], [[6, 3, -5, 1, -3, -2, -9, 0, 123, -2]], [[1, 1, -7, 2, 3, 6, -7, -7]], [[1, 1, -3, 2, 3, 6]], [[0, -7, 5, -1, 5, 0, 0]]]\n    results = [[1, 2, 3], [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123], [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10], [2, 6, 4, 8, 10], [1, 0, 3, 6, 5], [1, 3, 2, 2, 3, 1], [6, 7, 11, 9, 14, -1], [], [3], [-14, 9, -1, 8, 3, 12, 5, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [2, 7, 4, 5, 6, 3, 8, 1], [-1, 0, 0, -1, 0, -1, 2, 2, 2], [1, 0, 3, 4, 6, 5], [3, 1, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 3, 1, 2, 2, 11, 3], [29.192135197854643, 33.66238184288656, 29.291147603502964], [1, 2, 2, 2, 3, 1, 5], [1, 3, 1, 2, 2, 11, 3, 3], [2, 4, 3, 2, 10, 1], [1, 3, 4, 6, 5, 4], [1, 3, 2, 2, 3, 1, 3], [1, 3, 2, 2, 2, 11, 3, 3], [3, 1, 3, 4, 4, 6, 5, 7, 8, 9, 10, 11, 12], [1, 1, 3, 6, 5], [1, 0, 3, 4, 6, -1, 10, 0], [3, 1, 3, 4, 4, 6, 5, 7, 8, 5, 9, 10, 11, 12], [2, 4, 2, -14, 3, 4, 10, 1], [1, 2, 3, 2, 5, 1, 14], [-1, 1, 3, 6, 5], [1, 3, 2, 0, 2, 1, 3], [-1, 1, 3, 5], [2, 3, 2, 8, 3, 2, 3, 1, 11, 0, 11], [1, 3, 4, 5, 6, 7, 9, 8, 10, 10, 11, 12], [-1, 3, 0, 6, 0, 10, 4], [-1, 4, 0, 6, 0, 10, 4, 10], [0, 1, 2, 3, 4, 6, 5], [1, 2, 3, 14, 5, 1], [2, 1, 3, 2, 3, 1], [1, 3, 1, 2, 2, 1], [1, 3, 2, 5, 2, 2, 4, 1], [1, 3, 1, 2, 2, 11, 2, 3, 3], [1, 14, 2, 5, 3, 1, 14], [1, 3, 1, 2, 2, 11, 2, 3, 3, 3], [1, 0, 3, 6], [1, 3, 1, 2, 2, -1, 2, 3, 3], [3, 0, 4, 4, 5, 6, 5, 8, 7, 9, 10, 11, 12], [-14, 3, 1, 10, 2, 2, 4, 2, 4], [0, 3, 1, 2, 1, 11, 2, 3, 3], [1, 3, 1, 2, 2, 11, 3, 11], [1, 0, 3, 5], [0, 4, 1, 3], [-1, 0, 0, -1, 0, -1, 2, 2, 2, 2], [1, 2, 1, 2, 2, 1, 3, 3, 5], [2, 1, 3, 2, 3, 1, 3], [0, 4, 0, 6, 0, 10, 4, 10, 10], [0, 4, 1, -1, 3, 3], [2, -14, 2, -14, 3, 4, 10, 1], [-14, 4, 2, -14, 2, 4, 3, 1, 10], [0, 3, 1, 8, 2, 2, 2, 0, 3, 3, 11, 11], [2, 5], [2, 6, 4, 8, 11], [1, 0, 14, 3], [1, 2, 3, 2, 4, 0, 14], [2, 1, 3, 4, 4, 6, 5, 7, 8, 5, 9, 10, 11], [1, 2, 2, 1, 3], [1, 3, 1, 5, 2, 2, 2, 1, 4], [-1, 3, 0, 6, 0, 10, 4, 0], [-14, 0, 1, 4, 3, -1, 6, 0], [-1, 1, 3, 4, 3, 6, 4, 7, 5, 9, 8, 11, 12, 12], [1, 2, 2, 1, 3, 1], [-14, 3, 1, 10, 2, 2, 4, 2, 4, 10], [2, 7, 2, 5, 4, 3, 6, 1, 8], [1, 0, 1, 6, 3, 0, 5], [-1, 1, 1, 4, 3, 5, 3, 6, 4, 7, 4, 9, 5, 11, 8, 12, 12], [0, 1, 2, 3, 4, 4, 6, 5], [-1, 3, 0, 6, 0, 10, 4, 0, 10], [1, 4, 2, 2, 3, 2], [1, 1, 3, 5], [33.66238184288656, 29.291147603502964], [1, 1, 4, 3, 4, 5, 5, 3, 6, 8, 7, 9, 10, 11, 10], [-14, 0, 0, 4, 1, -1, 3, 0, 6], [1, 1, 3, 4, 4, 6, 5, 8, 7, 10, 9, 12, 11], [2, 2, 2, -14, 3, 4, 10, 1, 10], [0, 3, 1, 5, 2, 2, 3, 1], [1, 3, 1, 2, 2, 14, 2, 3, 3, 2, 3], [2, 3, 2, 0, 2, 1, 3, 1, 4, 3, 11], [1, 3, 4, 5, 6, 3, 7, 8, 9, -1, 11, 12], [1, 3, 1, 2, 2, 11, 3, 3, 11], [29.291147603502964, 29.291147603502964, 33.66238184288656], [0, 5, 5], [-1, 3, 0, 6, 0, 10, 4, 5], [-1, 0, 0, -1, 0, 2, 2, 0], [2, 3, 2, -14, 2, 4, 4, 1, 10], [-1, 0, 0, -1, 0, -1, 2, 2, 2, -1], [-14, 0, 0, -14, 3, 2, 3, 2, 4], [1, 3, 1, 2, 2, 11, 2, 3, 3, 0], [-14, 4, 1, -14, 2, 2, 4, 2, 10], [29.291147603502964, 33.66238184288656, 40.82822270856693, 29.291147603502964], [0, 3, 1, 5, 1, 2, 2, 1, 3], [1, 1, 2, 3, 5], [-14, 1, 2, 2, 3, 1], [-1, 3, 1, 5, 4, 3, 6, 8, 7, 9, 12, 11, 14], [-12, -2, 3, 4, 5, 2, 12, 11, 23, -10], [-10, 3, -9, 2, -5, 3, -3, 0, 5, 1, 123], [1, 2, 3, 4, 5, 6, 7, 8], [1, 1, 1, 1, 2, 2, 2, 2], [5, 0, 5, 0, 5, 0, 5, 0], [1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3, 3], [2, 1, 3, 1, 4, 9, 5, 6, 5, 3], [-5, -7, 0, 10, 2, 9, 2, -3, 3, 8, 5, 7], [-5, -7, 0, 10, 2, 9, 2, -3, 2, 8, 3, 7, 5], [3, 3, 3, 3, 3, 3], [3, 3, 3, 3], [-10, 3, -9, 2, -5, 3, -3, 0, 5, 1, 123, 123], [2, 2, 8, 2], [1, 2, 3, 4, 5, 6, 7, 10], [3, -3, 3, 3, 3, 3, 3], [1, 1, 2, 3, 4, 5, 6, 7, 10], [0, 0, 0, 0, 5, -12, 5, 5, 5], [1, 2, 3, 4, 6, 7, 8, 2], [-12, -2, -10, 4, 2, 23, 4, 3, 5, 12, 11], [3, 2, 3, 3, 3, 3], [1, 2, 2, 4, 3, 7, 6, 8, 7], [-7, 2, 2, 4, 3, 6, 5, 10, 7], [-7, 2, 3, 4, 5, 6, 5, 10, 7, 10], [1, 1, 1, 1, 2, 2, 2, 2, 3], [1, 3, 1, 4, 3, 5, 6, 2, 6, 5, 6, 3, 9], [1, -3, 1, 1, 2, 2, 2, 2, 3, 3], [2, 2, 2, 123], [-7, 2, 2, 4, 3, 7, 5, 10, 7, 4], [2, 3, 3, 1, 4, 1, 5, 9, 5, 6, 6, 3, 6, 6], [-12, -2, -10, 11, 4, 4, 4, 2, 5, 3, 11, 12, 23], [3, 2, 3, 3, 3, -5, 3], [2, 3, 4, 1, 5, 1, 5, 9, 6, 6, 6, 3, 6], [-12, -2, 3, 4, 3, 2, 5, 11, 12, -10, 23], [0, -5, 1, -3, 2, -9, 3, 123, 3, -10, 10, 122], [1, 2, 2, 4, 3, 7, 6, 2], [1, 2, 8, 2], [1, 2, 2, 4, 3, 6, 5, 8, 7], [-12, -2, -10, 4, 3, 2, 5, 3, 11, 12, 23, 3], [-9, 3, -5, 2, -3, 3, 1, 0, 5, 123, 6, -10, 123], [1, 1, 1, 1, 1, 1, 1, -10, 1], [0, 0, 0, 0, 5, -12, 5, 5, 6], [0, -7, 2, 10, 2, 9, 3, -3, 5, 8, 11, 7], [-12, -2, -10, 4, 2, 2, 3, -13, 5, 12, 11, 3, 23, 4], [0, -7, 2, 10, 2, 9, 2, -3, 5, 8, 7, 3, 11], [1, 1, 1, 1, 1, 2, 2, 2, 2], [1, -3, 1, 1, 1, 2, 2, 2, 2, 3, 3], [1, 1, 1, 1, 2, 0, 2, 2, 2], [0, 0, 3, 0, 5, -12, 5, -5, 6], [-7, 2, 3, 4, 3, 5, 4, 7, 7, 2, 10, 4], [1, -3, 1, 1, 2, 2, 2, 2, 2, 3, 3], [1, 2, 3, 4, 5, 6, 7], [1, -3, 1, 1, 2, 2, 2, 2, 3, 1, 3, 11], [10, 3, 12, 3], [2, 3, 4, 1, 5, 1, 5, 9, 5, 6, 6, 3, 6], [-5, 3, -3, 2, 0, -9, 1, 123, 5, -10, 123], [1, 1, 1, 1, 1, 1, 1, 1, 1], [-5, 2, 3, 3, 3, 3, 4, 3], [2, 2, 2, 4, 3, 7, 6, 8, 7, 2], [2, 1, 4, 3, 6, 5, 6, 7, 8, 2], [1, 2, 4, 3, 4, 5, 6, 7, 10], [3, 1, 3, 1, 4, 2, 6, 5, 9], [-12, -2, 3, 4, 4, 123, 5, 2, 12, 11, 23, -10], [-12, -2, 3, 4, 4, 23, 4, 11, 5, -10, 12], [-12, -2, 3, 4, 4, 123, 5, 2, 12, 11, 23], [1, 1, 3, 4, 6, 7, 8, 2], [-12, -2, 3, 4, 4, 2, 12, 11, 23, -10], [-5, -7, 0, 2, 2, 9, 2, -3, 2, 8, 3, 7, 5, 2], [-9, 3, -5, 12, -3, 3, 5, 0, 123, -10], [-3, 1, 1, 1, 1, 2, 1, 2, 2, 3, 2, 1], [-5, -7, 2, 10, 2, 0, 3, 5, 9, 8, 11, 7], [-7, 2, 3, 4, 6, 7, 10, 5, 10], [3, 3, 3, 3, 6, 3], [-7, 2, -7, 4, 3, 7, 6, 5, 10, 10, 10], [2, 2, 2, 4, 3, 7, 6, 8, 7, 2, 7], [0, 3, 1, -5, 2, -3, 3, -9, 5, 123, 6, -10], [2, 2, 2, 123, 2], [3, 3, 3, 2, 6, 3], [1, 1, 1, 1, 2, 0, 2, 2, 2, 1], [1, 2, 2, 2, 8], [-10, -5, 0, -3, 3, -9, 3, 123, 12], [3, 2, 3, 3, 3, 4, 3, -5, 4], [2, 2, 3, 6, 123, 2], [-5, -7, 0, 10, 2, 9, 2, -3, 2, 8, 3, 7, 5, 8], [1, -3, 1, 1, 2, 2, 3, 2, 3, 2], [-9, 3, -5, 2, -3, -2, 0, -9, 1, 123, 3, -10, 5], [-5, 3, 0, -4, 1, -3, 2, -9, 3, 123, 5, -10, 123], [2, -7, 2, 10, 2, 9, 3, -3, 5, 8, 11, 7], [-5, -7, 0, 10, 2, 9, 2, -3, 2, 8, 3, 7, 3, 8, 5], [-12, -2, -10, 23, 2, 3, 5, 12, 11, 3], [2, 2, 2, 123, 2, 123], [1, 3, 2, 7, 4, 2], [2, 2, 2, 4, 2, 7, 3, 8, 6, 8, 7], [10, 3, 12, 3, 12, 10], [2, 3, 4, 5, 4, 7, 7, 2, 10], [1, -3, 1, 1, 2, 2, 2, 2, 3, 3, 3], [-3, 2, 2, 3, 2, 6, 4, 8, 7, 1], [-5, -7, -3, 2, 7, 0, 8, 5, 8, 2, 9, 3, 10, 2, 123], [2, 2, 2, 123, 2, 122], [-10, 3, -9, 2, -5, -2, -3, 0, 5, 1, 123, -9], [-10, 3, -5, 2, -3, -2, 0, -9, 3, 1, 5, -9], [-10, 3, -5, 2, -3, -3, 3, -9, 5, 1, 123], [2, 1, 2, 3, 4, 5, 6, 7, 6, 8, 6], [1, 2, 2, 4, 3, 7, 6, 8, 7, 2, 7], [-5, 4, 0, 2, 2, 9, 2, -3, 2, 8, 3, 7, 5, 2, 8], [-5, 3, -3, 2, 0, -9, 1, 123, 5, -10, 123, 5], [2, 3, 2, 1, 3, 1, 4, 9, 5, 6, 5, 3, 6, 6, 6], [2, -7, 4, 3, 5, 6, 7, 10, 9, 10], [3, 2, 5, 4, 7, 6, 123, 8], [-12, -2, 3, 4, 4, 2, 4, 11, 12, -10, 23, -12], [1, 2, 3, -4, 6, 7, 8, 2], [2, 2, 122, 2, 123], [1, 1, 1, 2, 2, 2, 2], [-7, 2, 3, 4, 4, 7, 5, 10, 7, 2], [1, 1, 1, 1, 1, 0, 2, 2, 2, 1], [-5, -7, -3, 2, -3, 0, 7, 5, 8, 2, 8, 3, 9, 2, 123], [-5, 1, -4, 0, 1, 2, 2, 2, 2, 2], [1, 1, 3, 4, 5, -3, 7, 10], [3, 2, 3, 3, 3, 3, 3, 3], [-7, 2, 2, 4, 3, 6, 5, 10, 7, 4], [-3, 2, 1, 2, 2, 6, 2, 8, 4, -7, 7], [-5, -7, -2, 10, 2, 0, 3, 5, 9, 8, 11, 7], [-5, -7, 2, 10, 2, -3, 2, 8, 2, 7, 3, 8, 9], [3, 3, 3, 3, 3, 3, 4], [-12, -2, -10, 4, -10, 2, 2, -13, 3, 12, 5, 3, 11, 4, 23], [2, 8, 2, 2, 2], [-3, 1, 1, 3, 4, 5, 5, 7, 10], [0, 0, 5, 0, 5, -12, 5, 5], [1, -3, 1, 1, 1, 2, 2, 2, 2, 12, 3, 3, 11], [3, -3, 3, 3, 3, 3, 4, 3], [-7, 2, 3, 4, 4, 6, 5, 10, 7, 10], [3, 3, 3, 3, 6, 3], [1, 2, 2, -4, 3, 7, 6, 2, 8, 8], [-3, 2, 2, 3, 4, 6, 7, 123, 8, 2], [-12, -2, 3, 4, 4, 2, 4, 11, 12, -10, 23, -12, 23], [2, 2, 122, 2, 123, 2, 123], [2, 2, 2, 123, 2, 11, 123], [2, 2, 2, 2, 2], [-5, -7, 2, 10, 2, 0, 9, 5, 11, 8, 11, 7], [1, -3, 1, 1, 2, 2, 2, 2, 3, 3, 3, 2], [-5, -7, 2, -5, 2, 9, 2, -3, 2, 8, 5, 3, 7, 2, 7], [1, 2, 3, 4, 5, 6, 7, 7], [-5, -7, -3, 0, 2, 5, 2, 2, 7, 3, 8, 2, 9], [-10, -13, -3, -5, 0, -10, 2, -2, 3, -8, 3, 1, 5, -9], [-7, 2, 3, 4, 6, 7, 10, 5, 10, 7], [-7, 2, -2, 4, 3, 6, 4, 7, 5, 2, 10], [-5, -7, -4, -5, 2, 9, 2, -3, 2, 8, 2, 3, 7, 2, 7], [2, 1, 4, 3, 6, 6, 7, 6, 8, 2], [3, -5, 3, -3, 12, 0, 123, -10, 123], [-5, 3, 0, -4, 1, -3, 2, -10, 3, 123, 5, -10, 123], [1, 2, 3, -12, 5, 6, 7, 10], [-10, 3, -9, 2, -5, 3, -3, 0, -3, 1, 5, 2, 123], [3, 3, 4, 3, 6, 4], [2, 2, 2, 2, 8], [2, 2, 2, 4, 3, 7, 6, 8, 7, 2, 7, 6], [1, 5, 1, 6, 3, 4, 3, 5, 6, 2, 6, 5, 9, 5], [-5, -7, 2, -5, 2, 9, 2, -3, 5, 8, 7, 3, 7, 2], [1, 0, 3, 4, 5, -3, 7, 10], [-7, 2, 3, 4, 4, 7, 6, 5, 10, 7], [2, 2, 2, 2, 3], [3, 3, 4, 3, 4, 3, 6, 3], [2, 3, 4, 6, 5, 10, 7, 10, 7, 2], [-10, 3, -9, 2, -4, 3, -3, 0, -3, 1, 5, 2, 123, -10], [-13, 2, -10, 3, -9, 2, -8, -3, -5, 3, -2, 0, 1, -10, 5], [-12, -7, -5, -5, 2, 9, 2, -4, 2, 2, 3, 7, 5, 7, 8, 2], [1, 4, 1, 9, 2, 6, 5, 3], [-3, 2, 2, 0, 2, 5, 2, 2, 4, 3, 7, 2, 8, 8, 9], [-3, 2, 2, 0, 2, 5, 2, 2, 4, 3, 7, 2, 8, 8, 9, 2], [-5, 1, -3, 1, 1, 2, 1, 2, 1, 3, 2, 1], [-12, -2, 3, -9, 4, 2, 4, 11, 12, -10, 23, -12], [2, 1, 3, 1, 4, 9, 5, 6, 6, 3], [-7, 2, 3, 4, 5, 6, 7, -5, 10, 2], [2, 3, 4, 4, 6, 7, 10, 5, 10], [3, 10, 3], [3, 1, 3, 1, 4, 9, 5, 2, 6, 5, 9], [0, 1, 1, 1, 1, 2, 1, 2, 2, 2], [-5, -7, 2, -5, 2, 9, 2, -3, 2, 8, 5, 3, 7, 12, 7], [2, 2, 3, 4, 7, 7, 8, 2, 8, 2], [-5, -7, -3, 10, 0, 5, 2, 2, 7, 3, 8, 0], [-5, -7, 0, 2, 2, 9, 2, -3, 3, 8, 5, 7, 123, 8], [0, 0, 3, 0, 5, -12, 5, -5, 6, -5], [-5, -7, 2, -5, 2, 9, 3, -3, 5, 8, 7, 3, 7, 3, 11, 2], [-10, 3, -5, 2, -3, -3, 0, -9, 3, 1, 123], [3, 3, 3, 4, 3, 3, 6], [1, 1, 1, 1, 2, 0, 2, 2, 2, 1, 2, 2], [-5, 4, 0, 2, 2, 9, 2, -3, 2, 8, 3, 7, 5, 2, 8, 2], [-10, 3, -9, -3, -5, 0, 5, 1, 123, 123, 123], [1, 2, 2, 4, 3, 6, 3, 8, 4, 4, 7], [-10, 1, 1, 1, 1, -5, 1, 1, 1, 1], [1, 3, 2, 6, 4, 8, 7], [-10, 3, -4, 2, 0, -9, 1, 123, 2, -10, 3, -3, 5], [-9, -13, -3, -5, 0, -10, 2, -2, 3, -8, 3, -10, 5, 2], [-10, 3, -5, 0, 0, -3, 2, 0, 5, 1, 123, -10, 123, 5], [-12, -2, 2, 23, 3, 3, 5, 12, 11], [1, 3, 2, 7, 4, 2, 4], [-10, -11, -9, 6, -5, 2, -3, 3, 4, 0, 5, 1, 123], [1, 2, 2, -4, 3, 7, 6, 2, 8], [1, 1, 1, 1, 1, -2, 2, 0, 2, 2], [-12, -2, 3, -9, 4, 2, 4, 11, 4, -10, 12, -12, 23], [2, 2, 2, 4, 3, 7, 6, 8, 6, 2, 7, 6, 7], [1, 2, 2, 6, 4, 7, 7, 2, 8, 7], [-3, 3, 2, 1, 4, 1, 5, 9, 5, 6, 6, 3, 6, 2], [-5, 4, 0, 2, 2, 9, 2, -3, 2, 8, 2, 7, 3, 2, 4, 8, 5], [-5, -7, 2, -5, 2, 9, 2, -3, 2, 8, 5, 3, 7, 12, 7, 11, 9], [3, -3, 3, 3, 3, 3, 3, 3], [3, 3, 3, 2, 3, 3, 6], [2, 3, 4, 6, 5, 10, 6, 10, 7, 2, 7], [2, 2, 2, 4, 3, 7, 6, 2, 8, 7], [-13, 2, -10, 3, -10, 2, -8, -3, -5, 3, -5, 0, -2, 1, 5, -9], [-5, 2, 3, -12, 5, 6, 7, 10], [-7, 2, 3, 4, 6, 7, 7, 10, 10], [1, 2, 3, -4, 6, 7, 8, 2, 8], [-10, 3, 0, 0, 2, -3, 5, 0, 7, 1, 123, -10, 123, 5], [-4, 3, 2, 7, 2, 8, 7, 2, 8], [-7, 2, 2, 5, 3, 7, 6, 4, 6], [-12, -2, -10, 4, 4, 12, 5, 3, 11, 12, 23, 4], [2, 2, 2, 4, 3, 7, 6, 3, 6, 2, 7, 7, 8], [-11, 1, 1, 3, 2, 5, 6, 7, 10], [-7, 2, 3, 4, 5, 7, 6, 10], [-13, 2, -10, 3, -10, 2, -8, -3, -5, 3, -5, 0, -2, 1, 3, -9, 5], [-12, -5, -7, 2, -5, 9, -4, -3, 2, 8, 2, 3, 7, 2, 7], [-5, 3, 0, -4, 1, -3, 2, -9, 3, 23, 5, -10, 123, 5], [-2, 1, 0, 1, 1, 2, 1, 2, 2], [-10, 3, 0, 0, 2, -3, 5, 0, 7, 1, 123, -10, 123], [-10, -13, -8, -5, -3, -10, 0, -2, 2, -8, 3, 1, 3, -9, 5], [-12, -2, 3, 4, 4, 123, 5, 1, 12, 11, 23], [2, -3, 3, 3, 3, 3], [-5, -7, -4, -5, 2, 9, 2, -3, 2, 8, 2, 3, 7, 2, 7, 2], [2, 2, 2, 4, 3, 7, 6, 8, 6, 2, 7, 8, 7], [-10, 2, -3, -5, 0, 2, 0, -10, 1, 123, 3, 0, 5, 123, 5], [0, 3, 1, -5, 2, -3, 3, -9, 3, 123, 5, -10, 6, 123], [1, 2, 8, 8], [-7, 2, 3, 4, 5, 10, 6, 10, 7], [1, 1, 1, 1, 1, -5, 1, 1, 1, 1], [-4, 3, 1, 6, 4, 8, 7, 2], [1, 1, 1, -4, 2, 2, 2, 2], [-7, 2, -7, 4, 3, 6, 5, 10, 5, 10, 7], [2, 1, 3, 1, 4, 9, 5, 6, 6, 3, 6], [-12, -2, 3, 4, 4, 123, 5, 2, 12, 11, 23, 4], [1, 2, 4, 3, 4, 5, 6, 7, 10, 4], [1, 1, 3, 2, 5, 4, 6, 6, 8], [1, 8, 10], [2, 1, 2, 3, 4, 5, 6, 7, 6, 2, 8, 3], [1, 2, 2, -4, 3, 8, 6, 8], [2, 3, 3, 6, 3, 3], [4, 0, 5, 0, 5, 0, 5, 0], [1, -3, 1, 1, 2, 2, 2, 2, 2, 3, 3, -3], [-12, -2, -10, 4, 3, 2, 11, 3, 23, 12, 122, 3], [-8, 3, -2, 3, 3], [-5, -7, 2, 10, 7, 0, 8, 5, 9, 11, 11], [2, -7, 2, 10, 2, 9, 3, -3, 5, 8, 10, 7, 11], [1, 1, 2, 2, 2, 4, 3, 6, 5, 10, 7], [1, 1, 1, 4, 3, -3, 5, 10, 7], [-13, 2, 3, 4, 5, 6, 7], [1, 2, 3, 2, 8, 8], [-9, 3, -5, 2, -3, -2, 0, 123, 1, -10, 5], [1, -12, 1, 2, 3, -11, 5, 6, 7, 10], [0, -7, 2, 10, 2, 9, 3, -3, 5, 2, 11, 7], [-3, 2, 2, 4, 2, 7, 6, 8, 123], [-7, 2, 2, 10, 2, 0, 9, 5, 11, 8, 11, 7], [-7, 2, 3, 4, 4, 7, 5, 5, 10, 7], [1, 2, 3, -12, 5, 6, 7], [2, 2, 2, 4, 3, 7, 6, -5, 7, 2, 8], [-7, 2, 2, 4, 3, 6, 4, 10, 5, 4, 7], [-12, -2, 4, 11, 4, 4, 5, 2, 12, 3, 23, -10], [1, -3, 1, 1, 1, 2, 2, 2, 2, 3, 2, -3, 3], [1, -3, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3], [-3, 1, 1, 1, 1, 2, 1, 2, 1, 3, 2, 1, 2], [1, 1, 2, 2, 2, 4, 3, 6, 5, 10, 7, 1], [1, 4, 1, 9, 2, 6, 5], [-7, 2, 3, 4, 5, 10, 7, 10, 10, -7], [-7, 2, -3, 2, 2, 4, 4, 7, 6, 2, 10, 1], [-10, 3, 0, 0, 2, -3, 5, 0, 7, 1, 123, -10, 123, -3], [-9, -5, -3, -3, 1, 3, 2, 123, 5, -10], [1, -4, 2, 7, 6, 2, 8], [-12, -2, -12, 4, 3, 2, 4, 11, 4, -10, 12, -12, 23], [-3, 2, 2, 3, 2, 6, 4, 122, 7, 8, 123], [1, -4, 2, 7, 6, 2, 8, -4], [-12, -2, -10, 4, -5, 23, 2, 3, 4, 12, 11], [-9, -5, -9, -3, -2, 1, 2, 1, 5], [-5, 3, -3, 2, 0, -9, 1, 123, 1, -10, 5, 5, 123], [2, 2, 2, 0, 2, 5, 3, 8, 4, 7, 8, 2, 9, 2], [3, 4, 3, 3], [1, 2, 4, 3, 4, 5, 4, 7, 6, 4, 10], [1, 1, 1, 1, 1, 2, 1, 1, 1], [-12, 0, 0, 0, 5, -12, 5, 5, 5], [1, 1, 2, 2, 2, 2], [-10, 3, -3, 2, 3, -3, 5, -9, 11, 1, 123], [2, 2, 2, 2, 3, 3], [-12, -2, 3, 4, 3, 23, 4, 11, 4, -10, 5, 4, 12], [-7, 2, 3, 4, 5, 6, 7, 5, 10, 2], [-5, 3, 2, 3, 3, 3], [-2, 1, 0, 1, 1, 1, 1, 2, 1, 2, 2, 0], [-10, 3, -10, 2, -9, -2, -5, 0, -3, 1, 5, -9, 123], [-12, -2, 2, 23, 3, 3, 5, 12, 11, 2], [3, 3, 4, 6, 6], [2, 3, 4, 6, 5, 10, 6, 10, 7, 2, 7, 7, 7], [2, 3, 2, 4, 3, 7, 6, 8, 7, 2], [1, 3, 2, -8, 4, 2, 7], [-12, -5, -7, 2, -5, 9, -4, -3, 2, 8, 7, 3, 7, 2], [-7, 2, 2, 123, 2, 2, 11, 123], [-13, 2, -10, 3, -9, 2, -5, -3, -2, 3, 0, -8, 2, -10, 5], [1, 8, 10, 8], [-10, 3, -5, -4, 2, -3, 3, 0, 5, 1, 123, -2, 123], [-10, 5, -9, -5, 2, -3, 3, 0, 122, 1, 123, 123], [3, 3, 3, -3, 3, 4, 6], [-5, -7, 2, -5, 2, 9, 2, -3, 2, 8, 5, 4, 7, 12, 7, 9], [2, 3, 4, 5, 5, -4, 7, 2, 9, 4], [3, 3, 3, 3, 3, 4, 4], [1, 1, 1, 1, 1, 1, 1], [-10, 3, -5, 5, -3, -2, 0, -9, 3, 1, 5, -9], [-12, -2, -12, 4, 3, 2, 4, 11, 12, 4, 23], [0, 1, 1, 2, 1, 2, 1, 1, 2], [3, 3, 3, 4, 4, 3, 6, 3], [-2, 3, 3, -3, 3, 4, 6, 3], [-7, 2, -7, 4, 3, 6, 5, 10, 5, 10, 7, 7], [2, 2, 2, 123, 3, 7, 6, 2, 8, 7], [-13, -2, -12, 4, 2, 23, 2, 3, 3, 11, 3, -10, 4, 2, 5, -10, 12], [-3, 1, -2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 3], [-5, -7, 2, -5, 2, 9, 2, -3, 3, 4, 5, 7, 8, 7, 12, 2], [-12, -2, 2, -3, 3, 3, 5, 12, 11, 5, 12], [1, 1, 1, 2, 1, 2, 2, 1, 10], [-3, 2, 2, 3, 2, 6, 4, 122, 7, 8, 123, 8], [-10, 3, 0, 0, 1, -3, 1, 0, 2, 1, 5, -10, 7, -3, 123], [-9, 3, 1, 6, 2, 8, 4, -4, 7], [-5, -7, -3, -13, 0, 2, 2, -4, 2, 2, 3, 7, 8, 7, 9, 2], [1, -4, 2, 5, 6, 2, 6, 8, 7], [-13, 2, -10, 3, -9, 2, -8, -3, -5, 3, -5, 0, -2, -10, 5, 3], [-3, 2, 2, 3, 4, 6, 7, 122, 8, 8, 123, 2], [1, -3, 1, 1, 2, 2, 2, 2, 3, 3, 11, 2], [1, 1, 1, -9, 1, 1, 2, 0, 2, 2, 2], [1, -3, 1, 1, 2, 2, 2, 3, 3, 2, 3], [-4, 3, 2, 8, 2, 7, 7, 2, 8, 8], [3, 3, 3, -3, 4, -2, 6], [-9, -13, -8, -5, -2, -3, 1, 3, 2, 0, 3, -10, 5], [-10, -5, -9, -3, -3, 0, 2, 1, 5, 2, 123], [3, 3, 3, 3, 3, 7, 4, 2], [-9, 3, -5, 2, -3, -2, 0, -9, 1, 123, 3, -10, 5, -10, 123], [2, 2, 2], [2, -7, 2, 10, 3, 9, 5, -3, 10, 8, 11, 7], [1, -11, 3, -11, 3, 6, 5, 10, 7], [1, -3, 1, 1, 2, 2, 2, 3, 2, 3, 3, -3, 3], [-7, 3, 4, -11, 7, 10, 10, 7], [-10, 123, -3, 7, 0, 2, 0, -10, 1, 123, 3, 0, 5, 123], [2, -7, 2, 10, 3, 0, 9, 5, 11, 8, 11, 7], [-7, 2, 3, 4, 5, 6, 5, 10, 6, 10, 7, -7], [3, 3, 3, 3, 6, 3, 23], [3, 3, 3], [2, 2, 2, 2, 3, 2], [1, 1, 2, 2, 2, 4, 2, 6, 5, 10, 7, 1], [1, 3, 2, 6, 4, 8, 7, 6], [1, 2, 4, 3, 4, 5, 6, 12, 10, 4], [-3, -7, 0, 10, 2, 5, 7, 2, 8, 3, 11], [-12, 3, 3, 3, 6, 3, 23, 3], [-6, -7, -5, 2, -3, 0, 7, 5, 8, 2, 8, 3, 9, 2, 10, 2], [1, 1, 1, 1, 1, 0, 1, 2, 2, 1, 2, 2], [2, 4, 2, 7, 4, 8, 6, 2, 7], [3, 3, 4, 6, 6, 3], [2, 1, 2, 1, 3, 9, 4, 6, 5, 3, 5], [-10, 1, 1, 1, 1, 1, 1, 1], [-13, 3, 4, 5, 6, 7], [-7, 2, 3, 4, 5, 7, 7, 5, 10, -7, 10], [-3, 1, -3, 1, 1, 2, 2, 2, 3, 2, 3, 3], [-5, -7, -3, 2, 7, 2, 8, 5, 9, 2, 10, 3, 11], [0, 3, 1, -5, 2, -3, 3, -9, 5, 123, 6, -10, 123], [-10, 3, -9, -5, -9, -3, 2, 0, 5, 1, 6, 3, 123, 123, 123], [-13, 2, -10, 3, -10, 2, -8, -3, -5, 3, -5, 0, -2, 1, 3, -9, 5, -2], [2, 2, 122, 2, 123, -11], [-12, -2, -10, 4, -5, 23, 4, 3, 11, 12, 122], [-9, -13, -8, -5, -2, -3, 1, 3, 2, 0, 3, -10, 5, -10], [-5, 3, 0, -4, 1, -3, 2, -9, 3, 123, 3, 123, 5], [2, 2, 2, 123, 2, 7, 3, 2, 6, 7, 8], [1, 2, 3, 4, 5, 6, 5, 8, 7], [-7, 2, 3, 4, 6, 7, 7, 10, 10, 4], [-11, 1, 1, 1, 1, 2, 1, 23, 1, 1], [1, -3, 1, 1, 2, 2, 2, 2, 3, 3, 11, 3], [1, -3, 1, 1, 2, 2, 2, 2, 2, 1, 3, 2, 3], [-6, -7, -5, 2, -3, 0, 2, 5, 2, 2, 8, 7, 9, 8, 10], [-12, -2, -12, -9, 3, 2, 4, 11, 4, -10, 13, -13, 23, 4], [2, 1, 3, 1, 3, 9, 4, 1, 5, 5, 6, 3, 6], [-10, -13, -9, 3, -8, 2, -4, -3, -2, 3, 1, 0, 4, -10, 5, -8], [-5, -7, -2, 10, 5, 0, 7, 9, 8, 2, 8, 4, 11], [-3, 2, 2, 4, 6, 7, 8, 7, 123, 2], [-7, -7, -5, -5, -4, 9, -4, -3, 2, 8, 2, 3, 2, 3, 7, 2, 7], [-3, -7, 0, 10, 2, 5, 7, 2, 8, 3, 11, 5], [-7, 2, 3, 4, 6, 7, 7, 5, 10, 4], [2, 8, 10, 8], [-4, -3, 3, 3, 3, 3, 4, 3, 122], [3, -3, 3, 3, 4, -4, 122, 3], [-9, 3, -5, -11, -3, 2, 0, -9, 1, 123, 3, -10, 5, 123, 6], [3, 3, 6, 3, 24, 3], [-7, 2, 3, 4, 6, 7, 7, 5, 10, 7, 10], [2, 1, 3, 4, 4, 4, 5, 6, 6, 10, 7, 4], [1, 2, 3, -12, 3, 6, 5, 7, 10], [1, -12, 1, 2, 3, -11, 5, 6, 5, 10, 7], [2, 2, 2, 4, 3, 13, 7, 8, 123], [1, 1, 1, 6, 2, 2, 2, 4, 2, 6, 3, 2, 5, 4, 7], [-13, -2, -12, -9, 3, 2, 4, 11, 4, -10, 13, 4, 13, -12, 23], [2, 3, 2, 2, 2], [0, 0, 1, 0, 3, -12, 5, -5, 5, -5, 5], [-10, 3, -5, -4, 0, -3, 1, -9, 2, 23, 3, -10, 5, 5, 123], [-5, -7, 2, -5, 2, 9, 2, -3, 2, 8, 5, 3, 7, 12, 7, 11, 9, 8], [1, -3, 1, 1, 2, 2, 2, 2, 3, 3, 3, 2, 3, 3], [-3, 2, 2, 0, 2, 5, 2, 2, 2, 3, 4, 2, 7, 8, 8, 2, 9], [-5, 0, -5, 0, 5, -12, 5, 3, 6, -5], [3, 10, 3, 3], [-8, 3, 2, 3, 3, -5, 3], [-4, 3, 2, 8, 2, 8, 7, 2, 8], [1, 3, 2, 7, 4], [-6, -7, -5, 10, 2, -3, 2, 8, 2, 7, 2, 8, 9], [1, 2, 2, 0, 3, 5, 4, 8, 7, 2], [-7, 2, -7, 5, 2, 10, 3, 10, 5, 7, 7], [-3, -3, -2, 1, 1, 2, 1, 2, 2, 2, 3, 2, 3, 1], [-3, 1, 1, 1, 1, 2, 1, 2, 1, -2, 2, 1, 2, 1], [-9, 3, -4, 6, 1, 8, 4, -4, 7, 2], [-7, -6, -3, 10, 0, 9, 2, 5, 2, 2, 7, 3, 8, 2, 8, 11, 8, 7], [-13, -3, 3, 3, 3, 3, 4, 4], [2, 2], [-13, 2, -10, 3, -9, 2, -8, -3, -7, 3, -5, 0, -2, -5, 1, -10, 5, 3], [1, 2, 4, 6, 7, 7, 8, 2], [2, 3, 2, 123, 3, 7, 6, 2, 7, 2], [1, 1, 1, 1, 1, 0, 2, 2, 2, 1, 2, 2, 2], [-13, 2, -10, 3, -10, 2, -10, -3, -8, -2, -5, 2, -2, 0, 3, -9, 5, 3], [2, 3, 4, 5, 6, 7, 10, 5, 10], [1, 2, 3, 4, 6, 7, 7, 8, 10, 2], [1, -3, 1, 1, 2, 2, 2, 3, 2, 3, 3, -3, 3, 2, 3], [-8, 3, 1, -7, 2, 2, 7], [1, 1, 1, 1, 1, 0, 2, 2, 2], [-13, 3, 4, 5, 6, 7, 6], [2, 8, 2, 2, 3, 2], [-5, 8, -5, 2, -3, 5, 2, 2, 3, 7, 8, 7, 9], [1, -12, 1, 2, 1, -11, 3, 5, 5, 7, 6, 5, 10], [-12, -2, -12, -9, -10, 3, 4, 13, 4, 13, 11, 122, 23, 4], [-8, 2, -7, 3, 5, 7, 7, 5, 10, -7, 10, 2], [1, 2, 1, 1, 2, 2, 2, 2], [-7, 3, 4, -11, 7, 10, 10], [-3, 1, 1, 1, 2, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 1], [2, 8, 2, 2, 4, 2], [-3, 2, 1, 1, 2, 1, 2, 2, 3, 2, 3, 2], [-9, -5, -7, -3, -2, 1, 2, 1, 5], [5, 0, 5, 0, 5, -1, 5, 0], [-8, 3, 1, -8, 2, 2, 4], [-1, 5, 0, 5, 0, 5, 5], [-3, 2, 1, 1, 1, 6, 2, 2, 3, 2, 3, 2], [-12, -2, -5, 4, -4, 23, 2, 3, 4, 11, 12, -10], [2, 3, 4, 5, 7, 7, 7, 2, 10], [1, 1, 1, 2, 2, 2, 2, 1], [3, 2, 3, 3, 3, 3, 3], [-3, 2, 2, 3, 2, 7, 4, 123, 7, 3], [-10, -2, -10, 4, 4, 12, 4, 3, 5, 12, 11, 4, 23], [-13, 5, -10, 3, -9, 2, -8, -3, -6, 3, -5, 0, -2, -10, 1, -8], [-7, 3, 2, 3, 4, 7, 4, 10, 5, 4, 7, 3], [-4, -5, -3, 2, 2, 0, 2, 5, 4, 2, 7, 3, 8, 2, 9, 8], [0, 1, 1, 1, 1, 2, 10], [2, 3, 2, 123, 2, 6, 3, 2, 6, 7, 7], [1, 3, 5, 1, 5, 5, 6, 2, 6, 4, 6, 3, 9], [-5, 3, -3, 2, 0, -2, 1, -9, 3, 123, 5, -10], [1, 2, 2, 4, 3, 7, 6, 8, 7, 2], [2, -7, 2, 10, 2, 9, 3, -3, 5, 8, 10, 7, 11, -7], [1, 12, 2, 4, 3, 7, 6, 8, 7, 2, 10], [-10, 3, -10, 0, -10, -3, 0, -9, 1, 123, 2, 0, 7, 123], [-8, 1, 1, 2, 2, 4, 2, 6, 5, 10, 7, 1], [1, 3, 4, 6, 8, 2], [-7, 2, 3, 4, 5, 10, 7, 10, 10, -7, 10], [1, 1, 1, 0, 2, -12, 10], [2, 3, 2, 1, 3, 1, 4, 9, 6, 6, 6, 5, 10, 6], [2, 2, 2, 123, 2, 123, 2], [-3, 1, 0, 10, 2, 5, 7, 2, 8, 3, 11], [-5, -7, 0, 10, 0, 5, 2, -3, 2, 8, 3, 7, 123], [1, 1, 1, 1, 1, 0, 2, 2, 2, 1, 2, 2, 2, 2], [-14, 3, -13, 5, 3, 6, 4, 7, 6], [-13, 2, -10, 3, -10, 2, -8, -2, -5, 2, 3, 0, 5, -9], [1, 2, 2, 4, 3, 7, 6, 10, 8], [-3, 1, 1, 1, 1, 2, 1, 2, 1, 13, 2, 1, 2], [-4, 4, 3, 2, 3, -11, 122, 3], [1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2], [-14, 3, 3, 3, 4], [-4, 2, 1, 6, 2, 8], [-7, -5, 0, -2, 0, 11, 2, 8, 4, 5, 8, 8, 9, 7, 10], [2, 3, 2, 2, 2, 2, 8], [-4, 3, 1, 6, 2, 8, 7, 7], [3, 3, 3, -3, 4, -2, 6, 3], [-3, 2, 2, 3, 4, 6, 7, 122, 7, 8, 8, 2, 8, 4, 123], [1, 2, 1, 8, 2], [1, 2, 8], [-6, -7, -5, 2, -3, 0, 2, 5, 2, 2, 9, 7, 10, 8, 11], [1, 2, 1, 4, 3, 6, 5, 7, 7], [-10, -14, -9, 6, -5, -6, -3, 3, 3, 0, 5, 1, 123, 123], [-10, 1, 1, 1, 1, -5, 1, 1, 1, 1], [-12, -2, 4, 4, 4, 123, 5, 3, 11, 12, 23, 4], [1, -10, 1, 2, 2, 2, 2, 1], [2, 2, 2, 4, 2, 7, 3, 8, 6, 2, 7, 6, 7], [0, 2, 2, 9, 2, 2, 2, 3, 5, 2, 7, 8, 8], [2, 4, 5, 0, 6, 10, 7, 10, 7, 2, 8, 10], [3, 3, 3, 6, 4, 3, 6], [2, 2, 2, 4, 3, 6, 6, 7, 7, 2, 8, 7, 11], [-10, 3, 2, -5, 3, -3, 5, 0, 6, 1, 123, 5], [-4, 1, 1, 4, 3, 7, 6, -9, 6, -4, 8, 2], [-5, 1, -3, 1, 1, 2, 1, 2, 1, 3, 2, 2], [10, 8, 12, 3], [1, -3, 1, 1, 2, -10, 2, 3, 3, 2, 3], [2, 2, 2, 8, 2, 2], [1, 9, 1, 1, 1, 1, 1, -5, 1, 1, 2, 1], [3, 3, 6, 4], [-14, 3, 3, 2, 3, 3, 4], [3, -5, 3, 3, 3, 3, 4, -4, 122, 3], [-12, -2, -10, 23, 2, 3, 3, 12, 5, 3, 11], [1, 1, 2, 1, 4, 0, 10, -12, 10, 4], [-9, 11, -3, -3, 1, 3, 2, 123, 3, -10], [5, 6, 5, 4], [1], [5, 5, 5, 5, 5, 5], [1, 3, 5, 7, 9], [2, 4, 6, 8], [1, 2, 2, 1, 2, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 3, 2], [1, 2, 3, 5, 6, 7, 8], [-5, 3, -2, -3, 0, -9, 3, 123, 5, -10], [-10, 3, -9, 3, -5, 0, 5, -2, 123], [0, 0, 0, 5, 5, 5, 5], [1, 2, 3, 4, 6, 7, 8], [-5, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1, 1, 2], [-12, -2, 3, 4, 5, 2, 12, 11, 23, -9], [0, 0, 0, 5, 5, 5, 5, 5], [0, 0, 0, 5, 0, 5, 5, 5, 5], [0, 3, 1, -5, 2, -3, 3, -9, 5, 123, 10, -10, 10], [3, 1, 4, 1, 4, 9, 5, 5, 6], [0, 3, 1, -5, 2, -3, 3, -9, 5, 123, 10, 10], [1, 1, 1, 2, 1, 0, 1, 1, 1, 1], [-10, 3, -9, -3, -5, -2, 3, 0, 5, -2, 123], [0, 0, 0, 5, 0, 5, 5, 5, 5, -2, 5], [-9, 3, -5, -3, 3, -2, 5, 0, 123, -2], [1, 6, 1, 1, 1, 7, 23, 1], [1, 6, 1, 1, 1, 7, 1, 2, 23], [-10, 3, -9, 2, -5, 3, -2, 0, 5, 1, 123, 1], [1, 2, 2, 2, 3, 6, 3, 8, 7], [-2, 0, 5, 0, 5, 0, 5, 0, 5, 5], [5, 0, 5, -1, 5, 0, 5, 0], [1, 2, 4, 5, 5, 6, 7, 8], [1, 1, 1, 1, 2, 2, 2, 2, 2], [0, 3, 1, -5, 2, -3, 3, -9, 5, 123, 10, -10, 10, -5], [1, 2, 2, 3, 2], [-12, 1, 1, 2, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [-10, 3, -9, 23, -5, 3, -3, 0, 5, 1, 123], [0, 3, 0, -5, 1, -3, 2, -9, 3, 123, 5, -10, 10, -5, 10], [1, 2, 4, 5, 5, 6, 8], [0, 1, 1, 2, 1, 0, 1, -12, 1, 1, 1, 1], [-9, 10, -6, 2, -3, 3, 1, 0, 5, -10, 10], [-9, 10, -6, 2, -3, 3, 1, 0, 5, -10, 10, 2], [-5, -7, 0, 10, 2, 9, 2, -5, 3, 8, 5, 7, 9], [3, 3, 4, 3, 5], [1, 2, 2, 3, 2, 1], [2, 1, 3, 1, 4, 9, 5, 6, 5], [0, 0, 0, 5, 5, 5, 5, 5, 5, 0], [0, 0, 5, -1, 5, 0, 5, 0, 5], [1, 2, 2, 2, 3, 6, 3, 7, 8, 2], [0, 5, 0, 5, 5, 0, 5, -1, 5, 5, 6, 5], [-2, 2, -2, 5, 4, 6, 5, 8, 7], [0, 0, 0, 5, 5, 6, 5, -1, 5, 5, 5, 5], [3, 1, 4, 1, 4, 9, 5, 4, 6], [0, -3, 1, -5, 2, -3, 3, -9, 3, 123, 5, -10, 10, -5], [0, -3, 1, -5, 1, -3, 2, -9, 3, 123, 3, -10, 5, -5, 10], [0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 5, 5], [0, 4, 0, 5, 4, 5, 5, 5], [-10, 2, 2, 2, 2], [0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 5], [0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 5, 0], [-10, 3, -9, 2, -5, 3, -3, 0, 5, 1, 123, 3], [3, 4, 3], [-7, -5, -3, 2, -2, 0, 7, 5, 8, 2, 9, 3, 10], [-10, 3, -9, 2, -5, 3, -3, 0, 0, 1, 123, -5], [1, 2, 4, 5, 5, 4, 6, 8], [2, 3, 2, 9, 2, 6, 3, 8, 7], [2, 3, 2, 9, 2, 6, 3, 8, 7, 2, 9, 3], [-10, -6, 0, -3, 2, -9, 2, 1, 3, 10, 5], [-12, 1, 1, 2, 1, 0, 1, 1, 1, -5], [-9, -6, -3, -7, 1, 3, 1, 0, 2, -10, 5, 2, 10], [1, 2, 2, 2, 2], [-5, -7, 0, 10, 2, 9, 2, -3, 2, 8, 3, 7, 5, -3], [0, 0, 0, 5, 0, 5, 4, 0, 5, 5, 5, 5], [5, 0, 5, 5, 5, 0, 5, 0], [0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2], [-5, 2, 2, 6, 2, 2], [1, 2, 2, 5, 4, 6, 7, 8], [0, 0, 5, -1, 5, 0, 5, 0, 9], [0, 2, 1, 1, 1, 0, 1, -10, 1, 1, 1, 1, 1], [1, 2, 2, -11, 2, 1], [0, 1, 1, 1, 1, 8, 1, 1, 23], [-10, 10, -6, 2, 0, -3, 2, -9, 3, 1, 3, 10, 5, 2], [2, 3, 2, 9, 6, 7, 8, 2], [1, 2, 5, 5, 6, 4, 123, 8], [1, 3, 2, 2, 7, 6, 8, 6, 9, 2, 9], [1, 2, 2, 3, 2, 6], [-10, 3, -9, 23, -5, 3, -3, 0, 5, -1, 123], [0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, -3, 2, 1, 2], [0, 1, 1, 1, 1, 8, 1, 1, 23, 1], [5, 0, 5, 0, 5, 0, 8, 0], [1, 2, 4, 5, 5, 6, 8, 1], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1], [0, 1, 1, 0, 1, 12, 1, 1, 1, 1, 1], [1, 1, 2, 3, 2, 6], [-10, 3, -9, -5, 2, -3, 5, 0, 10, 1, 123, 10], [1, 2, 4, 5, 5, 6, 8], [-5, 11, 2, 6, 2, 2, 2], [0, 1, 1, 2, 1, 0, 1, -12, 1, 1, 1], [1, 2, 2, -11, 2, 0], [-12, -2, 3, 4, 3, 2, 5, 11, 12, -9, 23, 3], [1, 2, 5, 5, 6, 4, 123, 8, 123, 5], [-6, 3, 1, -5, 2, -3, 3, -9, 5, 123, 10, 10], [-9, 3, -5, -3, 3, -2, 6, 0, 123, -2], [-5, -7, -3, 10, 0, 9, 2, -3, 2, 8, 5, 3, 7, 2, 10], [0, 4, 0, 5, 0, 5, 4, 5, 5], [-9, 3, -5, 23, -3, 3, 3, 0, 5, 1, 123, -10], [-7, -5, -3, 2, -2, 0, 7, 5, 8, 2, 9, 3, 10, -5], [5, 0, 5, 0, 5, 0, 5, 0, 5, 0], [0, 0, 4, 5, 5, 6, 5, -1, 5, 5, 5, 0, 5], [-10, 10, -6, 2, -3, 3, 0, -9, 0, 1, 2, 10, 5], [0, 0, 0, 5, 0, 5, 5, 5, 5, -2, 5, 0], [-5, 3, -3, 23, 0, 3, 1, -9, 4, 123, 5, -10], [0, 4, 0, 5, 4, 8, 5, 5], [-12, -2, 3, 4, 5, 2, 5, 11, 12, -10, 23, 2], [1, 1, 1, 1, 2, 2, 2, 2, 2, 2], [-9, -6, 0, -3, 2, -9, 3, 1, 5, -10, 10, 2], [2, 3, 2, 9, 2, 6, 3, 8, 3, 2, 7, 3, 9], [3, 1, 4, 1, 4, 9, 5, 5, 6, 4], [-10, -2, -1, -12, 2, 23, 4, 3, 5, 12, 11], [-5, 11, 2, -6, 2, 6, 2, 2, 2], [2, 3, 6, 2, 7, 3, 8, 7, 9, 2], [2, 1, 2, 3, 2], [-11, 2, 1, 2, 2], [0, 3, 1, -3, 2, -9, 3, 123, 3, -10, 5], [5, 0, 5, -1, 6, 0, 9, 0], [-1, 5, 0, -5, 1, -3, 3, -9, 3, 123, 23, -10], [2, 1, 3, 2], [0, 4, 0, 5, 4, -11, 5, 5], [0, -3, 1, -5, 2, -3, 3, -9, 3, 123, 3, -10, 5, -5, 10], [-12, -2, 3, 4, 4, 2, 5, 11, 12, -10, 23], [-12, 1, -5, 2, 1, 0, 1, 1, 1, -5, 1], [0, 0, 0, 5, 5, 9, 5, 0], [-9, 3, -5, 2, -2, 3, 0, 1, 1, 123, 5, -10, 12], [-7, 2, -5, 0, 7, 5, 8, 2, 9, 3, 10, 9], [0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 4, 4, 5, 5, 8, 5, 0, 8], [-10, 3, -9, 2, -5, 3, -3, 0, 3, 1, 5, 3, 123], [1, 2, 1, 5, 4, 5, 5, 8, 6, 6], [-12, 1, 1, 2, 1, 0, 1, 1, 1, 1], [5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5], [0, 0, 5, -1, 5, 9, 5, 0, 5], [0, 5, 0, 4, 4, 5, 5, 5], [1, 2, 3, 2, 3, 7, 8, 2], [0, 4, 0, 5, 4, 8, 5, 8, 5, 5], [-5, 3, -3, 2, 0, -9, 1, 123, 3, -10, 5], [3, 1, 3, 1, 4, 5, 4, 2, 6, 5, 9], [-10, 3, -9, 2, -5, 3, -4, 0, -3, 1, 5, 3, 123, 3], [-12, 1, -5, 2, 1, 0, 1, 1, 1], [0, 0, 0, 5, 5, 5, 5, 5, 5, 5], [0, 1, 0, 1, 1, 1, 1, 1, 1], [-12, -4, -9, -5, -3, 3, 3, -2, 5, 0, 123, -2], [0, 5, 4, 4, 5, 0, 5], [-5, 2, -5, -11, 2, 1, 2], [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 2, 1], [0, 1, 0, 0, 1, 12, 1, 1, 1, 1, 1, 1], [-10, 3, -10, -5, -5, -3, 2, -9, 3, 0, 5, 1, 10, 10, 123], [-1, 5, -1, -5, 0, -3, 1, -9, 3, 123, 3, -10, 23], [2, 3, 3, 2, 6, 3, 7, -12, 8, 3, 9], [1, 6, 1, 1, 1, 7, 24, 1], [0, 0, 0, 5, 0, 5, 0, 5, 5, -2, 5, -3, 5], [-10, 3, -9, 2, -3, 3, 3, 0, 5, 1, 24, 3, 123], [-9, -2, 1, -12, 2, 23, 3, 3, 4, 12, 5, 3, 11], [0, 0, 0, 5, 5, 6, 5, -1, 5, 5, 5], [-5, 3, -3, -8, 0, 2, 1, -9, 5, 123, 10, -10, 10], [0, 4, 4, 5, 5, 8, 5, 0, 8, 4], [-10, 3, -9, 2, -5, -3, 3, -11, 3, 0, 5, 0, 5, 3, 123], [-10, 3, -9, 2, -5, 3, -2, 1, 0, 123, 1, 9, 5, 12], [-5, 3, -3, 2, 0, 3, 1, 123, 3, -10, 5], [-3, 3, 2, 2, 3, 3, 6, 7, 7, 2, 9, 2], [-11, 2, -5, 2, 1, -5], [1, 2, 2, 23, 2, 2], [4, 3, 5, 3], [-10, -3, -5, -5, 2, -3, 3, -9, 3, 1, 5, 10, 123, 3], [-9, -6, 1, -3, 2, 0, 3, 0, 5, -10, 10, 2], [-10, 3, 2, 9, 2, 6, 2, 8, 3, 2, 7, 3], [-11, 3, -10, 5, -3, 3, 2, 0, 3, 0, 5, 3, 123, 3], [1, 3, 2, 2, 7, 6, 8, 6, 9, 2, 9, 6], [0, 4, 4, 5, 4, 0, 4, 8, 5, 5, 8], [-5, -7, -3, 10, 2, 5, 7, 2, 8, 3, 9, 2], [0, 1, 1, 1, 1, 3, 1, 1, 1, 1, 23], [1, 2, 1, 3, 2, 2, 3, 2], [-10, 3, -9, -3, -5, -2, 3, 0, 5, -2, 6], [0, 5, 0, 4, 0, 5, 4, 5, 5], [1, 6, 1, 1, 1, 7, 7, 1, 24], [-10, 3, -9, 2, -5, 3, -2, 2, 0, 123, 1, 9, 5, 12], [-12, 1, 1, 2, 1, 0, 1, 1, 1, -4, 1], [-10, 1, 0, 2, 1, 0, 1, -12, 1, 1, 1, 1], [-9, -6, 0, -3, 2, -9, 2, 1, 3, -10, 5], [0, 0, 0, 5, 0, 5, 0, 5, 5, 0], [-10, 3, -9, -3, -5, 4, 3, 0, 5, 1, 123], [0, 0, 5, 5, 5, 5, 5], [1, 2, 2, 2, 2, 6, 3, 7, 3, 2, 8], [0, 5, 0, 5, 0, 5, 0, -2, 5], [-12, -2, 5, 4, 11, 3, 12, 10, 23, -10], [-5, 2, 2, 5, 2, 2, 3], [1, 2, 3, -5, 6, 7, 8], [-7, 2, 7, 0, 8, 5, 9, 2, 10, 3, 12, 9], [-9, 3, -5, 23, -3, 3, 3, 0, 5, 1, 5, -10, 123], [0, 4, 0, -7, 4, 5, 5, 5], [2, 1, 4, 1, 4, -11, 5, 5, 6, 6, 7, 8], [-10, 3, -9, -5, -5, -12, -3, 3, 2, 1, 5, 1, 10, 10, 123], [-5, 3, -2, -3, -2, -9, 0, 123, 6], [-7, -5, -5, 2, 7, 0, 8, 5, 9, 2, 10, 3, 11, 9], [-10, 3, -5, 2, -2, 4, 1, -9, 2, 0, 3, 9, 5, 12], [1, 1, 2, 2, 23], [-8, 2, 1, 2, 2, 6, 3, 8, 12], [-11, 2, -5, -7, 1, 2, 2, -5], [2, 3, 5, 3], [1, 2, 2, 2], [0, 4, 5, 4, 5, 0, 5, 0, 8], [-1, 0, 5, -1, 5, 9, 5, 0, 5], [-5, 3, -2, -3, -2, 3, 0, 123, 6], [1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1], [3, 7, 6, 2, 7, 3, 8, 7, 9, 2], [-10, 3, -8, 2, -5, 3, -3, 0, 0, 1, 123, -5], [0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [0, 4, 0, 4, 4, 5, 5, 8, 5, 0, 8], [0, 0, 0, 5, 0, 5, 5, 5, 5, 0, 5], [0, 1, 1, 1, 1, 8, 7, 1, 23], [0, 0, 0, 4, 4, 5, 5, 5], [0, 0, 0, -11, 5, 6, 5, -1, 5, 5, 5, 5], [0, 5, 0, 5, 0, 5, 0, 0], [0, 4, 0, 5, 4, 3, 4, 8, 5, 5, 8], [-12, -13, 1, 2, 1, 0, 1, 1, 1, 1, 1], [1, 2, 4, 5, 5, 6, 8, 2], [0, 0, 0, 5, 5, 5, 5, 5, 5, 0, 5, 0, 5, 5], [-5, -7, -3, 10, 0, 9, 2, -3, 2, 8, 5, 3, 7, 2, 10, -5], [0, 0, 5, -1, 5, 5, 5], [3, 1, 4, 1, 4, 9, 4, 5, 5, 4, 6], [4, 4, 5, 0, 5, 0, 5, 0], [4, 0, 5, 5, 5, 0, 5], [-10, 10, -6, 2, 0, -9, 2, 1, 3, 10, 5], [-7, 1, 1, 2, 3, 2, 6], [2, 4, 2, 5, 5, 8, 6], [1, 1, 1, 23, 1, 0, 2, 7, 8, 1], [-3, -5, -2, 3, -2, -9, 0, 123, 3], [-12, 1, -5, 2, 1, 0, 1, 9, 1, -5, 1], [-12, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1], [1, 6, 1, 1, 1, 7, 24, 7], [0, 1, 0, 1, 1, 1, 1, 1, 2], [0, 1, 1, 0, 1, 12, 1, 1, 1, 1, 1, 0], [-12, -2, 3, 4, 4, 6, 5, 11, 12, -10, 23], [-6, 2, 1, 2, 2, -1, 3, -1, 6, 8, 7], [-10, 1, 0, 1, 1, 0, 1, -12, 1, 1, 1, 1], [0, 0, 0, 5, 0, 5, 4, 0, 4, 5, 5, 5, 5], [1, 6, 1, 1, 7, 1, 7, 1], [-5, 2, 1, 2, 2, 2], [0, 4, 0, -10, 4, 5, 5, 8, 5, 0, 8], [0, -3, 1, -5, 1, -3, 2, -9, 3, 123, 4, -10, 5, -5, 10], [1, 1, 1, 0, 1, 1, 1], [1, 2, 5, 5, 5, 4, 6, 8, 12, 123, 123], [2, 1, 4, 4, 5, 5, 6, 0], [5, 5, 5, -4, 5, 0, 5, 0], [-9, 3, 0, -5, 1, -3, 2, -10, 5, 123, 10, -10, 10, -5], [-9, 3, -5, -3, -5, -2, -2, 0, 3, -6, 5, -10, 6], [-5, 3, 0, -5, 1, -3, 1, -9, 2, 123, 3, -10, 5, 10, 10, 0], [0, 4, 0, 4, 4, 5, 5, -13, 5, 0, 8], [-11, 5, 0, 5, 0, 0, 0, 0, 5, 5, 5, 4, 6], [-1, 5, 0, 5, 5, 0, 5, 5, 5, 0, 6], [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 5, -1, 5, 0, 5, 0, 5, 0], [-10, 5, 0, -5, 1, -3, 3, -9, 3, 23, 23, -1, 123, 5], [-5, 3, -3, 11, 0, 2, 1, -9, 3, 123, 3, -10, 5, 3, 123], [-1, 5, 0, 5, 5, 0], [0, 5, 0, 5, 0, 5, 0, 5, 0, 5], [-9, 3, -5, 2, -2, 3, 0, 1, 1, 123, 5, -10, 12, 12], [0, 0, 5, 5, 5, 6, 5, 5, 5, 0], [-12, -2, -9, 2, 2, 23, 3, 3, 4, 12, 5, 3, 11], [-11, -2, 3, 4, 4, 6, 5, 11, 12, -10, 23], [0, -7, 0, -1, 5, 5, 5], [-10, 122, -9, -9, -5, 2, -3, 3, 3, 0, 3, 1, 5, 3, 123], [-5, 3, 0, 2, 1, -10, 3, 123, 5, -10], [0, 0, 5, 0, 5, 0, 5, 5, 5, 0, 5], [-9, 10, 1, 3, 2, 0, 5, -10, 10, 2], [0, 0, 5, -1, 5, 0, 5, 0, 5, 0, 5], [-10, 3, -10, -5, 1, -2, 2, -9, 3, 0, 5, 1, 12, 12, 123, -5], [0, 1, 1, 1, 1, 8, 23, 1], [0, 122, 0, 0, 5, 5, 5, 5, 5, 0, 5, 5], [0, 0, 0, 5, 0, 5, 4, 5, 5, 0], [-11, 5, 0, 5, 0, 0, 5, 0, 5, 5, 6, 4, 10], [1, 1, 1, 1, 1, 1, 1, 1, 2, 1], [-10, 3, 2, 9, 2, 6, 2, 8, 3, 2, 3, 3, 7], [0, -5, 1, -3, 1, -9, 3, 123, 3, -10, 23], [1, 2, 2, 2, 2, 6, 3, 7, 3, 2, 8, 1], [1, 3, 2, 2, 2, 6, 7, 6, 8, 2, 9, 6, 9], [-9, 3, -5, -3, 3, -2, 3, 0, 5, -2, 123], [-9, 3, -3, -5, 2, -12, 5, 3, 10, 1, 10, -10, 123, -5], [2, 2, 2, 23, 2, 2], [-2, 2, 4, 5, 5, 6, 7, -12, 8, -2], [4, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0], [0, 0, 5, 5, 5, 5, 5, 5, 5, 0], [-9, 10, -6, 2, -3, 3, 1, 0, 5, -10, 10, 10], [-10, 5, -9, -5, -4, 3, -3, -10, 3, 0, 4, 1, 123], [0, 4, 0, 4, 4, 5, 5, -13, 5, 0, 9], [-11, 3, -10, 5, -3, 3, 2, 0, 3, 0, 5, 3, 123, 5], [2, 1, 3], [-1, 0, 0, 5, 5, 5, 5, 5, 5, 0], [0, 5, 0, 5, 0, -3, 0, 5, 5, -2, 12], [1, 2, 2, 23, 2], [0, 122, 0, 0, 5, 5, 5, 5, 5, 0, 5, 5, 5], [1, 2, 2, 23, 2, 1], [2, 123, 5, -3, 5, 4, 6, 8], [0, 0, 1, 4, 3, 5, 3, 2, 6, 5, 9, 3], [1, 1, 3, -6, 4, 5, 4, 10, 5, 4, 9], [-10, 3, -9, -8, -5, 2, 5, 0, 10, 1, 123, 10], [0, 3, 1, -5, 2, -3, 3, -9, 5, 123, 5, -10, 10, -5, 10], [-1, 0, 0, -11, 5, 6, 5, 5, 5, 0, 5], [-10, 3, -9, 2, -5, 3, -3, 123, 0, 1, 1, 3, 5], [0, 5, 0, 0, 3, 5, 5, -1, 5, 5, 6, 5], [-11, 3, -10, 5, -3, 3, 2, 0, 3, 0, 3, 3, 5, -9, 123], [-5, 3, 1, -2, 3, -9, 5, 0, 9, 1, 12, -10, 123, 123], [-10, 3, -9, -5, 0, 3, 1, 1, 2, 123, 5, -10, 12, -4], [-5, 11, 2, 6, 2, 2, 2, 11, 2], [0, 1, 1, 1, 1, 1, 1, -3, 2, 1, 5], [-3, -5, 3, -2, 3, 0, 123, -2], [0, 2, 1, 1, 1, 0, 1, -10, 1, 1, 1, 1], [0, 2, 2, 23, 2, 2], [-11, 5, 0, 5, 4, 0, 5, 1], [-5, 2, 1, 3, 7, 6, 122, 8], [2, 1, 7, 3], [1, 2, 1, 2, 3, 1], [1, 2, 2, -11, 2, 0, 2], [0, 0, 4, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5], [0, 0, 5, 0, 5, 0, 5, 0, 5, 0], [-10, 3, 2, 1, 2, 6, 3, 9, 3, 2, 5, 2, 7], [3, 1, 4, 1, 4, 9, 4, 5, 5, 4, 6, 1], [1, 2, 2, 3, 2, 1, 3], [-1, 5, 0, 0, 3, 5, 5, -1, 5, 5, 6, 5], [-9, 3, -3, -5, 1, -12, 2, 3, 5, 1, 10, -1, 10, -10, 123, -5], [-9, -6, 1, 3, 2, 0, 2, -10, 10, 2, 10], [-6, 2, -6, 2, -4, -1, -1, 6, 1, 3, 4, 7, 8, 2], [1, 1, 3, -6, 4, 5, 4, 10, 6, 4, 9], [-9, 3, -3, -5, 0, -3, 1, -10, 2, 123, 5, -10, 10, -5, 10], [0, 0, 4, 5, 5, 6, 5, 7], [-10, 2, 1, 2, 2], [1, 2, 1, 1, 1, 1, 1, 1, 2, 1], [-12, -2, -6, 4, 3, 2, 4, 11, 5, -10, 12], [0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 5, 5, 5, 0, 6], [2, 1, 23], [0, -1, 0, 5, 0, 5, 5], [-10, -11, -2, 23, 4, 3, 6, 12, 11, 4], [2, 2, 6, 3, 8, 23, 9, 2], [-7, 1, 1, 2, 3, 6], [1, 2, 1, 3, 2, -1, 2, -1, 6, 8, 7], [-1, 2, 2, 2, 2, 2, 3, 2], [0, 3, 1, -5, 2, -3, 2, 12, 3, -9, 5, 123, 5, 10, 10], [-12, 1, -10, 2, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 0, 5, 5], [-1, -2, 2, -12, 3, 23, 4, 12, 5, 11, 11, -10, 12], [-11, 3, -10, 5, -9, 3, -3, 0, 2, 0, 3, 3, 5, 3, 123, 3], [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3], [-11, -5, -10, -3, 2, 0, 3, 1, 3, 3], [-11, 3, -10, 5, -3, 3, 2, 0, 3, 0, 3, 3, 5, -9, 123, 3], [2, 3, 2, 2, 2, 9, 2, 6, 3, -3, 7, 3, 7], [-2, 1, 1, 1, 2, 2, 2, 2, 2], [3, 3, 4, -6, 5], [2, 1, 4, 3], [0, 0, 5, 1, 5, 0, 5, 0, 5, 5, 5, 5], [-9, 3, -5, 1, -3, -2, 6, 0, 123, -2], [-7, 1, -7, 2, 1, 6, 3, -7], [-3, 1, 1, 2, 3, 6], [0, -7, 0, -1, 5, 0, 5]]\n    for i, (inp, exp) in enumerate(zip(inputs, results)):\n        assertion(candidate(*inp), exp, 0)\n",
      "entry_point": "sort_even",
      "complete_code": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n\n"
    },
    "execution_info": {
      "max_mutations_per_operator": 10,
      "total_operators_tested": 46,
      "operators_with_mutations": 9,
      "execution_timestamp": "2025-08-01T15:39:50.603474"
    }
  }
}