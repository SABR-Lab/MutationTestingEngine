{
  "timestamp": "20250731_151100",
  "test_type": "mutation_testing",
  "metadata": {
    "task_id": "HumanEval/85",
    "timestamp": "20250731_151100",
    "tester_version": "1.0",
    "total_operators_tested": 8,
    "operators_with_errors": 0
  },
  "summary": {
    "original_passes": true,
    "total_mutations": 15,
    "killed_mutations": 13,
    "mutation_score": 0.8666666666666667,
    "survival_rate": 0.1333333333333333
  },
  "detailed_results": {
    "task_id": "HumanEval/85",
    "original_passes": true,
    "total_mutations": 15,
    "killed_mutations": 13,
    "mutation_score": 0.8666666666666667,
    "mutation_results": {
      "NumberReplacer": {
        "total_mutations": 8,
        "killed_mutations": 8,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "mutated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(2, len(lst), 2) if lst[i] % 2 == 0])",
            "mutated_complete_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(2, len(lst), 2) if lst[i] % 2 == 0])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp_1k_gt1q.py\", line 33, in <module>\n    check(add)\n    ~~~~~^^^^^\n  File \"/tmp/tmp_1k_gt1q.py\", line 21, in check\n    assert candidate([4, 88]) == 88\n           ^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-07-31T15:10:59.566596",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "mutated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0])",
            "mutated_complete_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpypet7p8h.py\", line 33, in <module>\n    check(add)\n    ~~~~~^^^^^\n  File \"/tmp/tmpypet7p8h.py\", line 21, in check\n    assert candidate([4, 88]) == 88\n           ^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-07-31T15:10:59.599022",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "mutated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 3) if lst[i] % 2 == 0])",
            "mutated_complete_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 3) if lst[i] % 2 == 0])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpkyfpyhap.py\", line 33, in <module>\n    check(add)\n    ~~~~~^^^^^\n  File \"/tmp/tmpkyfpyhap.py\", line 22, in check\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-07-31T15:10:59.635916",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "mutated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 1) if lst[i] % 2 == 0])",
            "mutated_complete_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 1) if lst[i] % 2 == 0])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpru_6l3b4.py\", line 33, in <module>\n    check(add)\n    ~~~~~^^^^^\n  File \"/tmp/tmpru_6l3b4.py\", line 22, in check\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-07-31T15:10:59.670255",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 4,
            "original_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "mutated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 3 == 0])",
            "mutated_complete_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 3 == 0])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmphx9m0vvq.py\", line 33, in <module>\n    check(add)\n    ~~~~~^^^^^\n  File \"/tmp/tmphx9m0vvq.py\", line 21, in check\n    assert candidate([4, 88]) == 88\n           ^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-07-31T15:10:59.703918",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "mutated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 1 == 0])",
            "mutated_complete_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 1 == 0])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmph045g8mt.py\", line 33, in <module>\n    check(add)\n    ~~~~~^^^^^\n  File \"/tmp/tmph045g8mt.py\", line 22, in check\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-07-31T15:10:59.739136",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 6,
            "original_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "mutated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 1])",
            "mutated_complete_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 1])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpktgvlk39.py\", line 33, in <module>\n    check(add)\n    ~~~~~^^^^^\n  File \"/tmp/tmpktgvlk39.py\", line 21, in check\n    assert candidate([4, 88]) == 88\n           ^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-07-31T15:10:59.777042",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 7,
            "original_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "mutated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == -1])",
            "mutated_complete_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == -1])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpzuxrv2_o.py\", line 33, in <module>\n    check(add)\n    ~~~~~^^^^^\n  File \"/tmp/tmpzuxrv2_o.py\", line 21, in check\n    assert candidate([4, 88]) == 88\n           ^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-07-31T15:10:59.815095",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 8,
        "mutations_tested": 8
      },
      "Mod->FloorDiv": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "mutated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] // 2 == 0])",
            "mutated_complete_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] // 2 == 0])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpp9t_tce2.py\", line 33, in <module>\n    check(add)\n    ~~~~~^^^^^\n  File \"/tmp/tmpp9t_tce2.py\", line 21, in check\n    assert candidate([4, 88]) == 88\n           ^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-07-31T15:10:59.856358",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Eq->NotEq": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "mutated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0])",
            "mutated_complete_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpz7g4jizz.py\", line 33, in <module>\n    check(add)\n    ~~~~~^^^^^\n  File \"/tmp/tmpz7g4jizz.py\", line 21, in check\n    assert candidate([4, 88]) == 88\n           ^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-07-31T15:10:59.895596",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Remove ReturnValue": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "mutated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return",
            "mutated_complete_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmput6t5bql.py\", line 33, in <module>\n    check(add)\n    ~~~~~^^^^^\n  File \"/tmp/tmput6t5bql.py\", line 21, in check\n    assert candidate([4, 88]) == 88\n           ^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-07-31T15:10:59.937407",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Zero->One": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "mutated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 1])",
            "mutated_complete_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 1])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp1f01cpi5.py\", line 33, in <module>\n    check(add)\n    ~~~~~^^^^^\n  File \"/tmp/tmp1f01cpi5.py\", line 21, in check\n    assert candidate([4, 88]) == 88\n           ^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-07-31T15:10:59.975636",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "One->Zero": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "mutated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0])",
            "mutated_complete_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 == 0])",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp7g6wu8mj.py\", line 33, in <module>\n    check(add)\n    ~~~~~^^^^^\n  File \"/tmp/tmp7g6wu8mj.py\", line 21, in check\n    assert candidate([4, 88]) == 88\n           ^^^^^^^^^^^^^^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-07-31T15:11:00.019608",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "String->Empty": {
        "total_mutations": 1,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "mutated_code": "def add(lst):\n    \"\"\"\"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])",
            "mutated_complete_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\ndef add(lst):\n    \"\"\"\"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-07-31T15:11:00.048902",
            "status": "SURVIVED",
            "reason": "tests_passed"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "String->X": {
        "total_mutations": 1,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "mutated_code": "def add(lst):\n    \"\"\"X\"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])",
            "mutated_complete_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\ndef add(lst):\n    \"\"\"X\"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-07-31T15:11:00.067622",
            "status": "SURVIVED",
            "reason": "tests_passed"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      }
    },
    "problem_info": {
      "prompt": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
      "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
      "test_code": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n",
      "entry_point": "add",
      "complete_code": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n"
    },
    "execution_info": {
      "max_mutations_per_operator": 10,
      "total_operators_tested": 46,
      "operators_with_mutations": 8,
      "execution_timestamp": "2025-07-31T15:11:00.068786"
    }
  }
}