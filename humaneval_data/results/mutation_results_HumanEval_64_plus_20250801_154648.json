{
  "timestamp": "20250801_154648",
  "test_type": "mutation_testing",
  "metadata": {
    "task_id": "HumanEval/64",
    "timestamp": "20250801_154648",
    "tester_version": "1.0",
    "total_operators_tested": 9,
    "operators_with_errors": 0
  },
  "summary": {
    "original_passes": true,
    "total_mutations": 22,
    "killed_mutations": 18,
    "mutation_score": 0.8181818181818182,
    "survival_rate": 0.18181818181818177
  },
  "detailed_results": {
    "task_id": "HumanEval/64",
    "dataset_type": "plus",
    "original_passes": true,
    "total_mutations": 22,
    "killed_mutations": 18,
    "mutation_score": 0.8181818181818182,
    "mutation_results": {
      "NumberReplacer": {
        "total_mutations": 6,
        "killed_mutations": 6,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 1\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 1\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpzc116ydw.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpzc116ydw.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpzc116ydw.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:42.715557",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return -1\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return -1\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp_ecusn8a.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmp_ecusn8a.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp_ecusn8a.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:42.990141",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-2] in 'yY':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-2] in 'yY':\n        cnt += 1\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpjqar9t9m.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpjqar9t9m.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpjqar9t9m.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:43.244396",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-0] in 'yY':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-0] in 'yY':\n        cnt += 1\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpolbx1j3c.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpolbx1j3c.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpolbx1j3c.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:43.480520",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 4,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 2\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 2\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp71np_sc0.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmp71np_sc0.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp71np_sc0.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:43.723627",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 0\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 0\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpqhzzvvf5.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpqhzzvvf5.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpqhzzvvf5.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:43.972552",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 6,
        "mutations_tested": 6
      },
      "AddEq->SubEq": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt -= 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt -= 1\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpl4gjxrai.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpl4gjxrai.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpl4gjxrai.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:44.226359",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Eq->NotEq": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s != '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s != '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpyusjhscv.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpyusjhscv.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpyusjhscv.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:44.442992",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Remove UnaryMinus": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[1] in 'yY':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[1] in 'yY':\n        cnt += 1\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmps2ha1mjj.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmps2ha1mjj.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmps2ha1mjj.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:44.686547",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Remove ReturnValue": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpi9mees5o.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpi9mees5o.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpi9mees5o.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:45.006623",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpidq5dkaf.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpidq5dkaf.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpidq5dkaf.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:45.364834",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Zero->One": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 1\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 1\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpq2obnryu.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpq2obnryu.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpq2obnryu.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:45.689257",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "One->Zero": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-0] in 'yY':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-0] in 'yY':\n        cnt += 1\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpyc803s75.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpyc803s75.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpyc803s75.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:45.992028",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 0\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 0\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp6vd9hq9e.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmp6vd9hq9e.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp6vd9hq9e.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:46.340161",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "String->Empty": {
        "total_mutations": 4,
        "killed_mutations": 2,
        "survival_rate": 0.5,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = ''\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = ''\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:46:46.652041",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"\"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"\"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:46:46.900064",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 2,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in '', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in '', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpsqi5lwdx.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpsqi5lwdx.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpsqi5lwdx.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:47.163240",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in '':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in '':\n        cnt += 1\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp8uq5xck2.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmp8uq5xck2.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp8uq5xck2.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:47.503065",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 4,
        "mutations_tested": 4
      },
      "String->X": {
        "total_mutations": 4,
        "killed_mutations": 2,
        "survival_rate": 0.5,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = 'X'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = 'X'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:46:47.764272",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"X\"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"X\"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:46:48.224394",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 2,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == 'X':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == 'X':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpj4vha23t.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpj4vha23t.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmpj4vha23t.py\", line 35, in vowels_count\n    if s[-1] in 'yY':\n       ~^^^^\nIndexError: string index out of range\n",
            "timestamp": "2025-08-01T15:46:48.472731",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 3,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'X', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'X', s)))\n    if s[-1] in 'yY':\n        cnt += 1\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmptuq2s_99.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmptuq2s_99.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmptuq2s_99.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:48.665500",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 4,
            "original_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
            "mutated_code": "FIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'X':\n        cnt += 1\n    return cnt",
            "mutated_complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\nFIX = '\\nAdd more test cases.\\n'\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if s == '':\n        return 0\n    cnt = len(list(filter(lambda ch: ch in 'aeiouAEIOU', s)))\n    if s[-1] in 'X':\n        cnt += 1\n    return cnt",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpw2ofy8u9.py\", line 75, in <module>\n    check(vowels_count)\n    ~~~~~^^^^^^^^^^^^^^\n  File \"/tmp/tmpw2ofy8u9.py\", line 69, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpw2ofy8u9.py\", line 62, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:46:48.936645",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 5,
        "mutations_tested": 5
      }
    },
    "problem_info": {
      "prompt": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
      "canonical_solution": "\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n",
      "test_code": "\n\nimport numpy as np\n\ndef is_floats(x) -> bool:\n    # check if it is float; List[float]; Tuple[float]\n    if isinstance(x, float):\n        return True\n    if isinstance(x, (list, tuple)):\n        return all(isinstance(i, float) for i in x)\n    if isinstance(x, np.ndarray):\n        return x.dtype == np.float64 or x.dtype == np.float32\n    return False\n\n\ndef assertion(out, exp, atol):\n    exact_match = out == exp\n\n    if atol == 0 and is_floats(exp):\n        atol = 1e-6\n    if not exact_match and atol != 0:\n        assert np.allclose(out, exp, rtol=1e-07, atol=atol)\n    else:\n        assert exact_match\n\n\ndef check(candidate):\n    inputs = [['abcde'], ['Alone'], ['key'], ['bye'], ['keY'], ['bYe'], ['ACEDY'], ['hello'], ['apple'], ['time'], ['glue'], ['candy'], ['parody'], ['monkey'], ['why'], ['bay'], ['aeiouy'], ['JBXFOFH'], ['c'], ['aeiouyaeiouy'], ['aeiouoy'], ['applebay'], ['eaeiouy'], ['applebaglue'], ['glumonkeye'], ['ndy'], ['ctieme'], ['wyhy'], ['parpody'], ['apndyple'], ['glumonglluekeye'], ['ctiparpodyecme'], ['aeicouyaeiouy'], ['pplebay'], ['glumonglluekewyhyye'], ['aeiooy'], ['applaebay'], ['bpplebay'], ['bayy'], ['hwhy'], ['aeioyoy'], ['aaappleeioauy'], ['candaeioyoyyndy'], ['candaeioyoyynad'], ['glumonappleglluekeye'], ['aeioowyhyy'], ['cthelloieme'], ['ctiieme'], ['glumonkeyee'], ['aeuyaeibayouy'], ['bcandaeioyoyynadpplebay'], ['eaeiy'], ['aeioappleuyaeiouy'], ['bcandaeioyoeyynadpplebay'], ['aeuyaeibayoyuy'], ['applebaglueaeiye'], ['aeictiemeoappleuyaeiouy'], ['ttimeime'], ['aeiouyaeglumonkeyeiouy'], ['aeioydndyoy'], ['aeioowyhyoy'], ['ahelloaappleeioauy'], ['glumone'], ['aeiyy'], ['gluemone'], ['bcandyndaeioapplebaglueyoyynadpplebay'], ['ctiparpodyaecme'], ['glumoaeioowyhyyne'], ['applebaglueaeiyectiieme'], ['ba'], ['nddy'], ['eaeeiouy'], ['pardy'], ['aba'], ['glumopnappleglluekeye'], ['applebagluyeaeiye'], ['aeicandaeioyoyynadooewyhyy'], ['glumlonkoeaeioowyhyoyyee'], ['aeuyaeeibayouy'], ['teglumonglluekeyeime'], ['cmonkeyandy'], ['candaeioyd'], ['canddaeyd'], ['aeiouwyhyyaeglumonkeyeiouy'], ['cthelloiecanddyndyme'], ['pzUzSiO'], ['aeyaeibayoyuy'], ['aeeyaeibayoyuy'], ['bcandyndaeioapplaebaglueyoyynadpplebay'], ['aeiyycandaeioyoyynad'], ['ctiemictiiemee'], ['aeicandaeioyoyynadooewyhyyaeiouyaeiouypzUzSiO'], ['hKaAyE'], ['canddy'], ['gluemglumlonkoeaeioowyhyoyyeaeiouoye'], ['applaebbaglumonglluekewyhyyey'], ['aeiyycandaeihwhyoyoyynad'], ['applebaglueaeiyectiieeme'], ['aeuyaeiyuy'], ['aeioappleuyaeiiouy'], ['y'], ['applebageluyeaeiye'], ['eapple'], ['ctipttimeimearpodyaeceme'], ['acanddyteglumonapplaebbaglumonglluekewyhyyeyglluekeyeimeeyaeibayoyuy'], ['ctmeimearpodyaeceme'], ['pctiparpodyecmearpody'], ['bcdfghjklmnpqrstvwxyz'], ['aAAaAaaAaaaaa'], ['ABCDEFGHIJKLMNOPQRSTUVWXYZ'], ['AEIOUYXW'], ['cryptography'], ['psychology'], ['dizziness'], ['abstemiousness'], ['facetiousness'], ['bcdfghjklmnpabstemiousnessqrstvwxyz'], ['bcdfghjklmnpabstemiousnessqrstvxyz'], ['aeiouyfacetiousness'], ['asbstemiousness'], ['psypsychology'], ['facetioubcdfghjklmnpqrstvwxyzsness'], ['ABCDEFGHIJKLMNOPQRSTUVWXZ'], ['AEIOUYYXW'], ['cpsychology'], ['cryptograpy'], ['aAEIOUYXWouy'], ['cryptographcy'], ['aeioaAAaAaaAaaaaauyfacetiousness'], ['psypsycfacetioubcdfghjklmnpqrstvwxyzsnesshology'], ['iaeaeiouyfacetiousnessioouy'], ['bcdfgjhjklmnpqrstvwxyz'], ['AEW'], ['cryptogracpy'], ['facetioubcdffghjklmnpqrstvwxyzsness'], ['aAAaAaaAaaa'], ['iaeaeiouyfacetiousnessioAEIOUYYXWouy'], ['aOAEIOUYXWouy'], ['cryptograpyy'], ['psyc'], ['cpsyccryptographyhology'], ['cryptograacpsychologyOAEIOUYXWouycpy'], ['aieiouy'], ['cryptbcdfgjhjklmnpqrstvwxyzograacpsychologyOAEIOUYXWouycpy'], ['aeioaAAaAaaAaaaaauyfacfacetiousnessetiousness'], ['aeioiaeaeiouyfacetiousnessioouyuy'], ['aeiouyfaceftiousness'], ['aeioiaeaeiocpsyccryptographyhologyuyfacetiousnessioouyuy'], ['aAAaaAaaAaaaaa'], ['aoeiouyfaceaeiouyfacetiousnessss'], ['psypsycfacetioubcdfghjklmdizzinessnpqrstvwxyscryptograacpsychologyOAEIOUYXWouycpyhology'], ['aieioABCDEFGHIJKLMNOPQRSTUVWXZuy'], ['dizzinesds'], ['iaeaeiiouyfacetiousnessioouy'], ['aaaAaaa'], ['oaAEIOUYXWouy'], ['cpsbcdfghjklmnpabstemiousnessqrstvwxyzology'], ['bcdfgbhjklmnpabstemiousnessqrstvxyz'], ['aeiocryptographcyuyfacetiousness'], ['pssypsychology'], ['asbstemiousnessaeiouyfaceftiousness'], ['facetioubcdffghjklfmnpqrstvwxyzsness'], ['bcdfghjklgmnpabstemiousnessqrstvwxyz'], ['facetioubcdffbcdfghjklmnpabstemiousnessqrstvxyzghjklmnpqrstvwxyzsness'], ['aAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaa'], ['iaeaeiiouyfacetioiusnessioouy'], ['bcdfgjhabstemiousnessjklmnpqrstvwxyz'], ['bcdfgjhabstemaeioiaeaeiocpsyccryptographyhologyuyfacetiousnessioouyuynessjklmnpqrstvwxyz'], ['psiaeaeiiouyfacetioiusnessioouyyc'], ['aeioiaeaeiocpsyccryptographyhologyuyfacetiousnessioouyuyenns'], ['aeipsypsycfacetioubcdfghjklmdizzinessnpqrstvwxyscryptograacpsychologyOAEIOUYXWouycpyholuyuy'], ['bcdfgjhabstemiousnessjklmnpqrstvvwxyz'], ['aAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaabcdfghjklmnpqrstvwxyz'], ['iaeaeiiouyfacetiocryptograacpsychologyOAEIOUYXWouycpyiusnessioouy'], ['aAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaabcdfghjklmnvwxyz'], ['cryptogracaAEIOUYXWouypy'], ['crypotography'], ['aieioABCDEFGHIJKCLMNOPQRSTUVWXZuy'], ['aeipsypsycfacetioubcdfghjklmdizzinessnpqrstvwxyscryptograacpsychsologyOAEIOUYXWouycpyholuyuy'], ['cryptogracfacetioubcdffghjklfmnpqrstvwxyzsnesspy'], ['afacetioubcdfghjklmnpqrstvwxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetiousness'], ['facetioubcdffghjklmnpqrswxyzsness'], ['pbcdfghjklgmnpabstemiousnessqrstvwxyzlogy'], ['facetioubcdffghjklmnpqraAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaabcdfghjklmnpqrstvwxyzstvwxyzsness'], ['bcdfgjhabstfecryptogracaAEIOUYXWouypymiousnessjklmnpqrstvvwxyz'], ['aieieouy'], ['aeioiaeaeiouyfacetiousnesasbstemiousnesssioouyuy'], ['bcdfghjklgmnpqrstvwxyz'], ['psycpbcdfghjklgmnpabstemiousnessqrstvwxyzlogy'], ['afacetioubcdfghjklmnpqrstvwxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetfacetioubcdffghjklfmnpqrstvwxyzsnessiousness'], ['facetioubcdfghjwxyzsness'], ['bcdfgbhjklmnpabstemiousnessqrstvaOAEIOUYXWouyxyz'], ['aieiiouy'], ['aaaaaAaaaa'], ['iaeaeiiouyfacetiousaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaabcdfghjklmnvwxyzy'], ['aipbcdfghjklgmnpabstemiousnessqrstvwxyzlogyeiiouy'], ['OAEIOUYXW'], ['cryptiaeaeiouyfacetiousnessioAEIOUYYXWouyogracpy'], ['psypsycfacetioubcdfghjklmnpqrstvwxyfzsnesshology'], ['facetioubcdffghjklmnpqraAAaaAaaAaaiaeaeiouyfacetiousnessioouss'], ['bcdfgjhabstemiousnessjklmnpqrstvvxwxyz'], ['crypttographcy'], ['aeiouyfaceftiousnesasbstemiousness'], ['aeioiaeaeiocpsyccryptographyhologyouyfacetiousssioouyuy'], ['aeiouyfaceftiousneness'], ['bcdfghjklmnpqrsaieioABCDEFGHIJKLMNOPQRSTUVWXZuyxyz'], ['psiaeaeiiobcdfghjcetioiusnessioouyyc'], ['aeiioiaeaeiocpsyccryptographyhologyuyfacetiousnessioouyuyenns'], ['bcdfghjklmnpqrstvyz'], ['aeioaAAaAaaAaafacetioubcdffghjklmnpqrswxyzsnessaaauyfacfacetiousnessetiousness'], ['psypsycfacetioubcdfghjklmdizzinfacetioubcdffghjklmnpqrswxyzsnessessnpqrstvwxyscryptograacpsychologyOAEIOUYXWouycpyhology'], ['afacetinessetiousness'], ['aeiouyfacetiousnessy'], ['aeiouyfacetiousnbcdfghjklmnpqrstvyzessy'], ['fazcetioubcdffghjklmnpqrstvwxyzsness'], ['psyypsycfacetioubcdfghjklmdizzinfacetioubcdffghjklmnpqrswxyzsnessessnpqrstvwxysouycpyhology'], ['facetioubcdffghjklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['facetioubcdffghjpbcdfghjklgmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['afacetioubcdfghjklmnpqrstvwxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetfacetioubcdffghjklfmnpqrstvwxyzsnessiAousness'], ['aeioiaeaeiocpsyccryptographyhologyuyfacouyuy'], ['OAEaAAaaAaaAaaaaaUYXW'], ['aoeiouyfaceaeiouyfacetieousnessss'], ['facetioubcdffghstvwxyzsness'], ['ai'], ['aiei'], ['yy'], ['pcsypsycfacetioubcdfghjklmnpqrstvwxyzsnesshology'], ['facetioubcdffghjkfacetioubcdffghjklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnesslmnpqrstvwxyzsness'], ['aOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnessWouy'], ['aaaaaAapsychologyaaa'], ['aeiiociaeaeiocpsyccryptographyhologyuyfacetiousnessioouyuyenns'], ['abs'], ['psypsycfacetioubcdfghjklmdizzinfacetioubcdffghjklmnpqrswxyzsnessessnpqrstvwxyscryptograacpsychyologyOAEIOUYXWouycpyhology'], ['aAAaaAaafacetioubcdffghjklmnpqrstvwxyzsnessAaaaaa'], ['facettioubcdffghstvwxyzsness'], ['iaeaeiouyfacetiousnessiioAEIOUYYXWouy'], ['aeiouyffazcetioubcdffghjklmnpqrstvwxyzsnessacetiousnessy'], ['aAAaaAaacrypotographyAaaaaa'], ['aeioiaeaeiocpsyccryptographyhologyuyfacetiousnessiaoouyuyenns'], ['aAEIcryptograpyOUYXWouy'], ['facetioubcdaeiouyfacetiousnbcdfghjklmnpqrstvyzessyffghjklmnpqrstvwxyzsness'], ['cryptbcdfgjhjklmnpqrstvwxyzograacpsychologyOAEIOUYXWouybcdfgjhjklmnpqrstvwxyzcpy'], ['iaeaoeiiouyfacetiousnessioouy'], ['aeioiaeaeiocpsyccryptogaoeiouyfaceaaieieiouyfacetieousnessssraphyhologyouyfacetiousssioouyuy'], ['aAEIaAAaaAaaAaaaaaograpyOUYXWouy'], ['facetioubcdffghjpbcdfghjklgmnpabstemiousnessqrstvwaAEIOUYXWouyxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['cryptbcdfgjhjklmnaieioABCDEFGHIJKCLMNOPQRSTUVWXZuycdfgjhjklmnpqrstvwxyzcpy'], ['psypsycfacetioubcdfghjklmdizziycpyhology'], ['AEIYOUYYXW'], ['aipbcdfghjklgmnpabstemiousnessqrzlogyeiiouy'], ['bcdfgjhabqrstvwxyz'], ['aeiocryptographcyuyfacetpsycinousness'], ['afacetioubcdfghjklmnfacetioubcdfghjwxyzsnesspqrstvwxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetfacetioubcdffghjklfmnpqrstvwxyzsnesssiousness'], ['psypsycfacetioubcdfghjklmdizzinessnpqrstvwxyscryptograacpsychologyOAEIOUYfacetioubcdffghjklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessXWouycpyhology'], ['cpsyccrypaeiioiaeaeiocpsyccryptographyhologyuyfacetiousnessioouyuyennstographyhology'], ['crypytograpyy'], ['cpsyccrypaeiioiaeaeiocpsyccryptographyhologyuyfacetiousnessioouyuyennstograpahyhology'], ['aeiocryptographcyyuyfacetpsycinousness'], ['afacetioubcdfghjklmnpqrstvwaxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetfacetioubcdffghjklfmnpqrstvwxyzsnessiAousness'], ['cryptogracaAEIOUYXWoucpsyccryptographyhologyypy'], ['cryptbaeiouycdfgjhjklmnpqrstvwxyzograacpsychologyOAUEIOUYXWouybcdfgjhjklmnpqrstvwxyzcpy'], ['iaeaoeiiouyfacetiioouy'], ['facettioubcdffghstvwxyzsnOAEaAAaaAaaAaaaaaUYXWess'], ['bcdfghjklmnpqrsaieioABCDEFGHIJKLMNOPQRSTUVWXZuyyz'], ['aaaaaaAapsychologyaaai'], ['aOAEIOUYXWaeiocryptographcyuyfacetiousnessouy'], ['asbstemioussnessaeiouyfaceftiousness'], ['asbstemiousnessaeioouyfaceftiousnesis'], ['kBhhbjyoPZ'], ['aeioiabsaeaeiocpsyccryptographyhologyuyfacetiousnessioouyuy'], ['aeiocryAEWptographcyyuyfacetpsycinousness'], ['facetioubcdffghjklmnpqrswxyzsnesaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaabcdfghjklmnpqrstvwxyzs'], ['aAAaaAaaAaaiacryptogracaAEIOUYXWoucpsyccryptographyhologyypyeaeiouyfacetiousnessioouyaaabcdfghjklmnvwxyz'], ['cpsycholaaaaaaAapsychologyaaaiogy'], ['aaeiouyfaceftiousnenessieiiouy'], ['afacetioubcdfghjklmnpqrstvwaxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetfacetioubcdffghjklfmnpqfacetioubcdffghstvwxyzsnesssiAousness'], ['facetioaAAaaAaacrypotographyAaaaaaubcdfghjklmnpqrstvwxyzsness'], ['aeipsypsycfacetoubcdfghjklmdizzinessnpqrstvwxyscryptograacpsychologyOAEIOUYXWouycpyholuyuy'], ['iaeaeiiouyfacetiousaAAaaAaaAaaiaaieioABCDEFGHIJKLMNOPQRSTUVWXZuyeaeiouyfacetiousnessioouyaaabcdfghjklmnvwxyzy'], ['aAAaaAaaAaaiacryptogracaAEIOUYXWoucpsyccryptographyhologyypyeaeiouyfaacetiousnessioouyaaabcdfghjklmnvwxyz'], ['iaeaeiiouyfacetiocryptograacpsychologyOAEIOUYXWoguycpyiusnessioouy'], ['aeioiaeaeiocpsyccryptographyholaogyuyfacetiousnessioouyuyenns'], ['bcdfgbhjklmnpabstemiousneABCDEFGHIJKLMNOPQRSTUVWXZssqrstvxyz'], ['bcdfghjklgmnpqrtvwxyz'], ['aeipbcdfghjklgmnpabstemiousnessqrzlogyeiiouy'], ['aeiiociaeaeiocpsyccryptographyhologyuyfacetiousnyenns'], ['aAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaabcdfghjklmnpqrstvwcpsbcdfghjklmnpabstemiousnessqrstvwxyzologyxyz'], ['aAAaaAaaAaaiaeaeiouyfacetiaousnessioouyaaa'], ['aAAaAaaAaaaaaa'], ['bcdfgbhjklmnpabsbcdfgbhjklmnpabstemiousnessqrstvaOAEIOUYXWouyxyztemiousnseABCDEFGHIJKLMNOPQRSTUVWXZssqrstvxyz'], ['aOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouy'], ['facetioubcdffbcdmfghjklmnpabstemiousnessqrstvxyzghjklmnpqrstvwxyzsness'], ['OAEIOUYXOW'], ['bcdfgbhjklmnpabsteemiousnessqrstvxyz'], ['iaeaeiouyfacetiouaeioiaeaeiocpsyccryptographyhologyuyfacouyuysnessioAEIOUYYXWouy'], ['aipbcdfghjklgmnpabstemiousnpsypsycfacetioubcdfghjklmdizzinfacetioubcdffghjklmnpqrswxyzsnessessnpqrstvwxyscryptograacpsychologyOAEIOUYXWouycpyhologyessqrzlogyeiiouy'], ['aeipbcdfghjklgmnpabstemiousnessqrzlogyyeiiouy'], ['pcsypsycfacebcdfghjklgmnpqrstvwxyzrstvwxyzsnesshology'], ['aeiouyffazcetioubcdffghjklmnpqrstvwxyzsnessacetaAEIOUYXWouyiousnessy'], ['aeiouyfacetiousneses'], ['aipbcdfghjklgmnpabstepmiousnessqrzlogyeiiouy'], ['basbstemiousness'], ['ABCDEFGHIJKLMNOPQRSTUYZ'], ['facetioubcdffghjpbcdfghfacetioubcdfghjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['dizzifacettioubcdffghstvwxyzsnOAEaAAaaAaaAaaaaaUYXWessness'], ['bcdfgjhabstemaeioiaeaeiocpsyccryptographyhologyuyfacetiousinessioouyuynessjklmnpqrstvwxyz'], ['aieioABCDEFGHIJKLMNOPQRiaeaeiiouyfacetiousnessioouySTUVWXZuy'], ['aAAaaAaaAaaniaeaeiouyfacetiousnessioouyaaa'], ['iaeaoeiiouyfacetiiooaeioiabsaeaeiocpsyccryptographyhologyuyfacetiousnessioaAAaaAaafacetioubcdffghjklmnpqrstvwxyzsnessAaaaaaouyuyuy'], ['iaeaeiouyfacetiousnessioAEIYXWouy'], ['facetioubcdffghjklfmniaeaeiiouyfacetiouspsypsycfacetioubcdfghjklmdizzinessnpqrstvwxyscryptograacpsychologyOAEIOUYfacetioubcdffghjklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessXWouycpyhologynessioouypqrstvwxyzsness'], ['aOAEIOUYXfazcetioubcdffghjklAEIaeiocryptographcyuyfacetiousnessOUYXWmnpqrstvwxyzsnessWouy'], ['crypytograpaeioiaeaeiocpsyccryptogaoeiouyfaceaaieieiouyfacetieousnessssraphyhologyouyfacetiousssioouyuyyy'], ['bcdfgjhabstemiousnessjdklmnpqrstvwxyz'], ['asbstemiousnessaeioouyfaceftiousnesais'], ['cryptogracfacetioubcdffghjklfmnpqrstvwxyzsneaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaabcdfghjklmnpqrstvwxyzsspyaeiouyfacetiousnbcdfghjklmnpqrstvyzessy'], ['dizzinesdcryptbcdfgjhjklmnpqrstvwxyzograacpsychologyOAEIOUYXWouycpys'], ['facetioubcdffghjpbcdfghjklgmnpabstemiousneaeiouyfaceftiousnnesasbstemiousnessYXWouyxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['bcdfghjklmnpabstemiousnessqrsstvwxyz'], ['aeiouyfaceftiousneneuss'], ['aAAaaAaaAaaiacryptogrWacaAEIOUYXWoucpsyccryptographyhologyypyeaeiouyfaacetiousnessioouyaaabcdfghjklmnvwxyz'], ['bcdfcrypytograpyyghjklmnpabstemiousnessqrsstvwxyz'], ['aeioiaeaeiocpsyccryptogaoeiouyfaceaaieieoiouyfacetieousnessssraphyhologyouyfacetiousssioouyuy'], ['aeioaAAaAaaAaafacetioubcdffghjklmnpqrswxyzsnessaaauyfacfacetiousnessetiousnesspsyc'], ['cryptbcdfgjhjklmnpqrstvwxyzograacpsychologyOAEIOUYXWouaeiouyfacetiousnesesy'], ['bcdfghjklmnpabstemiousnesssqrsstvwxyz'], ['gAaeiouyffazcetioubcdffghjklmnpqrstvwxyzsnessacetaAEIOUYXWouyiousnessy'], ['aOAyEIOUYXWouy'], ['cryptogracaAEIOUYXWoucpsycocryptographyhologyypy'], ['aieiiaaaAaaaouy'], ['aeiouyfaceeftiousness'], ['asbstemiousnessaeiouyfac'], ['afacetineousness'], ['psypsycfacetioubcdfghjklmnpqqrstvwxyzsnesshology'], ['cpsyccrypaeiioiaeaeiocpsyccryptographyhoglogyuyfacetiousnessioouyuyennstograpahyhology'], ['iAEIOUYYXWaeaeiiouyfacetaaaaaAapsychologyaaaiousaAAaaAaaAaaiaaieioABCDEFGHIJKLMNOPQRSTUVWXZuyeaeiouyfacetiousnessioouyaaabcdfghjklmnvwxyzy'], ['asbstemiousnessaeiasbstemiousnessaeiouyfaceftiousnessouyfaceaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouyfsness'], ['facetioubcdffghjklfmniaeaeiiouyfacetiousnessioouypqrsdizzinesstvwxyzsiaeaeiouyfacetiousnessioouyness'], ['iaeaeiiouyfacetiousaAAaaAaaAaaiaaieioABCDEFGHIJKLMNOPQRSTUVWXZuyeaeiouyfacetioioouyaaabcdfghjklmnvwxyzy'], ['aoeiouyfaceaeiouyfacetiousnescsss'], ['bcdfghjklgmnpqrstvwxyzai'], ['aeioiaoeaeiocpsyccryptographyhologyouyfaceteiousssioouyuy'], ['cryptog'], ['rcrypotography'], ['ciaeaeiouyfacetiousnessioouy'], ['cryptogracpyaAEIOUYXWouy'], ['casbstemiousnessaeiasbstemiousnessaeiouyfaceftiousnessouyfaceaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouyfsness'], ['asbstemioussnessaeioucryptogracfacetioubcdffghjklfmnpqrstvwxyzsnesspyyfaceftiousness'], ['psypsycfacetioubcdfghjklmdizziyycpyhology'], ['aipcbcdfghjklgmnpabstepmiousnessqrzlogyeiiouy'], ['aAAaaaAaaAaaaaa'], ['dizziaieABCDEFGHIJKLMNOPQRSTUYZiness'], ['afacetinessetiousnness'], ['aieieoyuy'], ['facetioubcaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouydffghjpbcdfghfacetioubcdfghjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['cpsycholog'], ['fazcryptogcetioubcdffghjklmnpqrstvwxyzsness'], ['aa'], ['facettioubcdffghstvwxyzsfnOAEaAAaaAaaAaaaaaUYXWess'], ['facetioubgcdffghjpbcdfghjklgmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['aAAaAaaAaafacetioubgcdffghjpbcdfghjklgmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessa'], ['afacetioubcdfghjklmnpuyfacfacetiousnessetiousness'], ['facetioubcaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouafacetioubcdfghjklmnpqrstvwxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetiousnessydffghjpbcdfghfacetioubcdfghjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['aeioaAAaAaaAaafacetioubcdffghjklmnpqrswxyzsnesaisaaauyfacfacetiousnessetiousness'], ['aAAaaAaaAaaiaeaeiouyfacetiousnessioaeioaAAaAaaAaafacetioubcdffghjklmnpqrswxyzsnessaaauyfacfacetiousnessetiousnessouyaaabcdfghjklmnpqrstvwcpsbcdfghjklmnpabstemiousnessqrstevwxyzologyxyz'], ['aAAaAaaAaafacetioubgcousnessioouypqrstvwxyzsnessa'], ['aeiocryptographccpsychologfacetpsyaicinousness'], ['asfacetioaAAaaAaacrypotographyAaaaaaubcdfghjklmnpqrstvwxyzbcdfghjklmnpabstemiousnessqrstvxyzsnessbstemioussnessaeiouyfaceftiousness'], ['cpsyccrypaeiioiaeaeiuocpsyccryptographyhologyuyfacetiousnessioouyuyennstograpahyhology'], ['f'], ['afacetineousnesss'], ['ABCDEFGHIJKLrcrypotographyMNOPQRSTUYZ'], ['facetioubcdffbcdmfghjklmnpabstaeioiaeaeiouyfacetiousnesasbstemiousnesssioouyuy'], ['iaeaoeiiouyfacetiouisnessioouy'], ['cryptbcdfgjhjklmnpqrstvwxyzograacpsychologyhOAEIOUYXWouybcdfgjhjklmnpqrstvwxyzcpy'], ['aieioABCDEFGHIJKLMNOPQRSTUVWXZpsiaeaeiiobcdfghjcecpsyccryptographyhologytioiusnessioouyycuy'], ['facetioubcdfaeiouyfacetiousnessyfghjpbcdfghfacetioubcdfghfacetioubcaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouafacetioubcdfghjklmnpqrstvwxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetiousnessydffghjpbcdfghfacetioubcdfghjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['bcdfgjhabstemaeioiaeaeiocpsyccryptographyhologyuyfacetafacetioubcdfghjklmnpqrstvwxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetfacetioubcdffghjklfmnpqrstvwxyzsnessiousnessessjklmnpqrstvwxyz'], ['facetioubcdffghjkfacetioubcdffghjklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnesslcryptogracaAEIOUYXWoucpsycocryptographyhologyypymnpqrstvwxyzsness'], ['OUYXW'], ['cpsaAEIcryptograpyOUYXWouyychology'], ['aeiouyffazcetioubcdcpsyccrypaeiioiaeaeiocpsyccryptographyhologyuyfacetiousnessioouyuyennstographyhologyffghjklmnpqrstvwxyzsnessacetaAEIOUYXWouyiousnessy'], ['aeiouyfaceftiousnesasbstemiousnuess'], ['aeiaeaoeiiouyfacetiouisnessioouyipsypsycfacetoubcdfghjklmdizzinessnpqrstvwxyscryptograacpsychologyOAEIOUYXWouycpyholuyuy'], ['bcdfghjklmnpabsteusnessqrstyyvxyz'], ['aAAaieioABCDEFGHIJKLMNOPQRSTUVaAAaaAaacrypotographyAaaaaaWXZuyaAaaAaafacetioubgcousnessioouypqrstvwxyzsnessa'], ['absaipbcdfghjklgmnpabstemiousnpsypsycfacetioubcdfghjklmdizzinfacetioubcdffghjklmnpqrswxyzsnessessnpqrstvwxyscryptograacpsychologyOAEIOUYXWouycpyhologyessqrzlogyeiiouy'], ['aipbcdfghjklgmnpabstemiousnpsypsycfacetioubcdfafacetineousnessghjklmdizzinfacetioubcdffghjklmnpqrswxyzsnessessnpqrstvwxyscryptograacpsychologyOAEIOUYXWouycpyhologyessqrzlogyeiiouy'], ['aipbcdfghjklgmnpabstemiousnpsypsycfacetioubcdfghjklmdizzinfacetioubcdffghjklmnpqrswxyzsnessessnpqrstvwxyscryptograacpsychologyOAEIOUYdizzifacettioubcdffghstvwxyzsnOAEaAAaaAaaAaaaaaUYXWessnesscpyhologyessqrzlogyeiiouy'], ['eiouyffazcetioubcdffghjklmnpqrstvwxyzsnessacetaAEIOUYXWouyiousnessy'], ['facetioubgcdffghjpbcdfghjklgmnpabstemiousnessqrstvwxyzlogynessioouypqrstvwxyzsness'], ['aeiouyfaceftiousnesfacetioaAAaaAaacrypotographyAaaaaaubcdfghjklmnpqrstvwxyzsness'], ['cpsyccrypaeiioiaeaeiuocpsyccryptographyhologyuyfacetiousnessioouyuyennscpsyccryptographyhologytograpahyhology'], ['bcdfgjhabstfecryptogracaAEIOUYXWouygpymiousnessjklmnpqrstvvwxyz'], ['aeiouyffazcetioubcsnessy'], ['hhZCavYLHr'], ['facetoiouabcdffghjkfacetioubcdffghjklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnesslcryptogracaaAEIOUYXWoucpsycocryptographyhologyypymnpqrstvwxyzsness'], ['asfacetioaAAaaAaacrypotographyAaaaaaubcdfghjklmnpqrstvwxyzbcdfghjklmnpabstemiousnessqrstvxyzsnessbstemioussneytiousness'], ['aoeiouyfaceaeiouyfaceetieousnessss'], ['psypsycfacetioubcdfghjklmnpqrstvwxyfzsnesshologyfazcetioubcdffghjklmnpqrstvwxyzsness'], ['AaeioiaeaeiocpsyccryptogaoeiouyfaceaaieieoiouyfacetieousnessssraphyhologyouyfacetiousssioouyuyIOUYXW'], ['facetioubcdffghjpbcdfghjklgmnpabstemiousnessqrstvwaAEIOUYXWoutyxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['aeibcdfghjklmnpabstemiousnessqrsstvwxyzouyfacetiaousness'], ['aAAaaAaaAaaiaeaeiouyfacetiousneouyaaabcdfghjklmnpqrstvwbcdfghjklgmnpqrstvwxyzz'], ['aieioABCDEoFGHIJKCLMNOPaAAaaAaaAaaiaeaeiouyfacetiousnessioaeioaAAaAaaAaafacetioubcdffghjklmnpqrswxyzsnessaaauyfacfacetiousnessetiousnessouyaaabcdfghjklmnpqrstvwcpsbcdfghjklmnpabstemiousnessqrstevwxyzologyxyzQRSTUVWXZuy'], ['aaeiouyfaceftiousnenesouy'], ['facetioubcdffghjklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessaeiouyffazcetioubcdffghjklmnpqrstvwxyzsnessacetaAEIOUYXWouyiousnessy'], ['aaeiouyefaceftiousnaenessieiiouy'], ['bcdfghjklpcsypsycfacetioubcdfghjklmnpqrstvwxyzsnesshologymnpabstemiousnessqrsstvwxyz'], ['cpsghjklmnpabstemiousnessqrstvwxyzology'], ['crcpy'], ['heBLBaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaabcdfghjklmnpqrstvwcpsbcdfghjklmnpabstemiousnessqrstvwxyzologyxyz'], ['facetioubgcdffghjpbcdfghjklgmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessiosness'], ['ioAEIYXWouy'], ['AYXsZdlSV'], ['cpsyccrypaeiioiaeaeiocpsyccryptographyhologyuyfacetioouyuyennstograpahyhology'], ['aeioaAAaAaaAaaaaauyfacfacetiousnessetiousnessABCDEFGHIJKLrcrypotographyMNOPQRSTUYZ'], ['aeioaAAdizziaieABCDEFGHIJKLMNOPQRSTUYZinessaAaaAaaaaauyfacetiousness'], ['aeioaAAaAaaAaafacetioubcdffghjklmnpqrswxyzsonesaisaaauyfacfacetiousnessetiousness'], ['bcdfghjklmnpqrsaieioABCDEFGHIJKLMNOPRSTUVWXZuyxyz'], ['afacetioubcdfghjklmnpuyfacfacetiousnessetiosness'], ['absaipbcdfghjklgmnpabstemiousnpsypsycfacetiouaieiiouybcdfghjklmdizzinfacetioubcdffghjklmnpqrswxyzsnessessnpqrstvwxyscryptograacpsychologyOAEIOUYXWouycpyhologyessqrzlogyeiiouy'], ['aOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxaeiouyffazcetioubcsnessyeyuy'], ['facetifoubcdffghjklfmnpqrustvwxyzsness'], ['aaeiouyfaceftiofusnenesouy'], ['sGYls'], ['bcaAAaaAaaAaaaaadfgjhabstemiousnessjdklmnpqrstvwxyz'], ['facetoiouabcdffghjkfacetioubcdffghjklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessslcryptogracaaAEIOUYXWoucpsycocryptographyhologyypymnpqrstvwxyzsness'], ['facetiobcdfghjklmnpqrstvyzubcdffghjklmnpqrstvwxyzsness'], ['cryptbcdfgjhjklmnpqrstvwxyzograacpsychologyOAEIOUYXcpy'], ['abcdfgbhjklmnpabsteemiousnessfacetioubcdffghjklmnpqrswxyzsnesaAAaaAaaAaaiaeaeiouyfacetiousnessaAAaaAaaAaaiaeaeiouyfacetiousnessioaeioaAAaAaaAaafacetioubcdffghjklmnpqrswxyzsnessaaauyfacfacetiousnessetiousnessouyaaabcdfghjklmnpqrstvwcpsbcdfghjklmnpabstemiousnessqrstevwxyzologyxyzabcdfghjklmnpqrstvwxyzsqrstvxyzAAaAaaAaaaaaa'], ['facetioubcaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouydffghjpbcdfghfacetioubcdfghjwxyzsnessjklggmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['cpsyccrypaeiioiaeaeiocpsyccryptographyhologyuyfacetiousnessioouyuyennstographyafacetioubcdfghjklmnfacetioubcdfghjwxyzsnesspqrstvwxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnesaieioABCDEFGHIJKLMNOPQRSTUVWXZuysetfacetioubcdffghjklfmnpqrstvwxyzsnesssiousnesshology'], ['aOAEIOUYXWouafacetioubcdfghjklmnpqrstvwaxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetfacetioubcdffghjklfmnpqrstvwxyzsnessiAousnessy'], ['cpology'], ['psypsycfqacetioubcdfghjklmnpqrstvwxyzsnesshology'], ['aieioABCDEFologyypyZuy'], ['dizziaieABCDEFGHIJKLMNOPQRSTUYZinessyaaabcdfghjklmnvwxyz'], ['facetioubgcdffghjpbcdfghjklgmnpabstemiousnessqrstvwxyzldizziaieABCDEFGHIJKLMNOPQRSTUYZinessyaaabcdfghjklmnvwxyzogykaipbcdfghjklgmnpabstemiousnessqrstvwxyzlogyeiiouyessioouypqrsstvwxyzsness'], ['aieioABCDEFGHIJKLMNOPQRSTUVWXZpsiaeaeiiobcdfghjcecpsyccrypbtographyhologytioiusnessioouyycuy'], ['crypytograpaeioiaeaeiocpsyaeiouyffazcetioubcdffghjklmnpqrstvwxyzsnessacetiousnessyccryptogaoeiouyfaceaaieieiouyfacetieousnessssraphyhologyouyfacetiousssioouyuyyy'], ['cryptograIOUYXWouy'], ['asbsiousness'], ['facetioubcaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouydffghjpbcdfghfacetioubcdfghjwxyzsnessjklggmcryptogracaAEIOUYXWouypynpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouysness'], ['cpsycholaaaaaaAapsyafacetioubcdfghjklmnpqrstvwxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetiousnesschologyaaaiogy'], ['aAAaAaaAaafacetiaeibcdfghjklmnpabstemiousnessqrsstvwxyzouyfacetiaousnessoubgcousnessioouypqrstvwxyzsnessa'], ['AEIYXW'], ['ciaeaeiouyfacefacetioubcdffghjkfacetioubcdffghjklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnesslmnpqrstvwxyzsnessousnessioouy'], ['asbstemiousnessaeioouyfaceftiousnciaeaeiouyfacetiousnessioouyesais'], ['iaaAAaAaaAaaaaaeaoeiiouyfacetiiooaeioiabsaeaeiocpsyccryptographyhologyuyfacetiousnessioaAAaaAaafacetioubcdffghjklmnpqrstvwxyzsnessAaaaaaouyuyuy'], ['aipbcdfghjklgmnpabstemiousnpsypsycfacetioubcdfghjklmdizzinfacetioubcdffghjklmnpqrswxyzsnessessnpqrstvwxyscryptograacpsychologyOAEIOUYdizzifacettioubcdffghstvwxyzsnOAEaAAaaAaaAaaabcdfgjhjklmnpqrstvwxyzyhologyessqrzlogyeiiouy'], ['psiaeaeiiobcdfghjcetioiusneasbstemiousnessaeiasbstemiousnessaeiouyfaceftiousnessouyfaceaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouyfsnessssioouyyc'], ['psypsychologyOUYXW'], ['facetioubcdfaeiouyfacetiousnessyfghjpbcdfghfacetioubcdfghfacetioubcaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouafacetioubcdfghjklmnpqrstvwxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetiousnessydffghjpbcdfghfcacetioubcdfghjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['iaeaeiiouyfacetiousaAAaaAaaAaaiaaieioABCDEFGHIJKLMNOPQRSTUVWXZuyeaeiouyfacetioioouyaaabcdcryptogracpyaAEIOUYXWouyfghjklmnvwxyzy'], ['bcdfgbhjkllmnpabstee'], ['abcdfgbhjklmnpabstciaeaeiouyfacetiousnessioouyeemiousnessfacetioubcdffghjklmnpqrswxyzsnesaAAaaAaaAaaiaeaeiouyfacetiousnessaAAaaAaaAaaiaeaeiouyfacetiousnessioaeioaAAaAaaAaafacetioubcdffghjklmnpqrswxyzsnessaaauyfacfacetiousnessetiousnessouyaaabcdfghjklmnpqrstvwcpsbcdfghjklmnpabstemiousnessqrstevwxyzologyxyzabcdfghjklmnpqrstvwxyzsqrstvxyzAAaAaaAaaaaaa'], ['aeioiaeaeiocpsyccryptogaoeiouyfaceaaieieiouyfacetieousnessssraphyaOAyEIOUYXWouycetiousssioouyuy'], ['aipcbcdfghjklgmnpabstepmiousnenssqrzlogyeiiouy'], ['aeioiaeaeiocpsyccryptographyhologyoaAAaaAaaAaaiacryptogrWacaAEIOUYXWoucpsyccryptographyhologyypyeaeiouyfaacetiousnessioouyaaabcdfghjklmnvwxyzousssioouyuy'], ['aoeiouyfaceaeiouyfacetieousnessaeiiociaeaeiocpsyccryptographyhologyuyfacpsypsycfacetioubcdfghjklmdizziyycpyhologyetiousnyennsss'], ['bcdfgbhjklmnpabstemiousnessqrstvaOAEInOUYXWouyxyz'], ['aeioiaeabcdfghjklgmnpabstemiousnessqrstvwxyzs'], ['tcrypttographcy'], ['aipbcdsfghjklgmnpabstemiaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaabcdfghjklmnpqrstvwxyzousnessqrzlogyeiiouy'], ['asbstemiousnesfacetioubcdfaeiouyfacetiousnessyfghjpbcdfghfacetioubcdfghfacetioubcaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouafacetioubcdfghjklmnpqrstvwxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetiousnessydffghjpbcdfghfcacetioubcdfghjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['aeiiouyfaceftiousneness'], ['icpsychologyAEIOUYYXWaeaeiiouyfacetaaaaaAapsychologyaaaiousaAAaaAaaAaaiaaieioABCDEFGHIJKLMNOPQRSTUVWXZuyeaeiouyfacetiousnessioouyaaabcdfghjklmnvwxyzy'], ['cpoloygyaeioiaeaeiocpsyccryptographyhologyuyfacetiousnessioouyuy'], ['aeioiaeaeiocpsyccryptographyhcolaogyuyfacetiousnessioouyuyenns'], ['facetioubcdfaeiouyfacetiousnessyfghjpbcdfghfacetioubcdfghfacetioubcaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouafacetioubcdfghjklmnpqrstvwxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetiousnessydffghjpbcdfghfcacetioubcdfghjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfcryptogracpymniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['facetioubcdffghjklfmniaeaeiiouyfsacetiousnessioouypqrstvwxyzsness'], ['facetioubcdffghfacetioubcaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouydffghjpbcdfghfacetioubcdfghjwxyzsnessjklggmcrypbcdfgjhabstemiousnessjdklmnpqrstvwxyztogracaAEIOUYXWouypynpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouysnessjklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['fazAEIYOUYYXWcetiofubcdffghjklmnpqrstvwxyzsness'], ['bcdfgjhabstemiosusnessjklmnpqrstvvwxyz'], ['faceatioubcffghjklmnpqrswxyzsnesaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaabcdfghjklmnpqrstvwxyzs'], ['dizznebcdfghjklmnpabstemiousnesssqrsstvwxyzss'], ['aOAyEIOUaeiouyfaceftiousnessYXWouy'], ['cryptbaeiouycdfgjhjklmnpqrstvwxyzogruaacpsychologyOAUEIOUYXWouybcdfgjhjklmnpqrstvwxyzcpy'], ['rcgrypotographoy'], ['cryptogracfacetioubcdffghjklfmnpqrstvwxyzsneaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaabcdfghjklmnpqrsbcdfghjklmnpqrsaieioABCDEFGHIJKLMNOPQRSTUVWXZuyxyztvwxyzsspyaeiouyfacetiousnbcdfghjklmnpqrstvyzessy'], ['aipbcdfghjklgmnpabstgepmiousnessqrzlogyeiiouy'], ['OOAEIOaeiouyfaceftiousneneussUYXW'], ['aoeiouyfaceaeifacetioubcdffghjklmnpqrstvwxyzsnessouyfacetieousnessss'], ['craeioiaeaeiocpsyfaceatioubcffghjklmnpqrswxyzsnesaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaabcdfghjklmnpqrstvwxyzsccryptogaoeiouyfaceaaieieoiouyfacetieousnessssraphyhologyouyfacetiousssioouyuyyptograacpsychologyOAEIOUYXWouycpy'], ['aeioiaeaeiocpsyccryptogaoeiouyfaceaaieaieiouyfacetieousnessssraphyaOAyEIOUYXWouycetiousssioouyuy'], ['aipbcdfghjklgmnpabstepmiousnessqrzlofacettioubcdffghstvwxyzsnOAEaAAaaAaaAaaaaaUYXWessgyeiiouy'], ['psiaeaeiiobcdfghjcetioiusneasbstemiousnessaeiasbstemiousnessaeivouyfaceftiousnessouyfaceaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouyfsnessssioouyyc'], ['asybstemioussnessaeiouyfaceftiousness'], ['afacetneousnesss'], ['asbstemiousnessaeioouyfaceftiousnesiaeaeiiouyfacetiousaAAaaAaaAaaiaaieioABCDEFGHIJKLMNOPQRSTUVWXZuyeaeiouyfacetioioouyaaabcdcryptogracpyaAEIOUYXWouyfghjklmnvwxyzyis'], ['heBLBaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaaibcdfghjklmnpqrstvwcpsbcdfghjklmnpabstemiousnessqrstvwxyzologyxyz'], ['iaeaeiouyfaceftiousnesasbstemiousnuessaeiouyfacetiousnessioAEIYXWouy'], ['aipbcdfghjklgmnpabstemciousnessqrzlogyeiiouy'], ['psypsycholoogy'], ['cryptogracpOyaAEIOUYXWouy'], ['aeiiociaeaeiocpsyccusnyenns'], ['facetioubcdfaeiouyfacetiousnessyfghjpbcdfghfacetidoubcdfghfacetioubcaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouafacetioubcdfghjklmnpqrstvwxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetiousnessydffghjpbcdfghfcacetioubcdfghjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfcryptogracpymniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['facetioubcdffbcdmfghjklmnpabstemiousnessqrstvxyzghjkflmnpqrstvwxyzsness'], ['aeioiaeaeiocpsyccryptographyholaogyuyfacetiousnessioouyuyennns'], ['heBLBaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaaibcdfghjklmnpqrstvwcpsbcdfghjklmnpabstogyxyz'], ['fghjklmnpabstemiousnessqrstvxyz'], ['facetioubcdfaeiouyfacetiousnessyfghjpbcdfghfacetidoubcdfghfacetioubcaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouafacetioubcdfghjklmnpqrstvwxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetiousnessydffghjpbcdfghfcacetioubcdfghjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfcryptogracpymniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessf'], ['cryptogaoeiouyfaceaeifacetioubcdffghjklmnpqrstvwxyzsnessouyfacetieousnessss'], ['aAAaaAaaAaayniaeaeiouyfacetiousnessioouyaaa'], ['facetioubcdfaeiouyfacetiousnessyfghjpbcdfghfacetioubcdfghfacetioubcaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouafacetioubcdfghjklmnpqrstvwxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetiousnessydffghjpbcdfghfcacetioubcdfghjwxyzsnessjklgmnpabstemiousnessqrsttvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfcryptogracpymniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['aipcbcdfghjklgaieiouyenssqrzlogyeiiouy'], ['aieiaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouyouy'], ['abss'], ['cryptbaeiouycdfgjhjklmnpqrstvwxyzogruaacypsychologyOAUEIOUYXWouybcdfgjhjklmnpqrstvwxyzcpy'], ['cpsyccrypaeiioiaeaeiuocpsyccryptographyholorgyuyfacetiousnessioouyuyennscpsyccryptographyhologytograpahyhology'], ['aeiocryptographcycinousness'], ['aeiouyfacetioucsness'], ['aeiocryAEWptographcyyuaAEIOUYXWouyess'], ['aeioaAAaAaaAaafacetioubcdffghjklmaOaeiouyfacetiousnessAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxaeiouyffazcetioubcsnessyeyuynpqrswxyzsnessaaauyfacfacetiousnessetiousness'], ['aAAaaAaafacetioufbcdffghjklmnpqrstvwxyzsnessAaaaaa'], ['facetioubcdffbcdmfghjklmnpabstemiousnessqrstvxyzghjkflmnpqrstvwxytcrypttographcyzsness'], ['facetioubcdffghjklmnpqrstvwxyzsnessAaaaaa'], ['fss'], ['fazcrypstogcetioubcdffghjklmnpqrstvwxyzsness'], ['aeiiouyfaceftiousnneness'], ['asbstemiousnessaeioouyfaceftiousnesiaeabcdfgbhjklmnpabstemiousnessqrstvxyzyfghjklmnvwxyzyis'], ['bcdfghaeioaAAaAaaAaafacetioubcdffghjklmnpqrswxyzsnessaaauyfacfacetiousnessetiousnesspsycjklmnpqrstvyz'], ['bcdfgjhabstemiousnesvsjdklmnpqrstvwxyz'], ['aipbcdsfghjklgmnpabstemiaAAaaAaaAaaiaeaeiouyfacetiousnessiiouy'], ['yyyy'], ['aAAaaAaaAaaiaieioABCDEFologyypyZuyaeaeiouyfacetiousnessioouyaaa'], ['aAAaAaaAaafacetiaeibcdfghjklmnpabfacetoiouabcdffghjkfacetioubcdffghjklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnesslcrypnessa'], ['aieiaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwuxyzsnnessWouyouy'], ['gAaeiouyffazcetioubcdffghjklmnpqrstvwxyzsnessaceaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaabcdfghjklmnpqrstvwxyztaAEIOUYXWouyiousnessy'], ['nxPZx'], ['psypsychologyfacetioubcdffghjklmnpqrswxyzsnesaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaabcdfghjklmnpqrstvwxyzs'], ['psypsycfacetioubcdfghjklmdizzinhology'], ['aAAaaAaacrypotographyAAaaaaa'], ['afacetinefssetiousness'], ['aeioiaeaeiocpsyccroyptographyhologyuyfacetiousnessioouyuy'], ['psypsycfacetioubcdfghjklmdbizzinhology'], ['aAAaaAaaAaaiaeaeiouyfacetiaaousnessiooaoeiouyfaceaeifacetioubcdffghjklmnpqrstvwxyzsnessouyfacetieousnessssuyaaa'], ['aeiouyfaceatiousneses'], ['hOUYXfacetioubcdfghjklmnpqrstvwxyzsnessWhZCavYLHr'], ['facetioubcdffghjklmnpqrswxyzsnesaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaatabcdfghjklmnpqrstvwxyzs'], ['psypsycfsacetioubcdfghjklmnpqrstvwxyzssnesshology'], ['afacetioubcasfacetioaAAaaAaacrypotographyAaaaaaubcdfghjklmnpqrstvwxyzbcdfghjklmnpabstemiousnessqrstvxyzsnessbstemioussnessaeiouyfaceftiousnessdfghjklmnpqrstvwaxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetfacetioubcdffghjklfmnpqrstvwxyzsnessiAousness'], ['bcdfgjhabstemaeioiaeaeiocpsyccryptographyhologyuyfacetiousnessioouyuynessjklmcnpqrstvwxyz'], ['bcdfgjhabstfecryptogracaAmEIOUYXWouypymiousnessjklmnpqrstvvwxyz'], ['facetoiouabcdffghjkfacetaaeiouyfaceftiousnenesouyioubcdffghjklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessslcryptogracaaAEIOUYXWoucpsycocryptographyhologyypymnpqrstvwxyzsness'], ['afacetioubcdfghjklmnfacetioubcdfghjwxyzsnesspqrstvwxyiaeaoeiiouyfacetiousnessioouyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetfacetioubcdffghjklfmnpqrstvwxyzsnesssiousness'], ['biaeaeiiouyfacetiousaAAaaAaaAaaiaaieioABCDEFGHIJKLMNOPQRSTUVWXZuyeaeiouyfacetiousnessioouyaaabcdfghjklmnvwxyzycdfghjklmnpqrstvwxyz'], ['aeiocryptographcyuyfacs'], ['aeioiaeaeiocpsyccryptographyhcolaogyuyfacetiopsypsychologyfacetioubcdffghjklmnpqrswxyzsnesaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaabcdfghjklmnpqrstvwxyzsusnessioouyuyenns'], ['facetoiouabcdffghjkfacetioubcdffghjklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessslcryptogracaaAEIOUYXWoucpsycocryptographoyhologyypymnpqrstvwxyzsness'], ['aeiiociaeaeiocpsyccusniyenns'], ['cryptbaeiouycdfgjhjklmnpqrstvwxyzogbcdfghjklmnpabstemiousnessqrstvwxyzruaacpsychologyOAUEIOUYXWouybcdfgjhjklmnpqrstvwxyzcpy'], ['dizziaieABCDEFGHIJKLMNOPQRSTUYZinessyaaabaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnessWouycdfghjklmnvwxyz'], ['aeioiaeaeiouyfacetiousniessioouyuy'], ['aeioiaeaeiouyfacetiousniuessioouyuy'], ['tcrycryptogracpyaphcy'], ['aeiouyffazcetioubcdcpsyccrypaeiioiaeaeiocpsyccryptographyhologyuyfacetiousnessioouyuyennstographyhologyffghjklmnpqrstvwxyzsnessacetaAEIOAEIYXWUYXWouyiousnessy'], ['craeioiaeaeiocpsyfaceatioubcffghjklmnpqrswxyzsnesaAAaaAaaAaaiaeaeioiouyfaceaaieieoiouyfacetieousnessssraphyhologyouyfacetiousssioouyuyyptograacpsychologyOAEIOUYXWouycpy'], ['cpy'], ['facetioubcdffghjpbcdfghaeiiociaeaeiocpsyccryptographyhologyuyfacetiousnessioouyuyennsjklgmnpabstemiousneaeiouyfaceftiousnnesasbstemiousnessYXWouyxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['abbss'], ['bcdfghjklmnpqrsaieioABCDEFGHaieioABCDEFGHIJKLMNOPQRiaeaeiiouyfacetiousnessioouySTUVWXZuyIJKLMNOPQRSTUVWXZuyxyz'], ['aipcbcdfghjklgmnpabstepmihousnessqrzlogyeiiouy'], ['aOAEIOUYXWouafacetioubcdfghjklmnpqrstvwaxyzsnesseioaAAaApsypsycfacetioubcdfghjklmdizzinessnpqrstvwxyscryptograacpsychologyOAEIOUYfacetioubcdffghjklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessXWouycpyhologyaaAaaaaauyfacfacetiousnessetfacetioubcdffghjklfmnpqrstvwxyzsnessiAousnessy'], ['psypsychologyfacetioubcdffghjklmnpqrswxyzsnesaAAaaAaaAaaabcdwfghjklmnpqrstvwxyzs'], ['heBLBaAAaaAaaAaaiaeaeiouyfacetioafacetinefssetiousnessusnessioouyaaaibcdfghjklmnpqrstvwcpsbcdfghjklmnpabstemiousnessqrstvwxyzologyxyz'], ['afactetinessetiousnness'], ['abstemiouaaeiouyfaceftiofusnenesouysnss'], ['facetioubcdffghjklfmniaeaeiiouyfacetiousnessioouypqrsdizzinessafacetinessetiousnesstvwxyzsiaeaeiouyfacetiousnessioouyness'], ['psypsycfacetioubcdfghjklmdizzinfacetiAEIYXWoubcdffghjklmnpqrswxyzsnessessnpqrstvwxyscryptografacetioubcdffbcdmfghjklmnpabstaeioiaeaeiouyfacetiousnesasbstemiousnesssioouyuyacpsychologyOAEIOUYXWouycpyhoslogy'], ['facetioubcdffghjkfacetioubcdffghjklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnesslmnpqrstvwxycryptographyzsness'], ['ABCDEFGHIJKLrcrypotographyMNOZ'], ['bcdfpsypsycfacetioubcdfghjklmnpqqrstvwxyzsnesshologygjhabstfecryptogracaAmEIOUYXWouypymiousnessjklmnpqrstvvwxyz'], ['aAAaaAaaAaaiaeaeiouyfetiousnessioouyaaabcdfghjklmnpqrstvwxyz'], ['aieiaOAEIOUYXfaUYXWmnpqrstvwxyzsnnessWouyouy'], ['afacetioubcdfghjklmnpuyfacfacetiousnesseticrypotographyousness'], ['bcdfgjhabstfecryptogracaAEIOUYXWouypymiousnessjklcryptogracfacetioubcdffghjklfmnpqrstvwxyzsneaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaabcdfghjklmnpqrsbcdfghjklmnpqrsaieioABCDEFGHIJKLMNOPQRSTUVWXZuyxyztvwxyzsspyaeiouyfacetiousnbcdfghjklmnpqrstvyzessymnpqrstvvwxyz'], ['asbstemiousnessaeioouyfis'], ['aAAaaAaaAaaiaeaeiouyfacetiousnessioaeioaAAaAaaAaafacetioubcdffghjklmnpqsrswxyzsnessaaauyfacfacetiousnessetiousnessouyaaabcdfghjklmnpqrstvwcpsbcdfghjklmnpabstemiousnessqrstevwxyzologyxy'], ['psypsycfacetioubcdfghjklmnpqrstvwxyxfzsnesshologyfazcetioubcdffghjklmnpqrstvwxyzsness'], ['facetifoubcudffghjklfmnpqqrustvwxyzsness'], ['craaeiouyfaceftiofusnenesouyypotography'], ['iaeaeiiouyfacetiousaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaabcdfghjklmnvwxyazy'], ['aeioiaeaeyccryptogaoeiouyfaceaaieieiouyfacetieousnessssraphyaOAyEIOUYXWouycetiousssioouyuy'], ['cpsyccrypcpsaAEIcryptograpyOUYXWouyychologyennscpsyccryptographyhologytograpahyhology'], ['cryptogracaAEIOUYXWoucpsyccryptographyhologyaeiiociaeaeiocpsyccusniyennsypy'], ['hOUYXfacetioubcdfghjklmnpqravYLHr'], ['afactetinessetious'], ['heBLBaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaaibcdfghjklmnpqrstvwcpsbcdfghjklmnpabscryptogracpOyaAEIOUYXWouytogyxyz'], ['crasbstemiousnessaeiasbstemiousnessaeiouyfaceftiousnessouyfaceaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouyfsnesstographyhologyypy'], ['aAAaaAaaAaaiaeaeiouyfacetiousnessioaeioaAAaAaaAaafacetioubcdffghjklmnpqsrswxyzsnessaaauyfacfacetiousnessetiousnessouyaaabcdfghjklmnpqrstvwcpsbcdfghjklmnpvwxyzologyxy'], ['iaeaeiiouyfacetiousaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaAAaaAaaAaaiaeaeiouyfetiousnessioouyaaabcdfghjklmnpqrstvwxyzaabcdfghjklmnvwxyzy'], ['facetioubcdffghjaAAaaAaafacetioufbcdffghjklmnpqrstvwxyzsnessAaaaaaklmnpqraAAaaAaaAaaiaeaeiouyfacetiousnessioouss'], ['heBLBaAAaaAaaAaaiaeaeiouyfacetidfacetioubcdfghjklmnpqrstvwxyzsnessfghjklmnpabstogyxyz'], ['rcgrypotograpaOAEIOUYXfazcetioubcdffghjklAEIaeiocryptographcyuyfacetiousnessOUYXWmnpqrstvwxyzsnessWouyhoabssy'], ['aAAaaAaafacetioufbcpsypsycfacetioubcdfghjklmdizziycpyhologydffghjklmnpqrstvwxyzsnessAaaaaa'], ['facetioubcdffghjxyzsnessAaaaaaklmnpqraAAaaAaaAaaiaeaeiouyfacetiousnessioouss'], ['fazcryptogcetioubcdffghjklmnpqrstvwxyaeiouyffazcetioubcdffghjklmnpqrstvwxyzsnessacetiousnessyzsness'], ['aOAEIOUYXWouafacetioubcdfghjklmnpqrstvwaxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetfacetioubcdffghjklfmnpqrstvwxyzsneasfacetioaAAaaAaacrypotographyAaaaaaubcdfghjklmnpqrstvwxyzbcdfghjklmnpabstemiousnessqrstvxyzsnessbstemioussneytiousnessssiAousnessy'], ['abcdfgbhjklmnpabsteemiousnessfacetioubcdffghjklmnpqrswxyzsnesaAAaaAaaAaaiaeaeiouyfacetiousnessaAAaaAaaaeiouyfaceftiousneneussAaaiaeaeiouyfacetiousnessioaeioaAAaAaaAaafacetioubcdffghjklmnpqrswxyzsnessaaauyfacfacetiousnessetiousniaeaeiiouyfacetiousnessioouyessouyaaabcdfghjklmnpqrstvwcpsbcdfghjklmnpabstemiousnessqrstevwxyzologyxyzabcdfghjklmnpqrstvwxyzsqrstvxyzAAaAaaAaaaaaa'], ['heBLBaAAaaAaaAaaiaeaeiouyfacetiousnessioouyaaaibcdfghjklmnpqrstvwcpsbcdfgbcaAAaaAaaAaaaaadfgjhabstemiousnessjdklmnpqrstvwxyzhjklmnpabstogyxyz'], ['aeioaAAaAaaAaaaaauyfacfacetiousnessetyiousness'], ['aAEuIOUYXWouy'], ['facetioubcdfaeiouyfacetiousnessyfghjpbcdfghfacetioubcdfghfacetioubcaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqrstvwxyzsnnessWouafacetioubcdfghjklmnpqrstvwxyzsnesseioaAAaAaaAaaaaauyfacfacetiousnessetiousnessydffghjpbcdfghfcacetioubcdfghjwxyzsnessjklgmnpabstemiousnessqrsttvwxyzlozgyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfcryptogracpymniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['aoeiouyfacouyfacetieousnessaeiiociaeaeiocpsyccryptographyhologyuyfacpsypsycfacetioubcdfghjklmdizziyycpyhologyetiousnyennsss'], ['bcdfghjklmnpaieiieouyabstemioussnesssqrsstvwxyz'], ['aeipbcdfghjklgmnpabstaeiocryptographcyuyfacetiousnessemiousnessqrzlogyeiiouy'], ['fazcryptogcaoeiouyfacouyfacetieousnessaeiiociaeaeiocpsyccryptographyhologyuyfacpsypsycfacetioubcdfghjklmdizziyycpyhologyetiousnyennsssetioubcdffghjklmnpqrstvwxyzsnesscpology'], ['facetioubcdffghjpbcdfghfacetioubcdbcdfghjklmnpabsteusnessqrstyyvxyzfghjwxyzsnessjklgmnpabstemiousnessqrstvwxyzlogyklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsness'], ['facetioubcdffghjklfmniaeaeiiouyfacetiousnessioouypqrstvwxyzsnessaeiouyffazcetioubcdffghjklmnpqrstvwxyzsnessacetauAEIOUYXWouyiousnessy'], ['aAAaaAaaAaaiaeaeiouyfacetibcdfgbhjklmnpabstemiousneABCDEFGHIJKLMNdOPQRSTUVWXZsisqrstvxyzaousnessioouyaaa'], ['aieiaOAEIOUYXfazcetioubcdffghjklAEIOUYXWmnpqaeiocryptographcyyuyfacetpsycinousnessrstvwxyzsnnessWouyouy'], ['aAAaaAaaAaaiaeaeiouyfacetiousneiaeaoeiiouyfacetiousnessioouyfghjklmnpqrstvwxyz'], ['bcdfgjhabaeioiaeaeiocpsyccryptographyhologyuyfacetiousnessiaoouyuyennsstemiousnessjklmnpqrstvwxyz'], ['Y'], ['Yy'], ['bb'], ['BCDFGHJKLMPQRSTVWXZ'], ['aeiou'], ['AEIOU'], ['AEIOUY'], ['Yaeiou'], ['AEIOUy'], ['tbcdfghjklmnpqrstvwxyz'], ['absetemiousneaeiouyss'], ['aeioaeiouyuy'], ['aedizzinessiouy'], ['cryptaedizzinessiouyography'], ['cryptaedizzinessiouyoegraphy'], ['asiouyAaaaaa'], ['aeio'], ['crypteaedizzinessiouyoegraphy'], ['aedizzinessiou'], ['cryptopgraphy'], ['AEIOUYaeioaeiouyuyXW'], ['absstemiousness'], ['faasiouyAaaaaacetiousness'], ['AEIOUYX'], ['tbcdfghjklmnpaeiotvwxyz'], ['abstem'], ['caeiouyryptopgraphy'], ['cryptofacetiousnesspgraphy'], ['absstemioussness'], ['cryptofacetieousnesspgraphy'], ['aeioaeiocryiptofacetiousnesspgyuy'], ['bckdfghjklmnpqrstvwxyz'], ['aeioaeiocryiptofacetiousnesspgyuycrypteaedizzinessiouyoegraphy'], ['EEcryptofacetiousnesspgraphyTfnuhVC'], ['UCuMNjTHX'], ['cryptographty'], ['yptograp'], ['cryptoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphy'], ['ABCDEIFGHIJKLSGTUVWXYZ'], ['ybcdfghjklmnpqrstvwxyztograp'], ['aAAaAaaAaaaaatbcdfghjklmnpqrstvwxyz'], ['aAAaAaaAaaaaatbcdfghjklmnvpqrstvwxyz'], ['caeiouyryptopgriaphy'], ['yptograAEIOUYaeioaeiouyuyXWp'], ['aAAaAaaAaaaaatlbcdfghjklmnpqrstvwxyz'], ['bcdfghjklmnpqrdizzinessstvwx'], ['aAAcryptoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaa'], ['aeiiy'], ['aedizzinesaAAaAaaAaaaaa'], ['absbtem'], ['AEIOUYfaasiouyAaaaXaacetiousnessXW'], ['dizzizness'], ['aAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaa'], ['UCuMNjTCHX'], ['psychol'], ['tbcdfghdizzinessjklmnpqrstvwxyz'], ['bvwxaedizzinessiouyyz'], ['tbcdfghdizzinessjklmnpqrstvwxyzcryptofacetieousnesspgraphy'], ['abstaeiiyem'], ['bAGAJ'], ['aAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofaceaaAaaaaa'], ['ypgtograp'], ['cryptaedizzaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaainessiouyoegraphy'], ['aedizzinesaAAaAaaApsycholaaaaa'], ['aycrypteaedizzinessiouyoegraphy'], ['abstaieiiyem'], ['bcdfghjklmnaeioaeiocryiptofacetiousnesspgyuycrypteaedizzinessiouyoegraphypqrstvwxyz'], ['aAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaeiocryiptofaceaaAaaaaa'], ['tbcdfghjklaeiiymnpqrstvwxyz'], ['absaedizzinessioubtem'], ['aoeioaeiouyeuy'], ['aAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaeiocryptofacetiousnesspgraphyceaaAaaaaa'], ['aAAcryptoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphynaAaaAaaaaa'], ['dizziznesns'], ['cryptografacetiousnessphty'], ['tbcdfghjklmnpyptograAEIOUYaeioaeiouyuyXWpqrstvwxyz'], ['aeioaeiocrpyiptofacetiousnesspgyuy'], ['AAEYXW'], ['aAAaAaaAaaaaatbabstemvpqrstvwxyz'], ['AaAAaAaaAaaaaatlbcdfghjklmnpqrstvwxyzEIOUyaeioaeiocrpyiptofacetiousnesspgyuyYaeioaeiouyuyXW'], ['aedizzineAsaAAaAaaAaaaaa'], ['aAAaAaaAaaaaatbtcdfghjklmnpqrstvwxyz'], ['tbcdfghdizzinessjklmnpqrstvwxyzcrypaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaeiocryiptofaceaaAaaaaatofacetieousnesspgraphy'], ['bcdfghjklmnaeioaeiocryiptofacetiousnesspgyuycrypteaedizzinessiouyz'], ['abssteminoussness'], ['ographty'], ['UCuMNujTHX'], ['aw'], ['aeicrypteaedizzinessiouyoegraphyoaeiouyuy'], ['absAAEYXWtemiousness'], ['tbcdfghdizzinessjklmnpqrstvxwxyz'], ['tbcdfghdizzitnessjmnpqrstvwxyz'], ['aAAaAaaAaaaaatbcdfghjklmnpqrstvwxybcdfghjklmnpqrstvwxyztograpyz'], ['aoeio'], ['aedizzinessioeuy'], ['AEIOUYfaasiouyAaaaXaacetiousnessXoW'], ['absaedizzicryptaedizzaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaainessiouyoegraphynessioubtem'], ['oKyvC'], ['aeiifacetiousnessy'], ['aAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaaeiocryptofacetiousnesspgraphyceaaAaaaaa'], ['UCuoaoeioaeiouyeuyMNujTHX'], ['caedizzinessiouyryptaedizzinessiouyography'], ['aedizzinesaAAaAaaApsycholaaacryptografacetiousnessphtyaa'], ['cryptoaphty'], ['aAAcrypcaeiouyryptopgriaphytoaeiypgtograpoaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaa'], ['fnacetiousness'], ['AaAAaAaaWAaaaaatlbcdfghjklmnpqrstvwxyzEIOUyaeioaeiocrpyiptofacetiousnesspgyuyYaeioaeiouyuyXW'], ['tbcdfghjklmnvwxyz'], ['bcdfghjklmnpqrstvwxaAAaAaaAaaaaatbabstemvpqrstvwxyzyz'], ['UCuMNjaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofaceaaAaaaaa'], ['ooio'], ['iaeiiy'], ['crypteaedizzinessiouyoegraphaedizzinessiouy'], ['tbcdfghjklmnpyptograAEIOUYaeioaeiouyuyXWpqrstvwtxyz'], ['bcdfghjsklmnpqrdizzinessstvwx'], ['UCuoaaedizzinessiouoeioaeiouyeuyMNujTHX'], ['UCuMNjaAAcrypcaeiabstaeiiyemeioaeiocryiptofaceaaAaaaaa'], ['AaAAaAaaAaaaaatlbcdfghjklmnpqrstvwxyzEIOUyaeioaeiocrpyiptofacetiousnesspgyuyYaetbcdfghdizzinessioaeiouyuyXW'], ['UCuMNujTX'], ['caeiouyryptoaedizzinesaAAaAaaAaaaaapgraphy'], ['aAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaaeiocryptofacetiousnesspgraphyceaaAaaaaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaaeiocryptofacetiousnesspgraphyceaaAaaaaaaa'], ['aAAcrypcaeioeiabstemiousnessopaeiocryiptofaceaaAaaaaa'], ['aAAcrypcaeiabsstemiousnessouyryptopgriaphytoaeioaeiocryiptofaceaaAaaaaa'], ['aAAcaaAaaaaa'], ['tbcdfghjlmnpaeiotvwxyz'], ['aoeiocaedizzinessiouyryptaedizzinessiouyography'], ['bcdfghjklcryptopgraphymnaeioaeiocryiptohfacetiousnesspgyuycrypteaedizzinessiouyz'], ['bcdfghjklcryptopgraphymnaeioaeiocryiptohfacetiousnesspgypuycrypteaedizzinessiouyz'], ['tbcdfgdhjklmnpqrstvwxyz'], ['aAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofaceaaAbckdfghjklmnpqrstvwxyzaaaaa'], ['tbcdfghjklmnpyptograAEIOUYaeioaeiouyurstvwtxyz'], ['UCuMNujX'], ['abstaeiiyebcdfghjklmnpqrstvwxaAAaAbcdfghjklcryptopgraphymnaeioaeiocryiptohfacetiousnesspgyuycrypteaedizzinessiouyzaaAaaaaatbabstemvpqrstvwxyzyzm'], ['AMQRI'], ['aAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaaeiocryptofacetiousnesspgrapshyceaaAaaaaa'], ['bcdfghjklcryptopgraphymnaeabsAAEYXWtemiousnessioaeiocryiptohfacetiousnesspgyuycrypteaedizzinessiouyz'], ['phsogy'], ['UCuMphsogyNjTHX'], ['didzziness'], ['cryptaedizzaAAcrypbcdfghjklmnaeioaeiocryiptofacetiousnesspgyuycrypteaedizzinessiouyzcaeiouyryptopgriaphytoaeioaeiocryiptofahyaAaaAaaaaainessiouyoegraphy'], ['tbcdfghdizzinessjklmnpqrstvwxyzcrypaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaeiocryiptofaceaaAaabsaedizzicryptaedizzaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaainessiouyoegraphynessioubtemaaaatofacetieousnesspgraphy'], ['fnacetiousnaedizzinesaAAaAaaApsycholaaaaaess'], ['abcdfghjklmnaeioaeiocryiptofacetiousnesspgyuycrypteaedizzinessiouyzeioaeiocryiptofacetiousnesspgyuycrypteaedizzinessiouyoegraphy'], ['aoeiocaedizzinessiouyryptaedizaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaaeiocryptofacetiousnesspgraphyceaaAaaaaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaaeiocryptofacetiousnesspgraphyceaaAaaaaaaazinessiouyography'], ['diztbcdfghjklmnpyptograAEIOUYaeioaeiouyuyXWpqrstvwtxyzzdizness'], ['aAAaAaaAAaaaaa'], ['aeiao'], ['aedicryptaedizzaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaainessiouyoegraphyzzinessioeuy'], ['abssaeioaeiouyuytemiousness'], ['aeioaeiocryiyptofacetiousnesspgyuycrypteaedizzinessiouyoegraphy'], ['aAAcrypcaeiouyryptopgriaphytoaeioaeriocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaa'], ['aedicryptaedizzaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspegraphyzzinessioeuy'], ['tbcdfghdizzpinessjklmnpqrstvwxyzcrypaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaeiocryiptofaceaaAaabsaedizzicryptaedizzaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaainessiouyoegraphynessioubtemaaaatofacetieousnesspgraphy'], ['tbcdfghdizzinessjklmnpqrstvwxyzcrypaAAcrypcaeiouyaedizzinessiouryptopgriaphytoaeiabstemiousnessopaeiocryiptofaceaaAaaaaatofacetieousnesspgraphy'], ['abssteminoAAEYXWussness'], ['crytptoapcryptaedizzinessiouyographyhty'], ['bcdfghjklmnaeioaeiocryiptofacetiousnesspgyuycrypteaedizzinessioeuyz'], ['aAAcrypcaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaaaiaeiiyeioeiabstemiousnessopaeiocryiptofaceaaAaaaaa'], ['aAAaAaaAaaaaatbcdfghjklmnvpqrsybcdfghjklmnpqrstvwxyztograpxyz'], ['s'], ['AaedizzinesaAAaAaaAaaaaaI'], ['AEIOUYaeioaeiouyaAAcrypcaeioeiabstemioousnessopaeiocryiptofaceaaAaaaaauyXW'], ['abssteminoAAuEYXWussness'], ['AaAAaAaaWAaaaaatlbcdfghjklmnpqrstvwxyzEIOUyaeioaeiocrpyiptofacetiousnoaeiouyuyXW'], ['absaedizzicryptaedizzaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaainessiouyoegraphynessioubtemaaaatbcdfghjklmnpqrstvwxyz'], ['aAAaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofaceaaAaaaaaaAaaAaaaaa'], ['UCuMNjaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofaceaaAaaa'], ['aAAaAAcrypcaecaeiouyryptopgraphyiouyryptopgriaphytoaeioaeiocryiptofaceaaAaaaaaaAaaAaaaaa'], ['abstaeiiyebcdfghjklmnpqrstvwxaAAaAbcdfghjklcryptopgraphymnaeioaecaeiouyryptopgriaphyiocryiptohfacetiousnesspgyuycrypteaedizzinessiouyzaaAaaaaatbabstemvpqrstvwxyzyzm'], ['psycholcaeiouyryptoaedizzinesaAAaAaaAaaaaapgraphyogy'], ['oKyvcrypteaedizzinessiouyoegraphyC'], ['aAAaAAcrypcaecaeiouyryptopgraphyiouyryptopgriaphytoaeioaeiocryiptofaceaAEIOUYXaAaaaaaaAaaAaaaaa'], [''], ['absaedizzicryptaedUCuMNujTHXegraphynessioubtemaaaatbcdfghjklmnpqrstvwxyz'], ['aAAaAaaAaaaaatlbcdfghjklmnpqrstvwxfyz'], ['abstaeiiypsycholcaeiouyryptoaedizzinesaAAaAaaAaaaaapgraphyogyem'], ['tbcdfghjklmnpyptograAEIOUYaeioaeioAEIOUYaeioaeiouyaAAcrypauyXWuyuyXWpqrsyz'], ['aAAatbcdfghjklmnpyptograAEIOUYaeioaeiouyuyXWpqrstvwxyzAaaAaaaaatbcdfghjklmnpqrstvwxyz'], ['tbcdfghjklmnpyptograAEIOUYaeioaeiouyurstvwtxydz'], ['aeioaeiocryiyptofacetiousnesspgyuycrypteabstaeiiyebcdfghjklmnpqrstvwxaAAaAbcdfghjklcryptopgraphymnaeioaecaeiouyryptopgriaphyiocryiptohfacetiousnesspgyuycrypteaedizzinessiouyzaaAaaaaatbabstemvpqrstvwxyzyzmaedizzinessiouyoegraphy'], ['caeiouyryptoaedizzinesaAAaAaabstemiousnessaAaaaaapgraphy'], ['AEIOUYaeioaeiouyiuyXW'], ['yptograAEIOUYaeioaeiotbcdfghjlmnpaeiotvwxyzyXWp'], ['AaAAaAaaAaaaaatlbcdfghjklmnpqrstvwaxyzEIOUyaeioaeiocrpyiptofacetiousnesspgyuyYaeioaeiouyuyXW'], ['tbcdfghdizzinessjklmnpqrstvwxwxyz'], ['sss'], ['caeiouyryptoaedizzinesaAAaAaabstcryptofacetieousnesspgraphyemiousnessaAaaaaapgraphy'], ['iaaeiiy'], ['UCuoaaedizzinessiouoeiooaeiouyeuyMNujTHX'], ['tbcdfghjklmnpyptograAEIOUYaeioaeioAEIOUYaeioaeiouyaAAcrypauyXWuyuaedizzinessiouz'], ['bcdfghjklmnpqrstvwxaAAaAaaaaaAaaAaaaaatbabstemvpqrstvwxyzyz'], ['aeiouuy'], ['bcdfghjkvlmnpqrstvwxyz'], ['tbcdfghdizzinessjklmnpqrstvwxzyz'], ['aoeiozcaediozzinessiouyryptaedizzinessiouyography'], ['tbcdsfghjklmnpyptograAEIOUYaeiobckdfghjklmnpqrstvwxyzaeiouyurstvwtxyz'], ['tbcdfghjklmnpyptograAEIOUYaeioaeioAEIOUYaeioaeiouyaAAcrypauyXWuyuaedizzinessiobAGAJuz'], ['crpyptography'], ['aediazzinesaAAaAaaApsychoaaaaa'], ['AEIOUYaeioaeiouyaAAcrypofaceaaAaaaaauyXWaAAaAaaAaaaaatbcdfghjklmnpqrstvwxyz'], ['caeiouyryptoaedizzinesaAAaAaabstetbcdfghdizzinessjklmnpqrstvwxzyzmiousnessaAaaaaapgraphy'], ['aAAaAaaAaaaaatlbcdfghjklmnpqrstvawxyz'], ['abssbcdfghjklmnaeioaeiocryiptofacetiousnesspggyuycrypteaedizzinessioeuyzteminoussness'], ['zoKyvcrypteaedizzinessiouyoegraphyC'], ['AEIOUYfaasiouyAaaatXaacetiousnessXoW'], ['aeioyaeiocryiptofacetiousnesspgyuy'], ['UCuAEIOUYaeioaeiouyiuyXWTX'], ['bcdfghjklmnpqrdizzinessstvtbcdfghjklmnpyptograAEIOUYaeioaeioAEIOUYaeioaeiouyaAAcrypauyXWuyuyXWpqrsyzwx'], ['tbcdfghjkmnpqrstvwxyz'], ['aUCuMNjaAAcrypcaeiabstaeiiyemeioaeiocryiptofaceaaAaaaaaAAAEIOUYaeioaeiouyaAAcrypcaeioeiabstemioousnessopaeiocryiptofaceaaAaaaaauyXWaAaaAAaaaaa'], ['caeiouyryabsaedizzicryptaedizzaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaainessiouyoegraphynessioubtemhy'], ['AaAAaAaaAaaaaatlbcdfghjklmnpqrstvwaxyzEIOUyaeioaeiocrpyipAEIOUYXWtofacetiousnesspgyuyYaeioaeiouyuyXW'], ['aoeiAEIOUYaeioaeiouyaAAcrypcaeioeiabstemioousnessopaeiocryiptofaceaaAaaaaauyXW'], ['absasteminoAAuEYXWussness'], ['abstaeiiyebcdfghjklmnpqrstvwxaAAaAbcdfghjklcryptopgraphymnaeioaecaeiouyryptopgriaphyiocryiptohfacetiousnesspgyuycrypteaedizzninessiouypzaaAaaaaatbabstemvpqrstvwxyzyzm'], ['absaedizzicryptaedUCuMNujTHXegraphynessioubtemaaaatbcdfghjklmnpqrstwvwxyz'], ['aAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaeiocryptofacetiousnesspgrapaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaahyceaaAaaaaa'], ['fnacetiousnahedizzinesaAAaAaaApsycholaaaaaaess'], ['UCuMNjaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptaycrypteaedizzinessiouyoegraphyofaceaaAaaaaa'], ['absaedizzicryptaedizzaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaeiouyaAaaaaainessiouyoegraphynessioubtemaaaatbcdfghjklmnpqrstvwxyz'], ['aAAcrypcaeiouyryptopgriaphytoaeiabstemiousnesssopaeiocryiptofaceaaAaaaaa'], ['psycohol'], ['tbcdfghdizzinessjklmnpqrstvwxyzcrypaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaeiocryiptofaceaaAaabsaedizzicryptaedizzaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaainessiouyoegraphynessioubtemaaaatofacetieoussnesspgraphy'], ['cryptyoaphty'], ['cryptofacetieousnesspgraphyAaAAaAaaAaaaaatlbcdfghjklmnpqrstvwxyzEIOUyaeioaeiocrpyipawuyYaetbcdfghdizzinessioaeiouyuyXW'], ['UCuAEIOUYaeuioaeiouyiuyXWTX'], ['ovCKyvvC'], ['dizness'], ['absas'], ['aeiifacetiousnessydiztbcdfghjklmnpyptograAEIOUYaeioaeiouyuyXWpqrstvwtxyzzdizness'], ['ypgtogryarp'], ['tbcdfghjklmnpyptograAEIOUYaeioaeioueyurstvwbtxydz'], ['absaedizzicryptaedUCuMNujTHXegraphynessioubtemaxyz'], ['tbcdfgdhjkylmnpqrstvwxyz'], ['caeiouyryptoaedizzinesaAAaAaabstetbcdfghdizzinessjklmnpqrstvwxmzyzmiousnessaAaaaaapgraphy'], ['psylchlol'], ['bcdfghjklmnaeioaeiaeiiyocryiptofacetiousnesspgyuycrypteaedizzinessiouyoegraphypqrstvwxyz'], ['AaAAaycrypteaedizzinessiouyoegraphyaAaaAaaaaatlbcdfghjklmnpqrstvwxyzEIOUyaeioaeiocrpyiptofacetiousnesspgyuyYaeioaeiouyuyXW'], ['ssss'], ['tbcdfghjklmnvwxyzcryptoaphty'], ['caedizzinessiodizziznessssiouyography'], ['dizzinesscaedizzinessiouyryptaedizzinessiouyography'], ['aeioaeiiouyuy'], ['fnfnacetiousnahedizzinesaAAaAaaApsycholaaaaaaessacetiousnahedizzinesaAAaAaaApsycholaaaaaaess'], ['bcdfghjklmnaeioaeiaeiiyocryiptofacetiespsylchlolspgyuycrypteaedizzinessiouyoegraphypqrstvwxyz'], ['aoefnfnacetiousnahedizzinesaAAaAaaApsycholaaaaaaessacetiousnahedizzinesaAAaAaaApsycholaaaaaaesso'], ['pslychol'], ['aAAaAaaAaaaaatbcdfghjklmnvpqrsybcdfghjklmnpqrstvwxyztograpxycaeiouyryptoaedizzinesaAAaAaaAaaaaapgraphyz'], ['aedizzineAsaAAaaAaaAaaaaa'], ['UCuoaoeioaeiouyeuayMNujTHX'], ['AMQRaAAcrypcaeiabsstemiousnessouyryptopgriaphytoaeioaeiocryiptofaceaaAaaaaaI'], ['tbcdfghdizzitnessjmnpqrstvyptograAEIOUYaeioaeiotbcdfghjlmnpaeiotvwxyzyXWpyz'], ['aAAaAaaAaaaaapqrstvwxyz'], ['ABCDEIFGHIJKLSGTUVfnfnacetiousnahedizzinesaAAaAaaApsycholaaaaaaessacetiousnahedizzinesaAAaAaaApsycholaaaaaaessWXYZ'], ['absbtbem'], ['aAAaAAcrypcaecaeiouyryptopgyiouyryptopgriaphytoaaoeiocaedizzinessiouyryptaedizaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaaeiocryptofacetiousnesspgraphyceaaAaaaaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaaeiocryptofacetiousnesspgraphyceaaAaaaaaaazinessiouyographyeioaeiocryiptofaceaaAaaaaaaAaaAaaaaa'], ['aeioaeiocryiyptofacetiousnesspgyuycrypteabstaeiiyebcdfghjklmnpqrstvwxaAAaAbicdfghjklcryptopgraphymnaeioaecaeiouyryptopgriaphyiocryiptohfacetiousnesspgyuycrypteaedizzinessiouyzaaAaaaaatbabstemvpqrstvwxyzyzmaedizzinessiouyoegraphy'], ['bcdfghaaAaaaaatbabstemvpqrstvwxyzyz'], ['tbcdfghjklmoueyurstvwbtxyldz'], ['aooeioaouyeuy'], ['tbcdfghjklmnpyptograAEIOUYaeeioaeioAEIOUYaeioaeiouyaAAcrypauyXWuyuaedizzinessiouz'], ['aAAaAaaAaaaaatlbcadfghjklmnpqrstvwxyz'], ['tbcdfgzhdizzinessjklmnpqrstvwxwxyz'], ['aAAaAaaAaaaaatbcdfghjklmnvpqrsybdfghjklmnpqrstvwxyztograpxyz'], ['bcz'], ['absmtaieiiyem'], ['aediazzineAsaAAaAaaAaaaaa'], ['caeiouyryabsaediabstaeiiyebcdfghjklmnpqrstvwxaAAaAbcdfghjklcryptopgraphymnaeioaeiocryiptohfacetiousnesspgyuycrypteaedizzinessiouyzaaAaaaaatbabstemvpqrstvwxyzyzmzzicryptaedizzaAAcryphcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaainessiouyoegraphynessioubtemhy'], ['bcdfghjklmnpqrdizzinesvwx'], ['absaedizzicryptaedizzaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaeiouyaAaaaaphynessioubtemaaaatbcdfghjklmnpqrstvwxyz'], ['bcdfghjklmnaeioaeiocryiptofacetiousnesspgyuycrypteaedizzinessiouyoegratvwxyz'], ['aeypgtogryarpiao'], ['aeiifacetiousnessydiztbcdfghjklmnpyaoeiozcaediozzinessiouyryptaedizzinessiouyographyptograAEIOUYaeioaeiouyuyXWpqrstvwtxyzzdizness'], ['tbcdfgdhjklmnpqrqstvwxyz'], ['aoefnfnacetiousnahedizzinesaAAaAaaApsycholaaaaaaessacetiousnahedizzinesaAAaAaaApsycholaaayaaaesso'], ['tbcdfghdizzinnessjklmnpqrstvwxzyz'], ['caeiouyryabsaedizzicryptaedizzaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaainessiouyoegraeioaphynessioubtemhy'], ['aAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaaeiocrytofacetiousnesspgraphyceaaAaaaaa'], ['tbcdfghjkmnpqraAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaaeiocryptofacetiousnesspgraphyceaaAaaaaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaaeiocryptofacetiousnesspgraphyceaaAaaaaaaatvwxyz'], ['AEIOUYYX'], ['abssteminoaAAaAaaAaaaaatbtcdfghjklmnpqrstvwxyzAAuEYXWussness'], ['AEIOUYaeioaeiouyaAAcrypcaeioeiabstemioousnessopaeiocryiptofaceaaAaaaAAaAaaAaaaaatbtcdfghjklmnpqrstvwxyzaaauyXW'], ['aAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaeiocryptofacetiousnesspgUCuMNjaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofaceaaAaaaraphyceaaAaaaaa'], ['aAAcryptoayptographynaAaaiaaeiiyAaaaaa'], ['pslychpsycohol'], ['tbcdfghjklmnpyptpsycholcaeiouyryptoaedizzinesaAAaAaaAaaaaapgraphyogyograAEIOUYaeioaeiouyurstvwtxyz'], ['bcdfjklmnpqrdizzinesvwx'], ['crroKyrvCyptopgraphy'], ['UCuMNjaAAcrypcaeiabstaeiiyemeioaeiocryiptofaceaaAaaaa'], ['tbcdfghjklmnpoKyvCyptograAEIOUYaeeioaeioAEIOUYaeioaeiouyaAAcrypauyXWuyuaedizzinessiouz'], ['UCUuMNNujX'], ['atbcdfghdizzinessjklmnpqrstvwxwxyzoeio'], ['tbcdfgdhdjklmnpqrqstvwxyz'], ['aAAaAAcrypcaecaaeiouyryptopgraphyiouyryptopgriaphytoaeioaeiocryiptofaceaAEIOaeioaeiocryiaAAcryptoayptographynaAaaiaaeiiyAaaaaaptofacetiousnesspgyuyaaaaAaaAaaaaa'], ['UCuWlDVSrhNaoaoeioaeiouyeuayMNujTHX'], ['cryptograpabsaedizzicryptaedUCuMNujTHXegraphynessioubtemaxyzhty'], ['aeioaeiocryipntofacetiousnesspgyuy'], ['tbcdfghAaAAaycrypteaedizzinessiouyoegraphyaAaaAaaaaatlbcdfghjklmnpqrstvwxyzEIOUyaeioaeiocrpyiptofacetiousnesspgyuyYaeioaeiouyuyXWjklmnpyptograAEIOUYaeioaeioAEIOUYaeioaeiouyaAAcrypauyXWuyuyXWpqrsyz'], ['aoeiocaedizzinessiouyryptaedizaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnhessopaaeiocryptoffacetiousnesspgraphyceaaAaaaaaaazinessiouyography'], ['absbtabsstemioussnessem'], ['abcdfghjklmnaeioaeiocryiptofacetiousnesspgyuycrypteaedizzinessiouyzeioaeiocryiptofacetiousUCuMNujXnesspgyuycryepteaedizzinessiouyoegraphy'], ['aedicryptaedizzaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacbckdfghjklmnpqrstvwxyzetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaainessiouyoegraphyzzinessioeuy'], ['bcdfghjsklmnpaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaeiocryptofacetiousnesspgUCuMNjaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofaceaaAaaaraphyceaaAaaaaaqrdizzinessstvwx'], ['aAAaAaaAaaaaatbcdfghjklmnpqrstcdfghjkAlmnpqrstvwxyztograpyz'], ['ovCKyvvKC'], ['bcdfghjklncryptopgraphytbcdfghjkmnpqraAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaaeiocryptofacetiousnesspgraphyceaaAaaaaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaaeiocryptofacetiousnesspgraphyceaaAaaaaaaatvwxyzinessiouyz'], ['AEIOUYXXW'], ['tbcdfghAaAAaycrypteaedizzinessiouyoegraphyaAaaAaaaaatlbcdfghjklmnpqrstvwxyzEIOUyaeioaeiocrpyiptofacetiousnesspgyuyYaeioaeiouyuyXWjklmnpyptograAEIOUYaeioaeioouyaAAcrypauyXWuyuyXWpqrsyz'], ['abstaeiiyebcdfghjklmnpqrstvwxaAAaAbcdfghjklcryptopgraphymnaeioaecaeiouyryptopgriaphyiocmryiptohfacetiousnesspgyuycrypteaedizzninessiouypzaaAaaaaatbabstemvpqrstvwxyzyzm'], ['abssteminoAkBlAEYXWussness'], ['aAAcrypcaeiouyryptopgriaphytoaeiabstemiousneeaaAaaaaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaaeiocryptofacetiousnesspgraphyceaaAaaaaaaa'], ['crayptopgraphy'], ['abcdfghjklmnaoeioaeiocryiptofacetiousnesspgyuycrypteaedizzinessiouyzeioaeiocryiptofacetiousUCuMNujXnesspgyuycryepteaedizzinessiouyoegraphy'], ['bvwxaedizzinessiocaeiouyryptoaedizzinesaAAaAaabstemiousnessaAaaaaapgraphyuyyz'], ['aeioaeiocryiyptofacetiousnesspaedizzinessiouyoegraphy'], ['AAEYX'], ['oKyvcrypteaeiifacetiousnessydiztbcdfghjklmnpyptograAEIOUYaeioaeiouyuyXWpqrstvwtxyzzdiznessaedizzinessiouyoegraphyC'], ['UCUuMcaedizzinessiouyryptaedizzinessiouyographyNNujX'], ['crypteaedizzinoessiouyoegratbcdfghjklmnpoKyvCyptograAEIOUYaeeioaeioAEIOUYaeioaeiouyaAAcrypauyXWuyuaedizzinessiouzphy'], ['aAAaAaaAafnacetiousnessaaaatbcdfghjklmnvpqrsybcdfghjklmnpqrstvwxyztograpxycaeiouyryptoaedizzinesaAAaAaaAaaaaapgraphyz'], ['abvwxaedizzinessiouyyzediazzineAsaAAaAaaAaaaaa'], ['bcdfghjklcryptopgraphymnaeioaeiyocryiptohfacetiousnesspgypuycrypteaedizzinessiouyz'], ['py'], ['tbcgdfghjkhz'], ['aeioaeiocrytbcdsfghjklmnpyptograAEIOUYaeiobckdfghjklmnpqrstvwxyzaeiouyurstvwtxyziyptofacetiousnesspgyuycrypteabstaeiiyebcdfghjklmnpqrstvwxaAAaAbicdfghjklcryptopgraphymnaeioaecaeiouyryptopgriaphyiocryiptohfacetiousnesspgyuycrypteaedizzinessiouyzaaAaaaaatbabstemvpqrstvwxyzyzmaedizzinessiouyoegraphy'], ['ogrraphty'], ['atbctbcdfghjklmnpoKyvCyptograAEIOUYaeeioaeioAEIOUYaeioaeiouyaAAcrypauyXWuyuaedizzinessiouzio'], ['bcdfghjklmnaeioaeiocryiptofacetiousnessAEIOUYYXpgyuycrypteaedizzinessiouyoegratvwxyz'], ['UCuMNjaAAcrypcaeiabstaeitbcdfghjklmnvwxyzcryptoaphtyiyemeioaeiocryiptofaceaaAaaaaa'], ['diztbcdfghjklmnpypztograAEIOUYaeioaeiouyuyXWpqrstvwtxyzzdizness'], ['AEIOUYfaasiouyAaIaaXaacetiousnessXoW'], ['oKyvcrypteaeiifacetiousnessydiztbcdfghjklmnpyptograAEIOUYaeioaeiouypsycholcaeiouyryptoaedizzinesaAAaAaaAaaaaapgraphyogyuyXWpqrstvwtxyzzdiznessaedizzinessiouyoegraphyC'], ['UCTX'], ['tbcdfghAaAAaycrypteaedizzinessiouyoegraphyaAaaAaaaaatlbcdfghjklmnpqrstvwxyzEIOUyaeioaeiocrpyiptofacetiousnesspgyuyYaeioaebcdfghjsklmnpaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaeiocryptofacetiousnesspgUCuMNjaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofaceaaAaaaraphyceaaAaaaaaqrdizzinessstvwxoaeiouyaAAcrypauyXWuyuyXWpqrsyz'], ['aeiouutbcdfghjklmnpyptograAEIOUYaeioaeioAEIOUYaeioaeiouyaAAcrypauyXWuyuyXWpqrsyzy'], ['aooeio'], ['aoeiocaedizzinessiouyryptaedizaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaaeiocryptofacetiousnesspgraphyceaaAaaaaAAcrypcaeiouyryptopgriaphytoaeusnessopaaeiocryptofacetiousnesspgraphyceaaAaaaaaaazinessiouyography'], ['diznabstaeiiyebcdfghjklmnpqrstvwxaAAaAbcdfghjklcryptopgraphymnaeioaecaeiouyryptopgriaphyiocryiptohfacetiousnesspgyuycrypteaedizzninessiouypzaaAaaaaatbabstemvpqrstvwxyzyzms'], ['caeiouyryptoaedizzinesaAAacryptopgraphyAaabstetbcdfghdizzinessjUCuoaoeioaeiouyeuyMNujTHXklmnpqrstvwxzyzmiousnessaAaaaaapgraphy'], ['aAAaAaaAaaaaatbcdfghjklmnvpqrsybcdfghjklmnpqrstvwxyztograpxycaeiabssteminoAkBlAEYXWussnessouyryptoaedizzinesaAAaAaaAaaaaapgraphyz'], ['abcdfghjklmnaeioaeiocryiptofacetiousnesspgyuycrypteaedizzinessiouyzeioaeiocryiptofacetiousnesspgyuycrypteaedizzinessiotbcdfghjklmnvwxyzcryptoaphtyuyoegraphy'], ['aeeio'], ['aoeiocaedizzinessiouyryptaedizaAAcrypuyography'], ['bcdfAMQRIghjklmnpqrstvwxyz'], ['bcdfghjkUCuoaaedizzinessiouoeioaeiouyeuyMNujaAAaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofaceaaAaaaaaaAaaAaaaaaTHXlmnaeioaeiocryiptofacetiousnesspgyuycrypteaedizzinessiouyoegraphypqrstvwxyz'], ['caeiouyryptoaeedizzinesaAAaAaabstetbcdxzyzamiousnessaAaaaaapgraphy'], ['aAAatbcdfghjklmnvwxyzAaaAaaaaatlbcadfghjklmnpqrstvwxyz'], ['aoeiocaedizzinessiouyryptaedizaAAcrypcaeiouyrycryptoaphtyptopgriaphytoaeiabstemiousnhessopaaeiocryptoffacetiousnesspgraphyceaaAaaaaaaazinessiouyography'], ['abbsas'], ['crypteaedizzinoessiouyoegratbcdfghjklmnpoKyvCyptograAEabsasIOUYaeeioaeioAEIOUYaeioaeiouyaAAcrypauyXWuyuaedizzinessiouzphy'], ['caeioaedicryptaedizzaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspeegraphyzzinessioeuyuyryptopgriaphy'], ['aAAaAaaAaaaaatbcdfghjklmnvpqrsybcdfghjklmnpqrstvwxyztograpxycaeiouyryptoaeioaeiiouyuyaedizzinesaAAaAaaAaaaaapgraphyz'], ['aeiifacetiousnessydiztbcdfghjklmnpyptograAEIOUYaeioaeiouyuyXWpqrstvwtxyzzdidizzinesszness'], ['tbcdfghdizzinessjklmnpqrstvwxyzcrypaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaeiocryiptofaceaaAaabsaedizzicriyptaedizzaAAcrypcaeiouyryptopgriaphytoaeioaeiocryiptofacetiousnesspgyuyfacetieousnesspgraphyaAaaAaaaaainessiouyoegraphynessioubtemaaaatofacetieoussnesspgraphy'], ['absaedizzicryptaedUCuMNujTHXegraphynessioubtemaaaatbcdfghjklmnpqirstvwxyz'], ['tbcdfghajklmnpyptograAEIOUYaeioaeiouyuyXWpqrstvwtxyz'], ['aAAcrypcaeiouyryptopgriaphytoaeiypgtogryarpabstemiousnessopaaeiocrytofacetiousnesspgraphyceaaAaaaaa'], ['caeiouyryptoaedizzinesaAAaAaabstetbcdfghdizzinessjklmnpqrstvwxzyzmiousnessUCuMNjaAAcrypcaeiabstaeiiyemeioaeiocryiptofaceaaAaaaaaAaaaaapgraphy'], ['aAAcrypcaeiouyryptopgriaphAMQRIytoaeiypgtogryarpabstemiousnessopaaeiocrytofacetiousnesspgraphyceaaAaaaaa'], ['aaw'], ['aAAaAaaAaaaaatbcdfghjkllmnpqrstvwxyz'], ['yuyYaeioaeiouyuyXW'], ['aAAaAaaAaaaaatbcdfghjklmnvpqrsybcdfghjklmnpqrstvwxyztograpxycaeioaAAaAaaAaaaaatbabstemvpqrstvwxyzuyryptoaeioaeiiouyuyaedizzinesaAAaAaaAaaaaapgraphyz'], ['aAAaAaaAaaaaatlbcadfghjklmnpqrstvwxtbcdfghdizzitnessjmnpqrstvyptograAEIOUYaeioaeiotbcdfghjlmnpaeiotvwxyzyXWpyzyz'], ['AaedizzinesaAAaAaAaaaaaI'], ['yptograAEIOUYaeioaeiottbEcdfyXWp'], ['aoeiocaedizzinessiouyryptaedizaAAcrypcaeiouyryptopgriaphytoaeiabstemiousinessopaaeaiocryptofacetiousnesspgraphyceaaAaaaaAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaaeiocryptofacetiousnesspgraphyceaaAaaaaaaazinessiouyography'], ['pslychpsyctbcdfghajklmnpyptograAEIOUYaeioaeiouyuyXWpqrstvwtxyz'], ['oKCyvC'], ['UCuMNaeioaeiocryiptofacetiousnessapgyuy'], ['aedizzineAsaAAaaAaaAaaaaaUCuAEIOUYaeuioaeiouyiuyXWTX'], ['UCuMNjaAAcrypcaeiouyryptopaeiouutbcdfghjklmnpyptograAEIOUYaeioaeioAEIOUYaeioaeiouyaAAcrypauyXWuyuyXWpqrsyzygriaphytoaeioaeiocryiptofaceaaAaaa'], ['abAAEYXWtems'], ['aeiifacetiousnessydiztbcdfghjklmnpyptograAEIOUYaeioaeiouyuyXWpqrstvwtxyzzdidizzinesszneabcdfghjklmnaeioaeiocryiptofacetiousnesspgyuycrypteaedizzinessiouyzeioaeiocryiptofacetiousnesspgyuycrypteaedizzinessiouyoegraphyss'], ['aAAcrypcaeiouyryptopgriaphytoaeiabstemiousnessopaaeiocrayptofacetiousnesspgraphyceaaAaaaaa'], ['UCuMNjaAAcrypcaeiouyryptopgriapphytoaeioaeiocryiptofaceacrayptopg'], ['clUaEPUIN'], ['aedizzineAsaAAaaabstemiousnessAaaAaaaaa'], ['apiao'], ['ABCDEIFGHIJKLSGTUVfnfnacetiousnahediinesaAAaAaaApsycholaaaaaaessWXYZ'], ['tbcdfghjklmoueybtxyldz'], ['absaeddizzinesscaedizzinessiouyryptaedizzinessiouyographyizzicryptaedUCuMNujaphynessioubtemaaaatbcdfghjklmnpqirstvwxyz'], ['crypteaedizziouyoegratbcdfghjklmnpoKyvCyptograAEIOUYaeeioaeioAEIOUYaeioaeiouyaAAcrypauyXWuyuaedizzinessiouzphy'], ['bvwxaedizzinessiocaeiouyryptoUCuWlDVSrhNaoaoeioaeiouyeuayMNujTHXaedizzinesaAAaAaabstemiousnessaAaaaaapgraphyuyyz']]\n    results = [2, 3, 2, 1, 2, 1, 3, 2, 2, 2, 2, 2, 3, 3, 1, 2, 6, 1, 0, 11, 7, 4, 7, 5, 4, 1, 3, 1, 3, 2, 6, 5, 11, 3, 6, 6, 5, 3, 2, 1, 6, 10, 7, 7, 8, 6, 5, 4, 5, 10, 10, 5, 13, 11, 10, 9, 16, 4, 15, 6, 7, 12, 3, 4, 4, 15, 6, 8, 13, 1, 1, 8, 2, 2, 8, 9, 14, 12, 11, 9, 4, 5, 3, 15, 6, 3, 9, 10, 16, 10, 8, 26, 3, 2, 20, 11, 10, 14, 8, 14, 1, 10, 3, 11, 29, 9, 8, 0, 13, 5, 5, 3, 3, 3, 6, 6, 6, 6, 11, 6, 3, 6, 5, 5, 3, 3, 9, 3, 24, 9, 19, 0, 2, 3, 6, 11, 24, 10, 3, 0, 5, 14, 7, 14, 30, 24, 11, 28, 14, 19, 24, 12, 3, 20, 7, 10, 9, 6, 13, 3, 17, 6, 6, 12, 32, 21, 6, 30, 20, 28, 28, 6, 32, 34, 32, 11, 4, 12, 28, 9, 36, 6, 8, 38, 16, 8, 30, 0, 8, 42, 6, 15, 8, 10, 47, 15, 6, 26, 9, 34, 6, 3, 17, 28, 12, 11, 18, 29, 0, 36, 30, 10, 12, 12, 6, 19, 25, 32, 43, 21, 18, 20, 6, 2, 4, 1, 9, 31, 21, 12, 29, 1, 30, 20, 6, 25, 18, 17, 29, 11, 17, 14, 21, 52, 25, 40, 12, 10, 5, 15, 1, 13, 48, 49, 34, 3, 35, 13, 44, 15, 20, 18, 24, 11, 14, 23, 17, 19, 1, 29, 15, 38, 46, 17, 20, 49, 23, 27, 58, 47, 34, 29, 11, 0, 16, 23, 40, 33, 14, 26, 21, 12, 7, 7, 44, 44, 16, 6, 26, 12, 15, 6, 5, 38, 27, 31, 31, 32, 66, 22, 73, 34, 54, 6, 20, 52, 16, 51, 6, 13, 47, 8, 53, 36, 26, 6, 27, 10, 16, 15, 12, 12, 8, 9, 35, 75, 51, 46, 56, 19, 2, 30, 1, 4, 19, 11, 51, 25, 10, 15, 15, 12, 10, 8, 58, 2, 7, 2, 24, 32, 43, 19, 94, 38, 77, 24, 16, 46, 36, 0, 8, 8, 36, 22, 14, 34, 143, 63, 46, 2, 13, 59, 18, 48, 4, 52, 45, 52, 69, 25, 18, 34, 40, 16, 12, 1, 49, 39, 21, 14, 56, 40, 18, 30, 90, 16, 51, 22, 14, 9, 1, 41, 30, 8, 1, 31, 38, 36, 39, 11, 18, 52, 31, 7, 16, 0, 20, 49, 6, 12, 130, 58, 93, 54, 3, 9, 11, 15, 47, 34, 71, 8, 5, 68, 53, 42, 3, 49, 38, 79, 64, 69, 4, 143, 66, 3, 148, 56, 15, 71, 52, 15, 14, 3, 47, 149, 13, 77, 30, 29, 145, 25, 99, 11, 6, 39, 8, 21, 21, 5, 63, 15, 20, 26, 105, 57, 39, 69, 17, 7, 84, 42, 40, 15, 4, 12, 14, 145, 12, 29, 36, 6, 145, 27, 32, 145, 16, 27, 1, 21, 40, 10, 11, 18, 77, 20, 14, 12, 0, 7, 13, 29, 36, 6, 35, 1, 42, 51, 28, 59, 0, 40, 10, 18, 10, 29, 10, 60, 13, 9, 38, 9, 90, 30, 16, 64, 68, 57, 8, 69, 50, 15, 27, 35, 25, 26, 4, 62, 87, 1, 80, 1, 41, 15, 102, 20, 52, 10, 20, 56, 68, 33, 7, 24, 31, 19, 22, 78, 13, 78, 14, 8, 19, 48, 54, 23, 30, 8, 9, 47, 56, 71, 78, 54, 31, 39, 29, 41, 24, 93, 162, 56, 30, 10, 145, 48, 14, 29, 58, 42, 52, 45, 40, 45, 35, 1, 1, 0, 0, 5, 5, 6, 5, 6, 0, 12, 11, 9, 11, 12, 10, 4, 13, 8, 3, 15, 6, 16, 5, 4, 2, 8, 9, 6, 10, 18, 0, 30, 11, 2, 3, 2, 27, 5, 2, 13, 13, 9, 17, 13, 3, 39, 5, 18, 2, 21, 3, 47, 2, 1, 3, 8, 13, 6, 2, 32, 2, 59, 19, 14, 7, 29, 38, 4, 10, 13, 43, 39, 3, 9, 17, 18, 3, 15, 45, 19, 13, 51, 26, 6, 3, 3, 1, 23, 9, 3, 3, 15, 5, 10, 22, 68, 1, 11, 44, 16, 19, 27, 3, 49, 6, 45, 0, 15, 34, 4, 6, 21, 17, 3, 24, 33, 48, 3, 26, 88, 32, 38, 11, 4, 24, 28, 28, 0, 32, 17, 3, 49, 2, 44, 37, 2, 3, 3, 71, 119, 25, 56, 112, 20, 14, 5, 68, 16, 30, 47, 43, 119, 59, 9, 13, 27, 84, 15, 0, 20, 48, 10, 40, 72, 45, 32, 52, 57, 28, 13, 57, 0, 21, 13, 33, 36, 30, 17, 87, 32, 16, 19, 46, 3, 0, 41, 7, 25, 44, 21, 7, 0, 3, 25, 17, 46, 3, 20, 42, 35, 14, 33, 13, 22, 18, 18, 39, 0, 95, 74, 51, 52, 11, 57, 21, 90, 26, 47, 77, 38, 2, 119, 3, 51, 19, 1, 2, 2, 30, 2, 18, 18, 0, 35, 1, 33, 58, 0, 3, 16, 22, 12, 52, 32, 56, 1, 40, 20, 17, 40, 22, 13, 57, 2, 162, 88, 10, 4, 12, 45, 14, 3, 15, 0, 7, 20, 123, 3, 68, 29, 7, 54, 0, 56, 3, 78, 44, 88, 5, 23, 61, 75, 23, 2, 44, 3, 4, 32, 46, 4, 8, 0, 93, 18, 21, 18, 94, 70, 8, 60, 68, 78, 16, 1, 95, 5, 82, 57, 9, 74, 4, 61, 39, 28, 3, 43, 22, 60, 46, 28, 28, 1, 0, 105, 3, 49, 34, 35, 20, 23, 70, 1, 145, 43, 6, 107, 58, 53, 49, 58, 5, 23, 2, 98, 34, 14, 72, 2, 62, 52, 51, 33, 120, 22, 18, 46, 67, 48, 2, 13, 11, 66, 36, 19, 16, 114, 18, 1, 21, 39, 74, 5, 88, 45, 29, 5, 26, 4, 31, 3, 42, 57, 57]\n    for i, (inp, exp) in enumerate(zip(inputs, results)):\n        assertion(candidate(*inp), exp, 0)\n",
      "entry_point": "vowels_count",
      "complete_code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    if s == \"\": return 0\n    cnt = len(list(filter(lambda ch: ch in \"aeiouAEIOU\", s)))\n    if s[-1] in \"yY\": cnt += 1\n    return cnt\n\n"
    },
    "execution_info": {
      "max_mutations_per_operator": 10,
      "total_operators_tested": 46,
      "operators_with_mutations": 9,
      "execution_timestamp": "2025-08-01T15:46:48.938905"
    }
  }
}