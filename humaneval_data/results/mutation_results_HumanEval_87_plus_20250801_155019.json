{
  "timestamp": "20250801_155019",
  "test_type": "mutation_testing",
  "metadata": {
    "task_id": "HumanEval/87",
    "timestamp": "20250801_155019",
    "tester_version": "1.0",
    "total_operators_tested": 7,
    "operators_with_errors": 1
  },
  "summary": {
    "original_passes": true,
    "total_mutations": 11,
    "killed_mutations": 9,
    "mutation_score": 0.8181818181818182,
    "survival_rate": 0.18181818181818177
  },
  "detailed_results": {
    "task_id": "HumanEval/87",
    "dataset_type": "plus",
    "original_passes": true,
    "total_mutations": 11,
    "killed_mutations": 9,
    "mutation_score": 0.8181818181818182,
    "mutation_results": {
      "NumberReplacer": {
        "total_mutations": 4,
        "killed_mutations": 4,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n",
            "mutated_code": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 2, -1, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "mutated_complete_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 2, -1, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpnitl9zam.py\", line 85, in <module>\n    check(get_row)\n    ~~~~~^^^^^^^^^\n  File \"/tmp/tmpnitl9zam.py\", line 79, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpnitl9zam.py\", line 72, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:50:15.262313",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n",
            "mutated_code": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 0, -1, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "mutated_complete_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 0, -1, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp2gskttej.py\", line 85, in <module>\n    check(get_row)\n    ~~~~~^^^^^^^^^\n  File \"/tmp/tmp2gskttej.py\", line 79, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmp2gskttej.py\", line 45, in get_row\n    if l[j] == x:\n       ~^^^\nIndexError: list index out of range\n",
            "timestamp": "2025-08-01T15:50:15.591375",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n",
            "mutated_code": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -2, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "mutated_complete_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -2, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpbh7dr1rz.py\", line 85, in <module>\n    check(get_row)\n    ~~~~~^^^^^^^^^\n  File \"/tmp/tmpbh7dr1rz.py\", line 79, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpbh7dr1rz.py\", line 72, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:50:15.914833",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n",
            "mutated_code": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -0, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "mutated_complete_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -0, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpucpotdnt.py\", line 85, in <module>\n    check(get_row)\n    ~~~~~^^^^^^^^^\n  File \"/tmp/tmpucpotdnt.py\", line 79, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpucpotdnt.py\", line 72, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:50:16.186412",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 4,
            "original_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n",
            "mutated_code": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -2):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "mutated_complete_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -2):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpx06nnoxb.py\", line 85, in <module>\n    check(get_row)\n    ~~~~~^^^^^^^^^\n  File \"/tmp/tmpx06nnoxb.py\", line 79, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpx06nnoxb.py\", line 72, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:50:16.451053",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n",
            "mutated_code": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -0):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "mutated_complete_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -0):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpc9wzzt9t.py\", line 85, in <module>\n    check(get_row)\n    ~~~~~^^^^^^^^^\n  File \"/tmp/tmpc9wzzt9t.py\", line 79, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmpc9wzzt9t.py\", line 44, in get_row\n    for j in range(len(l) - 1, -1, -0):\n             ~~~~~^^^^^^^^^^^^^^^^^^^^\nValueError: range() arg 3 must not be zero\n",
            "timestamp": "2025-08-01T15:50:16.673690",
            "status": "BROKEN",
            "reason": "code_error"
          }
        ],
        "mutation_count_available": 6,
        "mutations_tested": 6
      },
      "Sub->Add": {
        "error": "division by zero"
      },
      "Eq->NotEq": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n",
            "mutated_code": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] != x:\n                res.append((i, j))\n    return res",
            "mutated_complete_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] != x:\n                res.append((i, j))\n    return res",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpqdowhje9.py\", line 85, in <module>\n    check(get_row)\n    ~~~~~^^^^^^^^^\n  File \"/tmp/tmpqdowhje9.py\", line 79, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpqdowhje9.py\", line 72, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:50:17.168027",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Remove UnaryMinus": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n",
            "mutated_code": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, 1, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "mutated_complete_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, 1, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpdee15mcl.py\", line 85, in <module>\n    check(get_row)\n    ~~~~~^^^^^^^^^\n  File \"/tmp/tmpdee15mcl.py\", line 79, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpdee15mcl.py\", line 72, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:50:17.458789",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n",
            "mutated_code": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, 1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "mutated_complete_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, 1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpforzcl0u.py\", line 85, in <module>\n    check(get_row)\n    ~~~~~^^^^^^^^^\n  File \"/tmp/tmpforzcl0u.py\", line 79, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpforzcl0u.py\", line 72, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:50:17.775627",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Remove ReturnValue": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n",
            "mutated_code": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return",
            "mutated_complete_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpvu4d38qx.py\", line 85, in <module>\n    check(get_row)\n    ~~~~~^^^^^^^^^\n  File \"/tmp/tmpvu4d38qx.py\", line 79, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpvu4d38qx.py\", line 72, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:50:18.104529",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "One->Zero": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n",
            "mutated_code": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 0, -1, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "mutated_complete_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 0, -1, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpuc_r8akw.py\", line 85, in <module>\n    check(get_row)\n    ~~~~~^^^^^^^^^\n  File \"/tmp/tmpuc_r8akw.py\", line 79, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmpuc_r8akw.py\", line 45, in get_row\n    if l[j] == x:\n       ~^^^\nIndexError: list index out of range\n",
            "timestamp": "2025-08-01T15:50:18.402552",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n",
            "mutated_code": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -0, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "mutated_complete_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -0, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp5229uwct.py\", line 85, in <module>\n    check(get_row)\n    ~~~~~^^^^^^^^^\n  File \"/tmp/tmp5229uwct.py\", line 79, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp5229uwct.py\", line 72, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:50:18.699018",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n",
            "mutated_code": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -0):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "mutated_complete_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -0):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpe4nk0u4x.py\", line 85, in <module>\n    check(get_row)\n    ~~~~~^^^^^^^^^\n  File \"/tmp/tmpe4nk0u4x.py\", line 79, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmpe4nk0u4x.py\", line 44, in get_row\n    for j in range(len(l) - 1, -1, -0):\n             ~~~~~^^^^^^^^^^^^^^^^^^^^\nValueError: range() arg 3 must not be zero\n",
            "timestamp": "2025-08-01T15:50:19.047184",
            "status": "BROKEN",
            "reason": "code_error"
          }
        ],
        "mutation_count_available": 3,
        "mutations_tested": 3
      },
      "String->Empty": {
        "total_mutations": 1,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n",
            "mutated_code": "def get_row(lst, x):\n    \"\"\"\"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "mutated_complete_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\ndef get_row(lst, x):\n    \"\"\"\"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:50:19.445179",
            "status": "SURVIVED",
            "reason": "tests_passed"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "String->X": {
        "total_mutations": 1,
        "killed_mutations": 0,
        "survival_rate": 1.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n",
            "mutated_code": "def get_row(lst, x):\n    \"\"\"X\"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "mutated_complete_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\ndef get_row(lst, x):\n    \"\"\"X\"\"\"\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x:\n                res.append((i, j))\n    return res",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:50:19.738842",
            "status": "SURVIVED",
            "reason": "tests_passed"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      }
    },
    "problem_info": {
      "prompt": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
      "canonical_solution": "\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n",
      "test_code": "\n\nimport numpy as np\n\ndef is_floats(x) -> bool:\n    # check if it is float; List[float]; Tuple[float]\n    if isinstance(x, float):\n        return True\n    if isinstance(x, (list, tuple)):\n        return all(isinstance(i, float) for i in x)\n    if isinstance(x, np.ndarray):\n        return x.dtype == np.float64 or x.dtype == np.float32\n    return False\n\n\ndef assertion(out, exp, atol):\n    exact_match = out == exp\n\n    if atol == 0 and is_floats(exp):\n        atol = 1e-6\n    if not exact_match and atol != 0:\n        assert np.allclose(out, exp, rtol=1e-07, atol=atol)\n    else:\n        assert exact_match\n\n\ndef check(candidate):\n    inputs = [[[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1], [[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2], [[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1], [[], 1], [[[1]], 2], [[[], [1], [1, 2, 3]], 3], [[[], [], [], []], 10], [[[1, 2, 3], [4, 5, 6]], 5], [[[1, 1], [1, 2, 3], [4, 5, 6, 7]], 1], [[[1, 0, 4], [4, 8, -1, 1], [0], [5, 5, 5, -3]], 0], [[[0, 0, 0, 0, 0], [0, 1, 2], [0, 1, 2, 3, 4, 5, 6, 7, 8], [], [0, 0, 0]], 0], [[[1, 2, 3], [4, 5, 6], [7, 8]], 3], [[], 5], [[[], [], []], 1], [[[1, 2], [2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10, 11]], 4], [[[1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3], [4, 4], [5, 5, 5, 5, 5, 5, 5, 5]], 5], [[[1, 2], [2, 3, 4], [4, 5, 6, 6, 7], [4, 5, 6, 6, 7], [7, 8, 9, 10, 11], [2, 3, 4]], 4], [[[], [], []], 6], [[[0, 0, 0, 0, 0], [0, 1, 2], [0, 1, 2, 3, 4, 5, 6, 7, 8], [], [0, 0, 0]], -1], [[[3, 1, 2, 3], [4, 5, 6]], 5], [[[1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3], [4, 4], [5, 5, 5, 5, 5, 5, 5, 5], [2, 2, 2, 2, 2]], 5], [[[], [], [], []], 6], [[[], [False, True, True], []], 0], [[[1, 2], [2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10, 11], [7, 8, 9, 10, 11]], 4], [[[0, 0, 0, 0, 0], [0, 1, 2], [70.62468430869876], [0, 1, 2, 3, 4, 5, 6, 7, 8], [], [0, 0, 0]], 0], [[[], [False, True, True], []], -1], [[[1, 2], [2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10, 11]], 9], [[[0, 0, 0, 0, 0], [0, 1, 2], [0, 1, 2, 3, 4, 5, 6, 7, 8], [], [-1, 0, 0, 0, 0]], 3], [[[1, 2, 3], [7, 8, 7]], 3], [[[[False, False, True, True, False, False, True, False, True, True]], [0, 0, 0, 0, 0], [0, 1, 2, 0], [0, 1, 2, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8], [], [-1, 0, 0, 0, 0]], 3], [[[0, 0, 0, 0, 0], [0, 1, 2], [0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0]], -1], [[[0, 0, 0, 0, 0], [0, 1, 2], [0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8]], 0], [[[3, 1, 2, 3], [4, 5, 6], [3, 1, 2, 3]], 5], [[[0, 0, 0, 0, 0], [0, 1, 2], [0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0]], -1], [[[], [], [-3, 35, 54, 0, -3, -92, 68, 7], [], []], 0], [[[1, 2], [2, 3, 4], [4, 5, 6, 7]], 9], [[[3, 1, 2, 3], [4, 5, 6]], 8], [[[1, 1], [1, 11, 3], [1, 11, 3], [4, 5, 6, 7]], 1], [[[3, 1, 2, 3], [4, 5, 6], [3, 1, 2, 3], [4, 5, 6]], 5], [[[0]], 1], [[[1]], 1], [[[1, 2], [2, 1, 3], [1, 3, 2, 1], [2, 1, 1]], 1], [[[1, 2], [2, 1, 3], [4, 3, 2, 5], [2, 1, 6]], 7], [[[1, 5, 3, 5, 7, 5, 9, 5, 11, 5, 13, 5]], 5], [[[], [], [], [], []], 1], [[[], [], [], [], []], 10], [[[1], [1], [1], [1]], 1], [[[1], [1], [1], [1]], 2], [[[1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1], [1, 2, 3]], 2], [[[2, 0]], 1], [[[1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1], [1, 2, 3]], 3], [[[]], 1], [[[1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1], [1, 2, 3]], 10], [[[], []], 0], [[[1, 2], [2, 1, 3], [4, 3, 2, 5], [2, 1, 6]], 10], [[[]], 0], [[[1, 2, 3], [3, 2, 1], [1, 2, 9, 3], [1, 2, 9, 3], [3, 2, 1], [1, 2, 3]], 3], [[[], []], -98], [[[1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1], [1, 2, 3]], 62], [[[0]], 0], [[[], [], [], []], 1], [[[1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1], [1, 2, 3]], -27], [[[1, 2], [2, 1, 3], [4, 3, 2, 5], [2, 1, 6]], -27], [[[], [], [], [], []], 0], [[[], [], [1], [1], [1]], 0], [[[3, 2, 1], [1, 2, 9, 3], [1, 2, 9, 3], [3, 2, 1], [1, 2, 3]], 7], [[[1, 3, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1], [1, 2, 3]], 62], [[[4, 3, 2, 5], [2, 1, 6]], -27], [[[1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1], [1, 2, 3]], 4], [[[1, 2, 7], [3, 2, 1], [1, 2, 7], [1, 2, 3], [3, 2, 1], [1, 2]], 10], [[[3, 2, 1], [1, 2, 9, 3], [3, 2, 1], [1, 2, 3]], 8], [[[1], [1], [1]], 1], [[[1, 2], [2, 1, 3], [4, 3, 2, 5], [2, 1, 6]], 8], [[[1, 5], [2, 1, 3], [4, 3, 2, 5], [2, 1, 6]], 10], [[[1, 2], [2, 1, 3], [4, 3, 2, 5], [2, 1, 6]], 9], [[[]], 7], [[[1, 2], [2, 1, 3], [4, 3, 2, 5], [2, 1, 6]], 49], [[[1, 2], [2, 1, 3], [4, 3, 2, 5], [2, 1, 6], [2, 1, 6]], 0], [[[True, False, False], [], [], [], [], []], 1], [[[1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1], [1, 2, 3]], 5], [[[1, 2], [2, 1, 3], [4, 3, 2, 5], [2, 1, 6], [2, 1, 6]], 9], [[[0]], 9], [[[1, 2, 3], [3, 2, 1], [1, 2, 1, 3], [1, 2, 1, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1], [1, 2, 3]], 5], [[[1, 2], [2, 1, 3], [4, 3, 2, 5], [2, 1, 6]], 34], [[], -89], [[[], [], [], [], []], 2], [[[1, 2, 3], [1, 2, 3], [3, 2, 1], [1, 2, 3]], 5], [[], 10], [[[1, 2], [2, 1, 3], [2, 1, 1]], 1], [[[3, 2, 1], [3, 2, 2], [1, 2, 9, 3], [3, 2, 2], [1, 2, 3]], 8], [[[1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1]], -27], [[[], [], [-44.27424904738355, -45.679324832296906, 95.34516483790298, 21.648674306121123, -32.17970898728211, -8.081667034352762, -23.02295170209456, 80.76641310561561, 9.678829361211541, 68.16144984963583], [], [], []], 2], [[[], [], [], [], []], 62], [[[], [], [], [], [], []], -98], [[[1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1], [1, 2, 3]], 34], [[[]], 6], [[], 6], [[[1, 5, 3, 5, -66, 5, 9, 5, 11, 5, 13, 5]], 5], [[[1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1]], 3], [[[4, 3, 2, 5]], -27], [[[1, 2, 3], [3, 2, 1], [1, 2, 1, 3], [1, 2, 1, 3], [3, 2, 1], [1, 2, 3], [1, 2, 3]], 5], [[[True, False, False], [], [], [], [], []], 9], [[[1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1], [1, 2, 3]], 74], [[[1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1], [1, 2, 3], [1, 2, 3]], 4], [[[1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1], [1, 2, 3]], 45], [[[], [-7.55236098678059], [-7.55236098678059], [], [], [], []], -99], [[[False, True, False, True, True, False, True, False], [True, False, False], [], [], [], [], []], 1], [[[1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1]], -26], [[[1, 2], [1, 1], [2, 1, 3], [1, 1]], 1], [[[1, 2], [2, 1, 3], [4, 3, 2, 4, 5], [4, 3, 2, 4, 5], [2, 1, 6], [2, 1, 6]], 62], [[[-6, -38, 25, 3, 45]], 0], [[[], [], []], -98], [[[], [], []], 0], [[[], [-7.55236098678059], [-7.55236098678059], [], ['', 'uL', 'ksjvRqrLhyAOKkvpwcrWhP'], [], []], -99], [[[1, 2, 3], [3, 2, 1], [1, 2, 3], [3, 2, 1], [1, 2, 3], [1, 2, 3]], 2], [[], -1], [[[], []], 13], [[[1, 2], [2, 1, 3], [4, 3, 2, 5], [2, 1, 6]], -73], [[[]], 8], [[[1, 5], [2, 1, 3], [4, 3, 2, 5], [2, 1, 6]], 44], [[[], [], [], []], 0], [[[], [], []], -1], [[[], [], [], []], 4], [[[5]], 5], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]], 1], [[[1, 2, 3, 4], [1, 2, 3], [1, 2], [1]], 1], [[[], [], []], 5], [[[1, 2, 3, 4, 5]], 3], [[[1], [2], [3]], 2], [[[], [], [], [1, False, ['rKW', 'NJISO', '', 'GKBhmtgbr', 'oZg', 'wK'], 99.16010072704816, 'OXMYkjFnn', True, True, True, [[1, -16.90064763272207, -52.63553163835755, 80, -59], 6, 64.00391269191459, -27.552555259336174, False, 'VXnk', 1, [-74.08431048384021, 8.119517181553633, 24.987035577244157, -52.62309758224084, -65.04267587536296, -12.933482397247616, 81.74490543580112], 3, 13], 'KnXUmD'], []], 1], [[[1, 2], [2, 1, 3], [4, 3, 2, 5], [2, 1, 6]], 6], [[[], [], [1, False, ['rKW', 'NJISO', '', 'GKBhmtgbr', 'oZg', 'wK'], 99.16010072704816, 'OXMYkjFnn', True, True, True, [[1, -16.90064763272207, -52.63553163835755, 80, -59], 6, 64.00391269191459, -27.552555259336174, False, 'VXnk', 1, [-74.08431048384021, 8.119517181553633, 24.987035577244157, -52.62309758224084, -65.04267587536296, -12.933482397247616, 81.74490543580112], 3, 13], 'KnXUmD'], []], 1], [[[5, 3, 5, 7, 5, 9, 5, 11, 5, 13, 5]], 5], [[[-59, 0]], 1], [[[-59, 0]], 80], [[[2, 1], [1, 2], [2, 1], [4, 3, 2, 5], [2, 1, 6], [2, 1]], 6], [[[1, 0], [1, 0]], 80], [[[], [-52.63553163835755, -20.85829830424977, -19.258305309776077, 99.16010072704816, 26.11260344815392, -59.365757443211244, 98.25223736083848], [], [], [], []], 10], [[[1], [1], [1], [1], [1]], 1], [[[1, 5, 3, 5, 7, 5, 9, 5, 11, 5, 13, 5, 3]], 0], [[[5, 3, 5, 7, 5, 9, 5, 11, 5, 13, 5], [5, 3, 5, 7, 5, 9, 5, 11, 5, 13, 5]], 4], [[], 0], [[[1, 2], [2, 1, 3], [1, 3, 2, 1], [2, 1, 1], [1, 2]], -95], [[[1], [1], [1], [1]], 9], [[[1, 5, 3, 5, 7, 5, 9, 5, 11, 5, 13, 6, 5, 3]], 0], [[[1], [1], [1, 1], [1]], 2], [[[2, 1], [1, 2], [2, 1], [4, 3, 2, 5], [2, 1, 6], [2, 1]], 7], [[[1], [1], [1], [1], [1]], 2], [[[1], [1], [1], [1]], 0], [[[2, 1], [1, 4, 2], [2, 1], [4, 3, 2, 5], [2, 1, 6], [2, 1]], 7], [[[1], [1], [], [1]], 0], [[[1], [1]], 0], [[[1], [1], [1, 1], [1, 2], [1, 1]], 3], [[[1]], 10], [[[2, 1], [1, 2, 2], [2, 1], [4, 3, 2, 5], [2, 1, 6], [2, 1]], 7], [[[2, 1], [1, 2], [2, 1], [4, 3, 2, 5], [2, 1, 6], [2, 1]], 5], [[[80, 2, 1], [80, 2, 1], [1, 2], [80, 2, 1], [4, 3, 2, 5], [2, 1, 6], [80, 2, 1]], 5], [[[2, 1], [1, 2, 2], [2, 1], [4, 3, 2, 5], [2, 1, 6], [2, 1], [2, 1]], 7], [[], 2], [[[1], [1], [11, 1], [1], [1]], 2], [[[2, 1], [1, 2, 2], [2, 1], [4, 3, 2, 5], [2, 1]], 8], [[[1], [1], [1, 1], [1]], 7], [[[1], [1], [2, 1], [2, 1], [1], [2, 1]], 11], [[[2, 0, 1], [1, 2], [2, 0, 1], [4, 3, 2, 5], [2, 1, 6], [2, 0, 1]], 6], [[[1, 2], [2, 1, 3], [1, 3, 2, 1], [2, 1, 1], [1, 2]], -96], [[[-59, 0], [-59, 0]], 80], [[[], [1], [1], [1], []], 1], [[[2, 2], [1, 2], [2, 2], [4, 3, 2, 5], [2, 1, 6], [2, 2], [2, 2]], 5], [[[1], [1], [11, 1], [1]], 2], [[[1, 2], [2, 1, 3], [1, 3, 2, 1], [2, 1, 1], [1, 2], [1, 2]], 11], [[], -96], [[[1], [1], [11, 1]], 0], [[[1], [1], [-59, 11, 1]], 0], [[], -59], [[[1, 0], [1, 0], [1, 0]], 81], [[[1], [1], [-59, 11, 1]], 1], [[[1], [1, 1], [11, 1], [1, 1], [1]], 2], [[[2], [1, 2], [2], [4, 3, 2, 5], [2, 1, 6], [2], [2]], 5], [[[2, 1], [1, 2, 2], [1, 2, 2], [2, 1], [4, 3, 2, 5], [2, 1, 6], [2, 1]], 7], [[[], [], [], [1, False, ['rKW', 'NJISO', '', 'GKBhmtgbr', 'oZg', 'wK'], 99.16010072704816, 'OXMYkjFnn', True, True, True, [[1, -16.90064763272207, -52.63553163835755, 80, -59], 6, 64.00391269191459, -27.552555259336174, False, 'VXnk', 1, [-74.08431048384021, 8.119517181553633, 24.987035577244157, -52.62309758224084, -65.04267587536296, -12.933482397247616, 81.74490543580112], 3, 13], 'KnXUmD']], 1], [[[1, 5, 3, 5, 7, 5, 9, 5, 11, 5, 13, 5], [1, 5, 3, 5, 7, 5, 9, 5, 11, 5, 13, 5]], 5], [[[1], [1], [-59, 11, 1]], 81], [[[1], [1], [1], [1], [1]], 0], [[[1]], 0], [[[1], [1], [], [1]], -28], [[[1, 0], [1, 0]], -32], [[[5, 3, 5, 7, 5, 9, 5, 11, 5, 13, 5], [5, 3, 5, 7, 5, 9, 5, 11, 5, 13, 5]], 5], [[[1, 1], [1], [1], [1], [1, 1], [1]], 2], [[[], [1], [1], [1], [], [1]], 1], [[[], [], [], [], []], -32], [[[2, 1, 1], [1, 2], [2, 1, 1], [4, 3, 2, 5], [2, 1, 6], [2, 1, 1]], 6], [[[1], [1], [1]], 9], [[], 79], [[[1], [2, 1, 3], [1, 3, 2, 1], [2, 1, 1], [1]], -96], [[[-59]], 1], [[], -58], [[[], [1], [1], [1], [87.61431870060784, -74.08431048384021, -43.44191994241269]], 0], [[[1], [1], [], [1]], -1], [[[-59, 0], [-59, 0], [-59, 0]], 80], [[[2], [1], [11, 1], [1], [2]], 2], [[[2, 1], [4, 3, 3, 2, 5], [1, 2, 2], [2, 1], [4, 3, 3, 2, 5], [2, 1, 6], [2, 1], [2, 1]], 7], [[[1], [1], [1, 1], [1, 2], [1, 1]], 2], [[[2, 1], [1, 2, 2], [2, 1], [4, 3, 3, 2, 5], [2, 1, 6], [4, 3, 3, 2, 5], [2, 1], [2, 1]], 7], [[[], [-52.63553163835755, -20.85829830424977, -19.258305309776077, 99.16010072704816, 26.11260344815392, -59.365757443211244, 98.25223736083848], [True, False, False, True, True, False], [], [], [], []], -6], [[[1], [1], ['Qmiom', 'OXMYkjFnn', 'zxopRHtsCb', 'SPOKvaykqJ', 'ihaVTyy', 'OCr', 'yP', 'nCIHYIJiq'], [], [1]], -1], [[[2, 1], [1, 2, 2, 2], [2, 1], [4, 3, 2, 5], [2, 1, 6], [2, 1], [1, 2, 2, 2], [2, 1]], 7], [[[1], [0], [1], [0], [1]], 2], [[[1], [1], [1, 1], [79, 2], [1, 1]], 3], [[[False], [], [], [], []], -32], [[[1], [1], [1], [1]], 81], [[[1, 0], [1, 0], [1, 0], [1, 0]], 81]]\n    results = [[(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)], [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)], [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)], [], [], [(2, 2)], [], [(1, 1)], [(0, 1), (0, 0), (1, 0)], [(0, 1), (2, 0)], [(0, 4), (0, 3), (0, 2), (0, 1), (0, 0), (1, 0), (2, 0), (4, 2), (4, 1), (4, 0)], [(0, 2)], [], [], [(1, 2), (2, 0)], [(4, 7), (4, 6), (4, 5), (4, 4), (4, 3), (4, 2), (4, 1), (4, 0)], [(1, 2), (2, 0), (3, 0), (5, 2)], [], [], [(1, 1)], [(4, 7), (4, 6), (4, 5), (4, 4), (4, 3), (4, 2), (4, 1), (4, 0)], [], [(1, 0)], [(1, 2), (2, 0)], [(0, 4), (0, 3), (0, 2), (0, 1), (0, 0), (1, 0), (3, 0), (5, 2), (5, 1), (5, 0)], [], [(3, 2)], [(2, 3)], [(0, 2)], [(4, 3)], [], [(0, 4), (0, 3), (0, 2), (0, 1), (0, 0), (1, 0), (2, 0), (3, 2), (3, 1), (3, 0), (4, 0)], [(1, 1)], [], [(2, 3)], [], [], [(0, 1), (0, 0), (1, 0), (2, 0)], [(1, 1), (3, 1)], [], [(0, 0)], [(0, 0), (1, 1), (2, 3), (2, 0), (3, 2), (3, 1)], [], [(0, 11), (0, 9), (0, 7), (0, 5), (0, 3), (0, 1)], [], [], [(0, 0), (1, 0), (2, 0), (3, 0)], [], [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1)], [], [(0, 2), (1, 0), (2, 2), (3, 0), (4, 2)], [], [], [], [], [], [(0, 2), (1, 0), (2, 3), (3, 3), (4, 0), (5, 2)], [], [], [(0, 0)], [], [], [], [], [], [], [], [], [], [], [], [(0, 0), (1, 0), (2, 0)], [], [], [], [], [], [], [(0, 0)], [], [], [], [], [], [], [], [], [], [(0, 0), (1, 1), (2, 2), (2, 1)], [], [], [], [], [], [], [], [], [(0, 11), (0, 9), (0, 7), (0, 5), (0, 3), (0, 1)], [(0, 2), (1, 0), (2, 2), (3, 0), (4, 2), (5, 0)], [], [], [], [], [], [], [], [(0, 6), (0, 4), (0, 3), (0, 1), (1, 0)], [], [(0, 0), (1, 1), (1, 0), (2, 1), (3, 1), (3, 0)], [], [], [], [], [], [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)], [], [], [], [], [], [], [], [], [(0, 0)], [], [(0, 2), (0, 1), (0, 0), (1, 2), (1, 1), (1, 0), (2, 2), (2, 1), (2, 0)], [(0, 0), (1, 0), (2, 0), (3, 0)], [], [(0, 2)], [(1, 0)], [(3, 7), (3, 6), (3, 5), (3, 0)], [(3, 2)], [(2, 7), (2, 6), (2, 5), (2, 0)], [(0, 10), (0, 8), (0, 6), (0, 4), (0, 2), (0, 0)], [], [], [(4, 2)], [], [], [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [(3, 3)], [(4, 3)], [], [], [], [], [], [], [(4, 2)], [], [], [(1, 0), (2, 0), (3, 0)], [(3, 3)], [], [], [], [], [], [], [], [(0, 0), (1, 0), (2, 2)], [], [(3, 3)], [], [(3, 7), (3, 6), (3, 5), (3, 0)], [(0, 11), (0, 9), (0, 7), (0, 5), (0, 3), (0, 1), (1, 11), (1, 9), (1, 7), (1, 5), (1, 3), (1, 1)], [], [], [], [], [], [(0, 10), (0, 8), (0, 6), (0, 4), (0, 2), (0, 0), (1, 10), (1, 8), (1, 6), (1, 4), (1, 2), (1, 0)], [], [(1, 0), (2, 0), (3, 0), (5, 0)], [], [(4, 2)], [], [], [], [], [], [], [], [], [(0, 0), (4, 0)], [], [(3, 1)], [], [], [], [], [], [], [], [], []]\n    for i, (inp, exp) in enumerate(zip(inputs, results)):\n        assertion(candidate(*inp), exp, 0)\n",
      "entry_point": "get_row",
      "complete_code": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    res = []\n    for i, l in enumerate(lst):\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == x: res.append((i, j))\n    return res\n\n"
    },
    "execution_info": {
      "max_mutations_per_operator": 10,
      "total_operators_tested": 46,
      "operators_with_mutations": 7,
      "execution_timestamp": "2025-08-01T15:50:19.742356"
    }
  }
}