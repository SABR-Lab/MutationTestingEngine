{
  "timestamp": "20250801_155235",
  "test_type": "mutation_testing",
  "metadata": {
    "task_id": "HumanEval/105",
    "timestamp": "20250801_155235",
    "tester_version": "1.0",
    "total_operators_tested": 8,
    "operators_with_errors": 0
  },
  "summary": {
    "original_passes": true,
    "total_mutations": 53,
    "killed_mutations": 51,
    "mutation_score": 0.9622641509433962,
    "survival_rate": 0.037735849056603765
  },
  "detailed_results": {
    "task_id": "HumanEval/105",
    "dataset_type": "plus",
    "original_passes": true,
    "total_mutations": 53,
    "killed_mutations": 51,
    "mutation_score": 0.9622641509433962,
    "mutation_results": {
      "NumberReplacer": {
        "total_mutations": 10,
        "killed_mutations": 10,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 2:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 2:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp_xq5ev6y.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp_xq5ev6y.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp_xq5ev6y.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:22.327105",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 0:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 0:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpwzjndglc.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpwzjndglc.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpwzjndglc.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:22.552303",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 3:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 3:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpwcwo0h7y.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpwcwo0h7y.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpwcwo0h7y.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:22.789253",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 1:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 1:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpled70svt.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpled70svt.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpled70svt.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:23.031449",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 4,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 4:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 4:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpu9p5rzrx.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpu9p5rzrx.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpu9p5rzrx.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:23.279317",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 2:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 2:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp4eq8k2ek.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp4eq8k2ek.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp4eq8k2ek.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:23.611930",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 6,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 5:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 5:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp3cr87o1t.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp3cr87o1t.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp3cr87o1t.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:23.883415",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 7,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 3:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 3:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmphzz8f6zl.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmphzz8f6zl.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmphzz8f6zl.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:24.134320",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 8,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 6:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 6:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp68e_d3fq.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp68e_d3fq.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp68e_d3fq.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:24.387134",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 9,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 4:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 4:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp63fitzf1.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp63fitzf1.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp63fitzf1.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:24.674455",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 22,
        "mutations_tested": 10
      },
      "Eq->NotEq": {
        "total_mutations": 8,
        "killed_mutations": 8,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x != 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x != 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpp3dz5na4.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpp3dz5na4.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpp3dz5na4.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:24.935346",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x != 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x != 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpfbxt0_ts.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpfbxt0_ts.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpfbxt0_ts.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:25.184572",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x != 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x != 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpjtkfb0m2.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpjtkfb0m2.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpjtkfb0m2.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:25.442938",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x != 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x != 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpdor8mmzg.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpdor8mmzg.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpdor8mmzg.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:25.661371",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 4,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x != 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x != 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpxs5129sy.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpxs5129sy.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpxs5129sy.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:25.866821",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x != 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x != 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp2bxj6k4s.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp2bxj6k4s.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp2bxj6k4s.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:26.068284",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 6,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x != 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x != 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpm3itq9a2.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpm3itq9a2.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpm3itq9a2.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:26.319062",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 7,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x != 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x != 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp0chhvgm9.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp0chhvgm9.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp0chhvgm9.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:26.555943",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 8,
        "mutations_tested": 8
      },
      "LtEq->GtEq": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 >= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 >= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpn4vifjp7.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpn4vifjp7.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpn4vifjp7.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:26.808225",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x >= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x >= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmppetdjlzq.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmppetdjlzq.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmppetdjlzq.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:27.062147",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 2,
        "mutations_tested": 2
      },
      "Remove UnaryMinus": {
        "total_mutations": 1,
        "killed_mutations": 1,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpm3i5cbtb.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpm3i5cbtb.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpm3i5cbtb.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:27.307091",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 1,
        "mutations_tested": 1
      },
      "Remove ReturnValue": {
        "total_mutations": 10,
        "killed_mutations": 10,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpb42haqps.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpb42haqps.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpb42haqps.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:27.615103",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpjiu76ot5.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpjiu76ot5.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpjiu76ot5.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:27.891821",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpdcnrcb9f.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpdcnrcb9f.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpdcnrcb9f.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:28.162964",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpthfoe06y.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpthfoe06y.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpthfoe06y.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:28.421876",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 4,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpr3w8kni0.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpr3w8kni0.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpr3w8kni0.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:28.717651",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpzzsecryw.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpzzsecryw.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpzzsecryw.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:28.976725",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 6,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpe5u3p3my.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpe5u3p3my.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpe5u3p3my.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:29.282314",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 7,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp_qtnfvn4.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp_qtnfvn4.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp_qtnfvn4.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:29.545678",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 8,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp0ju08fyh.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp0ju08fyh.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp0ju08fyh.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:29.753424",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 9,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpic9pv_hq.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpic9pv_hq.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpic9pv_hq.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:29.999209",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 10,
        "mutations_tested": 10
      },
      "One->Zero": {
        "total_mutations": 2,
        "killed_mutations": 2,
        "survival_rate": 0.0,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 0:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 0:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp49kr91kl.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp49kr91kl.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp49kr91kl.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:30.213281",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-0], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-0], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpbeo30pl6.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpbeo30pl6.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n              ~~~~~~~~~^^^^^^\n  File \"/tmp/tmpbeo30pl6.py\", line 66, in by_length\n    sorted_list, ans = (sorted(arr)[::-0], [])\n                        ~~~~~~~~~~~^^^^^^\nValueError: slice step cannot be zero\n",
            "timestamp": "2025-08-01T15:52:30.436393",
            "status": "BROKEN",
            "reason": "code_error"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 0 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 0 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpn7moally.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpn7moally.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpn7moally.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:30.648624",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 3,
        "mutations_tested": 3
      },
      "String->Empty": {
        "total_mutations": 10,
        "killed_mutations": 9,
        "survival_rate": 0.1,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:52:30.871561",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return ''\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return ''\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpn0mi973r.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpn0mi973r.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpn0mi973r.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:31.086165",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return ''\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return ''\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpoed96c43.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpoed96c43.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpoed96c43.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:31.323667",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return ''\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return ''\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmppxq8wxn0.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmppxq8wxn0.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmppxq8wxn0.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:31.658699",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 4,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return ''\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return ''\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpetg8_8zv.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpetg8_8zv.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpetg8_8zv.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:31.967682",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return ''\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return ''\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpbs_o7zok.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpbs_o7zok.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpbs_o7zok.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:32.227698",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 6,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return ''\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return ''\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp3ns87_3v.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp3ns87_3v.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp3ns87_3v.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:32.464758",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 7,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return ''\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return ''\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpi7p3105q.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpi7p3105q.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpi7p3105q.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:32.697856",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 8,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return ''\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return ''\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp2o4f0ycz.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp2o4f0ycz.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp2o4f0ycz.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:32.917629",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 9,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return ''\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return ''\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpojiio8rj.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpojiio8rj.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpojiio8rj.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:33.156383",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 10,
        "mutations_tested": 10
      },
      "String->X": {
        "total_mutations": 10,
        "killed_mutations": 9,
        "survival_rate": 0.1,
        "detailed_mutations": [
          {
            "mutation_index": 0,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"X\"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"X\"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": true,
            "execution_output": "All tests passed!\n",
            "timestamp": "2025-08-01T15:52:33.366458",
            "status": "SURVIVED",
            "reason": "tests_passed"
          },
          {
            "mutation_index": 1,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'X'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'X'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpopg5yvwe.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpopg5yvwe.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpopg5yvwe.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:33.596981",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 2,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'X'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'X'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpncemdjr8.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpncemdjr8.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpncemdjr8.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:33.820104",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 3,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'X'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'X'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpowr58py3.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpowr58py3.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpowr58py3.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:34.033733",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 4,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'X'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'X'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpj11otbjo.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpj11otbjo.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpj11otbjo.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:34.264867",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 5,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'X'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'X'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmp7_sdv14z.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmp7_sdv14z.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmp7_sdv14z.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:34.505722",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 6,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'X'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'X'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpa6zc0flv.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpa6zc0flv.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpa6zc0flv.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:34.748581",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 7,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'X'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'X'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpdjll1a3s.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpdjll1a3s.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpdjll1a3s.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:34.986687",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 8,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'X'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'X'\n        else:\n            return 'Nine'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmpcjznivju.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmpcjznivju.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmpcjznivju.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:35.217848",
            "status": "KILLED",
            "reason": "test_failure"
          },
          {
            "mutation_index": 9,
            "original_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
            "mutated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'X'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "mutated_complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n        if x == 1:\n            return 'One'\n        elif x == 2:\n            return 'Two'\n        elif x == 3:\n            return 'Three'\n        elif x == 4:\n            return 'Four'\n        elif x == 5:\n            return 'Five'\n        elif x == 6:\n            return 'Six'\n        elif x == 7:\n            return 'Seven'\n        elif x == 8:\n            return 'Eight'\n        else:\n            return 'X'\n    sorted_list, ans = (sorted(arr)[::-1], [])\n    for x in sorted_list:\n        if 1 <= x <= 9:\n            ans.append(to_word(x))\n    return ans",
            "execution_success": false,
            "execution_output": "Traceback (most recent call last):\n  File \"/tmp/tmple78pfau.py\", line 108, in <module>\n    check(by_length)\n    ~~~~~^^^^^^^^^^^\n  File \"/tmp/tmple78pfau.py\", line 102, in check\n    assertion(candidate(*inp), exp, 0)\n    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/tmple78pfau.py\", line 95, in assertion\n    assert exact_match\n           ^^^^^^^^^^^\nAssertionError\n",
            "timestamp": "2025-08-01T15:52:35.459131",
            "status": "KILLED",
            "reason": "test_failure"
          }
        ],
        "mutation_count_available": 10,
        "mutations_tested": 10
      }
    },
    "problem_info": {
      "prompt": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n",
      "canonical_solution": "\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n",
      "test_code": "\n\nimport numpy as np\n\ndef is_floats(x) -> bool:\n    # check if it is float; List[float]; Tuple[float]\n    if isinstance(x, float):\n        return True\n    if isinstance(x, (list, tuple)):\n        return all(isinstance(i, float) for i in x)\n    if isinstance(x, np.ndarray):\n        return x.dtype == np.float64 or x.dtype == np.float32\n    return False\n\n\ndef assertion(out, exp, atol):\n    exact_match = out == exp\n\n    if atol == 0 and is_floats(exp):\n        atol = 1e-6\n    if not exact_match and atol != 0:\n        assert np.allclose(out, exp, rtol=1e-07, atol=atol)\n    else:\n        assert exact_match\n\n\ndef check(candidate):\n    inputs = [[[2, 1, 1, 4, 5, 8, 2, 3]], [[]], [[1, -1, 55]], [[1, -1, 3, 2]], [[9, 4, 8]], [[9, 8, 7, 6, 5, 4, 3, 2, 1]], [[-1, 0, 5, 6, 10]], [[9, 5, 2, 1, 1, 5, 6, 8]], [[8, 9, 7, 5, 4, 3, 2, 1, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[3, 3, 3, 3, 3, 3]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[9, 9, 9, 8, 8, 8, 7, 7, 7, 1, 1, 1]], [[5, 3, 2, 1, 9, 8, 7, 6]], [[4, 8, 15, 6, 7, 21, 9]], [[6, 3, 3, 3, 3]], [[4, 3, 2, 1, 9, 8, 7, 6]], [[1, 2, 3, 5, 6, 7, 8, 9]], [[8, 9, 7, 5, 4, 3, 2, 1, 5]], [[9, 5, 2, 1, 1, 5, 6, 0, 8]], [[9, 5, 2, 1, 1, 8, 5, 6, 0, 8]], [[9, 8, 7, 6, 5, 5, 4, 3, 2, 1]], [[9, 5, 2, 1, 1, 5, 21, 6, 8]], [[4, 3, 2, 1, 9, 8, 7, 6, 2]], [[9, 5, 2, 0, 1, 1, 5, 6, 0, 8]], [[9, 5, 2, 1, 1, 5, 6, 0, 8, 5]], [[1, 6, 4, 5, 10, 6, 7, 7, 8, 9]], [[1, 2, 3, 4, 6, 21, 7, 8, 9, 10]], [[9, 8, 5, 4, 4, 3, 2, 1, 2]], [[4, 8, 7, 6, 5, 4, 3, 1]], [[1, 22, 2, 3, 4, 6, 21, 7, 8, 9, 10]], [[4, 2, 2, 1, 9, 8, 7, 6, 2]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 4]], [[4, 2, 1, 9, 8, 7, 6, 2]], [[1, 2, 3, 4, 6, 21, 7, 8, 9, 10, 2]], [[2, 2, 3, 5, 6, 2, 7, 8, 9]], [[4, 8, 3, 4, 7, 6, 5, 4, 3, 1]], [[4, 3, 1, 9, 8, 7, 6, 2]], [[9, 5, 2, 1, 5, 8, 8]], [[1, 2, 3, 6, 21, 7, 8, 9, 10, 10, 8]], [[1, 2, 3, 6, 21, 7, 8, 9, 10, 10, 8, 2]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 4]], [[4, 2, 2, 1, 9, 7, 7, 6, 2]], [[9, 9, 9, 8, 8, 8, 9, 7, 9, 7, 1, 1, 1]], [[4, 3, 3, 2, 1, 9, 8, 7, 6, 2]], [[8, 7, 5, 4, 3, 2, 1, 5]], [[9, 9, 6, 8, 8, 8, 7, 7, 7, 1, 1, 1]], [[8, 7, 5, 4, 3, 2, 1, 5, 4]], [[4, 2, 2, 22, 9, 8, 7, 6, 2, 9]], [[4, 2, 1, 9, 8, 7, 6, 3]], [[4, 3, 1, 9, 8, 7, 6]], [[8, 5, 7, 2, 1, 7, 1, 6, 8]], [[9, 5, 2, 1, 5, 6, 8]], [[9, 8, 7, 3, 6, 5, 5, 4, 3, 2, 1, 3]], [[4, 8, 4, 7, 6, 5, 4, 3, 1, 6]], [[9, 9, 9, 3, 8, 8, 7, 7, 7, 1, 1, 1]], [[4, 8, 4, 4, 7, 6, -1, 4, 3, 1, 6]], [[4, 8, 15, 6, 7, 21, 9, 4]], [[8, 3, 4, 7, 6, 5, 4, 3, 1]], [[1, 0, 22, 2, 3, 4, 6, 21, 7, 8, 9, 10]], [[9, 8, 7, 3, 6, 3, 5, 5, 4, 3, 2, 1, 3]], [[9, 5, 2, 1, 5, 21, 8]], [[1, 2, 3, 4, 5, 6, 1, 8, 9, 10]], [[1, 22, 2, 3, 4, 6, 21, 7, 8, 2, 9, 10, 21]], [[9, 8, 4, 4, 4, 3, 1, 2]], [[1, 22, 2, 3, 4, 6, 21, 7, 9, 10]], [[4, 2, 1, 9, 8, 7, 6, 2, 4]], [[4, 8, 4, 4, 7, 6, -1, 4, 10, 3, 1, 6]], [[-1, 3, 2, 2, 1, 9, 9, 7, 6]], [[4, 8, 3, 4, 7, 5, 4, 3, 1]], [[3, 3, 1, 9, 8, 7, 6]], [[8, 7, 5, 5, 4, 3, 2, 1, 5]], [[-1, 5, 6, 10]], [[1, 6, 4, 5, 10, 6, 7, 15, 7, 8, 9]], [[3, 9, 8, 7, 3, 6, 3, 5, 5, 4, 3, 2, 1, 3]], [[1, 6, 4, 10, 6, 7, 15, 2, 7, 8, 9]], [[4, 8, 10, 15, 6, 7, 21, 9]], [[9, 9, 6, 8, 8, 8, 7, 7, 7, 10, 1, 1, 1, 7]], [[4, 8, 3, 4, 7, 5, 4, 3, 1, 7]], [[4, 8, 5, 4, 7, 6, 5, 4, 3, 1, 6]], [[1, 22, 2, -1, 3, 4, 6, 21, 7, 9, 10]], [[9, 8, 4, 3, 4, 3, 1, 4]], [[9, 8, 4, 3, 4, 4, 3, 1, 5, 4]], [[1, 2, 3, 6, 21, 7, 8, 9, 10, 10, 0]], [[4, 3, 1, 9, 9, 8, 7, 5]], [[4, 3, 3, 2, 9, 8, 7, 6, 3]], [[3, 9, 8, 7, 3, 6, 3, 5, 5, 4, 3, 2, 1, 3, 7]], [[9, 5, 2, 1, 1, 5, 6, 0, 8, 5, 8]], [[2, 2, 3, 5, 6, 2, 7, 10, 8, 6, 9]], [[10, 5, 4, 8, 4, 4, 7, 6, -1, 4, 3, 2, 6]], [[9, 5, 2, 1, 9, 5, 6, 0, 8]], [[1, 2, 4, 6, 21, 7, 8, 9, 10]], [[8, 4, 7, 5, 5, 4, 3, 2, 1, 5]], [[9, 8, 7, 6, 5, 5, 4, 3, 2, 1, 8]], [[9, 5, 2, 1, 1, 5, -1, 6, 0, 8, 5]], [[4, 2, 1, 1, 9, 8, 7, 6, 2]], [[4, 8, 10, 15, 6, 7, 21, 9, 6]], [[9, 8, 7, 3, 6, 3, 5, 5, 4, 1, 3, 2, 1, 3, 3]], [[1, 2, 3, 6, 21, 7, 8, 9, 10, 10, 10, 2]], [[22, 9, 9, 8, 8, 8, 7, 7, 7, 1, 1, 1, 7]], [[4, 8, 15, 6, 4, 10, 4]], [[9, 8, 7, 6, 5, 4, 2, 1, 4, 6]], [[9, 6, 5, 2, 1, 9, 5, 6, 0, 8]], [[9, 9, 6, 1, 8, 8, 8, 7, 7, 7, 1, 1, 1]], [[0, 10, 11, 12, 13, 14, 15, 16, -1, -5, 20, 25, 30, 100, 200, 300]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, -20, -30, 7, 8, 9, 1]], [[100000, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[3, 3, 3, 3, 3, 3, 3, 3, 3]], [[-1, -2, -3, -4, -5, -6, -7, -8, -9]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[100000, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 11]], [[0, 10, 11, 12, 13, 14, 15, 16, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5]], [[1, 3, 3, 4, 5, 6, 7, 8, 9]], [[9, 8, 7, 2, 6, 5, 4, 3, 2, 1]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, -20, -30, 7, 8, 9, 1, 3]], [[0, 10, 11, 12, 13, 14, 11, 15, 16, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 16]], [[100000, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18]], [[3, 3, 3, 3, 4, 3, 3, 3, 3]], [[100000, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[9, 8, 7, 2, 6, 3, 5, 4, 3, 2, 1]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -4]], [[1, 3, 3, 4, 5, 6, 7, 8, 9, 3]], [[1, 3, 3, 5, 6, 7, 8, 9]], [[1, 3, 3, 4, 5, 25, 6, 7, 8, 9]], [[100000, -1000, 4, 2, 8, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[1, 2, 3, 4, 5, 6, 7, 8, 30]], [[0, 10, 11, 12, 13, 14, 15, 16, -1, -5, 20, 25, 30, 100, 300]], [[10, 8, 7, 6, 5, 7, 4, 3, 2, 1]], [[100000, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 18, 19, 20, 18]], [[0, 10, 11, 12, 13, 14, 15, 16, -1, -5, 20, 25, 30, 25, 200, 300]], [[0, 1, 8, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10]], [[0, 1, 2, 3, -1000, 5, 6, 7, 8, 9, -4]], [[1, 2, 3, 4, 5, 6, 8, 9]], [[8, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, -20, -30, 7, 8, 9, 1, 3]], [[1, 3, 3, 4, 6, 7, 8, 9, 3]], [[1, 1, 2, 2, 3, 3, 4, 4, 7, 5, 5, 6, -20, -30, 7, 8, 9, 1]], [[100000, -1000, 4, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18]], [[100000, -1000, 4, 2, 8, 1, 9, 4, 3, 7, 5, 6, 0, 11, 13, 13, 14, 15, 16, -4, 18, 19, 20, 18]], [[1, 3, 3, 4, 5, 25, 6, 7, 8, 9, 4]], [[1, 2, 3, 4, 5, 6, 8, 8]], [[1, 3, 3, 4, 5, 25, 6, 7, -20, 9]], [[1, 1, 2, 2, 3, 3, 4, 4, 7, 5, 5, 6, -20, -30, 7, 8, 8, 1]], [[3, 3, 3, 100, 3, 3, 3, 3, 3, 3]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 5]], [[1, 3, 3, 4, 5, 25, 6, 7, -20, 9, 3]], [[0, 1, 2, 3, 5, 4, 5, 6, 7, 8, -4]], [[9, 8, 7, 2, 6, 7, 3, 5, 4, 3, 2, 6]], [[0, 1, 8, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10, 7]], [[0, 10, 11, 12, 14, 15, 16, -1, -5, 20, 25, 30, 25, 200, 300]], [[1, 3, 3, 5, 6, 7, 8, 9, 3]], [[1, 300, 3, 3, 5, 7, 8, 9]], [[-1, -2, -3, -4, -5, -20, -6, -7, -8, -9]], [[100000, -1000, 4, 2, 8, 1, 9, 4, 3, 7, 5, 6, 0, 11, 13, 14, 15, 16, -4, 18, 19, 20, 18]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, -20, -30, 7, 8, 9, 1, 6, -10]], [[100000, -1000, 4, 2, 8, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 17]], [[1, 2, 3, 4, 5, 6, 8, 8, 5, 8]], [[0, 1, 8, 2, 3, 7, 4, 4, 5, 6, 7, 8, 9, 10]], [[100000, -1000, 4, 8, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[-1000, 8, 8, 2, 6, 3, 5, 4, 3, 2, 5]], [[3, 3, 2, 100, 3, 3, 3, 3, 3, 3]], [[1, 1, 2, 2, 3, 2, 4, 4, 7, 5, 5, 6, -20, -30, 7, 8, 8, 1]], [[100000, -1000, 2, 8, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 6, -10, -30, 7, 8, 9, 1, 6, -10, -10]], [[1, 3, 3, 4, 5, 6, 9, 9, 3]], [[1, 3, 3, 4, 4, 25, 6, 7, -20, 9, 3, -20]], [[1, 2, 3, 4, 5, -20, 8, 8]], [[0, 10, 11, 12, 13, 7, 15, 16, -1, -5, 20, 25, 30, 100, 300, 16, 0]], [[1, 2, 3, 4, 5, 6, 7, 31, 8, 30]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -20, -30, 7, 8, 9, 1, 3]], [[0, 10, 11, 12, 13, 14, 11, 15, 16, 0, -1, -9, 20, 25, 30, 100, 200, 300, -5, 16, 0]], [[100000, -1000, 4, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 1]], [[9, 8, 7, 2, 8, 4, 3, 2, 1, 8, 2]], [[0, 1, 8, 3, 3, 7, 4, 4, 5, 6, 7, 8, 9]], [[-1, -2, -3, 0, -4, -5, -6, -7, -8, -9]], [[9, 8, 7, 2, 6, 5, 4, 3, 5, 2, 1]], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 6, -10, -20, -30, 7, 8, 1, 3, 2]], [[0, 10, 11, 12, 13, -1000, 15, 16, -1, -5, 20, 25, 30, 100, 300]], [[1, 300, 3, 3, 3, 5, 7, 8, 9]], [[1, 1, 2, 2, 3, 3, 4, 4, 7, 5, 5, 6, -20, -29, 7, 8, 9, 1]], [[1, 2, 3, 4, 5, -7, 7, 8, 30]], [[100000, -1000, -29, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 1, 8]], [[9, 8, 7, 2, 6, 3, 5, 4, 3, 6, 1, 5]], [[0, 1, 8, 3, 3, 7, 4, 4, 5, 6, 7, 8, 9, 3]], [[1, 2, 3, 4, 5, 6, 8, 5]], [[100000, -1000, 4, 2, 8, 1, 9, 4, 3, 7, 5, 6, 0, 11, 13, 14, 15, 16, -4, 18, 19, 20, 18, 8]], [[3, -2, 3, 3, 3, 4, 3, 3, -3, 3]], [[3, 3, 2, 100, 3, 3, 3, 3, 100, 3]], [[10, 8, 7, 6, 5, 4, 3, 1, 1, 2]], [[0, 1, 8, 2, 3, 13, 7, 4, 5, 6, 7, 8, 9, 10, 7]], [[-1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -20, -30, 300, 8, 9, 1, 3]], [[8, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, -20, -30, 7, 8, 9, 1, 3, 4]], [[1, 3, 3, 4, 5, 6, 7, 8, 9, 3, 5]], [[1, 3, 3, 4, 5, 6, 8, 9]], [[1, 18, 1, 2, 3, 3, 4, 4, 5, 5, 6, -20, -30, 7, 8, 9, 1, 3]], [[1, 18, 1, 2, 3, 3, 4, -8, 4, 5, 5, 6, -20, -30, 7, 8, 9, 1, 3, 6]], [[1, 2, 4, 5, -7, 7, 8, 30]], [[0, 10, 11, 12, 13, 14, 15, 16, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 13]], [[100000, -1000, 4, 2, 8, 1, 9, 4, 3, 7, 5, 6, 0, 11, 13, 14, 15, 16, -4, 18, 19, 20, 18, 8, 16]], [[-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[0, 10, 11, 12, 13, 14, 15, 16, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 10, 10]], [[0, 10, 11, 12, 13, 7, 15, 16, -1, -5, 20, 25, 30, 100, 300, 16, 0, 30, 16]], [[100000, -1000, 4, 2, 8, 1, 9, 4, 3, 7, 5, 6, 0, 2, 11, 13, 14, 15, 16, -4, 18, 19, 20, 18]], [[100000, -1000, 4, 2, 8, 1, 4, 3, 7, 5, 6, 0, 11, 13, 14, 15, 16, -4, 18, 19, 20, 18, 8, 16]], [[1, 2, 3, 4, 5, 6, 8, 8, 3]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -4, 8]], [[100000, -1000, 4, 2, 8, 1, 9, 18, 3, 7, 5, 6, 0, 11, 13, 14, 15, 16, -4, 18, 19, 20, 18, 8, 16]], [[-1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -20, -30, 300, 8, 9, 1, 3, 5, 3, -1]], [[0, 10, 11, 12, 13, -1000, 15, 16, -1, -5, 20, 25, 30, 100, 300, 16]], [[100000, 2, 3, 4, 5, 7, 8, 9, 6, 10]], [[-8, 0, 10, 11, 12, 13, 14, 15, 16, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 10, 10]], [[100000, -1000, 4, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 14]], [[0, 10, 11, 12, 13, 14, 15, 16, -1, -5, 20, 25, 30, 100, 300, -1]], [[8, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, -20, -30, 7, 8, 9, 1, 3, 5]], [[1, 2, 3, 4, 5, 6, 8, 4, 5]], [[100000, -1000, 4, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 16]], [[0, 10, 11, 12, 13, 14, 15, 16, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 10, 10, 100]], [[3, 3, 2, 100, 3, 3, 3, 100, 3]], [[1, 8, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10]], [[0, 1, 8, 2, 3, 13, 7, 4, 5, 6, 7, 8, 9, 10, 7, 5]], [[0, 10, 11, 12, 13, 14, 11, -10, 16, 0, -1, -9, 20, 25, 30, 100, 200, 300, -5, 16, 0, 100, -9]], [[3, 3, 2, 100, 3, 3, 3, 100, 3, 2]], [[1, 2, 4, 5, 8, 5, 6, 8, 5]], [[1, 3, 3, 4, 5, 6, 7, 9, 9]], [[9, 8, 7, 3, 2, 6, 5, 4, 3, 2, 1]], [[1, 3, 3, 4, 4, -7, 6, 7, -20, 9, 3, -20, 6]], [[0, 10, 11, 13, 14, 15, 16, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 10, 10, 100]], [[1, 2, 17, -8, -7, 7, 8, 30]], [[1, 18, 1, 2, 2, 3, 4, -8, 4, 5, 5, 6, -20, -30, 7, 8, 9, 1, 3, 6, 3]], [[0, 15, 10, 11, 12, 13, 14, 15, 16, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 10, 10, 100]], [[3, 11, 3, 3, 3, 3, 3, 3, 3, 3]], [[0, 10, 11, 12, 14, 15, 16, -1, -5, 20, 25, 12, 30, 25, 200, 300]], [[0, 1, 8, 2, 3, 13, 7, 4, 5, 6, 7, 8, 9, 10, 7, 5, 8]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 6, -10, -30, 7, 8, 9, 1, 6, -10, -10, 1, 3]], [[1, 18, 1, 2, 2, 3, 4, -8, 4, 5, 5, 6, -20, -30, 7, 8, 9, 2, 1, 3, 6, 3]], [[1, 2, 4, 4, 5, 7, 8, 9, 5]], [[1, 3, 3, 4, 5, 6, 7, 8, 3, 5, 5]], [[100000, -1000, 4, 2, 8, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 17, 12]], [[1, 2, 3, 4, 5, -29, 8, 4, -4]], [[3, 11, 3, 3, 3, 3, 3, 3, 4, 3]], [[100000, -1000, 4, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 14]], [[-1, -3, -1, 0, -4, -5, -6, -7, -8, -9]], [[-1, 1, 7, 2, 3, 20, 4, 5, 6, 7, 8, 9, 10, 10]], [[9, 8, 7, 2, 8, 4, 3, 2, 1, 2]], [[1, 3, 4, 5, 6, 14, 7, 8, 9, 4]], [[1, 3, 3, 5, 6, 7, 8, 9, 3, 7]], [[1, 2, 2, 4, 5, 6, 7, 8, 9, 5]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2]], [[-1, 1, 1, 2, 2, 3, 2, 4, 4, 5, 5, 6, -20, -30, 300, 8, 9, 1, 3]], [[0, 10, 11, 12, 13, 14, 15, 16, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 25]], [[1, 8, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10, 3]], [[-1, 1, 3, 4, 5, 6, 7, 8, 10, 10]], [[1, 1, 2, 2, 3, 3, 4, 4, 7, 5, 5, 6, -20, -29, 9, 1, 2]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, -4, 6, 8]], [[9, 8, 7, 8, 4, 3, 2, 1, 2]], [[9, 8, 7, 3, 2, 6, 5, 4, 3, 2, 1, 1]], [[1, 3, 3, 4, 4, 25, 6, 7, -20, 9, 3]], [[3, 3, 100, 3, 3, 3, 3, 3, 3]], [[2, 1, 2, 2, 3, 3, 4, 4, 7, 5, 5, 6, -20, -29, 9, 1, 2]], [[100000, -1000, 4, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 18, 18, 19, 20, 14]], [[100000, -1000, 4, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 1, 7]], [[1, 3, 3, 5, 6, 7, 8, 9, 3, 7, 9]], [[1, 3, 3, 5, 6, -3, 12, 8, 9]], [[0, 10, 11, 12, 13, 14, 15, 16, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 10, 10, 3, 100]], [[1, 3, 3, 4, 5, 6, 7, 8, 3, 5, 5, 1]], [[1, 1, 2, 2, 3, 2, 4, 7, 5, 5, 6, -20, -30, 7, 8, 8, 1]], [[1, 3, 3, 4, 5, 6, 7, 8, 9, 3, 7]], [[1, 3, 4, 5, 6, 14, 7, 9, 4]], [[0, 10, 11, 30, 12, 13, 14, 15, 16, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 10, 10, 3, 100]], [[1, 1, 2, 2, 4, 3, 4, 4, 5, 5, 6, -20, -30, 7, 8, 9, 1, 3]], [[-3, 8, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10, 3]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -20, -30, 7, 9, 9, 1, 3]], [[1, 1, 2, 2, 1, 4, 3, 4, 4, 5, 5, 6, -20, -30, 7, 8, 9, 1, 3]], [[100000, -1000, 4, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 6]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 6, -10, -30, 7, 8, 9, 1, 6, -10, 1, 3, 5]], [[1, 2, 17, -8, -7, 7, 8, 30, 30]], [[100000, -1000, 4, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 1, 20]], [[1, 3, 3, 4, 5, 4, 6, 9, 9, 3]], [[1, 3, 3, 5, 7, -3, 12, 8, 9]], [[100000, -1000, 4, 2, 8, 1, 9, 4, 3, 9, 7, 5, 6, 0, 11, 13, 13, 14, 15, 16, -4, 18, 19, 20, 18, -4]], [[100000, -1000, 4, 2, 8, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 17, 16]], [[100000, -1000, 4, 2, 8, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 17, 12]], [[0, 10, 11, 12, 13, 7, 15, 16, -1, -5, 20, 25, 31, 100, 300, 16, 0, 30, 16, 10]], [[1, 1, 2, 2, 3, 2, 4, 7, 5, 5, 6, -30, 7, 8, 8, 1]], [[-3, -1, -2, -3, -4, -5, -20, -7, -8, -9, -2]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, -20, -30, 7, 8, 9, 1, 3]], [[10, 8, 7, 6, 7, 100, 3, 1, 6]], [[-1000, 8, 8, 2, 6, -4, 5, 4, 3, 2, 5]], [[1, 300, 3, 3, 5, 7, 8, 9, 1]], [[0, 1, 8, 2, 3, 13, 7, 4, 5, 6, 7, 8, 9, 10, 7, 13, 7]], [[1, 2, 5, 3, 4, 5, 6, 8, 8, 5, 8]], [[100000, -1000, -29, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 1, 8, 14]], [[1, 3, 3, 4, 6, 9, 9, 3]], [[1, 300, 3, 3, 3, 5, 7, 8, 9, 9, 1]], [[9, 8, 7, 3, 2, 6, 5, 4, 3, 2, 1, -9]], [[1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 8, -10, -20, -30, 7, 8, 9, 1, 6, -10, 2]], [[100000, -1000, 4, 2, 8, 1, 9, 4, 3, 7, 5, 6, 0, 11, 13, 14, 15, 16, -4, 18, 19, 20, 18, 3]], [[9, 1, 8, 7, 2, 8, 4, 3, 2, 1, 8, 2]], [[1, 2, 2, 3, -29, 3, 4, 4, 5, 6, -10, -30, 7, 8, 9, 1, 6, -10, -10]], [[1, 0, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, -20, -30, 7, 8, 9, 1]], [[100000, -1000, 4, 2, 1, 9, 4, 3, 7, 5, 6, 0, 11, 13, 14, 15, 16, -4, 18, 19, 20, 18, 3, 13]], [[8, 1, 1, 2, 2, 3, 3, 4, 4, 7, 5, 5, 6, -20, -29, 7, 8, 9, 1]], [[100000, -1000, 4, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, -9, 16, 17, 18, 20, 18, 16, 2]], [[1, 6, 3, 3, 4, 5, 6, 7, 8, 3, 5, 5, 1]], [[3, 3, 100, 3, 3, 3, 3, 3, 3, 3, 3]], [[100000, -1000, 4, 2, 8, 1, 9, 7, 4, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 14]], [[9, 8, 7, 8, 4, 3, 2, 1, 2, 2]], [[0, 10, 11, 12, 13, -1000, -7, 16, -1, -5, 20, 25, 30, 100, 300, 20]], [[1, 3, 3, 4, 4, -7, 5, 7, -20, 9, 3, -20, 6]], [[100000, -1000, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 11]], [[-1, -3, 1, -1, 0, -4, -5, -6, -7, -8, 1, -9, 0]], [[0, 10, 11, 12, 13, 14, 15, 16, 0, -1, -5, 20, 25, 30, 200, 300, -5, 25, -5]], [[100000, -1000, 4, 2, 8, 1, 9, 7, 4, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 20, 14]], [[0, 1, 2, 3, 5, 5, 6, 300, 7, 8, 9, 3]], [[0, 10, 11, 12, 13, 14, 15, 16, -1, -5, 20, 25, -4, 25, 200, 300, 13]], [[30, 0, 10, 11, 12, 13, 14, 15, 16, -1, -5, 20, 25, 30, 100, 300]], [[9, 8, 7, 3, 2, 6, 5, 4, 3, 2, 1, 9]], [[1, 1, 2, 2, 3, 2, 4, 7, 5, 5, 6, -30, 7, -4, 8, 8, 1]], [[100000, -1000, 2, 8, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 8]], [[1, 3, 3, 5, 7, 8, 9]], [[1, 3, 3, 4, 4, 25, 6, 7, -20, 9, 3, -20, -20]], [[100000, -1000, 15, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 16, 5]], [[100000, -1000, -29, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 16, 13, 14, 15, 16, 17, 18, 19, 20, 18, 1, 8, 1]], [[100000, -1000, 4, 2, 8, 1, 9, 4, 3, 7, 5, 6, 0, 17, 11, 13, 14, 15, 16, -4, 18, 6, 19, 20, 18, 3]], [[8, 1, 2, 2, 2, 3, 3, 4, 4, 7, 5, 5, 6, -20, -29, 7, 8, 9, 1]], [[100000, -1000, 4, 2, 8, 1, 9, 7, 6, 0, 11, 20, 12, 13, 14, 15, 16, 18, 18, 19, 20, 14]], [[0, 10, 11, 12, 14, 15, 16, -1, -5, 20, 25, 12, 30, -2, 200, 300]], [[1, 3, 3, 4, 5, 25, 6, 7, -20, 9, -20]], [[100000, -1000, 4, 0, 8, 1, 9, 4, 3, 7, 5, 6, 0, 11, 13, 14, 15, 16, 18, 19, 20, 18, 8]], [[1, 300, 3, 3, 5, 16, 8, 9, 1]], [[-8, 0, 10, 11, 12, 13, 14, 15, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 10, 10, 25]], [[1, 8, 2, 200, 7, 4, 5, 6, 7, 8, 10, 3]], [[1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, -20, -30, 7, 8, 9, 1, 6, -10]], [[100000, -1000, 15, 2, 8, 1, 9, 7, 4, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 14]], [[8, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, -20, -30, 7, 8, 9, 1, 3, 5, -30]], [[1, 7, 3, 3, 4, 5, 25, 6, 7, 19, 8, 9, 4]], [[1, -29, 1, 2, 2, 3, 4, 4, 5, 5, 1, 6, -10, -20, -30, 7, 8, 9, 1, 3, 3]], [[100000, -1000, 4, 2, 8, 1, 9, 3, 7, -8, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 11]], [[0, 10, 11, 12, 13, 14, 15, 16, -1, -5, 20, 25, 30, -6, 100, 300]], [[1, 3, 3, 5, 6, 7, 8, 9, 6]], [[1, 20, 3, 3, 4, 5, 25, 5, 7, 8, 9]], [[1, 6, 3, 3, 4, 5, 6, 7, 8, 3, 5, 5, 1, 6]], [[1, 6, 3, 6, 3, 4, 5, 6, 7, 8, 3, 5, 5, 1]], [[1, 3, 3, 4, 4, -7, 5, 7, -20, 9, 3, -20, 6, -20]], [[1, 3, 3, 5, 7, -3, 12, 8, 9, 12]], [[1, 1, 2, 2, 2, 3, 3, 4, -10, 4, 5, 5, 6, 8, -10, -20, -30, 7, 8, 9, 1, 6, -10, 2]], [[1, 2, 3, 4, 6, 7, 31, 8, 30]], [[1, 300, 3, 3, 3, 5, 7, 8, 9, 9, 1, 1]], [[3, 3, 100, 2, 100, 3, 3, 3, 3, 3, 2]], [[2, 3, 4, 5, 6, 8, 3, 5]], [[1, 2, 17, -8, -7, 7, 8, 30, 8, 17]], [[9, 8, 7, 3, 2, 6, 5, 4, 3, 2, 1, 7]], [[10, 8, 7, 6, 9, 7, 4, 3, 2, 1, 7]], [[0, 10, 11, 12, 13, -1000, -7, 16, -1, -5, 20, 25, 13, 30, 100, 300, 20, -7]], [[1, 3, 3, 4, 5, 25, 6, 7, -20, 9, 3, 4]], [[1, 1, 2, 2, 3, 2, 4, 7, 5, 6, -20, -30, 7, 8, 8, 1]], [[1, 18, 1, 2, 3, 3, 4, -8, 4, 5, 5, 6, -20, -30, 7, 8, 9, 1, 3, 6, 3]], [[0, 10, 11, 12, 13, -1000, -7, -1, -5, 20, 25, 30, 100, 300, 20]], [[1, 1, 8, 2, 3, 13, 7, 5, 19, 6, 7, 8, 9, 10, 7, 13, 7]], [[100000, -1000, 2, 8, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 20]], [[1, 1, 2, 2, 3, 2, 4, 4, 7, 5, 6, -20, -30, 7, 8, 8, 1]], [[1, 1, 8, 2, 3, 8, 13, 7, 5, 19, 6, 7, 8, 9, 10, 7, 7, 13, 7]], [[2, 3, 5, 6, 7, 8, 9, 10, 6]], [[100000, -1000, 2, 8, 0, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 1, 8, 14]], [[100000, -1000, -29, 2, 8, 1, 9, -3, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 5, 17, 18, 19, 20, 18, 1, -2, 14]], [[0, 1, 8, 2, 3, 7, 4, 4, 5, 6, 7, 8, 9, 10, 2]], [[100000, -1000, -29, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 16, 13, 14, 15, 16, 17, 18, 19, 20, 18, 1, 8, 1, 16, 9]], [[1, 2, 3, 4, 5, 6, 8, 8, 6]], [[100000, -1000, 4, 2, 8, 9, 3, 7, 100000, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 17, 12]], [[1, 1, 8, 2, 3, 13, 7, 5, 19, 6, 7, 8, 9, 10, 7, 13, 12, 7, 3]], [[9, 8, 8, 8, 4, 3, 2, 1, 2, 2]], [[1, 18, 1, 2, 3, 3, 4, 4, 5, 17, 6, -20, -30, 7, 8, 9, 1, 7, 6]], [[10, 0, 10, 11, 12, 13, -1000, -7, 16, -1, -5, 20, 25, 13, 30, 100, 300, 20, -7]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 6, -10, -30, 7, 8, 9, 1, 6, -10, 3, 3, 5, 9]], [[0, 1, 2, 20, 5, 5, 6, 300, 8, 9, 3]], [[1, 1, 2, 2, 3, 3, 4, 12, 5, 6, -10, -30, 7, 8, 9, 1, 6, -10, -10]], [[1, 3, 100000, 5, 25, 6, 7, -20, 9, 3, 4]], [[1, 8, 2, 3, 200, 7, 4, 5, 6, 7, 8, 10, 3]], [[100000, -30, -1000, 2, 8, 0, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 1, 8, 14, 18]], [[1, 3, 3, 4, 5, 6, 9, 9, 3, 3]], [[0, 15, 10, 11, 12, 13, 14, 15, 16, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 10, 10, 100, 12]], [[1, 6, 8, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10, 6]], [[9, 7, 7, 2, 6, 7, 3, 5, 4, 3, 2, 6, 5]], [[0, 10, 11, 12, 13, -1000, -1, -5, 20, 25, 30, 100, 300, 20]], [[1, 1, 2, 2, 2, 3, 3, 5, 5, 6, 8, -10, -20, -30, 7, 8, 9, 1, 6, -10, 2]], [[10, 8, 7, 3, 2, 6, 5, 4, 3, 2, 1, 1]], [[9, 8, 8, 8, 4, 3, 2, 1, 2]], [[100000, -1000, 2, 8, 7, 5, 6, 0, 11, 31, 12, 13, 14, 15, 16, 17, 18, 19, 20, 8]], [[100000, -30, -1000, -5, 18, 8, 0, 9, 7, 5, 6, 0, 6, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 1, 8, 14, 18, 20]], [[1, 3, 3, 5, 6, 7, 8, 9, 3, 7, 9, 7]], [[0, -8, 11, 12, 13, -1000, -7, 16, -1, -5, 20, 25, 30, 100, 300, 20]], [[100000, -1000, 4, 2, 8, 1, 9, 4, 3, 7, 5, 6, 1, 11, 13, 14, 15, 16, -4, 18, 19, 20, 18, 8, 16]], [[100000, -1000, 4, 2, 8, 1, 9, 7, 4, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 5, 19, 20, 14]], [[100000, -1000, 4, 2, 8, 1, 9, 4, 3, 7, 5, 6, 0, 11, 13, 14, 15, 16, -4, 18, 19, 20, 18, 7, 8, 0, 7]], [[1, 18, 1, 2, 2, 3, 4, -8, 4, 5, 5, 6, -20, -30, 7, 8, 9, 1, 3, 6, 18]], [[100000, -1000, 4, 2, 8, 1, 9, 4, 3, 7, 5, 6, 1, 11, 13, 14, 15, 16, -4, 19, 20, 18, 8, 16]], [[-29, -1000, -29, 15, 2, 8, 1, 9, -3, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 5, 17, 19, 20, 18, 1, -2, 14, -29]], [[10, 8, 13, 6, 7, 100, 3, 1, 6, 1]], [[-3, -1, -2, -3, -4, -5, -7, -8, -9, -2]], [[9, 8, 7, 2, 8, 4, 3, 100, 2, 1, 8, 2]], [[100000, 2, -11, 3, 4, 5, 7, 8, 9, -10, 6, 2, 10, 2]], [[1, 3, 3, 5, 7, 8, 9, 3, 7]], [[3, -2, 3, 3, 3, 4, 3, 3, 4, -3, 3]], [[1, 20, 3, 100000, 5, 25, 6, 7, -20, 9, 3, 4, 3]], [[1, 3, 3, 4, 5, 6, 7, -30, 8, 9, 7]], [[1, 3, 3, 4, 4, -7, 5, 7, -20, 9, 9, 3, -20, 6, -20]], [[1, 18, 1, 2, 3, 3, 4, 4, 5, 17, -20, -30, 8, 9, 1, 7, 6]], [[0, 10, 11, 12, 13, 14, 15, -4, 16, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 10, 10, 100, 14]], [[-3, -1, 0, -4, -5, -6, -7, -11, -8, -9, -5]], [[10, 0, 10, 11, 12, 13, -1000, -7, 16, -1, -5, 20, 13, 30, 100, 300, 20, -7]], [[10, 8, 13, 6, 7, 100, 3, 1, -10, 1]], [[-8, 0, 10, 11, 12, 13, 14, 15, 0, -1, -5, 20, 25, 30, 100, 200, 300, 13, -5, 10, 10, 25, 13, -1]], [[100000, -1000, 2, 8, 7, 5, 6, 0, 11, 31, 14, 12, 12, 13, 14, 15, 16, 17, 18, 19, 20, 8]], [[1, 5, 3, 3, 4, 4, -7, 5, 7, -20, 9, 3, -20, 6, -20, 6]], [[1, 6, 8, 2, 3, 7, 4, 5, 14, 7, 8, 9, 10, 6, 6]], [[100000, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 18, 6]], [[1, 3, 3, 31, 5, 6, 8, 9]], [[1, 7, 3, 3, 4, 5, 25, 6, -4, 7, 19, 8, 9, 4]], [[100000, -1000, 15, 2, 8, 1, 9, 7, 4, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 31, 20, 14, 8]], [[1, 20, 3, 3, 4, 16, 25, 5, 9, 8, 9]], [[1, 2, 17, -8, -7, 7, -29, 8, 30]], [[-8, 0, 10, 11, 13, 14, 15, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 10, 10, 25, 200]], [[1, 2, 3, 4, 5, 6, 8, 8, 9, 10]], [[1, 1, 2, 100, 2, 3, 3, 4, 4, 7, 5, 5, 6, -20, -29, 6, 8, 9, 1]], [[1, 2, 17, 7, -8, -7, 7, 8, 30, 30]], [[0, 10, 11, 12, 13, 14, 15, 16, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 10, 10, 100, 13]], [[1, 3, 3, 4, 5, 4, 6, 9, 5, 10, 9, 3]], [[100000, -1000, -1, 2, 8, 1, 9, 4, 7, 5, 6, 0, 11, 13, 14, 15, 16, -4, 18, 19, 20, 18, 3, 19, 2]], [[100000, -1000, 1, 8, 7, 5, 6, 0, 11, 31, 12, 13, 14, 15, 16, 17, 18, 19, 20, 8]], [[1, 2, 3, 5, 6, 8, 8, 3]], [[18, 1, 3, 3, 7, 4, 4, 5, 5, -20, -30, 7, 8, 9, 1, 3]], [[100000, -1000, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 1]], [[10, 8, 7, -8, 31, 7, 100, 3, 1, 6]], [[100000, -1000, -29, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 1, 18, 19, 20, 18, 1, 8]], [[9, 8, 7, 8, 4, 3, 2, 1, 2, 2, 2]], [[1, 300, 3, 4, 5, 7, 4, 9]], [[100000, -1000, 4, 2, 8, 1, 9, 4, 3, 7, 5, 6, 0, 11, 13, 14, 15, 16, -4, 19, 19, 20, 18, 7, 8, 0, 7]], [[100000, -1000, -29, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 16, 13, 14, 15, 16, 17, 18, 19, 20, 18, 1, 8, 1, 16, 9, 18, 9]], [[1, 2, 17, -8, -7, -1000, 8, 30, 8, 17]], [[1, 3, 3, 4, 4, 25, 6, 7, 8, 9, 4]], [[1, 3, 4, 4, 5, 6, 7, 8, 9, 3, 1]], [[1, 3, 3, 4, 5, 4, 6, 6, 9, 9, 3]], [[1, 1, 8, 2, 3, 13, 7, 5, 19, 6, 7, 8, 9, 10, 7, 13, 7, 7, 7]], [[1, 2, -3, 5, 8, 5, 6, 8, 5, 6]], [[2, 3, 4, 5, 6, 8, 3, 5, 5]], [[9, 8, 8, 8, 4, 8, 3, 2, 1, 2]], [[-1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, -20, -30, 300, 8, 9, 1, 3, 5, 3, -1]], [[3, 3, 100, 3, 3, 3, 3, 3, 2, 3, 3]], [[100000, -1000, 1, 8, 7, 5, 6, 0, 11, 31, 12, 13, 14, 15, 16, 17, 19, 3, 8]], [[0, 0, 2, 3, 5, 5, 6, 300, 7, 8, 9, 3]], [[1, 2, 4, 5, -7, 7, 8]], [[0, 10, 11, 12, 13, -1000, -7, -1, -5, 18, 25, 30, 100, 300, 20, -7]], [[10, 0, 10, 11, 13, -1000, -7, 16, -1, -5, 20, 25, 13, 30, 100, 300, 20, -7]], [[10, 8, 13, 6, 7, -20, 100, 5, 3, 1, -1, 1, 7]], [[1, 2, 17, 8, -8, -7, 7, 8, 30, 30]], [[100000, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 14]], [[1, 1, 2, 2, 3, 3, 4, 12, 5, 6, -10, -30, 6, 8, 9, 1, 6, -10, -10]], [[1, 6, 3, 6, 3, 4, 5, 20, 7, 8, 3, 5, 5, 1]], [[0, 10, 11, 12, 13, 14, 11, -10, 100, 0, -1, -9, 20, 25, 30, 100, 200, 300, -5, 16, 0, 100, -9]], [[-1, -2, -3, -4, -5, -20, -6, -7, -8, -9, -9]], [[8, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, -20, -30, 7, 8, 9, 1, 3, 4, 1]], [[0, 1, 8, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10, 8]], [[100000, -1000, 4, 2, 8, 1, 4, 3, 7, 5, 6, 0, 11, 13, 14, 15, 16, -4, 18, 19, 20, 18, 8]], [[1, 20, 3, 100000, -20, 25, 6, 7, -20, 9, 3, 4, 3]], [[9, 8, 7, 8, 4, 19, 2, 1, 2]], [[100000, -1000, 4, 2, 9, 1, 9, 4, 3, 7, 5, 6, 0, 13, 14, 15, 16, -4, 18, -11, 20, 18, 8]], [[100000, 31, 4, 2, 1, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 14, 18]], [[1, 1, 2, 2, 3, 3, 4, 5, 6, -10, -30, 7, 8, 9, 1, 6, -10, 3, 3, 5, 9]], [[1, 8, 2, 200, 7, 4, 5, 6, 7, 10, 3, 2]], [[-1, 1, 7, 2, 3, 20, 11, 4, 5, 6, 7, 8, 9, 10, 10]], [[3, 0, 3, 3, 3, 3, 3, 3, 3, 3]], [[1, 3, 3, 4, 6, 9, 9, 3, 3]], [[1, 10, 1, 2, 2, 3, 3, 4, 12, 5, 6, -10, -30, 8, 9, 1, 6, -10, -10, 5]], [[9, 8, 3, 2, 6, 5, 4, 3, 2, 1, 1]], [[1, 1, 2, 2, 3, 2, 4, 7, 5, 5, 6, -30, 7, -4, 8, 8, 6, 1, 2]], [[1, 3, 2, 4, 5, 25, 6, 7, 8, 9, 4]], [[9, 8, 8, 8, 4, 3, 2, 2, 2]], [[1, 3, 4, 5, 8, 7, -3, 12, 8, 9, -3]], [[1, 17, 30, 7, 1, -20, -7, 7, 8, 30, 30]], [[100000, -30, -1000, -5, 18, 8, 0, 9, 7, 5, 6, 0, 6, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 8, 14, 18, 20]], [[1, 2, 4, 5, 8, 5, 6, -6, 5]], [[3, -2, 3, 3, 3, 4, 3, 3, -3, 3, -2]], [[1, 3, 3, 4, 5, 25, 6, 7, -20, 9, 7, 3]], [[100000, -1000, 4, 2, 8, 1, 4, 3, 7, 5, 6, 0, 11, 13, 14, 15, -5, -4, 18, 19, 20, 18, 8]], [[0, 0, 2, 3, 5, 300, 7, 8, 9, 3]], [[1, 3, 3, 4, 7, 8, 9, 3]], [[0, 8, 2, 3, 7, 4, 5, 15, 6, -30, 7, 8, 9, 10, 7]], [[3, 3, 3, 100, 3, 3, 3, 3, 3, 3, 3, 3]], [[9, 8, 7, -29, 4, 3, 2, 1, 2]], [[1, 2, 6, 3, 4, 5, 6, 8, 8, 5, 8, 8]], [[1, 1, 2, 2, 3, 3, 4, 12, 5, 6, -10, -30, 7, 8, 9, 1, 6, -10, -10, 3]], [[1, 3, 3, 4, 5, 25, 6, 7, -20, 9, 3, 4, 3]], [[1, 5, 3, 4, 5, 6, 8, 8, 9, 10]], [[0, 10, 11, 12, 13, 14, 11, 15, 16, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 16, 0, 16]], [[1, 8, 2, 7, 4, 5, 6, 3, 10, 3, 2]], [[1, 3, 4, 4, 25, 6, 7, 8, 9, 4]], [[1, 3, 3, 5, 4, 6, 7, 8, 9, 3]], [[10, 8, 7, 3, 2, 6, 5, 1, 4, 3, 1, 1]], [[100000, -1000, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 11, 100000]], [[1, 3, 3, 4, 5, 6, 7, 9, 9, 3, 7, 5, 7]], [[1, 3, 100000, 5, 25, 6, 7, -20, 9, 4]], [[1, 3, 3, -30, 4, -7, 5, 7, -20, 9, 3, -20, 6]], [[1, 3, 3, 4, 6, 9, 9, 3, 3, 3]], [[0, 1, 8, 2, 3, 7, 4, 5, 6, 7, 8, 9, 10, 8, 0, 1]], [[-8, 0, 11, 12, 13, 14, 15, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 10, -9, 25]], [[1, 3, 11, 4, 4, 25, -21, 6, 7, -20, 9, 3, -20]], [[0, 1, 8, 2, 3, 13, 1, 7, 4, 5, 6, 7, 8, 9, 10, 7, 3]], [[200, 3, 100000, 5, 25, 6, 7, -20, 9, 4]], [[100000, -1000, -29, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 1, 18, 19, 20, 18, 1, 8, 1]], [[0, 10, 11, 12, 13, 14, 15, 16, 12, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 10, 10, 100]], [[100000, -1000, 2, 8, 1, 9, 7, 5, -5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 1, 18]], [[3, -2, 3, 3, 3, 100000, 4, 3, 3, 4, -3, 3]], [[1, 3, 100000, 5, 25, 9, 6, 7, -20, 9, 100000, 3, 4]], [[100000, 2, 4, 4, 5, 8, 9, 6, 10]], [[100000, -1000, 4, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, -9, 16, 17, 18, 20, 18, 16]], [[1, 3, 3, 4, 4, -7, 5, -1000, 7, -20, 9, 3, -20, 6]], [[-3, 1, -1, 0, -4, -5, -6, -7, -8, 1, -9, 0]], [[1, 18, 1, 2, 3, 4, -8, 4, 5, 5, 6, -20, -30, 7, 8, 9, 1, 3, 6]], [[0, 1, 2, 3, 5, 4, 5, 6, 7, 8, -4, 8]], [[100000, -1000, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 4, 17, 18, 19, 20, 11]], [[-1000, 8, 8, 6, -4, 5, 4, 3, 2, 13, 5, 8]], [[8, 1, 2, 2, 2, 2, 3, 4, 4, 5, 5, 6, -10, -20, -30, 7, 8, 9, 1, 3, 1]], [[1, 1, 2, 2, 3, 3, 4, 5, 6, -10, -30, 7, 8, 9, -21, 6, -10, 3, 3, 5, 9]], [[1, 3, 5, 6, 14, 7, 9, 4]], [[1, 2, 3, 4, -10, 6, 7, 8, 9, 10]], [[0, 10, 11, 12, 14, 16, -1, -5, 20, 10, 30, 25, 200, 300]], [[1, 1, 2, 2, 1, 4, 16, 3, 2, 4, 4, 5, 5, 6, -20, -30, 7, 8, 9, 1, 3]], [[0, 10, 11, -6, 12, 13, 14, 15, 16, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5]], [[3, 3, 3, 3, 3, 3, 3, 4]], [[1, 2, 2, 4, 5, 6, 7, 8, 9, -30, 5]], [[1, 3, 5, 6, 14, 7, 9, 4, 14]], [[1, 3, 4, 5, 25, 6, 7, 8, 9, 4]], [[100000, 2, -11, 3, 4, 5, 7, 8, 9, -10, 6, 2, 20, 2]], [[1, -1, 4, 4, 24, 25, 6, 7, 8, 9, 4]], [[1, 3, 4, 4, 25, 6, 8, 7, 8, 9, 4]], [[3, 100000, -1000, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 4, 17, 18, 19, 20, 11]], [[0, 15, 10, 11, 12, 13, 14, 15, 16, 0, -1, -5, 20, 25, 30, 100, 200, 300, -5, 10, 10, 100, 12, 25]], [[1, 3, 4, 5, 6, 14, 7, 8, 9, 4, 14, 9]], [[3, 100000, -1000, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 4, 17, 18, 19, 20, 11, 9]], [[-1, 1, 2, 2, 3, -29, 3, 4, 4, 5, 6, -10, -30, 7, 8, 9, 1, 18, 6, -10, -10]], [[100000, -1000, 4, 2, 8, 1, 9, 7, 5, 6, 0, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19, 20, 18, 14, 15]], [[1, 20, 3, 3, 4, 5, 25, 5, -21, 0, 9]], [[1, 1, 2, 2, 3, 3, 4, 4, 7, 5, 5, 6, -20, -29, 8, -1, 9, 1]], [[10, 7, 7, 3, 2, 6, 5, 1, 4, 3, 1, 1]], [[1, 3, 3, 5, 19, 6, 7, 8, 9, 3]], [[9, 8, 7, 8, 4, -5, 9, 1, 2]], [[100000, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 10, 17, 18, 19, 20]], [[2, 71, 1, 64, 90, 24, 41]], [[-1, -2, -3, -4, -5, -20, -6, -10, -7, -8, -9, -9, -9, -5]], [[1, 8, 3, 7, 4, 5, 6, 7, 8, 9, 10, 3]], [[14, 25, 19, 31]], [[-5, 0, 11, 20, 100]], [[9, 4, 3, 1, 1, 9, 2, 8, 6, 5, 7, 2]], [[7]], [[100000, 25, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[9, 8, 7, 6, 5, 4, 3, 2, 9, 1]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30]], [[0, 1, 2, 3, 4, -3, 6, 7, 8, 9, 10]], [[9, 8, 7, 6, 5, 4, 4, 4, 2, 9, 1]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 6]], [[10, 8, 7, 6, 5, 4, 3, 2, 1]], [[3, 3, 3, 3, 3, 3, 3, 3]], [[0, 10, 12, 13, 14, 15, 16, -1, -5, 20, 25, 30, 100, 200, 300]], [[100000, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 13]], [[9, 8, 7, 6, 5, 7, 4, 14, 2, 9, 1, 1]], [[9, 8, 7, 6, 5, 7, 4, -2, 14, 2, 9, 1, 1]], [[9, 8, 7, 5, 7, 4, -2, 14, 2, 9, -1000, 1, 1, 14]], [[1, 1, 2, 14, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5]], [[0, 10, 11, 12, 13, 14, 15, 16, -1, -5, 20, 100000, 25, 30, 100, 200, 300]], [[0, 10, 11, 12, 17, 14, 15, 16, -1, -5, 20, 25, 30, 100, 200, 300]], [[1, 1, 2, 2, 3, 100, 4, 4, 5, 5, 6, -10, 16, -30, 8, 9, 1, -30, 5]], [[1, 2, 2, 3, 100, 4, 4, 5, 5, 6, -10, 16, -30, 8, 9, 1, -30, 5]], [[9, 7, 6, 5, 7, 4, -2, 14, 2, 9, 1, 1]], [[1, 2, 100, 4, 5, 6, 101, 7, 8, 9]], [[1, 2, 3, 4, 5, 6, -2, 7, 8, 9]], [[9, 8, 7, 6, 5, 7, 4, 14, 9, 1, 1]], [[9, 8, 7, 6, 5, 7, 14, 4, 14, 2, 9, 1, 1, 14]], [[3, 3, 3, 3, 200, 3]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, -20, -30, 7, 7, 9, 1]], [[100000, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 100000, 20]], [[3, 1, 1, 2, 18, 14, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5]], [[0, 1, 2, 3, 4, -3, -4, 7, 8, 9, 10]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, -20, -30, -30, 7, 9, 1]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 2, -10, 16, -30, 7, 8, 9, 1, -30]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 2, -10, 16, -30, 7, 8, 9, -30]], [[3, 3, 3, 3, 200, 3, 200]], [[8, 7, 6, 5, 7, 4, 14, 9, 1, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 6]], [[0, 1, 2, 3, 4, 5, 6, 3, 7, 8, 9, 10]], [[3, 3, 3, -1000, 3, 3, 3, 3, 3]], [[1, 1, -29, 2, 14, 2, 3, 3, 4, 4, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5, 16]], [[0, 10, 11, 12, 13, 14, 15, 16, -1, -5, 20, 25, 30, 101, 200, 300]], [[9, 8, 7, 6, 5, 4, 4, 4, 2, 9, 1, 4]], [[200, 8, 7, 6, 5, 4, 3, 2, 0]], [[3, 1, 1, 2, 18, 14, 3, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5]], [[200, 8, 7, 6, 5, 4, -10, 2, 0]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -20, -30, 7, 7, 9, 1]], [[0, 10, 11, 12, 13, 14, 15, 16, -1, -5, 20, 100000, 25, 30, 200, 300]], [[10, 8, 7, 6, 5, 4, 3, 2, 1, 1]], [[0, 1, 2, 3, 4, -3, -4, 7, -4, 8, 9, 10, 8]], [[1, 2, 3, 4, 18, 6, 7, 8, 9]], [[3, 1, 1, 2, 18, 14, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5]], [[1, 1, 2, 2, 3, 100, 4, 4, 5, 5, 6, -10, 16, -30, -5, 8, 9, 1, -30, 5]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -20, -30, 7, 9, 1]], [[0, 10, 11, 12, 14, 15, 16, -1, -5, 21, 20, 25, 30, 100, 200, 300]], [[0, 21, 2, 3, 4, -3, -4, 7, -4, 8, 9, 10, 8]], [[3, 1, 2, 18, 14, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5, 9]], [[9, 8, 7, 6, 5, 4, 3, 2, 9, 1, 8]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 2, -10, 16, -30, 7, 8, 9, 1, -30]], [[1, 2, 100, 4, 5, 6, 1, 101, 7, 8, 9, 7]], [[1, 4, 2, 3, -1000, 0, 5, 6, 7, 8, 9, 6]], [[3, 1, 2, 18, 14, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5, 9, 1]], [[9, 8, 7, 6, 5, 4, 3, -9, 1]], [[0, 1, 2, 3, 3, -3, 6, 7, 8, 9, 10, 7]], [[1, 2, 100, 4, 5, 6, 1, 101, 7, 8, -1, 9, 7]], [[1, 2, 3, 4, 5, 6, 7, 8, 4, 6]], [[9, 8, 7, 6, 5, 4, 4, 4, 2, 18, 9, 1, 4]], [[-1, 9, 8, 7, 5, 7, 4, -2, 2, 9, -1000, 1, 1, 14]], [[100000, 25, -1000, 4, 2, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 200, 20]], [[9, 8, 7, 5, 7, 4, -2, 14, 2, 9, -1000, 1, 1, 14, 8]], [[-1, -2, -3, -4, -5, -6, -5, -8, -9]], [[1, 2, 200, 100, 4, 5, 6, 101, 7, 8, 9]], [[1, 1, 2, 2, 3, 3, 4, -30, 4, 5, 5, 6, 2, -10, 16, -30, 7, 8, 9, -30]], [[1, 1, 2, 2, 3, 3, 5, 4, 4, 100, 5, 5, 6, 2, -10, 16, -30, 7, 8, 9, -30]], [[3, 1, 2, 18, 14, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 11, 5]], [[100000, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 14, 16, 17, 18, 19, 100000, 20, 17]], [[0, 1, 2, 3, 4, 5, -3, 6, 7, 8, 9, 10]], [[9, 8, 7, 6, 5, 4, 3, 2, 6, 9, 1, 2]], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 4]], [[3, 1, 1, 2, 18, 14, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 3, 8, 9, 1, -30, 12, 5]], [[8, 7, 7, 6, 5, 7, 4, 14, 9, 1, 1]], [[3, 1, 2, 18, 14, 3, 4, 4, 5, 6, 6, -10, 16, -30, 7, 8, 9, 1, -30, 11, 5]], [[0, 30, 10, 11, 12, 13, 14, 15, 16, -1, -5, 20, 25, 30, 100, 200, 300]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -19, -30, 7, 9, 1]], [[-1, -2, -3, -4, -5, -6, -6, -7, -8, -9]], [[1, 1, 2, 14, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5, 9]], [[-1, 9, 8, 7, 5, 17, 4, -2, 2, 9, -1000, 1, 1, 14]], [[300, 10, 8, 7, 6, 6, 5, 4, 3, 2]], [[9, 8, 3, 7, 6, 5, 4, 4, 4, 2, 9, 1, 4]], [[9, 8, 7, 6, 5, 4, 4, 4, 2, 9, 1, 4, 2]], [[1, 2, 2, 3, 100, 4, 4, 5, 5, 6, -10, 17, -30, 8, 9, 1, -30, 5, 0]], [[3, 1, 1, 2, 18, 14, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5, 16]], [[3, 1, 2, 14, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5, 9]], [[2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 4, 12, 5, 6, 7, 8, 9, 6]], [[9, 8, 7, 6, 5, 4, 3, -9, 1, 8]], [[0, 1, 2, 3, 4, 5, 6, 14, 3, 7, 8, 9, 10]], [[2, 10, 8, 7, 6, 6, 5, 4, 3, 2]], [[2, 3, 4, 5, 6, -2, 7, 8, 9, -3]], [[9, 6, 7, 6, -19, 7, 4, -2, 14, 2, 9, 1, 1, -2]], [[9, 8, 7, 6, 5, 4, 14, 9, 1, 1, 8]], [[-9, -2, -3, -4, -5, -6, -7, -8, -9]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -20, -30, -30, 7, 9, 1]], [[3, 3, 3, -1000, 3, 2, 3, 3, 3, 3]], [[1, 1, 2, 3, 3, 3, 4, 4, 5, 6, 2, -10, 16, -30, 7, 8, 9, 1, -30, 3]], [[12, 8, 7, 6, 5, 6, 4, 14, 2, 9, 1, 1]], [[3, 3, 300, 3, 3, 200, 3]], [[1, 1, 3, 2, 3, 3, 4, 4, 5, 5, 6, -10, 5, -30, 7, 8, 9, 1, -30, 3]], [[0, 1, 2, -9, 4, 5, 6, 14, 3, 7, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 10]], [[10, 8, 7, 6, 4, 3, 2, 1, 1]], [[3, 1, 2, 18, 14, 3, 4, 4, 5, 6, -1000, 6, -10, 16, -30, 7, 8, 9, 1, -30, 11, 5]], [[0, 10, 11, 12, 13, 14, 15, 16, -1, -6, -5, 20, 25, 30, 101, 200, 300]], [[8, 7, 6, 5, 7, -7, 4, 14, 9, 1, 1]], [[8, 7, 6, 4, 7, -7, 4, 14, 9, 1, 1]], [[1, 2, 3, 4, -3, 6, 7, 8, 9, 10]], [[0, 21, 2, -4, 3, 4, -3, -4, 7, -4, 8, 9, 10, 8]], [[9, 6, 7, 6, -19, 7, 4, -2, 14, 2, 9, 1, 1, -2, 7]], [[-1, 9, 8, 7, 5, 4, -2, 2, 9, -1000, 1, 1, 14]], [[1, 4, 5, 2, 3, -1000, 0, 5, 6, 7, 8, 6]], [[3, 5, 1, 2, 18, 14, 3, 4, 4, 5, 6, 6, -10, 16, -30, 7, 8, 9, 1, 11, 5]], [[9, 8, 7, 6, 16, 4, 3, 2, 6, 9, 1, 2, 6]], [[0, 1, 2, 3, 4, 5, 6, 3, 7, 8, 9, 10, 0]], [[3, 3, 3, 300, 3, 3, 200, 100000, 3]], [[2, 3, 4, 5, 6, 7, 8, 10]], [[8, 8, 7, 6, 5, 4, 3, 2, 6, 9, 1, 2, 5]], [[9, 8, 7, 6, 5, 4, 3, -9, -1000]], [[0, 2, 10, 11, 12, 13, 14, 15, 16, -1, -6, -5, 20, 25, 30, 101, 200, 300]], [[100000, 25, -1000, 2, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 200, 20]], [[9, 7, 6, 5, 4, 3, 2, 1, 4]], [[3, 3, 3, -1000, 3, 3, 3, 4, 3]], [[0, 30, 10, 11, 12, 13, 14, 15, 16, 301, -1, -5, 20, 25, 30, 100, 200, 300, 12]], [[9, 8, 7, 5, 7, -3, 4, 14, 2, 9, 1, 1, 14, 1]], [[8, 7, 7, 6, 5, 7, 4, 14, 9, 1, 0]], [[2, 100, 1, 4, 5, 6, 101, 7, 8, 9]], [[-1, -2, -3, -4, -6, -6, -7, -8, -9, -6]], [[0, 1, 2, 3, 3, -3, 6, 7, 8, 9, 10, 7, 6]], [[100000, 25, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 16, 17, 18, 19, 20]], [[0, 1, 2, 3, 4, 7, 5, 6, 7, 8, 9, 10]], [[1, 1, 2, 14, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5, 2]], [[1, 1, 2, 2, 3, 3, 4, -30, 4, 5, 5, 6, 2, -10, 16, 0, -30, 7, 8, 9, -30]], [[-1, -2, -5, -6, -5, -1000, -8, -9]], [[3, 1, 1, 2, 18, 14, 2, 3, 3, 4, 4, 5, 5, 6, -10, -30, 7, 8, 9, 1, -30, 5]], [[9, 8, 7, 5, 7, -3, 4, 14, 2, 3, 1, 1, 14, 1]], [[9, 8, 7, 5, 7, 4, -2, 14, 2, 9, 10, -1000, 100, 1, 14, 1]], [[1, 1, 2, 2, 6, 3, 3, 4, -30, 4, 5, 5, 6, 2, -10, 16, -30, 7, 8, 9, -30]], [[0, 21, 2, 3, 4, -3, -4, 7, -4, 8, 8, 9, 10, 8]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 2, -10, 16, 7, 8, 9, 1, -30]], [[1, 1, 2, 2, 3, 3, 4, -30, 4, 5, 5, 6, 2, -10, 16, 0, -30, 301, 7, 8, 9, -30]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, -20, -30, 7, 9, 1, 4]], [[0, 21, 2, -4, 3, 4, -3, -4, 7, -4, 8, 9, 10, 8, 21]], [[1, 1, 2, 14, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5, 9, 8]], [[2, 100, 1, 4, 5, 9, 6, 101, 7, 8, 9]], [[9, 8, 8, 6, 5, 4, 3, -9, -1000, 9]], [[100000, 25, 15, -1000, 2, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 200, 20]], [[0, 1, 2, 3, 3, 6, 7, 8, 9, 10, 7, 6, 2]], [[0, 10, -30, 12, 13, 14, 15, 16, -1, -5, 20, 100000, 25, 30, 200, 300]], [[9, 7, 6, 5, 7, 4, 14, 2, 9, 1]], [[1, 2, 100, 4, 5, 6, 7, 101, 7, 8, 9, 7]], [[0, 12, 10, 11, 12, 17, 14, 15, 16, -1, -5, 20, 25, 30, 100, 200, 300]], [[3, 1, 2, 18, 14, 3, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5, 3]], [[0, 10, 7, 11, 12, 13, 14, 15, 16, -1, -5, 20, 25, 30, 101, 200, 200]], [[100000, 25, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 16, 17, 18, 19, 20, 100000]], [[-8, 1, 2, 18, 14, 3, 4, 4, 5, 5, -10, 16, -30, 7, 8, 9, 3, 1, -30, 11, 5]], [[0, 1, -9, 2, 3, 4, 5, 6, 3, 7, 8, 9, 10]], [[9, 8, 8, 6, 5, 4, -9, -1000, 9]], [[8, 7, 6, 5, 4, 3, 2, 1, 4]], [[1, 1, 3, 2, 0, 3, 3, 4, 4, 5, 5, 6, -10, 5, -30, 7, 8, -30, 3]], [[1, 1, 2, 2, 3, 100, 4, 6, 4, 5, 5, 6, -10, 16, -30, -5, 8, 9, 1, -30, 5]], [[9, 8, 7, 5, 7, 4, -2, 14, 2, 9, 10, -1000, 100, 1, 13, 1]], [[0, 21, 2, 11, 4, -3, -4, 7, -4, 8, 9, 10, 8]], [[9, 10, 8, 7, 6, 5, 4, 3, 10, 2, 1, 1]], [[8, 7, 6, 5, 7, 4, 14, 9, 12, 1]], [[5, 9, 8, 7, 6, 16, 4, 3, 2, 6, 9, 1, 2, 6]], [[1, 1, 2, 14, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 0, 9, 1, -30, 5, 9]], [[0, 10, 11, 12, 13, 14, 15, 16, -1, -5, 20, 25, 30, 100, 200, 300, 14]], [[0, 1, -9, 2, 3, 4, 5, 6, 3, 7, 8, 9, 10, -9]], [[-1, -2, -3, -5, -5, -6, -7, -8]], [[-9, 0, -3, -4, -5, -6, -7, -8, -9]], [[1, 1, 2, 14, 2, 3, 3, 4, 4, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5, 9]], [[5, 9, 8, 7, 6, 5, 4, 14, 9, 1, 1, 8, 8]], [[200, 8, 7, 6, 5, 7, 4, 3, 2, 0]], [[9, 8, 7, 6, 5, 7, 14, 4, 14, 2, 9, 1, 1, 14, 6]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 6, -10, 16, -30, 7, 8, 9, 1, 5]], [[0, 10, 11, 12, 13, 14, 15, 16, -1, -5, 20, 100000, 25, 200, 300]], [[2, 3, 4, -3, 6, 7, 7, 9, 10]], [[10, 8, 7, 6, 5, 3, 3, 2, 1]], [[1, 1, 2, 14, 2, 3, 3, 6, 4, 5, 5, -5, 6, 5, -10, 16, -29, -30, 7, 8, 9, 1, -30, 5, 2]], [[100000, 25, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 20]], [[100000, 25, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, -30, 12, 14, 15, 16, 17, 18, 20]], [[1, 2, 4, 18, 6, 7, 9]], [[0, 10, 11, 12, 14, 15, 16, -1, -5, 21, 20, 25, 30, 8, 100, 200, 300]], [[-1, -2, -3, -4, -6, -7, -8, -9, -6]], [[1, 1, 2, 2, 3, 4, -30, 4, 5, 5, 6, 2, -10, 16, 0, -30, 301, 7, 8, 9, -30]], [[9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 8]], [[1, 1, 2, 2, 3, 3, -7, 4, 4, 5, 6, 2, -10, 16, -30, 7, 8, 9, 1, -30]], [[9, 8, 13, 6, 7, -3, 4, 14, 2, 9, 1, 1, 14, 1, -3]], [[8, 7, 6, 4, 7, -7, 4, 9, 9, 1, 1]], [[9, 8, 7, 6, 5, 7, 14, 4, 14, 2, 9, 1, 9, 14]], [[9, 8, 7, 5, 4, 4, 4, 2, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 6, 6]], [[11, 3, 4, -1000, 3, 3, 3, 3, 3, -1000]], [[0, 10, 11, 13, 14, 15, 16, -1, -5, 20, 25, 29, 100, 200, 300, 25]], [[1, 2, 100, 4, 5, 6, 101, 7, 8, 9, 101, 101]], [[9, 8, 8, 6, 5, 4, 3, 2, 1, 4, 7]], [[1, 2, 3, 3, -3, 6, 7, 8, 9, 10, 7, 8]], [[8, 7, 6, 5, 7, -7, -1, 4, 0, -6, 14, 9, 25, 1, 1]], [[2, 100, 1, 4, 5, 6, 101, 7, 8, 9, 4]], [[8, 7, 7, 6, 5, 7, 4, 14, 9, 1, 0, 7]], [[100000, 25, -1000, 4, 2, 8, 1, 9, 3, 8, 5, 6, 0, 11, 12, 13, 14, 16, 17, 18, 19, 20, 100000, 9]], [[1, 2, 3, 4, 18, 7, 7, 8, 9]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 4, -30, 5, -10, 2]], [[12, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, -20, -30, 7, 7, 9, 1]], [[200, 8, 7, 6, 5, 7, 4, 21, 2]], [[1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, -20, -30, 7, 7, 9, 1]], [[0, 10, 11, 12, 15, 16, -1, -5, 21, 20, 25, 30, 8, 100, 200, 300]], [[9, 8, 7, 6, 5, 7, -2, 14, 9, 1, 1, 5]], [[12, 8, 7, 6, 5, 6, 4, 14, 2, 9, 1, 1, 4]], [[1, 1, 2, 2, 3, 3, -7, 4, 4, 5, 6, 2, -10, 16, -30, 7, 8, 9, 1, -30, 3]], [[8, 7, 7, 5, 5, 7, 4, 14, 9, 1, 0]], [[9, 8, 7, 5, 7, -3, 4, 14, 2, 9, 1, 1, 14, 1, 3]], [[4, 1, 2, 2, 3, 100, 4, 4, 5, 5, 6, -10, 17, -30, 8, 9, 1, -30, 5, 0]], [[-1, 9, 8, 7, 5, 17, 4, -2, 2, 9, -1000, 1, 1, 14, 9]], [[1, 2, 3, 3, -3, 4, 6, 7, 8, 9, 10, 7, 8]], [[9, 7, 6, 5, 4, 3, 2, 1, 4, 9]], [[9, 7, 6, 5, 6, 4, 3, 2, 1, 4]], [[0, 2, 10, 11, 13, 14, 15, 16, -1, -6, -5, 20, 25, 30, 101, 200, 300]], [[3, 1, 2, 18, 14, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5, 3]], [[8, 7, 6, 4, 7, -7, 4, 9, 9, 1, 1, 9]], [[0, 30, 10, 11, 12, 13, 14, 15, 16, -1, -5, 20, 25, 30, 100, 200]], [[9, 8, 7, 6, 5, 4, 3, 1, 4]], [[9, 8, 7, 6, 5, 7, 14, 4, 14, 2, -2, 1, 9, 14]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 5]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 5, 2, 6, 1]], [[8, 7, 5, 4, 4, 4, 2, 1]], [[9, 7, 6, 5, 7, 4, -2, 14, 2, 9, 1, 2]], [[1, 4, 5, 2, 3, -1000, 5, 6, 7, 8, -19, 6]], [[3, 3, 300, 3, 3, 2, 3]], [[1, 1, 2, 14, 2, 3, 3, 4, 4, 5, 5, 13, -10, 16, 7, 8, 9, 1, -30, 5, 9, 16]], [[3, 3, 3, 300, 3, 3, 200, 3]], [[8, 7, 6, 5, 7, -7, 4, 14, 9, 1, 0]], [[9, 8, 6, 5, 4, 3, 2, 8, 1]], [[1, 1, -6, 2, 14, 2, -9, 3, 3, 18, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 0, 9, 1, -30, 5, 9]], [[1, 1, 2, 14, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -9, 15, 5, 2]], [[100000, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 101, 17, 18, 19, 20, 13]], [[0, 10, 11, 12, 13, 14, 15, 16, -1, 20, 25, 13, 30, 101, 200, 300]], [[10, 8, 7, 6, 5, 3, -4, 2, 1]], [[9, 8, 5, 4, 3, 2, 8, 1, 4]], [[1, 1, 2, 5, 2, 3, 100, 4, 6, 4, 5, 5, 6, -10, 16, -30, -5, 8, 9, 1, -30, 5]], [[-1, -2, -3, 18, -4, -5, -6, -6, -7, -8, -9]], [[1, 1, 2, 2, 3, 100, 4, 4, 5, 5, 6, -10, 1, 16, -30, -5, 8, 9, 1, -30, 5]], [[1, 4, 5, 2, 3, -1000, 5, 6, 7, 8, 6]], [[1, 2, 3, 4, 18, 7, 7, 9, 9]], [[9, 7, 7, 6, 7, 14, 9, 1, 1, 7]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, -10, 8, 9, 4, -30, 5, -10, 2]], [[1, 1, 2, 2, 3, 4, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 4, -30, 5, -10, 2]], [[9, 10, 8, 7, 6, 5, 4, 3, 10, 2, 1, 1, 4]], [[1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10]], [[0, 10, 11, 12, 13, 14, 15, 16, -1, -6, -5, 20, 25, 30, 200, 300]], [[3, 1, 2, 18, 14, 3, 4, 4, 5, -30, 6, -1000, 6, -10, 16, -30, 7, 8, 9, 1, -30, 11, 5, 5, -30]], [[9, 8, 7, 6, 5, 7, 14, 4, 14, 2, 9, -2, 1, 9, 14]], [[-1, 3, 3, -1000, 3, 3, 3, 3, 3]], [[3, 3, 3, 3, -1000, 200, 3, 3]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -20, -30, 7, 7, -20, 9, 1]], [[1, 1, 2, 3, 3, 3, 4, 4, 5, 6, 2, -10, 16, -30, 7, 8, 9, 1, -30]], [[9, 8, 7, 5, 4, 4, 4, 18, 1, 5]], [[1, 2, 100, 4, 5, 6, 1, 101, 7, 8, 9, 25]], [[0, 14, 10, 7, 11, 12, 13, 14, 15, 16, -1, -5, 20, 25, 30, 101, 200, 200]], [[8, 7, 6, 5, 7, -7, 4, 14, 9, 1, -2]], [[12, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, -20, -30, 7, 7, 9, 1]], [[0, 10, 11, 13, -1, 15, 16, -1, -5, 20, 25, 29, 100, 200, 300, 25]], [[3, 1, 1, 2, 18, 14, 2, 3, 3, 4, 4, 5, 5, 6, -10, -30, 7, 8, 9, 1, -30, 5, 3]], [[9, 8, 17, 6, 5, 4, 3, 2, 8, 1]], [[9, 8, 7, 6, 5, 7, 14, 4, 14, 2, 9, -2, 1, 9, 14, 9]], [[0, 10, 11, 12, 13, 14, 15, 16, -1, -6, -5, 20, 25, 30, 200, 300, -5]], [[8, 7, 6, 5, 7, -7, 4, 14, 4, 9, 1, 1]], [[100, 2, 10, 8, 7, 6, 6, 5, 4, 3, 2]], [[1, 2, 100, 3, 5, 6, 7, 101, 7, 8, 9, 7]], [[0, 14, 10, 7, 11, 12, 13, 14, 15, 16, -1, -5, 20, 25, 30, 101, 200, 200, 12, -5]], [[1, 1, 2, 2, 3, 3, 4, -30, 4, 5, 5, 6, 2, -10, 16, 0, -30, 1, 7, 8, 9, -30]], [[100000, 25, -1000, 4, 14, 2, 8, -1, 1, 9, 3, 7, 5, 6, 0, -30, 12, 14, 15, 16, 17, 18, 20]], [[1, 1, 2, 14, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5, 9, 8, 5]], [[1, 1, 2, 2, 3, 3, -7, 4, 4, 5, 6, 2, -10, 16, -30, 7, 8, -1000, -30]], [[9, 8, 7, 6, 5, 4, 4, 4, 2, 9, 1, 4, 5, 1]], [[8, 13, 6, 7, -3, 4, 14, 2, 9, 1, 1, 14, 1, -3]], [[9, 8, 7, 6, 5, 7, 4, 14, 2, 8, 1]], [[0, 21, 2, -4, 3, 4, -3, -4, 7, -4, 8, 9, 10, 8, 8, -4]], [[0, 10, 11, 12, 13, 14, 15, 16, -1, -5, 20, 100000, 25, 200, 300, 15]], [[0, 1, 2, 3, 4, -3, -4, 7, -4, 8, 9, 10, 8, -4]], [[1, 2, 100, 4, 5, 6, 7, 101, 7, 8, 9, 7, 2]], [[1, 4, 6, 2, 3, -1000, 5, 6, 6, 8, -19, 6]], [[3, 1, 1, 2, 18, 14, 2, 3, 3, 4, 4, 5, 5, 6, -10, -30, 7, -30, 8, 9, 1, -30, 5, 3]], [[-1, -2, -5, -6, -5, -1000, -8, -9, -8]], [[8, 7, 7, 6, 5, 18, 4, 14, 9, 1, 0, 14]], [[10, 8, 7, 6, 5, 3, 3, 1]], [[100000, 25, 4, 2, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 200, 20]], [[9, 1, 3, 4, 5, 6, 7, 8, 9, 6, 8]], [[0, 10, 11, 13, 14, 16, -5, 20, 25, 29, 100, 200, 300, 25]], [[100000, 25, 15, -1000, 2, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 13, 14, 15, 16, 17, 18, 19, 200, 20]], [[3, 1, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5, 9]], [[1, 1, 2, 14, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5]], [[0, 14, 10, 7, 11, 12, 13, 14, 15, 16, -1, -5, 20, 25, 30, 101, 200, 6, 12, -5, 200]], [[100000, -1000, 4, 2, 9, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 8, 16, 17, 18, 19, 100000, 20]], [[0, 10, -30, 12, 13, 14, 15, 16, -1, -5, 20, 100000, 25, 30, 200, 300, -30]], [[3, 1, 1, 2, 18, 14, 2, 3, 3, 4, 4, 5, 6, -10, -30, 7, -30, 8, 9, 1, -30, 5, 3]], [[3, 1, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 9, 1, -30, 5, 9]], [[8, 13, 6, 17, -3, 4, 14, 2, 9, 1, 1, 14, 1, -3]], [[3, 5, 1, 2, 18, 14, 3, 4, 4, 5, 6, 6, -10, 16, -30, 7, 8, 25, 1, 11, 5]], [[200, 8, 7, 6, 5, 4, 3, 2, 0, 6, 6]], [[0, 21, 2, -4, 3, 4, -3, -4, 7, -4, 8, 9, 10, 8, 8, -4, 2]], [[0, 21, 2, 3, 4, -3, -4, 7, -4, 8, 8, 9, 9, 10, 8, 0]], [[1, 4, 5, 2, 3, -1000, 5, 6, 7, 8, -20, 20, 6]], [[29, 1, 1, 14, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 19, 8, 9, 1, -30, 5]], [[8, 7, 6, 4, 7, -7, 9, 9, 1, 1]], [[1, 1, 2, 2, 3, 3, 4, -30, 4, 5, 5, 6, 2, -10, 16, 0, -30, 1, 7, 8, 9, -30, 7]], [[0, 10, 11, 13, 14, 15, 16, 1, -1, -5, 20, 25, 30, 101, 200, 300, 101]], [[9, 8, 7, 6, 5, 4, 4, 4, 2, 9, 1, 5, 5, 1]], [[8, 7, 6, 5, 7, -7, 4, 14, 4, 9, 1, 1, 7, 5]], [[10, 8, 7, 6, 5, 3, 3, 1, 10]], [[3, 1, 2, 18, 14, 3, 4, 4, 5, 6, -1000, 6, -10, 16, -30, 8, 9, 1, -30, 11, 5]], [[0, 1, 2, 3, 3, 7, 7, 8, 9, 10, 7, 6, 2]], [[100000, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 101, 17, 18, 19, 20, 13, 11]], [[9, 8, 7, 6, 5, 4, 4, 4, 1, 9, 9, 1]], [[9, 8, 7, 5, 7, 4, -2, 14, 2, -1001, 1, 1, 14, 8, 2]], [[1, 1, 2, 2, 3, 3, 100, 4, 5, 5, 6, -10, -20, -30, 7, 9, 1, 4]], [[9, 8, 7, 6, 4, 3, 2, 9, 1]], [[100000, 25, -1000, 4, 2, 300, 1, 9, 3, 7, 5, 6, 0, 11, 12, -6, 13, 14, 16, 17, 18, 19, 20]], [[0, 1, 2, -9, 4, 5, 6, 3, 7, 9, 10]], [[3, 1, 2, 3, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 9, 1, -30, 5, 9, 3]], [[0, 2, 3, 3, -3, 6, 7, 8, 9, 10, 13, 7]], [[3, 3, 3, 3, 200]], [[0, -9, 2, 3, 4, 5, 6, 3, 7, 8, 9, 10]], [[0, 21, 2, 3, 4, -3, -4, 7, -4, 8, 8, 9, 10, 8, 0]], [[100000, 24, -1000, 4, 2, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 199, 13, 14, 15, 16, 17, 18, 19, 200, 20]], [[-1, -2, -3, 25, -4, -6, -7, -8, -9, -6]], [[3, 3, 3, 3, 200, -1000, 200]], [[9, 1, 3, 4, 5, 7, 8, 9, 6, 8]], [[100000, 25, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[1, 1, 2, 2, 3, 3, -7, 4, 4, 5, 6, 2, -10, 16, -30, 7, 8, 9, 1, -30, 3, -10]], [[1, 1, 2, 2, 3, 3, -7, 4, 4, 12, 5, 6, 2, -10, 16, -30, 7, 7, 9, 1, -30, 3, -10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 5, -1, 2, 6, 1]], [[9, 8, 7, 1, 6, 5, 4, 3, -9, 1, 8]], [[10, 9, 7, 6, 5, 3, 3, 1, 11, 24, 10]], [[1, 1, 2, 14, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, -3, 9, 1, -9, 15, 5, 2]], [[3, 1, 1, 2, 18, 14, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 3, 8, 9, 1, -30, 12, 7, 15]], [[0, 1, -9, 2, 3, 4, 5, 6, 3, 7, 8, 9, 17, 10, -9]], [[9, 7, 6, 5, 7, -2, 14, 9, 1, 1, 5, 14]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -20, -30, 7, 9, 1, 1]], [[1, 2, 3, 4, 18, 6, 7, 8, 9, 18]], [[9, -7, 8, 7, 5, 7, 4, -2, 14, 2, 9, 10, -1000, 100, 1, 13, 1, 7, -2]], [[100000, 25, 4, 2, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 200]], [[0, 21, 2, 3, -3, -4, 7, -4, 8, 9, 10, 8]], [[9, 7, 6, 5, 7, 4, -2, 14, 2, 9, 20, 1, 2]], [[0, 10, 11, 0, 13, 14, 15, 16, -1, -5, 20, 25, 100, 200, 300, 14]], [[3, 1, 1, 2, 18, 24, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5]], [[0, 1, 2, 3, 4, -4, 7, -4, 8, 9, 10, 8]], [[1, -30, 2, 3, 3, -10, 6, 7, 8, 2, 9, 10, 7, 7]], [[9, 6, 7, 6, -19, 8, 4, -2, 14, 2, 9, 1, 1, -2, 7]], [[7, 0, 21, 2, -4, 3, 4, -3, -4, 7, -4, 8, 9, 10, 21]], [[-1, 9, 8, 13, 7, 5, 7, 4, -2, 2, 9, -1000, 1, 1, 14]], [[-10, 8, 7, 5, 4, 4, 4, 2, -4, 1]], [[0, 21, 2, 3, 7, 4, -3, -4, 7, -4, 8, 8, 9, 10, 8]], [[0, 2, 3, 3, -3, 6, 7, 8, 9, 10, 13, 7, 3]], [[9, 7, 6, 5, 7, 4, -2, -10, 14, 2, 9, 20, 1, 2]], [[0, 2, 100, 4, 5, 6, 1, 101, 7, 8, 9, 25]], [[9, 8, 7, 5, 7, 4, -2, 14, 2, 9, 10, -1000, 100, 1, 13, 1, 7]], [[0, 21, 7, 2, -4, 3, 4, -3, -4, 7, -4, 8, 9, 10, 8, 8, -4]], [[-1, -2, -3, 18, -4, -5, -6, -6, -7, -6, -8, -9]], [[0, 10, 11, 12, 14, 15, 16, -1, -5, 21, 20, 25, 11, 30, 8, 100, 200, 300, 300]], [[1, 2, 100, 3, 5, 6, 7, 101, 7, 7, 8, 9, 7, 100]], [[1, 4, 6, 2, 3, -1000, 5, 6, 6, 8, 6, -19, 6]], [[3, 1, 1, 2, 18, 14, 3, 0, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -30, 5, 2, 1]], [[10, 9, 15, 6, 5, 3, 3, 1, 11, 24, 10]], [[0, 10, 11, 13, -1, 15, 16, -1, -5, 20, 25, 29, 100, 200, 300, 25, 0]], [[2, 100, 4, 5, 6, 1, 101, 7, 8, -1, 9, 7]], [[1, 2, 3, 4, 5, 6, 7, 8, 6, 4]], [[1, 2, 100, 3, 5, 6, 7, 101, 7, 7, 8, 9, 7, 100, 7]], [[1, 1, 2, 2, 3, 100, 4, 6, 4, 5, 5, 6, -10, 5, 16, -30, -5, 8, 9, 1, -30, 5]], [[1, 1, 2, 2, 3, 100, 4, 6, 4, 5, 5, 6, -10, 5, 0, 16, -30, -5, 8, 9, 1, -30, 5]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 2, -10, 16, 0, -30, 8, 9, -30]], [[3, 1, 2, 18, 14, 3, 4, 4, 5, -30, 6, -1000, 6, -10, 16, -30, 10, 8, 9, 1, -30, 11, 5, 5, -30]], [[3, 3, 3, -1000, 3, 3, 4, 3, 3]], [[9, 8, 8, 6, 5, 4, 3, 2, 9, 1, 8]], [[100000, 25, 15, -1000, 2, 2, 8, 1, 6, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 3, 16, 17, 18, 19, 200, 20]], [[0, 10, 11, 13, 14, 15, 16, 1, -1, -5, 20, 25, 30, 101, 200, 300, 101, 11, -5]], [[9, 8, 7, 6, 5, 4, 3, 2, 9, 1, 3]], [[9, 8, 7, 6, 5, 4, 4, 4, 1, 9, 9, 1, 5]], [[1, 2, 4, 18, 0, 7, 9]], [[9, 8, 7, 6, 5, 7, 14, 4, 14, 2, -2, 1, 9, 14, 14]], [[8, 13, 7, 7, -3, 4, 14, 2, 9, 1, 1, 14, 1, -3]], [[1, 1, 2, 2, 3, 3, -7, 4, 4, 5, 6, 2, -10, 16, -30, 7, 8, 9, 1, -30, 3, 8]], [[100000, 25, -1000, 4, 2, 8, 1, 9, 3, 8, 5, 6, 0, 11, 26, 12, 13, 14, 16, 17, 18, 19, 20, 100000, 9]], [[1, 1, 2, 14, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 9, 1, -29, 5, 4]], [[100000, 25, 15, -1000, 2, 2, 8, 1, 9, 3, 7, 5, 6, 0, 13, 14, 15, 16, 17, 18, 19, 200, 20]], [[0, 2, 10, 11, 13, 14, 15, -5, 16, -1, -6, -5, 20, 25, 30, 101, 200, 300]], [[200, 301, 7, 6, 5, 7, 2, 2, 0]], [[1, 1, 2, 2, 21, 3, 5, 4, 4, 5, 5, -20, -30, 7, 9, 1, 1, 5]], [[9, 7, 6, 5, 6, 4, 2, 1, 4]], [[1, 2, 3, 4, 5, 6, 7, 4, 8, 4, 6]], [[9, 8, 7, 5, 26, -3, 4, 3, 14, 2, 3, 1, 1, 14, 1]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 0, 5, 6, -10, -20, -30, 7, 7, 9, 1, 4]], [[9, 8, 7, 5, 7, 4, -2, 14, 2, 9, 10, -1000, 100, 1, 14, 1, 8]], [[100000, 25, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 9, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[1, -30, 2, 3, 3, -10, 6, 7, 8, 7, 2, 7, 9, 10, 7, 7]], [[9, 8, 7, 6, 5, 4, -2, 4, 2, 18, 9, 1, 5]], [[0, 1, 7, 3, 4, -3, 17, -4, 7, -4, 8, 9, 10, 8]], [[100000, 24, -1000, 4, 2, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 199, 13, 14, 15, 16, 17, 18, 19, 200, 20, 5]], [[100000, 25, -1000, -10, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[1, 2, 3, 4, 5, 6, 7, 8, 10, 4]], [[8, 7, 5, 7, -3, 4, 14, 2, 3, 1, 1, 14, 1]], [[1, 1, 2, 2, 3, 3, 4, -30, 4, 5, 6, 2, -10, 16, 0, -30, 7, 8, 9, -30]], [[-1, 9, 8, 7, -6, 17, 4, -2, 2, 9, -1000, 1, 14, 9]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -20, -30, 7, -20, 9, 1]], [[1, -9, 2, 3, 4, 5, 6, 3, 7, 8, 9, 17, 10, -9]], [[100000, 25, -1000, 4, 2, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 29, 200, -1, 20]], [[100000, -1000, 4, 2, 8, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 101, 17, 18, 19, 20, 13, 11, 6]], [[1, 2, 3, 4, 6, 5, 6, 7, 8, 10]], [[100000, 25, -1000, 4, 2, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 17, 18, 29, 200, -1, 20, 2]], [[8, 7, 6, 5, 7, 4, 3, 2, 0]], [[1, 2, 3, 4, 5, 6, 15, 8, 9, 6, 5, 2, 6, 1]], [[3, 1, 1, 2, 18, 14, 2, 3, 4, 4, 5, 6, -10, -30, 7, -30, 8, 9, 1, -30, 5, 3]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 2, -10, 16, 7, 9, 1, -30]], [[10, 7, 6, 5, 4, 3, 2, 1, 1]], [[9, 8, 7, 6, 5, 7, 4, 7, 14, 9, 1, 1, 9]], [[9, 8, 7, 7, 6, 5, 7, 14, 4, 14, 2, -2, 1, 9, 14, 14]], [[100000, 25, -1000, 4, 2, 8, 1, 9, 3, 8, 5, 6, 0, 11, 26, 12, 13, 14, 16, 17, 19, 20, 100000, 9]], [[9, 8, 7, 6, 5, 4, 4, 4, 1, 9, 9, 1, 5, 4]], [[200, 9, 7, 6, 5, 4, 3, 2, 0]], [[100000, -1000, 4, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 13, 14, 15, 16, 101, 17, 18, 19, 20, 13, 11, 8]], [[3, 1, 1, 2, 18, 14, 2, 3, 3, 4, 4, 5, 5, 6, -10, -30, 7, 8, 9, 1, -30, 5, 1]], [[1, 3, 4, 12, 5, 6, 7, 8, 9, 6]], [[9, 8, 7, 5, 7, 4, -2, 14, 2, 9, 10, -1000, 100, 1, 13, 1, 7, -2]], [[100000, 24, -1000, 4, 2, 2, 8, 1, 9, 3, 7, 5, 6, 0, 11, 12, 199, 13, 14, 15, 16, 17, 18, 19, 200, 20, 5, 3, 18]], [[1, 1, 2, 2, 3, 3, 4, -30, 4, 5, 6, 2, -10, 16, 0, -30, 7, 8, 9, -30, 9]], [[9, 8, 7, 7, 6, 5, 7, 14, 4, 14, 2, -2, 1, 9, 14, 14, 14]], [[3, 3, 3, -1000, 3, 3, 4, 2, 3, -1000, 3]], [[1, 1, 2, 14, 2, 3, 3, 4, 4, 5, 5, 6, -10, 16, -30, 7, 8, 0, 9, 1, -30, 5, 9, 9]], [[8, 7, 6, 5, 7, -7, 4, 14, 9, 0, 1, -7]], [[-1, -2, -4, -5, -6, -5, -8, -9]], [[0, 14, 10, 7, 11, 12, 13, 14, 15, 16, -1, -5, 20, 6, 30, 101, 200, 6, 12, -5, 200, 14, 200]], [[8, 7, 6, 4, 7, -7, 9, 1, 9, 1, 1]], [[1, 2, 100, 4, 5, 6, 7, 101, 7, 8, 6, 9, 7]], [[0, 10, 11, 13, 14, 16, -5, 20, 25, 0, 100, 200, 300, 25]], [[100000, 25, -1000, 4, 2, 8, 1, 9, 3, 7, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[8, 7, 6, 4, 7, -7, 4, 9, 9, 1, 1, 9, 9]], [[8, 7, 6, 5, 7, -7, 29, 4, 14, 9, 0, 1, -7]], [[1, 4, 6, 2, 3, -1000, 5, 6, 6, 8, 6, -19, 6, 3]], [[100000, 25, -1000, 25, 4, 2, 8, 1, 9, 3, 5, 6, 0, 11, 12, 13, 14, 16, 17, 18, 19, 20, 100000, 8, 4]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -20, -30, -29, 7, 9, 1]], [[0, 10, -30, 12, 13, 14, 15, 16, -1, 20, 100000, 25, 30, 200, 300]], [[9, 6, 7, 6, -19, 7, 4, -3, 14, 2, 9, 1, 1, -2, 7, 4]], [[12, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, -10, -20, -30, 7, 7, 9, 1, 7]], [[1, 1, 2, 14, 2, 3, 3, 4, 4, 5, 16, 6, -10, 16, -30, 7, 8, 1, -30, 5, 9]]]\n    results = [['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'], [], ['One'], ['Three', 'Two', 'One'], ['Nine', 'Eight', 'Four'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Six', 'Five'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four'], ['Six', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Six', 'Five', 'Five', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Five', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Six', 'Five', 'Four', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Five', 'Four', 'Four', 'Three', 'Two', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Two', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Three', 'Two', 'Two', 'Two'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Four', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Five', 'Five', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Seven', 'Seven', 'Six', 'Four', 'Two', 'Two', 'Two', 'One'], ['Nine', 'Nine', 'Nine', 'Nine', 'Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Seven', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Three', 'Two', 'Two', 'One'], ['Eight', 'Seven', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'One', 'One', 'One'], ['Eight', 'Seven', 'Five', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Four', 'Two', 'Two', 'Two'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'One'], ['Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Three', 'Three', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Four', 'Four', 'Three', 'One'], ['Nine', 'Nine', 'Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Three', 'One', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Four', 'Four', 'Four', 'Four', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Four'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Five', 'Five', 'Two', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Four', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Four', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Four', 'Two', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Four', 'Four', 'Four', 'Four', 'Three', 'One'], ['Nine', 'Nine', 'Seven', 'Six', 'Three', 'Two', 'Two', 'One'], ['Eight', 'Seven', 'Five', 'Four', 'Four', 'Four', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Three', 'Three', 'One'], ['Eight', 'Seven', 'Five', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Six', 'Five'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Six', 'Five', 'Four', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Three', 'Three', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Six', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four'], ['Nine', 'Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Seven', 'Six', 'One', 'One', 'One'], ['Eight', 'Seven', 'Seven', 'Five', 'Four', 'Four', 'Four', 'Three', 'Three', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Four', 'Three', 'One'], ['Nine', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Four', 'Four', 'Four', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Five', 'Four', 'Four', 'Four', 'Four', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Five', 'Four', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Three', 'Three', 'Two'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Three', 'Three', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Six', 'Five', 'Five', 'Five', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Three', 'Two', 'Two', 'Two'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Four', 'Four', 'Four', 'Three', 'Two'], ['Nine', 'Nine', 'Eight', 'Six', 'Five', 'Five', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Two', 'One'], ['Eight', 'Seven', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Five', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Four'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Three', 'Three', 'Three', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Seven', 'One', 'One', 'One'], ['Eight', 'Six', 'Four', 'Four', 'Four'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Four', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Six', 'Six', 'Five', 'Five', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'One', 'One', 'One', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Four', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], [], ['Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], [], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'One'], ['Eight', 'Eight', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'One'], ['Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Three', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'Two'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Five', 'Three', 'Three', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Eight', 'Eight', 'Eight', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three'], ['Eight', 'Eight', 'Six', 'Five', 'Five', 'Four', 'Three', 'Three', 'Two', 'Two'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Two'], ['Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Two'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Nine', 'Six', 'Five', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Seven', 'Six', 'Four', 'Four', 'Three', 'Three', 'Three', 'One'], ['Eight', 'Eight', 'Five', 'Four', 'Three', 'Two', 'One'], ['Seven'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], [], ['Nine', 'Eight', 'Seven', 'Five', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Eight', 'Seven', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'One'], ['Eight', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Four', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Two'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Four', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'One', 'One', 'One'], ['Eight', 'Seven', 'Five', 'Four', 'Two', 'One'], [], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], [], ['Seven'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'Two', 'One'], ['Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Eight', 'Eight', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], [], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Eight', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], [], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Two'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], [], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Two', 'Two'], ['Eight', 'Eight', 'Six', 'Five', 'Five', 'Five', 'Four', 'Two', 'One'], ['Nine', 'Nine', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Seven', 'Six', 'Six', 'Four', 'Four', 'Three', 'Three', 'Three', 'One'], [], ['Eight', 'Seven', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], [], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], [], ['Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Five', 'Five', 'Four', 'Four', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Eight', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Four', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], [], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], [], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Eight', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One'], ['Nine', 'Seven', 'Six', 'Four', 'Four', 'Three', 'Three', 'Three', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Three', 'Three', 'One'], ['Three'], ['Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Three', 'Three', 'Three', 'One', 'One'], ['Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'One'], ['Three'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two'], ['Nine', 'Nine', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One', 'One'], ['Eight', 'Seven', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Five', 'Three', 'Three', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Seven'], ['Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], [], ['Nine', 'Eight', 'Seven', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Eight', 'Seven', 'Seven', 'Six', 'Six', 'Three', 'One'], ['Eight', 'Eight', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'Two'], ['Nine', 'Eight', 'Seven', 'Five', 'Three', 'Three', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Eight', 'Eight', 'Eight', 'Six', 'Five', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Six', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Five', 'Three', 'Three', 'Three', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Five', 'Four', 'Three', 'Three', 'Three', 'One', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two', 'Two', 'Two', 'One'], [], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Three', 'Two', 'One'], ['One', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Three', 'Three', 'Two', 'One'], [], [], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'Two', 'One'], ['Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Eight', 'Eight', 'Seven', 'Six', 'Five', 'Two'], ['Nine', 'Eight', 'Seven', 'Five', 'Three', 'Three', 'One'], ['Nine', 'Seven', 'Six', 'Four', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Two', 'One'], [], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'One'], ['Nine', 'Eight', 'Five', 'Three', 'Three', 'One', 'One'], [], ['Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Five', 'Five', 'Four', 'Three', 'Three', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Six', 'Five', 'Five', 'Five', 'Four', 'Three', 'Three', 'Three', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Six', 'Five', 'Five', 'Five', 'Four', 'Three', 'Three', 'Three', 'One', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Five', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Five', 'Three', 'Three', 'Three', 'One', 'One', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Two', 'Two'], ['Eight', 'Six', 'Five', 'Five', 'Four', 'Three', 'Three', 'Two'], ['Eight', 'Eight', 'Seven', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One'], [], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'One'], ['Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'One', 'One', 'One'], [], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Three', 'Two', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Two'], ['Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Three', 'Two'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Two', 'One', 'One', 'One'], ['Eight', 'Eight', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Three', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Eight', 'Four', 'Three', 'Two', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'One', 'One', 'One'], [], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'One'], ['Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Two', 'One'], ['Nine', 'Nine', 'Six', 'Five', 'Four', 'Three', 'Three', 'Three', 'Three', 'One'], [], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Seven', 'Seven', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Three', 'Three', 'Two', 'Two'], [], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Three', 'Three', 'Two', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Eight', 'Four', 'Three', 'Two', 'Two', 'One'], ['Eight', 'Eight', 'Seven', 'Six', 'Five', 'Two'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Three', 'Three', 'Three', 'One'], [], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Two', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Three', 'One', 'One'], [], ['Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two', 'Two'], ['Nine', 'Eight', 'Seven', 'Seven', 'Five', 'Three', 'Three', 'Three', 'One'], ['Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'One'], ['Nine', 'Nine', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'One', 'One', 'One'], [], [], [], ['Eight', 'Seven', 'Six', 'Three', 'One', 'One'], [], ['Eight', 'Eight', 'Seven', 'Six', 'Five', 'Two'], ['Nine', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Four', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Five', 'Four', 'Three', 'Three', 'One'], ['Eight', 'Seven', 'Two', 'One'], [], ['Nine', 'Eight', 'Eight', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Eight', 'Seven', 'Seven', 'Two', 'One'], [], ['Nine', 'Nine', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two', 'One'], ['Eight', 'Eight', 'Seven', 'Six', 'Five', 'One'], ['Eight', 'Eight', 'Six', 'Five', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Two', 'One', 'One'], ['Eight', 'Seven', 'Seven', 'Six', 'Three', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two', 'Two', 'Two', 'Two', 'One'], ['Nine', 'Seven', 'Five', 'Four', 'Four', 'Three', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Two', 'One', 'One', 'One'], ['Eight', 'Eight', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Four', 'Four', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'One', 'One'], ['Nine', 'Nine', 'Six', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Three', 'Two', 'One', 'One'], ['Eight', 'Eight', 'Six', 'Six', 'Five', 'Five', 'Five', 'Two', 'One'], ['Eight', 'Six', 'Five', 'Five', 'Five', 'Four', 'Three', 'Three', 'Two'], ['Nine', 'Eight', 'Eight', 'Eight', 'Eight', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Two'], ['Eight', 'Eight', 'Seven', 'Six', 'Five', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Three', 'Three', 'Two'], ['Eight', 'Seven', 'Five', 'Four', 'Two', 'One'], [], [], ['Eight', 'Seven', 'Seven', 'Six', 'Five', 'Three', 'One', 'One'], ['Eight', 'Eight', 'Seven', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Six', 'Six', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Five', 'Four', 'Three', 'Three', 'Three', 'One', 'One'], [], [], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Seven', 'Six', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Four', 'Two', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Nine', 'Six', 'Four', 'Three', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Six', 'Six', 'Five', 'Five', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One'], ['Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Eight', 'Four', 'Three', 'Two', 'Two', 'Two'], ['Nine', 'Eight', 'Eight', 'Seven', 'Five', 'Four', 'Three', 'One'], ['Eight', 'Seven', 'Seven', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Six', 'Five'], ['Eight', 'Six', 'Five', 'Five', 'Five', 'Four', 'Two', 'One'], ['Four', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Three', 'One'], ['Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Five', 'Three', 'Three', 'Two'], ['Nine', 'Eight', 'Seven', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Eight', 'Seven', 'Four', 'Three', 'Two', 'Two', 'One'], ['Eight', 'Eight', 'Eight', 'Eight', 'Six', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Eight', 'Six', 'Five', 'Five', 'Four', 'Three', 'One'], [], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Four', 'Four', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Three', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Three', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Nine', 'Six', 'Four', 'Three', 'Three', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One', 'One'], [], ['Nine', 'Seven', 'Six', 'Four', 'Four', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'One', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Three'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Two', 'One', 'One', 'One', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Two', 'One', 'One'], ['Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Nine', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Four', 'Four', 'Two'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'One'], ['One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'One', 'One', 'One'], ['Eight', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Eight', 'Eight', 'Eight', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One', 'One'], [], ['Four', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Two', 'Two', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two', 'Two'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Four', 'Four', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Four', 'Four', 'Four', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'One'], [], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Nine', 'Five', 'Five', 'Four', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Three', 'Three', 'Three', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Seven', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Two', 'One'], [], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'One'], [], [], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'], ['Seven'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], [], [], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Two', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], [], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Four', 'Four', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'One', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Two'], ['Nine', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], [], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], [], ['Nine', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Four', 'Four', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Five', 'Four', 'Two', 'One', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'One', 'One'], [], ['Nine', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], [], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Five', 'Four', 'Two', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Four', 'Four', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'One', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Nine', 'Nine', 'Seven', 'Seven', 'Six', 'Six', 'Four', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'One', 'One'], [], ['Nine', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Two'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Two', 'One', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'One', 'One'], [], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Four', 'Four', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two'], ['Nine', 'Nine', 'Seven', 'Seven', 'Seven', 'Six', 'Six', 'Four', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Five', 'Four', 'Two', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Six', 'Six', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three'], ['Two'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Four', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], [], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Five', 'Four', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], [], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Six', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Five', 'Four', 'Three', 'Two', 'One', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two'], ['Nine', 'Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Six', 'Five', 'Four', 'Three'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Six', 'Three', 'Three', 'Two', 'Two', 'One'], [], ['Nine', 'Nine', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Three', 'Two', 'One', 'One'], ['Seven'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Six', 'Five', 'Four'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Six', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Four', 'Two'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'One'], [], [], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'One', 'One'], ['Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], [], ['Nine', 'Seven', 'Seven', 'Six', 'Four', 'Three', 'Two'], ['Eight', 'Seven', 'Six', 'Five', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Five', 'Five', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Seven', 'Six', 'Four', 'Two', 'One'], ['Eight'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Two', 'Two', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Four', 'Two', 'One', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Four', 'Four', 'One', 'One'], ['Nine', 'Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Five', 'Four', 'Four', 'Four', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Four', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One'], ['Nine', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two'], ['Nine', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One'], ['Eight'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Four', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Five', 'Five', 'Four', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Five', 'Four', 'Three', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Four', 'Three', 'Two', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Nine', 'Eight', 'Seven', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Four', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Two'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Four', 'Four', 'One', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'], ['Eight', 'Seven', 'Five', 'Four', 'Four', 'Four', 'Two', 'One'], ['Nine', 'Nine', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Two'], ['Nine', 'Nine', 'Eight', 'Seven', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'One'], ['Nine', 'Eight', 'Eight', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], [], ['Eight', 'Seven', 'Six', 'Five', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Six', 'Six', 'Five', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Two', 'Two', 'One', 'One', 'One'], [], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Two', 'Two', 'One', 'One', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Seven', 'Seven', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Seven', 'Seven', 'Seven', 'Seven', 'Six', 'One', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Five', 'Five', 'Four', 'Four', 'Four', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One', 'One'], ['Seven'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'One'], ['Nine', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], [], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Four', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two'], ['Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Three', 'Two', 'One'], ['Seven'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Four', 'Four', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two'], [], ['Nine', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'Two', 'One'], ['Eight', 'Six', 'Six', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], [], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'One', 'One', 'One'], ['Seven', 'Six'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Nine', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Six', 'Four', 'Two', 'One', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two', 'Two'], ['Nine', 'Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'One', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Four', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Four', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'One', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Six', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Three', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Four', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Five', 'Four', 'Two', 'Two', 'One', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Three', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Three', 'Three', 'Two'], ['Three', 'Three', 'Three', 'Three'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two'], ['Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two', 'One'], [], ['Three', 'Three', 'Three', 'Three'], ['Nine', 'Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'One', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Three', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'One', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Three', 'Two'], ['Nine', 'Nine', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'Two', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Three', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Six', 'Four', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Four', 'Three', 'Two'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Five', 'Four', 'Two', 'One', 'One'], ['Eight', 'Seven', 'Five', 'Four', 'Four', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Seven', 'Four', 'Three', 'Two'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Three', 'Three', 'Three', 'Two'], ['Nine', 'Nine', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Eight', 'Seven', 'Seven', 'Four', 'Three', 'Two'], [], ['Eight'], ['Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Three', 'Two', 'One'], ['Eight', 'Six', 'Six', 'Six', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One', 'One'], ['Nine', 'Six', 'Five', 'Three', 'Three', 'One'], [], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Six', 'Six', 'Five', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Six', 'Six', 'Five', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Six', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'One', 'One'], ['Four', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three'], ['Nine', 'Nine', 'Eight', 'Eight', 'Eight', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Three', 'Three', 'Two', 'Two', 'One'], ['One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Four', 'One', 'One'], ['Nine', 'Seven', 'Four', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Four', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Four', 'Three', 'Three', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Three', 'Two', 'Two', 'One'], ['Two'], ['Seven', 'Seven', 'Six', 'Five', 'Two', 'Two'], ['Nine', 'Seven', 'Five', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Two', 'Two', 'One', 'One', 'One', 'One'], ['Nine', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Four', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Five', 'Four', 'Three', 'Three', 'Two', 'One', 'One', 'One'], ['Nine', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Seven', 'Seven', 'Six', 'Three', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Seven', 'Seven', 'Four', 'Three', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Eight', 'Seven', 'Seven', 'Five', 'Four', 'Three', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Nine', 'Eight', 'Seven', 'Four', 'Two', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'Two', 'Two', 'One'], ['Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Nine', 'Eight', 'Six', 'Six', 'Six', 'Five', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One', 'One'], ['Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Eight', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Four', 'Four', 'One', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two'], ['Nine', 'Eight', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Three', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Five', 'Four', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Three', 'Three', 'Two', 'Two', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'Two', 'One', 'One'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'Two', 'One'], ['Four', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Three', 'Two'], ['Nine', 'Nine', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'One'], [], ['Seven', 'Six', 'Six'], ['Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Four', 'One', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Seven', 'Six', 'Six', 'Five', 'Four', 'Two', 'One'], [], ['Nine', 'Eight', 'Seven', 'Six', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Nine', 'Nine', 'Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Four', 'Four', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Seven', 'Six', 'Five', 'Four', 'One'], ['Eight', 'Six', 'Six', 'Six', 'Six', 'Six', 'Five', 'Four', 'Three', 'Three', 'Two', 'One'], ['Nine', 'Eight', 'Eight', 'Six', 'Five', 'Four', 'Four', 'Three', 'Two', 'One'], ['Nine', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One'], [], ['Nine', 'Nine', 'Seven', 'Seven', 'Seven', 'Six', 'Six', 'Four', 'Four', 'Two', 'One', 'One'], ['Nine', 'Seven', 'Seven', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One'], ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Five', 'Four', 'Four', 'Three', 'Three', 'Two', 'Two', 'One', 'One', 'One']]\n    for i, (inp, exp) in enumerate(zip(inputs, results)):\n        assertion(candidate(*inp), exp, 0)\n",
      "entry_point": "by_length",
      "complete_code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    def to_word(x: int) -> str:\n      if x == 1:\n        return \"One\"\n      elif x == 2:\n        return \"Two\"\n      elif x == 3:\n        return \"Three\"\n      elif x == 4:\n        return \"Four\"\n      elif x == 5:\n        return \"Five\"\n      elif x == 6:\n        return \"Six\"\n      elif x == 7:\n        return \"Seven\"\n      elif x == 8:\n        return \"Eight\"\n      else:\n        return \"Nine\"\n    sorted_list, ans = sorted(arr)[::-1], []\n    for x in sorted_list:\n      if 1 <= x <= 9:\n        ans.append(to_word(x))\n    return ans\n\n"
    },
    "execution_info": {
      "max_mutations_per_operator": 10,
      "total_operators_tested": 46,
      "operators_with_mutations": 8,
      "execution_timestamp": "2025-08-01T15:52:35.461901"
    }
  }
}